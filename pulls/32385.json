{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32385",
    "id": 2490792883,
    "node_id": "PR_kwDOABII586Udnuz",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32385",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32385.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32385.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32385",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32385/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32385/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32385/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/2c668bd502587c509484eb5f786da5d258352294",
    "number": 32385,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "test: add test for malleated transaction with valid witness",
    "user": {
      "login": "stratospher",
      "id": 44024636,
      "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stratospher",
      "html_url": "https://github.com/stratospher",
      "followers_url": "https://api.github.com/users/stratospher/followers",
      "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
      "organizations_url": "https://api.github.com/users/stratospher/orgs",
      "repos_url": "https://api.github.com/users/stratospher/repos",
      "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/stratospher/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "- [`create_malleated_version()`](https://github.com/bitcoin/bitcoin/blob/d62c2d82e14d27307d8790fd9d921b740b784668/test/functional/p2p_orphan_handling.py#L141) function in the functional tests currently creates transactions with same txid, different wtxid but the witness is invalid.\r\n- it is useful to have transactions with same txid, different wtxid and valid witness for better coverage\r\n  and to test how these transactions are relayed over different kinds of P2P connections\r\n  (ex: see https://github.com/bitcoin/bitcoin/pull/29415#discussion_r2055915118)\r\n\r\nIdeally, I would like to extend `create_malleated_version()` function so that it can be [directly used](https://github.com/bitcoin/bitcoin/blob/1c16944a4aff71e6560703916b11b2a544ea71ca/test/functional/p2p_private_broadcast.py#L315) in private broadcast PR. However for these kind of malleations, I think we need to specially craft a pair of transactions. If anyone has ideas on how to better modularise this so that it can be reused in other tests, I would love to hear them!",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2025-04-30T08:15:12Z",
    "updated_at": "2025-05-13T12:57:30Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "9c723097f33963619f68671b7581f8855728a470",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "stratospher:2025_04_tx_malleate",
      "ref": "2025_04_tx_malleate",
      "sha": "2c668bd502587c509484eb5f786da5d258352294",
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 379929443,
        "node_id": "MDEwOlJlcG9zaXRvcnkzNzk5Mjk0NDM=",
        "name": "bitcoin",
        "full_name": "stratospher/bitcoin",
        "owner": {
          "login": "stratospher",
          "id": 44024636,
          "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
          "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stratospher",
          "html_url": "https://github.com/stratospher",
          "followers_url": "https://api.github.com/users/stratospher/followers",
          "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
          "organizations_url": "https://api.github.com/users/stratospher/orgs",
          "repos_url": "https://api.github.com/users/stratospher/repos",
          "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/stratospher/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/stratospher/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/stratospher/bitcoin",
        "archive_url": "https://api.github.com/repos/stratospher/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/stratospher/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/stratospher/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/stratospher/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/stratospher/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/stratospher/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/stratospher/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/stratospher/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/stratospher/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/stratospher/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/stratospher/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/stratospher/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/stratospher/bitcoin/events",
        "forks_url": "https://api.github.com/repos/stratospher/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/stratospher/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/stratospher/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/stratospher/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/stratospher/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/stratospher/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/stratospher/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/stratospher/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/stratospher/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/stratospher/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/stratospher/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/stratospher/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/stratospher/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/stratospher/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/stratospher/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/stratospher/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:stratospher/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/stratospher/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/stratospher/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/stratospher/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/stratospher/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/stratospher/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/stratospher/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/stratospher/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/stratospher/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/stratospher/bitcoin/hooks",
        "svn_url": "https://github.com/stratospher/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 269673,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-06T04:58:43Z",
        "created_at": "2021-06-24T13:12:06Z",
        "updated_at": "2025-05-06T04:59:19Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "fa2c5484296fb98630f2efc635aaa81f06f72cb1",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37209,
        "stargazers_count": 83542,
        "watchers_count": 83542,
        "size": 281622,
        "default_branch": "master",
        "open_issues_count": 722,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-13T11:34:39Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-05-13T11:34:45Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32385"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 94,
    "deletions": 1,
    "changed_files": 2,
    "commits": 1,
    "review_comments": 7,
    "comments": 2
  },
  "events": [
    {
      "event": "commented",
      "id": 2841180378,
      "node_id": "IC_kwDOABII586pWPja",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2841180378",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-30T08:15:15Z",
      "updated_at": "2025-05-13T12:57:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32385.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [vasild](https://github.com/bitcoin/bitcoin/pull/32385#pullrequestreview-2815650001), [theStack](https://github.com/bitcoin/bitcoin/pull/32385#issuecomment-2876406989) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32385#issuecomment-2841180378",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32385"
    },
    {
      "event": "labeled",
      "id": 17468492683,
      "node_id": "LE_lADOABII5860odlWzwAAAAQRNAuL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17468492683",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-30T08:15:23Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "reviewed",
      "id": 2809304737,
      "node_id": "PRR_kwDOABII586ncpah",
      "url": null,
      "actor": null,
      "commit_id": "e2f06b222d402d49c2aa3e9da98c630526a0b911",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32385#pullrequestreview-2809304737",
      "submitted_at": "2025-05-01T07:52:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32385"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17515668496,
      "node_id": "HRFPE_lADOABII5860odlWzwAAAAQUA-QQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17515668496",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ddd31182b4e56e8263eb0683c608382966c3151e",
      "commit_url": "https://api.github.com/repos/stratospher/bitcoin/commits/ddd31182b4e56e8263eb0683c608382966c3151e",
      "created_at": "2025-05-05T08:45:06Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJjNjY4YmQ1MDI1ODdjNTA5NDg0ZWI1Zjc4NmRhNWQyNTgzNTIyOTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c668bd502587c509484eb5f786da5d258352294",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2c668bd502587c509484eb5f786da5d258352294",
      "tree": {
        "sha": "925c2febace363cd578952944865d6e050c4fb55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/925c2febace363cd578952944865d6e050c4fb55"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80e6ad9e3023a57a4ef19b7d0edf9ac5be71a584",
          "sha": "80e6ad9e3023a57a4ef19b7d0edf9ac5be71a584",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/80e6ad9e3023a57a4ef19b7d0edf9ac5be71a584"
        }
      ],
      "message": "test: add test for malleated transaction with valid witness\n\n- create_malleated_version() function in the functional tests\n  creates transactions with same txid, different wtxid but the\n  witness is invalid\n- it is useful in the tests to have transactions with same\n  txid, different wtxid and valid witness for better coverage\n  and (in other PRs) to test how these transactions are\n  relayed in different kinds of P2P connections\n  (ex: private broadcast connections)",
      "committer": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-05-05T08:46:56Z"
      },
      "author": {
        "name": "stratospher",
        "email": "44024636+stratospher@users.noreply.github.com",
        "date": "2025-04-28T07:55:18Z"
      },
      "sha": "2c668bd502587c509484eb5f786da5d258352294"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17515695752,
      "node_id": "HRFPE_lADOABII5860odlWzwAAAAQUBE6I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17515695752",
      "actor": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2c668bd502587c509484eb5f786da5d258352294",
      "commit_url": "https://api.github.com/repos/stratospher/bitcoin/commits/2c668bd502587c509484eb5f786da5d258352294",
      "created_at": "2025-05-05T08:47:16Z"
    },
    {
      "event": "reviewed",
      "id": 2815650001,
      "node_id": "PRR_kwDOABII586n02jR",
      "url": null,
      "actor": null,
      "commit_id": "2c668bd502587c509484eb5f786da5d258352294",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, thank you for looking into this!",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32385#pullrequestreview-2815650001",
      "submitted_at": "2025-05-05T18:09:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32385"
    },
    {
      "event": "commented",
      "id": 2876406989,
      "node_id": "IC_kwDOABII586rcnzN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2876406989",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T12:57:25Z",
      "updated_at": "2025-05-13T12:57:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nSeems useful to create a pair of valid \"same-txid-different-wtxid\" transactions for testing purposes.\r\n\r\nDidn't try that yet, but I think another possibility to create these without having to involve signatures at all would be a \"trivial math puzzle\"-like locking script of e.g. \"OP_ADD OP_EQUAL 5\" (in a p2wsh or p2tr script-path) and swapped witness data elements ([1,4] and [4,1]) in the spending txs.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32385#issuecomment-2876406989",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32385"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2069950447",
      "pull_request_review_id": 2809304737,
      "id": 2069950447,
      "node_id": "PRRC_kwDOABII5857YO_v",
      "diff_hunk": "@@ -181,6 +181,8 @@ def sign_ecdsa(self, msg, low_s=True, rfc6979=False):\n         s = (pow(k, -1, ORDER) * (z + self.secret * r)) % ORDER\n         if low_s and s > secp256k1.GE.ORDER_HALF:",
      "path": "test/functional/test_framework/key.py",
      "position": null,
      "original_position": 2,
      "commit_id": "2c668bd502587c509484eb5f786da5d258352294",
      "original_commit_id": "e2f06b222d402d49c2aa3e9da98c630526a0b911",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could use `elif`, but as the effect is the same, better to roll this into one `if`, i think:\r\n```python\r\nif (low_s and s > secp256k1.GE.ORDER_HALF) or (not low_s and s < secp256k1.GE.ORDER_HALF):\r\n    s = ORDER - s\r\n```\r\nAll in all this defines `not low_s` as \"high_s\" instead of \"any s\".  This doesn't cause problems as the test framework doesn't use `low_s=False` anywhere else. Still, it might be clearer to add a new flag?",
      "created_at": "2025-05-01T07:52:55Z",
      "updated_at": "2025-05-01T09:44:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32385#discussion_r2069950447",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2069950447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2073091815",
      "pull_request_review_id": 2814209968,
      "id": 2073091815,
      "node_id": "PRRC_kwDOABII5857kN7n",
      "diff_hunk": "@@ -181,6 +181,8 @@ def sign_ecdsa(self, msg, low_s=True, rfc6979=False):\n         s = (pow(k, -1, ORDER) * (z + self.secret * r)) % ORDER\n         if low_s and s > secp256k1.GE.ORDER_HALF:",
      "path": "test/functional/test_framework/key.py",
      "position": null,
      "original_position": 2,
      "commit_id": "2c668bd502587c509484eb5f786da5d258352294",
      "original_commit_id": "e2f06b222d402d49c2aa3e9da98c630526a0b911",
      "in_reply_to_id": 2069950447,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Could use elif, but as the effect is the same, better to roll this into one if, i think:\r\n\r\nnice, I've used this.\r\n\r\n> All in all this defines not low_s as \"high_s\" instead of \"any s\". This doesn't cause problems as the test framework doesn't use low_s=False anywhere else. Still, it might be clearer to add a new flag?\r\n\r\noh right - just added a comment for now, since the  low_s=False option isn't used elsewhere and can't think of a scenario where non-determinism from allowing \"any s\" (returning high s sometimes, low s other times) would be needed. here's the [diff](https://github.com/bitcoin/bitcoin/compare/e2f06b222d402d49c2aa3e9da98c630526a0b911..2c668bd502587c509484eb5f786da5d258352294).",
      "created_at": "2025-05-05T09:00:54Z",
      "updated_at": "2025-05-05T09:00:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32385#discussion_r2073091815",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2073091815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2073106755",
      "pull_request_review_id": 2814236335,
      "id": 2073106755,
      "node_id": "PRRC_kwDOABII5857kRlD",
      "diff_hunk": "@@ -181,6 +181,8 @@ def sign_ecdsa(self, msg, low_s=True, rfc6979=False):\n         s = (pow(k, -1, ORDER) * (z + self.secret * r)) % ORDER\n         if low_s and s > secp256k1.GE.ORDER_HALF:",
      "path": "test/functional/test_framework/key.py",
      "position": null,
      "original_position": 2,
      "commit_id": "2c668bd502587c509484eb5f786da5d258352294",
      "original_commit_id": "e2f06b222d402d49c2aa3e9da98c630526a0b911",
      "in_reply_to_id": 2069950447,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Right it's fine, it's documented well enough now, if anyone needs that functionality in the future they can add it then.",
      "created_at": "2025-05-05T09:12:13Z",
      "updated_at": "2025-05-05T09:12:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32385#discussion_r2073106755",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2073106755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2073927377",
      "pull_request_review_id": 2815650001,
      "id": 2073927377,
      "node_id": "PRRC_kwDOABII5857nZ7R",
      "diff_hunk": "@@ -2066,6 +2069,89 @@ def received_wtxidrelay():\n         # Check tx2 is there now\n         assert_equal(tx2.hash in self.nodes[0].getrawmempool(), True)\n \n+    @subtest\n+    def test_transaction_malleability(self):\n+        # Test transaction malleability after segwit: same txid but different wtxid\n+        key, pubkey = generate_keypair()\n+        amount = self.utxo[0].nValue // 2\n+\n+        def create_tx(prev_txid, prev_index, amount, script_pubkey):\n+            tx = CTransaction()\n+            tx.vin.append(CTxIn(COutPoint(prev_txid, prev_index), b\"\"))\n+            tx.vout.append(CTxOut(amount, script_pubkey))\n+            tx.rehash()\n+            return tx\n+\n+        def sign_witness_input(tx, vin_index, script, amount, signing_key=key, multisig=False, low_s=True):\n+            tx.wit.vtxinwit.append(CTxInWitness())\n+            sighash = SegwitV0SignatureHash(script, tx, vin_index, SIGHASH_ALL, amount)\n+            der_sig = signing_key.sign_ecdsa(sighash, low_s=low_s)\n+            tx.wit.vtxinwit[vin_index].scriptWitness.stack.insert(0, der_sig + bytes([SIGHASH_ALL]))\n+            if multisig:\n+                # witness stack format is [b'', signature, script]\n+                tx.wit.vtxinwit[vin_index].scriptWitness.stack.append(script)\n+                tx.wit.vtxinwit[vin_index].scriptWitness.stack.insert(0, b'')\n+            else:\n+                # witness stack format is [signature, pubkey]\n+                tx.wit.vtxinwit[vin_index].scriptWitness.stack.append(pubkey)\n+            tx.rehash()\n+\n+        # Example 1: P2WPKH transaction with malleated signature\n+        # 1. Create a funding transaction (P2WPKH output)\n+        script_pubkey = key_to_p2wpkh_script(pubkey)\n+        funding_p2wpkh_tx = create_tx(self.utxo[0].sha256, self.utxo[0].n, amount, script_pubkey)\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [funding_p2wpkh_tx])\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n+\n+        # 2. Create and sign a transaction spending from the P2WPKH output (bad high-S signature)\n+        spending_tx = create_tx(funding_p2wpkh_tx.sha256, 0, amount - 1000, script_pubkey)\n+        pubkey_hash = hash160(pubkey)\n+        p2pkh_script = keyhash_to_p2pkh_script(pubkey_hash)\n+        sign_witness_input(spending_tx, 0, p2pkh_script, amount, low_s=False)",
      "path": "test/functional/p2p_segwit.py",
      "position": 64,
      "original_position": 64,
      "commit_id": "2c668bd502587c509484eb5f786da5d258352294",
      "original_commit_id": "2c668bd502587c509484eb5f786da5d258352294",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I can imagine that malleating a transaction does not require the private key and a re-sign.\r\n\r\nCurrently there is this function:\r\n\r\n```py\r\ndef create_malleated_version(self, tx)\r\n```\r\n\r\nwhich fills garbage. Could it be extended to take a boolean argument, indicating whether to fill with garbage like now, or flip `s` to `ORDER - s`? For this it would have to extract `s` like done on line 97 here:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/baa848b8d38187ce6b24a57cfadf1ea180209711/test/functional/test_framework/key.py#L59-L97\r\n\r\nflip it to `ORDER - s` and re-do the DER encoding like:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/baa848b8d38187ce6b24a57cfadf1ea180209711/test/functional/test_framework/key.py#L184-L189\r\n\r\nFor the caller it would be useful to know if the new flipped `s` is low or high. I guess this can be indicated somehow by `create_malleated_version()` or there could be a separate function which takes a signed transaction and returns whether `s` is low or high.",
      "created_at": "2025-05-05T18:04:52Z",
      "updated_at": "2025-05-05T18:09:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32385#discussion_r2073927377",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2073927377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2111,
      "original_line": 2111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2073931876",
      "pull_request_review_id": 2815650001,
      "id": 2073931876,
      "node_id": "PRRC_kwDOABII5857nbBk",
      "diff_hunk": "@@ -2066,6 +2069,89 @@ def received_wtxidrelay():\n         # Check tx2 is there now\n         assert_equal(tx2.hash in self.nodes[0].getrawmempool(), True)\n \n+    @subtest\n+    def test_transaction_malleability(self):\n+        # Test transaction malleability after segwit: same txid but different wtxid\n+        key, pubkey = generate_keypair()\n+        amount = self.utxo[0].nValue // 2\n+\n+        def create_tx(prev_txid, prev_index, amount, script_pubkey):\n+            tx = CTransaction()\n+            tx.vin.append(CTxIn(COutPoint(prev_txid, prev_index), b\"\"))\n+            tx.vout.append(CTxOut(amount, script_pubkey))\n+            tx.rehash()\n+            return tx\n+\n+        def sign_witness_input(tx, vin_index, script, amount, signing_key=key, multisig=False, low_s=True):\n+            tx.wit.vtxinwit.append(CTxInWitness())\n+            sighash = SegwitV0SignatureHash(script, tx, vin_index, SIGHASH_ALL, amount)\n+            der_sig = signing_key.sign_ecdsa(sighash, low_s=low_s)\n+            tx.wit.vtxinwit[vin_index].scriptWitness.stack.insert(0, der_sig + bytes([SIGHASH_ALL]))\n+            if multisig:\n+                # witness stack format is [b'', signature, script]\n+                tx.wit.vtxinwit[vin_index].scriptWitness.stack.append(script)\n+                tx.wit.vtxinwit[vin_index].scriptWitness.stack.insert(0, b'')\n+            else:\n+                # witness stack format is [signature, pubkey]\n+                tx.wit.vtxinwit[vin_index].scriptWitness.stack.append(pubkey)\n+            tx.rehash()\n+\n+        # Example 1: P2WPKH transaction with malleated signature\n+        # 1. Create a funding transaction (P2WPKH output)\n+        script_pubkey = key_to_p2wpkh_script(pubkey)\n+        funding_p2wpkh_tx = create_tx(self.utxo[0].sha256, self.utxo[0].n, amount, script_pubkey)\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [funding_p2wpkh_tx])\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n+\n+        # 2. Create and sign a transaction spending from the P2WPKH output (bad high-S signature)\n+        spending_tx = create_tx(funding_p2wpkh_tx.sha256, 0, amount - 1000, script_pubkey)\n+        pubkey_hash = hash160(pubkey)\n+        p2pkh_script = keyhash_to_p2pkh_script(pubkey_hash)\n+        sign_witness_input(spending_tx, 0, p2pkh_script, amount, low_s=False)\n+        prev_txid = spending_tx.hash\n+        prev_wtxid = spending_tx.getwtxid()\n+        # Submit transaction (should be rejected due to non-canonical signature)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spending_tx, with_witness=True, accepted=False, reason='non-mandatory-script-verify-flag (Non-canonical signature: S value is unnecessarily high)')\n+\n+        # 3. Re-sign with low-S signature (standard)\n+        spending_tx.wit.vtxinwit[0].scriptWitness.stack.clear()\n+        sign_witness_input(spending_tx, 0, p2pkh_script, amount, low_s=True)\n+\n+        # 4. Verify txid matches but wtxid differs\n+        assert_equal(prev_txid, spending_tx.hash)\n+        assert_not_equal(prev_wtxid, spending_tx.getwtxid())\n+        # Transaction should now be accepted\n+        test_transaction_acceptance(self.nodes[1], self.test_node, spending_tx, with_witness=True, accepted=True)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Example 2: P2WSH 1-of-2 multisig transaction where each signature applied to tx results in different wtxid",
      "path": "test/functional/p2p_segwit.py",
      "position": 81,
      "original_position": 81,
      "commit_id": "2c668bd502587c509484eb5f786da5d258352294",
      "original_commit_id": "2c668bd502587c509484eb5f786da5d258352294",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Isn't multisig kind of out-of-scope for creating a valid malleated transaction? I don't mind some extra tests, but those might make this PR more difficult to review. Maybe omit those if there is no review interest for some time.",
      "created_at": "2025-05-05T18:08:25Z",
      "updated_at": "2025-05-05T18:09:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32385#discussion_r2073931876",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2073931876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2128,
      "original_line": 2128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2073973241",
      "pull_request_review_id": 2815731167,
      "id": 2073973241,
      "node_id": "PRRC_kwDOABII5857nlH5",
      "diff_hunk": "@@ -2066,6 +2069,89 @@ def received_wtxidrelay():\n         # Check tx2 is there now\n         assert_equal(tx2.hash in self.nodes[0].getrawmempool(), True)\n \n+    @subtest\n+    def test_transaction_malleability(self):\n+        # Test transaction malleability after segwit: same txid but different wtxid\n+        key, pubkey = generate_keypair()\n+        amount = self.utxo[0].nValue // 2\n+\n+        def create_tx(prev_txid, prev_index, amount, script_pubkey):\n+            tx = CTransaction()\n+            tx.vin.append(CTxIn(COutPoint(prev_txid, prev_index), b\"\"))\n+            tx.vout.append(CTxOut(amount, script_pubkey))\n+            tx.rehash()\n+            return tx\n+\n+        def sign_witness_input(tx, vin_index, script, amount, signing_key=key, multisig=False, low_s=True):\n+            tx.wit.vtxinwit.append(CTxInWitness())\n+            sighash = SegwitV0SignatureHash(script, tx, vin_index, SIGHASH_ALL, amount)\n+            der_sig = signing_key.sign_ecdsa(sighash, low_s=low_s)\n+            tx.wit.vtxinwit[vin_index].scriptWitness.stack.insert(0, der_sig + bytes([SIGHASH_ALL]))\n+            if multisig:\n+                # witness stack format is [b'', signature, script]\n+                tx.wit.vtxinwit[vin_index].scriptWitness.stack.append(script)\n+                tx.wit.vtxinwit[vin_index].scriptWitness.stack.insert(0, b'')\n+            else:\n+                # witness stack format is [signature, pubkey]\n+                tx.wit.vtxinwit[vin_index].scriptWitness.stack.append(pubkey)\n+            tx.rehash()\n+\n+        # Example 1: P2WPKH transaction with malleated signature\n+        # 1. Create a funding transaction (P2WPKH output)\n+        script_pubkey = key_to_p2wpkh_script(pubkey)\n+        funding_p2wpkh_tx = create_tx(self.utxo[0].sha256, self.utxo[0].n, amount, script_pubkey)\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [funding_p2wpkh_tx])\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n+\n+        # 2. Create and sign a transaction spending from the P2WPKH output (bad high-S signature)\n+        spending_tx = create_tx(funding_p2wpkh_tx.sha256, 0, amount - 1000, script_pubkey)\n+        pubkey_hash = hash160(pubkey)\n+        p2pkh_script = keyhash_to_p2pkh_script(pubkey_hash)\n+        sign_witness_input(spending_tx, 0, p2pkh_script, amount, low_s=False)\n+        prev_txid = spending_tx.hash\n+        prev_wtxid = spending_tx.getwtxid()\n+        # Submit transaction (should be rejected due to non-canonical signature)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spending_tx, with_witness=True, accepted=False, reason='non-mandatory-script-verify-flag (Non-canonical signature: S value is unnecessarily high)')\n+\n+        # 3. Re-sign with low-S signature (standard)\n+        spending_tx.wit.vtxinwit[0].scriptWitness.stack.clear()\n+        sign_witness_input(spending_tx, 0, p2pkh_script, amount, low_s=True)\n+\n+        # 4. Verify txid matches but wtxid differs\n+        assert_equal(prev_txid, spending_tx.hash)\n+        assert_not_equal(prev_wtxid, spending_tx.getwtxid())\n+        # Transaction should now be accepted\n+        test_transaction_acceptance(self.nodes[1], self.test_node, spending_tx, with_witness=True, accepted=True)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Example 2: P2WSH 1-of-2 multisig transaction where each signature applied to tx results in different wtxid",
      "path": "test/functional/p2p_segwit.py",
      "position": 81,
      "original_position": 81,
      "commit_id": "2c668bd502587c509484eb5f786da5d258352294",
      "original_commit_id": "2c668bd502587c509484eb5f786da5d258352294",
      "in_reply_to_id": 2073931876,
      "user": {
        "login": "stratospher",
        "id": 44024636,
        "node_id": "MDQ6VXNlcjQ0MDI0NjM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/44024636?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stratospher",
        "html_url": "https://github.com/stratospher",
        "followers_url": "https://api.github.com/users/stratospher/followers",
        "following_url": "https://api.github.com/users/stratospher/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stratospher/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stratospher/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stratospher/subscriptions",
        "organizations_url": "https://api.github.com/users/stratospher/orgs",
        "repos_url": "https://api.github.com/users/stratospher/repos",
        "events_url": "https://api.github.com/users/stratospher/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stratospher/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "oh included it because high-s transactions are non-standard and I was worried they wouldn't be relayed and we couldn't test private broadcast behaviour.",
      "created_at": "2025-05-05T18:37:19Z",
      "updated_at": "2025-05-05T18:37:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32385#discussion_r2073973241",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2073973241"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2128,
      "original_line": 2128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2074738962",
      "pull_request_review_id": 2816883727,
      "id": 2074738962,
      "node_id": "PRRC_kwDOABII5857qgES",
      "diff_hunk": "@@ -2066,6 +2069,89 @@ def received_wtxidrelay():\n         # Check tx2 is there now\n         assert_equal(tx2.hash in self.nodes[0].getrawmempool(), True)\n \n+    @subtest\n+    def test_transaction_malleability(self):\n+        # Test transaction malleability after segwit: same txid but different wtxid\n+        key, pubkey = generate_keypair()\n+        amount = self.utxo[0].nValue // 2\n+\n+        def create_tx(prev_txid, prev_index, amount, script_pubkey):\n+            tx = CTransaction()\n+            tx.vin.append(CTxIn(COutPoint(prev_txid, prev_index), b\"\"))\n+            tx.vout.append(CTxOut(amount, script_pubkey))\n+            tx.rehash()\n+            return tx\n+\n+        def sign_witness_input(tx, vin_index, script, amount, signing_key=key, multisig=False, low_s=True):\n+            tx.wit.vtxinwit.append(CTxInWitness())\n+            sighash = SegwitV0SignatureHash(script, tx, vin_index, SIGHASH_ALL, amount)\n+            der_sig = signing_key.sign_ecdsa(sighash, low_s=low_s)\n+            tx.wit.vtxinwit[vin_index].scriptWitness.stack.insert(0, der_sig + bytes([SIGHASH_ALL]))\n+            if multisig:\n+                # witness stack format is [b'', signature, script]\n+                tx.wit.vtxinwit[vin_index].scriptWitness.stack.append(script)\n+                tx.wit.vtxinwit[vin_index].scriptWitness.stack.insert(0, b'')\n+            else:\n+                # witness stack format is [signature, pubkey]\n+                tx.wit.vtxinwit[vin_index].scriptWitness.stack.append(pubkey)\n+            tx.rehash()\n+\n+        # Example 1: P2WPKH transaction with malleated signature\n+        # 1. Create a funding transaction (P2WPKH output)\n+        script_pubkey = key_to_p2wpkh_script(pubkey)\n+        funding_p2wpkh_tx = create_tx(self.utxo[0].sha256, self.utxo[0].n, amount, script_pubkey)\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [funding_p2wpkh_tx])\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n+\n+        # 2. Create and sign a transaction spending from the P2WPKH output (bad high-S signature)\n+        spending_tx = create_tx(funding_p2wpkh_tx.sha256, 0, amount - 1000, script_pubkey)\n+        pubkey_hash = hash160(pubkey)\n+        p2pkh_script = keyhash_to_p2pkh_script(pubkey_hash)\n+        sign_witness_input(spending_tx, 0, p2pkh_script, amount, low_s=False)\n+        prev_txid = spending_tx.hash\n+        prev_wtxid = spending_tx.getwtxid()\n+        # Submit transaction (should be rejected due to non-canonical signature)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spending_tx, with_witness=True, accepted=False, reason='non-mandatory-script-verify-flag (Non-canonical signature: S value is unnecessarily high)')\n+\n+        # 3. Re-sign with low-S signature (standard)\n+        spending_tx.wit.vtxinwit[0].scriptWitness.stack.clear()\n+        sign_witness_input(spending_tx, 0, p2pkh_script, amount, low_s=True)\n+\n+        # 4. Verify txid matches but wtxid differs\n+        assert_equal(prev_txid, spending_tx.hash)\n+        assert_not_equal(prev_wtxid, spending_tx.getwtxid())\n+        # Transaction should now be accepted\n+        test_transaction_acceptance(self.nodes[1], self.test_node, spending_tx, with_witness=True, accepted=True)\n+        self.generate(self.nodes[0], 1)\n+\n+        # Example 2: P2WSH 1-of-2 multisig transaction where each signature applied to tx results in different wtxid",
      "path": "test/functional/p2p_segwit.py",
      "position": 81,
      "original_position": 81,
      "commit_id": "2c668bd502587c509484eb5f786da5d258352294",
      "original_commit_id": "2c668bd502587c509484eb5f786da5d258352294",
      "in_reply_to_id": 2073931876,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Now I see! Multisig is another way to create \"same_txid, different_wtxid\" even though it does not fiddle with the `s` value. And so, both transactions are relayable. Cool. Best would be to have a function that produces those two transactions. That would need the private keys. I guess better be separate from `create_malleated_version()`.",
      "created_at": "2025-05-06T05:05:13Z",
      "updated_at": "2025-05-06T05:05:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32385#discussion_r2074738962",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2074738962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32385"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2128,
      "original_line": 2128,
      "side": "RIGHT"
    }
  ]
}