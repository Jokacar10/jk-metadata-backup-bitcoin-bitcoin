{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160",
    "id": 2732065267,
    "node_id": "PR_kwDOABII586i2AHz",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/33160",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/33160.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/33160.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33160",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33160/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/2dfb6d5ebdb579f58244534835f027cd11187ae3",
    "number": 33160,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "bench: Add more realistic Coin Selection Bench",
    "user": {
      "login": "murchandamus",
      "id": 4060799,
      "node_id": "MDQ6VXNlcjQwNjA3OTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murchandamus",
      "html_url": "https://github.com/murchandamus",
      "followers_url": "https://api.github.com/users/murchandamus/followers",
      "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
      "organizations_url": "https://api.github.com/users/murchandamus/orgs",
      "repos_url": "https://api.github.com/users/murchandamus/repos",
      "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/murchandamus/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "First draft for a Coin Selection Benchmark that doesnâ€™t just test a worst case of one of the algorithms but tries to select inputs for a variety of different targets.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2025-08-09T02:17:59Z",
    "updated_at": "2025-09-26T11:55:08Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "b1bdcaf6a9db883bbd63e16d6da2ae31366612f8",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "murchandamus:2025-08-improve-coinselection-bench",
      "ref": "2025-08-improve-coinselection-bench",
      "sha": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 23979970,
        "node_id": "MDEwOlJlcG9zaXRvcnkyMzk3OTk3MA==",
        "name": "bitcoin",
        "full_name": "murchandamus/bitcoin",
        "owner": {
          "login": "murchandamus",
          "id": 4060799,
          "node_id": "MDQ6VXNlcjQwNjA3OTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/murchandamus",
          "html_url": "https://github.com/murchandamus",
          "followers_url": "https://api.github.com/users/murchandamus/followers",
          "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
          "organizations_url": "https://api.github.com/users/murchandamus/orgs",
          "repos_url": "https://api.github.com/users/murchandamus/repos",
          "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/murchandamus/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/murchandamus/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/murchandamus/bitcoin",
        "archive_url": "https://api.github.com/repos/murchandamus/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/murchandamus/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/murchandamus/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/murchandamus/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/murchandamus/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/murchandamus/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/murchandamus/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/murchandamus/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/murchandamus/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/murchandamus/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/murchandamus/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/murchandamus/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/murchandamus/bitcoin/events",
        "forks_url": "https://api.github.com/repos/murchandamus/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/murchandamus/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/murchandamus/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/murchandamus/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/murchandamus/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/murchandamus/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/murchandamus/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/murchandamus/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/murchandamus/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/murchandamus/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/murchandamus/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/murchandamus/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/murchandamus/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/murchandamus/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/murchandamus/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/murchandamus/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:murchandamus/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/murchandamus/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/murchandamus/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/murchandamus/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/murchandamus/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/murchandamus/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/murchandamus/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/murchandamus/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/murchandamus/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/murchandamus/bitcoin/hooks",
        "svn_url": "https://github.com/murchandamus/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 254277,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-19T22:49:05Z",
        "created_at": "2014-09-12T23:11:53Z",
        "updated_at": "2025-07-13T19:52:17Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "d31dc8f8189e93c82dadc01df9a2dd9cfdb50bf9",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37863,
        "stargazers_count": 85697,
        "watchers_count": 85697,
        "size": 294130,
        "default_branch": "master",
        "open_issues_count": 798,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-09-25T22:42:23Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-09-26T10:28:29Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 92,
    "deletions": 14,
    "changed_files": 1,
    "commits": 2,
    "review_comments": 15,
    "comments": 2
  },
  "events": [
    {
      "event": "labeled",
      "id": 19064025593,
      "node_id": "LE_lADOABII587FBzWazwAAAARwTfH5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19064025593",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-09T02:18:02Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "commented",
      "id": 3169662174,
      "node_id": "IC_kwDOABII58687TTe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3169662174",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-09T02:18:04Z",
      "updated_at": "2025-08-27T00:00:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/33160.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [l0rinc](https://github.com/bitcoin/bitcoin/pull/33160#pullrequestreview-3157264436) |\n\nIf your review is incorrectly listed, please react with ðŸ‘Ž to this comment and the bot will ignore it on the next update.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#issuecomment-3169662174",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33160"
    },
    {
      "event": "labeled",
      "id": 19064731475,
      "node_id": "LE_lADOABII587FBzWazwAAAARwWLdT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19064731475",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-09T03:18:49Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3169921896,
      "node_id": "IC_kwDOABII58688Sto",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3169921896",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-09T03:18:51Z",
      "updated_at": "2025-08-09T03:18:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\nðŸš§ At least one of the CI tasks failed.\n<sub>Task `tidy`: https://github.com/bitcoin/bitcoin/runs/47721081968</sub>\n<sub>LLM reason (âœ¨ experimental): clang-tidy detected a performance-inefficient vector operation error, causing the CI to fail.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#issuecomment-3169921896",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33160"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc2YTRhNGI4NmM5Mjk5ZWMxYTliMzY1ZDdjYmFiZWZlYjMzYzI1OTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76a4a4b86c9299ec1a9b365d7cbabefeb33c2598",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/76a4a4b86c9299ec1a9b365d7cbabefeb33c2598",
      "tree": {
        "sha": "1e9badcb708916ef0d338b9d9c46368d4c167533",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e9badcb708916ef0d338b9d9c46368d4c167533"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1e9badcb708916ef0d338b9d9c46368d4c167533\nparent 2bb06bcaf284d3522db5411890c20ba1a587703e\nauthor Murch <murch@murch.one> 1754619120 -0700\ncommitter Murch <murch@murch.one> 1755543079 -0700\n\nbench: Add Coin Selection bench with diverse UTXOs\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmijdicACgkQe6A1yluQ\nFxMYQhAA1cG+pITT/EnWhRNb7ENqHMTnnLJaAyeR8szjeeUm5X5OJaXqdOcuxpk1\n+XYrhripMDri2hZlEVSQ13OnQHz2C4vYRBHYGjaN+X61J1kEyKUlLxfNZWeG4MJo\nKRvzEWSJiJ6osqgDxbbMO1CHN6KuyrrV7f7nmyTe+4grwXmzKpBJI4HISfDAG4SH\n1W4HKPjW6iRkPOwic4cZ9C1gtoXo5KK5TFutVPnxFbEDVNyjS0rXI4icBfhGtESV\nLV8I+XXqfL5aSTUEmcPaB2l7mK+TePiGHysVdYkmF//yWrycBxZ/1Z5RhywHGg75\njovfKaTf7uQxq4ooDd6kRYphoK+zThMQX7iInhvrumJyaRHTHOlFQBUPTfRQgZ/c\n+Vzk8xrHtTY5o/p8WQMeGyrwY+4Ro6+6aJPasfDW0/zdOBa5lfqd1xYaqVOIWppn\ncmzzfyXLrVkX8+2O25TxIv+v4ytu0edaowqNza9WESFJOHK/gEazSUC7D5W9JHkL\nCzsth+0YvG8Pis56+tEgmsPPw5Mq9ByLnC8XHbDeGAZq4WJzjcVqfhCb+Pe2T9g8\nMlXDstmgaAQD6J6zwZiRYN1sPLrGj43oM8yeqREe5ztrg9ho31gtW6zabga6G/Jr\nwN1FzNfF4HDNacx/Q4OJ/ujr64cWfjWQIL+ebVHKXETz6Ub7XXo=\n=XZpT\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bb06bcaf284d3522db5411890c20ba1a587703e",
          "sha": "2bb06bcaf284d3522db5411890c20ba1a587703e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2bb06bcaf284d3522db5411890c20ba1a587703e"
        }
      ],
      "message": "bench: Add Coin Selection bench with diverse UTXOs",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2025-08-18T18:51:19Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2025-08-08T02:12:00Z"
      },
      "sha": "76a4a4b86c9299ec1a9b365d7cbabefeb33c2598"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJkZmI2ZDVlYmRiNTc5ZjU4MjQ0NTM0ODM1ZjAyN2NkMTExODdhZTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "tree": {
        "sha": "821f46ee172f22dcbea52e3449483b51497c7380",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/821f46ee172f22dcbea52e3449483b51497c7380"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 821f46ee172f22dcbea52e3449483b51497c7380\nparent 76a4a4b86c9299ec1a9b365d7cbabefeb33c2598\nauthor Murch <murch@murch.one> 1754703785 -0700\ncommitter Murch <murch@murch.one> 1755543082 -0700\n\nbench: Move setup out of bench\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEENfStpiPrn+OjvH72e6A1yluQFxMFAmijdioACgkQe6A1yluQ\nFxPvLg/+I3orn/6zbGkqLy7OJsgyS/ehP4fQ9YMokReYlfGYaabLkbknarvwvzIE\nFp5/dupLEcBXAXZjVAFOELkoSxeqvDFEHimUYNkliBKj6sAE+/2yb5T/cdDWj9IP\nc5PJLY9tshspRTFv2h/oErybth/TJa4doM+uh0WhdxCyoxrHNtkH4ZlGmYqadOxh\n45f1ub4V+B6fQWeWDxHJBnEXMa8xVGY65TP1se5jh9ohPyDBtJn/WVuCyk3/eDl/\nkvMkD3qX0yJWtJoa/n+WSGyxSY55Qrldn/+FBIwz3wi1G1GMoA9kBaCEUrLX1K25\nkDu0cflKtZ1IREXV838tLbyaBTiIS1/w/fM0G2YGdUArJgh1lAs9QyuOWXv98YNV\n1sw5xeqzwJKsD/JafZzW2+dSB6SB7mon7catV8LSChh8VI6RaMx8UkwCCrv7QEoH\niC0AMZkrcM7bVOSLfHnPx/S5vJ2lJZY9Inc/HRW4OAUTjS781TGISx5QUp7mHk0s\nyHgeQ0aPdhX1kFfjP+7E1B0xcMQA8oTeItPJAqlZZhDgcyC+qNoWzxx1aXyRtdx/\nDlpDb68aoKNeHLkyRXi6Y/Gi1NxY8RjShj/N5zuGWnWLxoPmYVy7hLJReapT1lGI\nAYeHZOFoUiCbuox1Y/3zpGEdm4GMBUHiPRByxST5FUhASijXoUw=\n=sD0t\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76a4a4b86c9299ec1a9b365d7cbabefeb33c2598",
          "sha": "76a4a4b86c9299ec1a9b365d7cbabefeb33c2598",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/76a4a4b86c9299ec1a9b365d7cbabefeb33c2598"
        }
      ],
      "message": "bench: Move setup out of bench",
      "committer": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2025-08-18T18:51:22Z"
      },
      "author": {
        "name": "Murch",
        "email": "murch@murch.one",
        "date": "2025-08-09T01:43:05Z"
      },
      "sha": "2dfb6d5ebdb579f58244534835f027cd11187ae3"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19209855117,
      "node_id": "HRFPE_lADOABII587FBzWazwAAAAR4_yCN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19209855117",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "commit_url": "https://api.github.com/repos/murchandamus/bitcoin/commits/2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "created_at": "2025-08-18T18:52:19Z"
    },
    {
      "event": "reviewed",
      "id": 3157264436,
      "node_id": "PRR_kwDOABII5868MAg0",
      "url": null,
      "actor": null,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-27T00:00:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, the existing test were all quite trivial compared to this new one.\r\nI left a ton of comments, for simplicity here's the final code that I'm suggesting, feel free to pick and choose from it.\r\n\r\n<details>\r\n<summary>Details</summary>\r\n\r\n```C++\r\n// Copyright (c) 2012-2022 The Bitcoin Core developers\r\n// Distributed under the MIT software license, see the accompanying\r\n// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n\r\n#include <bench/bench.h>\r\n#include <consensus/amount.h>\r\n#include <interfaces/chain.h>\r\n#include <node/context.h>\r\n#include <outputtype.h>\r\n#include <policy/feerate.h>\r\n#include <policy/policy.h>\r\n#include <primitives/transaction.h>\r\n#include <random.h>\r\n#include <sync.h>\r\n#include <util/result.h>\r\n#include <wallet/coinselection.h>\r\n#include <wallet/spend.h>\r\n#include <wallet/test/util.h>\r\n#include <wallet/transaction.h>\r\n#include <wallet/wallet.h>\r\n\r\n#include <cassert>\r\n#include <map>\r\n#include <memory>\r\n#include <set>\r\n#include <utility>\r\n#include <vector>\r\n#include <cmath>\r\n\r\nusing node::NodeContext;\r\nusing wallet::AttemptSelection;\r\nusing wallet::CHANGE_LOWER;\r\nusing wallet::COutput;\r\nusing wallet::CWallet;\r\nusing wallet::CWalletTx;\r\nusing wallet::CoinEligibilityFilter;\r\nusing wallet::CoinSelectionParams;\r\nusing wallet::CreateMockableWalletDatabase;\r\nusing wallet::OutputGroup;\r\nusing wallet::SelectCoinsBnB;\r\nusing wallet::TxStateInactive;\r\n\r\nnamespace {\r\nconstexpr CAmount operator\"\"_sat(uint64_t v) { return v; }\r\nconstexpr CAmount operator\"\"_ksat(uint64_t v) { return v * 1'000; }\r\nconstexpr CAmount operator\"\"_btc(uint64_t v) { return v * COIN; }\r\nconstexpr CAmount operator\"\"_btc(long double v) { return std::llround(v * COIN); }\r\n\r\nint rand_percentage(FastRandomContext& rng) { return rng.randrange(100); }\r\nCAmount rand_range(FastRandomContext& rng, CAmount lo, CAmount hi) { return lo + rng.randrange(hi - lo + 1); }\r\n} // namespace\r\n\r\nstatic void addCoin(CAmount nValue, std::vector<std::unique_ptr<CWalletTx>>& wtxs)\r\n{\r\n    static int nextLockTime = 0;\r\n    CMutableTransaction tx;\r\n    tx.nLockTime = nextLockTime++; // so all transactions get different hashes\r\n    tx.vout.resize(1);\r\n    tx.vout[0].nValue = nValue;\r\n    wtxs.push_back(std::make_unique<CWalletTx>(MakeTransactionRef(std::move(tx)), TxStateInactive{}));\r\n}\r\n\r\n// Simple benchmark for wallet coin selection that exercises a worst-case\r\n// scenario for Knapsack: All UTXOs are necessary, but it is not an exact\r\n// match, so the only eligible input set is only discovered on the second pass\r\n// after all random walks fail to produce a solution.\r\nstatic void KnapsackWorstCase(benchmark::Bench& bench)\r\n{\r\n    NodeContext node;\r\n    auto chain{interfaces::MakeChain(node)};\r\n    CWallet wallet(chain.get(), \"\", CreateMockableWalletDatabase());\r\n    std::vector<std::unique_ptr<CWalletTx>> wtxs;\r\n    LOCK(wallet.cs_wallet);\r\n\r\n    for (int i{0}; i < 1000; ++i) {\r\n        addCoin(1000_btc, wtxs);\r\n    }\r\n    addCoin(3_btc, wtxs);\r\n\r\n    // Create coins\r\n    wallet::CoinsResult available_coins;\r\n    for (const auto& wtx : wtxs) {\r\n        const auto txout{wtx->tx->vout.at(0)};\r\n        const int input_bytes{CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr)};\r\n        const COutput output{COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, input_bytes, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/0};\r\n        available_coins.coins[OutputType::BECH32].emplace_back(output);\r\n    }\r\n\r\n    const CoinEligibilityFilter filter_standard(1, 6, 0);\r\n    FastRandomContext rand{/*fDeterministic=*/true};\r\n    const CoinSelectionParams coin_selection_params{\r\n        rand,\r\n        /*change_output_size=*/34,\r\n        /*change_spend_size=*/148,\r\n        /*min_change_target=*/CHANGE_LOWER,\r\n        /*effective_feerate=*/CFeeRate(20'000),\r\n        /*long_term_feerate=*/CFeeRate(10'000),\r\n        /*discard_feerate=*/CFeeRate(3000),\r\n        /*tx_noinputs_size=*/0,\r\n        /*avoid_partial=*/false,\r\n    };\r\n    auto group{wallet::GroupOutputs(wallet, available_coins, coin_selection_params, {{filter_standard}})[filter_standard]};\r\n    bench.run([&] {\r\n        auto result{AttemptSelection(wallet.chain(), 1002.99_btc, group, coin_selection_params, /*allow_mixed_output_types=*/true)};\r\n        assert(result);\r\n        assert(result->GetSelectedValue() == 1003_btc);\r\n        assert(result->GetInputSet().size() == 2);\r\n    });\r\n}\r\n\r\n// This benchmark is based on a UTXO pool composed of 400 UTXOs. The UTXOs are\r\n// pseudorandomly generated to be of the four relevant output types P2PKH,\r\n// P2SH-P2WPKH, P2WPKH, and P2TR UTXOs, and fall in the range of 10'000 sats to\r\n// 1â‚¿ with larger amounts being more likely.\r\n// This UTXO pool is used to run coin selection for 100 pseudorandom selection\r\n// targets from 0.1â€“2â‚¿. Altogether, this gives us a deterministic benchmark\r\n// with a hopefully somewhat representative coin selection scenario.\r\nstatic void CoinSelectionOnDiverseWallet(benchmark::Bench& bench)\r\n{\r\n    FastRandomContext rng{/*fDeterministic=*/true};\r\n\r\n    NodeContext node;\r\n    auto chain{interfaces::MakeChain(node)};\r\n    CWallet wallet(chain.get(), \"\", CreateMockableWalletDatabase());\r\n    LOCK(wallet.cs_wallet);\r\n\r\n    std::vector<std::unique_ptr<CWalletTx>> wtxs;\r\n    wtxs.reserve(400);\r\n    for (size_t i{0}; i < wtxs.capacity(); ++i) {\r\n        const int p{rand_percentage(rng)};\r\n        const auto val{p < 50 ? rand_range(rng, 10_ksat, 100_ksat) :\r\n                       p < 75 ? rand_range(rng, 100_ksat, 1000_ksat) :\r\n                       p < 95 ? rand_range(rng, 1000_ksat, 1_btc) :\r\n                                rand_range(rng, 0.1_btc, 1_btc)};\r\n        addCoin(val, wtxs);\r\n    }\r\n\r\n    // Create coins\r\n    wallet::CoinsResult available_coins;\r\n    for (const auto& wtx : wtxs) {\r\n        const int p{rand_percentage(rng)};\r\n        auto val{p < 35 ? OutputType::LEGACY :\r\n                 p < 55 ? OutputType::P2SH_SEGWIT :\r\n                 p < 90 ? OutputType::BECH32 :\r\n                          OutputType::BECH32M};\r\n\r\n        const auto txout{wtx->tx->vout.at(0)};\r\n        const int input_bytes{CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr)};\r\n        const COutput output{COutPoint{wtx->GetHash(), 0}, txout, /*depth=*/6 * 24, input_bytes, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/0};\r\n        available_coins.coins[val].emplace_back(output);\r\n    }\r\n\r\n    std::vector<CAmount> targets;\r\n    targets.reserve(10);\r\n    for (size_t i{0}; i < targets.capacity(); ++i) {\r\n        targets.push_back(rand_range(rng, 0.1_btc, 1_btc));\r\n    }\r\n\r\n    const CoinSelectionParams coin_selection_params{\r\n        rng,\r\n        /*change_output_size=*/31,\r\n        /*change_spend_size=*/68,\r\n        /*min_change_target=*/CHANGE_LOWER,\r\n        /*effective_feerate=*/CFeeRate(20'000),\r\n        /*long_term_feerate=*/CFeeRate(10'000),\r\n        /*discard_feerate=*/CFeeRate(3000),\r\n        /*tx_noinputs_size=*/72,\r\n        /*avoid_partial=*/false,\r\n    };\r\n    const CoinEligibilityFilter filter_standard(1, 6, 0);\r\n    auto group{wallet::GroupOutputs(wallet, available_coins, coin_selection_params, {{filter_standard}})[filter_standard]};\r\n\r\n    bench.run([&] {\r\n        for (const auto& target : targets) {\r\n            auto result{AttemptSelection(wallet.chain(), target, group, coin_selection_params, /*allow_mixed_output_types=*/true)};\r\n            assert(result && result->GetSelectedValue() >= target);\r\n        }\r\n    });\r\n}\r\n\r\nstatic void add_coin(CAmount nValue, uint32_t nInput, std::vector<OutputGroup>& set)\r\n{\r\n    CMutableTransaction tx;\r\n    tx.vout.resize(nInput + 1);\r\n    tx.vout[nInput].nValue = nValue;\r\n    COutput output(COutPoint{tx.GetHash(), nInput}, tx.vout.at(nInput), /*depth=*/0, /*input_bytes=*/-1, /*solvable=*/true, /*safe=*/true, /*time=*/0, /*from_me=*/true, /*fees=*/0);\r\n    set.emplace_back();\r\n    set.back().Insert(std::make_shared<COutput>(output), /*ancestors=*/0, /*descendants=*/0);\r\n}\r\n\r\nstatic CAmount make_hard_case(int utxos, std::vector<OutputGroup>& utxo_pool)\r\n{\r\n    utxo_pool.clear();\r\n    CAmount target{0};\r\n    for (int i{0}; i < utxos; ++i) {\r\n        target += 1_sat << (utxos + i);\r\n        add_coin(1_sat << (utxos + i), 2 * i, utxo_pool);\r\n        add_coin((1_sat << (utxos + i)) + (1_sat << (utxos - 1 - i)), 2 * i + 1, utxo_pool);\r\n    }\r\n    return target;\r\n}\r\n\r\nstatic void BnBExhaustion(benchmark::Bench& bench)\r\n{\r\n    std::vector<OutputGroup> utxo_pool;\r\n    auto target{make_hard_case(17, utxo_pool)};\r\n    bench.run([&] {\r\n        SelectCoinsBnB(utxo_pool, target, 0, MAX_STANDARD_TX_WEIGHT); // Should exhaust\r\n    });\r\n}\r\n\r\nBENCHMARK(KnapsackWorstCase, benchmark::PriorityLevel::HIGH);\r\nBENCHMARK(CoinSelectionOnDiverseWallet, benchmark::PriorityLevel::HIGH);\r\nBENCHMARK(BnBExhaustion, benchmark::PriorityLevel::HIGH);\r\n\r\n```\r\n\r\n</details>",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#pullrequestreview-3157264436",
      "submitted_at": "2025-08-27T00:00:39Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
    },
    {
      "event": "unlabeled",
      "id": 19942302862,
      "node_id": "UNLE_lADOABII587FBzWazwAAAASkp2SO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19942302862",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-26T11:55:08Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302109933",
      "pull_request_review_id": 3157264436,
      "id": 2302109933,
      "node_id": "PRRC_kwDOABII586JN2jt",
      "diff_hunk": "@@ -99,6 +96,90 @@ static void CoinSelection(benchmark::Bench& bench)\n     });\n }\n \n+// This benchmark is based on a UTXO pool composed of 400 UTXOs. The UTXOs are\n+// pseudorandomly generated to be of the four relevant output types P2PKH,\n+// P2SH-P2WPKH, P2WPKH, and P2TR UTXOs, and fall in the range of 10'000 sats to\n+// 1â€¯â‚¿ with larger amounts being more likely.\n+// This UTXO pool is used to run coin selection for 100 pseudorandom selection\n+// targets from 0.1â€“2â€¯â‚¿. Altogether, this gives us a deterministic benchmark\n+// with a hopefully somewhat representative coin selection scenario.\n+static void CoinSelectionOnDiverseWallet(benchmark::Bench& bench)\n+{\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n+    CWallet wallet(chain.get(), \"\", CreateMockableWalletDatabase());\n+    std::vector<std::unique_ptr<CWalletTx>> wtxs;\n+    LOCK(wallet.cs_wallet);\n+\n+    // Use arbitrary static seed for generating a pseudorandom scenario\n+    uint256 arb_seed = uint256(\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\");\n+    FastRandomContext det_rand{arb_seed};\n+\n+    // Add coins.\n+    for (int i = 0; i < 400; ++i) {\n+        int x{det_rand.randrange(100)};\n+        if (x < 50) {\n+            // 0.0001â€“0.001 COIN\n+            addCoin(det_rand.randrange(90'000) + 10'000, wallet, wtxs);",
      "path": "src/bench/coin_selection.cpp",
      "position": 48,
      "original_position": 48,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "original_commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we don't actually need the wallet here, right?",
      "created_at": "2025-08-26T20:47:56Z",
      "updated_at": "2025-08-27T00:00:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#discussion_r2302109933",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302109933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 123,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302150941",
      "pull_request_review_id": 3157264436,
      "id": 2302150941,
      "node_id": "PRRC_kwDOABII586JOAkd",
      "diff_hunk": "@@ -99,6 +96,90 @@ static void CoinSelection(benchmark::Bench& bench)\n     });\n }\n \n+// This benchmark is based on a UTXO pool composed of 400 UTXOs. The UTXOs are\n+// pseudorandomly generated to be of the four relevant output types P2PKH,\n+// P2SH-P2WPKH, P2WPKH, and P2TR UTXOs, and fall in the range of 10'000 sats to\n+// 1â€¯â‚¿ with larger amounts being more likely.\n+// This UTXO pool is used to run coin selection for 100 pseudorandom selection\n+// targets from 0.1â€“2â€¯â‚¿. Altogether, this gives us a deterministic benchmark\n+// with a hopefully somewhat representative coin selection scenario.\n+static void CoinSelectionOnDiverseWallet(benchmark::Bench& bench)\n+{\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n+    CWallet wallet(chain.get(), \"\", CreateMockableWalletDatabase());\n+    std::vector<std::unique_ptr<CWalletTx>> wtxs;\n+    LOCK(wallet.cs_wallet);\n+\n+    // Use arbitrary static seed for generating a pseudorandom scenario\n+    uint256 arb_seed = uint256(\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\");\n+    FastRandomContext det_rand{arb_seed};\n+\n+    // Add coins.\n+    for (int i = 0; i < 400; ++i) {\n+        int x{det_rand.randrange(100)};\n+        if (x < 50) {\n+            // 0.0001â€“0.001 COIN\n+            addCoin(det_rand.randrange(90'000) + 10'000, wallet, wtxs);\n+        } else if (x < 75)  {\n+            // 0.001â€“0.01 COIN\n+            addCoin(det_rand.randrange(900'000) + 100'000, wallet, wtxs);\n+        } else if (x < 95) {\n+            // 0.01â€“0.1 COIN\n+            addCoin(det_rand.randrange(9'000'000) + 1'000'000, wallet, wtxs);\n+        } else {\n+            // 0.1â€“1 COIN\n+            addCoin(det_rand.randrange(90'000'000) + 10'000'000, wallet, wtxs);\n+        }\n+    }\n+\n+    // Create coins\n+    wallet::CoinsResult available_coins;\n+    for (const auto& wtx : wtxs) {\n+        const auto txout = wtx->tx->vout.at(0);\n+        int y{det_rand.randrange(100)};\n+        if (y < 35) {\n+            available_coins.coins[OutputType::LEGACY].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else if (y < 55) {\n+            available_coins.coins[OutputType::P2SH_SEGWIT].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else if (y < 90) {\n+            available_coins.coins[OutputType::BECH32].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else {\n+            available_coins.coins[OutputType::BECH32M].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        }\n+    }\n+\n+    std::vector<CAmount> targets;\n+    for (int i = 0; i < 100; ++i) {\n+        // 0.1â€“1 COIN\n+        targets.push_back(det_rand.randrange(90'000'000) + 10'000'000);\n+    }\n+\n+    // Allow actual randomness for selection\n+    FastRandomContext rand{};",
      "path": "src/bench/coin_selection.cpp",
      "position": 84,
      "original_position": 84,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "original_commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we want deterministic randomness for benchmarks, otherwise it's hard to know what we're actually measuring:\r\n```suggestion\r\n    FastRandomContext rand{/*fDeterministic=*/true};\r\n```",
      "created_at": "2025-08-26T21:09:34Z",
      "updated_at": "2025-08-27T00:00:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#discussion_r2302150941",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302150941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 159,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302152030",
      "pull_request_review_id": 3157264436,
      "id": 2302152030,
      "node_id": "PRRC_kwDOABII586JOA1e",
      "diff_hunk": "@@ -99,6 +96,90 @@ static void CoinSelection(benchmark::Bench& bench)\n     });\n }\n \n+// This benchmark is based on a UTXO pool composed of 400 UTXOs. The UTXOs are\n+// pseudorandomly generated to be of the four relevant output types P2PKH,\n+// P2SH-P2WPKH, P2WPKH, and P2TR UTXOs, and fall in the range of 10'000 sats to\n+// 1â€¯â‚¿ with larger amounts being more likely.\n+// This UTXO pool is used to run coin selection for 100 pseudorandom selection\n+// targets from 0.1â€“2â€¯â‚¿. Altogether, this gives us a deterministic benchmark\n+// with a hopefully somewhat representative coin selection scenario.\n+static void CoinSelectionOnDiverseWallet(benchmark::Bench& bench)\n+{\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n+    CWallet wallet(chain.get(), \"\", CreateMockableWalletDatabase());\n+    std::vector<std::unique_ptr<CWalletTx>> wtxs;\n+    LOCK(wallet.cs_wallet);\n+\n+    // Use arbitrary static seed for generating a pseudorandom scenario\n+    uint256 arb_seed = uint256(\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\");\n+    FastRandomContext det_rand{arb_seed};\n+\n+    // Add coins.\n+    for (int i = 0; i < 400; ++i) {\n+        int x{det_rand.randrange(100)};\n+        if (x < 50) {\n+            // 0.0001â€“0.001 COIN\n+            addCoin(det_rand.randrange(90'000) + 10'000, wallet, wtxs);\n+        } else if (x < 75)  {\n+            // 0.001â€“0.01 COIN\n+            addCoin(det_rand.randrange(900'000) + 100'000, wallet, wtxs);\n+        } else if (x < 95) {\n+            // 0.01â€“0.1 COIN\n+            addCoin(det_rand.randrange(9'000'000) + 1'000'000, wallet, wtxs);\n+        } else {\n+            // 0.1â€“1 COIN\n+            addCoin(det_rand.randrange(90'000'000) + 10'000'000, wallet, wtxs);\n+        }\n+    }\n+\n+    // Create coins\n+    wallet::CoinsResult available_coins;\n+    for (const auto& wtx : wtxs) {\n+        const auto txout = wtx->tx->vout.at(0);\n+        int y{det_rand.randrange(100)};\n+        if (y < 35) {\n+            available_coins.coins[OutputType::LEGACY].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else if (y < 55) {\n+            available_coins.coins[OutputType::P2SH_SEGWIT].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else if (y < 90) {\n+            available_coins.coins[OutputType::BECH32].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else {\n+            available_coins.coins[OutputType::BECH32M].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        }\n+    }\n+\n+    std::vector<CAmount> targets;\n+    for (int i = 0; i < 100; ++i) {",
      "path": "src/bench/coin_selection.cpp",
      "position": 78,
      "original_position": 78,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "original_commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we could reserve this to avoid the build failure:\r\n```C++\r\nstd::vector<CAmount> targets;\r\ntargets.reserve(10);\r\nfor (size_t i{0}; i < targets.capacity(); ++i) {\r\n    targets.push_back(rand_range(rng, 0.1_btc, 1_btc));\r\n}\r\n```\r\nNote that I have reduced the target count to 10 since the benchmark was very slow otherwise",
      "created_at": "2025-08-26T21:10:10Z",
      "updated_at": "2025-08-27T00:00:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#discussion_r2302152030",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302152030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 153,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302156688",
      "pull_request_review_id": 3157264436,
      "id": 2302156688,
      "node_id": "PRRC_kwDOABII586JOB-Q",
      "diff_hunk": "@@ -99,6 +96,90 @@ static void CoinSelection(benchmark::Bench& bench)\n     });\n }\n \n+// This benchmark is based on a UTXO pool composed of 400 UTXOs. The UTXOs are\n+// pseudorandomly generated to be of the four relevant output types P2PKH,\n+// P2SH-P2WPKH, P2WPKH, and P2TR UTXOs, and fall in the range of 10'000 sats to\n+// 1â€¯â‚¿ with larger amounts being more likely.",
      "path": "src/bench/coin_selection.cpp",
      "position": 27,
      "original_position": 27,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "original_commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'd avoid the `Narrow No-Break Space` chars from docs if possible, they're rendered differently on different mediums",
      "created_at": "2025-08-26T21:13:02Z",
      "updated_at": "2025-08-27T00:00:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#discussion_r2302156688",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302156688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 102,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302160133",
      "pull_request_review_id": 3157264436,
      "id": 2302160133,
      "node_id": "PRRC_kwDOABII586JOC0F",
      "diff_hunk": "@@ -99,6 +96,90 @@ static void CoinSelection(benchmark::Bench& bench)\n     });\n }\n \n+// This benchmark is based on a UTXO pool composed of 400 UTXOs. The UTXOs are\n+// pseudorandomly generated to be of the four relevant output types P2PKH,\n+// P2SH-P2WPKH, P2WPKH, and P2TR UTXOs, and fall in the range of 10'000 sats to\n+// 1â€¯â‚¿ with larger amounts being more likely.\n+// This UTXO pool is used to run coin selection for 100 pseudorandom selection\n+// targets from 0.1â€“2â€¯â‚¿. Altogether, this gives us a deterministic benchmark\n+// with a hopefully somewhat representative coin selection scenario.\n+static void CoinSelectionOnDiverseWallet(benchmark::Bench& bench)\n+{\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n+    CWallet wallet(chain.get(), \"\", CreateMockableWalletDatabase());\n+    std::vector<std::unique_ptr<CWalletTx>> wtxs;\n+    LOCK(wallet.cs_wallet);\n+\n+    // Use arbitrary static seed for generating a pseudorandom scenario\n+    uint256 arb_seed = uint256(\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\");\n+    FastRandomContext det_rand{arb_seed};",
      "path": "src/bench/coin_selection.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "original_commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same, seems simpler to just leave it to deterministic instead of hard-coding a confusing seed\r\n```suggestion\r\n    FastRandomContext det_rand{/*fDeterministic=*/true};\r\n```\r\n\r\nnote: can we reuse this for the random source below as well?",
      "created_at": "2025-08-26T21:15:12Z",
      "updated_at": "2025-08-27T00:00:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#discussion_r2302160133",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302160133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
        }
      },
      "start_line": 114,
      "original_start_line": 114,
      "start_side": "RIGHT",
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302166150",
      "pull_request_review_id": 3157264436,
      "id": 2302166150,
      "node_id": "PRRC_kwDOABII586JOESG",
      "diff_hunk": "@@ -99,6 +96,90 @@ static void CoinSelection(benchmark::Bench& bench)\n     });\n }\n \n+// This benchmark is based on a UTXO pool composed of 400 UTXOs. The UTXOs are\n+// pseudorandomly generated to be of the four relevant output types P2PKH,\n+// P2SH-P2WPKH, P2WPKH, and P2TR UTXOs, and fall in the range of 10'000 sats to\n+// 1â€¯â‚¿ with larger amounts being more likely.\n+// This UTXO pool is used to run coin selection for 100 pseudorandom selection\n+// targets from 0.1â€“2â€¯â‚¿. Altogether, this gives us a deterministic benchmark\n+// with a hopefully somewhat representative coin selection scenario.\n+static void CoinSelectionOnDiverseWallet(benchmark::Bench& bench)\n+{\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n+    CWallet wallet(chain.get(), \"\", CreateMockableWalletDatabase());\n+    std::vector<std::unique_ptr<CWalletTx>> wtxs;\n+    LOCK(wallet.cs_wallet);\n+\n+    // Use arbitrary static seed for generating a pseudorandom scenario\n+    uint256 arb_seed = uint256(\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\");\n+    FastRandomContext det_rand{arb_seed};\n+\n+    // Add coins.\n+    for (int i = 0; i < 400; ++i) {\n+        int x{det_rand.randrange(100)};\n+        if (x < 50) {\n+            // 0.0001â€“0.001 COIN\n+            addCoin(det_rand.randrange(90'000) + 10'000, wallet, wtxs);\n+        } else if (x < 75)  {\n+            // 0.001â€“0.01 COIN\n+            addCoin(det_rand.randrange(900'000) + 100'000, wallet, wtxs);\n+        } else if (x < 95) {\n+            // 0.01â€“0.1 COIN\n+            addCoin(det_rand.randrange(9'000'000) + 1'000'000, wallet, wtxs);\n+        } else {\n+            // 0.1â€“1 COIN\n+            addCoin(det_rand.randrange(90'000'000) + 10'000'000, wallet, wtxs);\n+        }\n+    }\n+\n+    // Create coins\n+    wallet::CoinsResult available_coins;\n+    for (const auto& wtx : wtxs) {\n+        const auto txout = wtx->tx->vout.at(0);\n+        int y{det_rand.randrange(100)};\n+        if (y < 35) {",
      "path": "src/bench/coin_selection.cpp",
      "position": 66,
      "original_position": 66,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "original_commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we could dedup considerable here for better signal-to-noise ratio - it's a lot of work to find the differences between the values:\r\n```C++\r\nfor (const auto& wtx : wtxs) {\r\n    const auto txout{wtx->tx->vout.at(0)};\r\n    const int input_bytes{CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr)};\r\n    const COutput output{(COutPoint{wtx->GetHash(), 0}), txout, /*depth=*/6 * 24, input_bytes, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/0};\r\n    if (int y{rng.randrange(100)}; y < 35) {\r\n        available_coins.coins[OutputType::LEGACY].push_back(output);\r\n    } else if (y < 55) {\r\n        available_coins.coins[OutputType::P2SH_SEGWIT].push_back(output);\r\n    } else if (y < 90) {\r\n        available_coins.coins[OutputType::BECH32].push_back(output);\r\n    } else {\r\n        available_coins.coins[OutputType::BECH32M].push_back(output);\r\n    }\r\n}\r\n```\r\nor even more thoroghly:\r\n```C++\r\nfor (const auto& wtx : wtxs) {\r\n    const int p{rand_percentage(rng)};\r\n    auto val{p < 35 ? OutputType::LEGACY :\r\n             p < 55 ? OutputType::P2SH_SEGWIT :\r\n             p < 90 ? OutputType::BECH32 :\r\n                      OutputType::BECH32M};\r\n\r\n    const auto txout{wtx->tx->vout.at(0)};\r\n    const int input_bytes{CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr)};\r\n    const COutput output{COutPoint{wtx->GetHash(), 0}, txout, /*depth=*/6 * 24, input_bytes, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/0};\r\n    available_coins.coins[val].emplace_back(output);\r\n}\r\n```",
      "created_at": "2025-08-26T21:18:20Z",
      "updated_at": "2025-08-27T00:02:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#discussion_r2302166150",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302166150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 141,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302174002",
      "pull_request_review_id": 3157264436,
      "id": 2302174002,
      "node_id": "PRRC_kwDOABII586JOGMy",
      "diff_hunk": "@@ -99,6 +96,90 @@ static void CoinSelection(benchmark::Bench& bench)\n     });\n }\n \n+// This benchmark is based on a UTXO pool composed of 400 UTXOs. The UTXOs are\n+// pseudorandomly generated to be of the four relevant output types P2PKH,\n+// P2SH-P2WPKH, P2WPKH, and P2TR UTXOs, and fall in the range of 10'000 sats to\n+// 1â€¯â‚¿ with larger amounts being more likely.\n+// This UTXO pool is used to run coin selection for 100 pseudorandom selection\n+// targets from 0.1â€“2â€¯â‚¿. Altogether, this gives us a deterministic benchmark\n+// with a hopefully somewhat representative coin selection scenario.\n+static void CoinSelectionOnDiverseWallet(benchmark::Bench& bench)\n+{\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n+    CWallet wallet(chain.get(), \"\", CreateMockableWalletDatabase());\n+    std::vector<std::unique_ptr<CWalletTx>> wtxs;\n+    LOCK(wallet.cs_wallet);\n+\n+    // Use arbitrary static seed for generating a pseudorandom scenario\n+    uint256 arb_seed = uint256(\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\");\n+    FastRandomContext det_rand{arb_seed};\n+\n+    // Add coins.\n+    for (int i = 0; i < 400; ++i) {\n+        int x{det_rand.randrange(100)};\n+        if (x < 50) {\n+            // 0.0001â€“0.001 COIN\n+            addCoin(det_rand.randrange(90'000) + 10'000, wallet, wtxs);\n+        } else if (x < 75)  {\n+            // 0.001â€“0.01 COIN\n+            addCoin(det_rand.randrange(900'000) + 100'000, wallet, wtxs);\n+        } else if (x < 95) {\n+            // 0.01â€“0.1 COIN\n+            addCoin(det_rand.randrange(9'000'000) + 1'000'000, wallet, wtxs);\n+        } else {\n+            // 0.1â€“1 COIN\n+            addCoin(det_rand.randrange(90'000'000) + 10'000'000, wallet, wtxs);\n+        }\n+    }\n+\n+    // Create coins\n+    wallet::CoinsResult available_coins;\n+    for (const auto& wtx : wtxs) {\n+        const auto txout = wtx->tx->vout.at(0);\n+        int y{det_rand.randrange(100)};\n+        if (y < 35) {\n+            available_coins.coins[OutputType::LEGACY].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);",
      "path": "src/bench/coin_selection.cpp",
      "position": 67,
      "original_position": 67,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "original_commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Please rebase, `spendable` was removed since: https://github.com/bitcoin/bitcoin/commit/6a7aa015747e2634fe5a4b2f7fa0d104eb75c796#diff-38f1a8db124a979cb6dd76ce263f7aae0053d6967ee909e6356115fa0402dc8cL78",
      "created_at": "2025-08-26T21:22:46Z",
      "updated_at": "2025-08-27T00:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#discussion_r2302174002",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302174002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 142,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302187694",
      "pull_request_review_id": 3157264436,
      "id": 2302187694,
      "node_id": "PRRC_kwDOABII586JOJiu",
      "diff_hunk": "@@ -99,6 +96,90 @@ static void CoinSelection(benchmark::Bench& bench)\n     });\n }\n \n+// This benchmark is based on a UTXO pool composed of 400 UTXOs. The UTXOs are\n+// pseudorandomly generated to be of the four relevant output types P2PKH,\n+// P2SH-P2WPKH, P2WPKH, and P2TR UTXOs, and fall in the range of 10'000 sats to\n+// 1â€¯â‚¿ with larger amounts being more likely.\n+// This UTXO pool is used to run coin selection for 100 pseudorandom selection\n+// targets from 0.1â€“2â€¯â‚¿. Altogether, this gives us a deterministic benchmark\n+// with a hopefully somewhat representative coin selection scenario.\n+static void CoinSelectionOnDiverseWallet(benchmark::Bench& bench)\n+{\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n+    CWallet wallet(chain.get(), \"\", CreateMockableWalletDatabase());\n+    std::vector<std::unique_ptr<CWalletTx>> wtxs;\n+    LOCK(wallet.cs_wallet);\n+\n+    // Use arbitrary static seed for generating a pseudorandom scenario\n+    uint256 arb_seed = uint256(\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\");\n+    FastRandomContext det_rand{arb_seed};\n+\n+    // Add coins.\n+    for (int i = 0; i < 400; ++i) {\n+        int x{det_rand.randrange(100)};\n+        if (x < 50) {\n+            // 0.0001â€“0.001 COIN\n+            addCoin(det_rand.randrange(90'000) + 10'000, wallet, wtxs);\n+        } else if (x < 75)  {\n+            // 0.001â€“0.01 COIN\n+            addCoin(det_rand.randrange(900'000) + 100'000, wallet, wtxs);\n+        } else if (x < 95) {\n+            // 0.01â€“0.1 COIN\n+            addCoin(det_rand.randrange(9'000'000) + 1'000'000, wallet, wtxs);\n+        } else {\n+            // 0.1â€“1 COIN\n+            addCoin(det_rand.randrange(90'000'000) + 10'000'000, wallet, wtxs);\n+        }\n+    }\n+\n+    // Create coins\n+    wallet::CoinsResult available_coins;\n+    for (const auto& wtx : wtxs) {\n+        const auto txout = wtx->tx->vout.at(0);\n+        int y{det_rand.randrange(100)};\n+        if (y < 35) {\n+            available_coins.coins[OutputType::LEGACY].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else if (y < 55) {\n+            available_coins.coins[OutputType::P2SH_SEGWIT].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else if (y < 90) {\n+            available_coins.coins[OutputType::BECH32].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else {\n+            available_coins.coins[OutputType::BECH32M].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        }\n+    }\n+\n+    std::vector<CAmount> targets;\n+    for (int i = 0; i < 100; ++i) {\n+        // 0.1â€“1 COIN\n+        targets.push_back(det_rand.randrange(90'000'000) + 10'000'000);",
      "path": "src/bench/coin_selection.cpp",
      "position": 80,
      "original_position": 80,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "original_commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: since you're also mentioning the minimum in the comment first, we might as well put the fixed size first here\r\n```suggestion\r\n        targets.push_back(10'000'000 + det_rand.randrange(90'000'000));\r\n```\r\n\r\nAlternatively, to avoid all the 0s, consider:\r\n```suggestion\r\n        targets.push_back(COIN / 10 + rng.randrange(COIN / 9 * 10));\r\n```\r\nThis would unify it with the rest of the usages.\r\n\r\n---\r\n\r\nthis has come up multiple times, we should really add a `randrange` helper with min/max values - but for now we can just do that here to make the test itself as clear as possible (we have a lot of comments, indicating that the code needed extra explanation, so let's clear up the code instead and remove comments)\r\n```C++\r\nnamespace {\r\nconstexpr CAmount operator\"\"_sat(uint64_t v) { return v; }\r\nconstexpr CAmount operator\"\"_ksat(uint64_t v) { return v * 1'000; }\r\nconstexpr CAmount operator\"\"_btc(uint64_t v) { return v * COIN; }\r\nconstexpr CAmount operator\"\"_btc(long double v) { return std::llround(v * COIN); }\r\n// TODO if you don't trust doubles this could also work\r\nconstexpr CAmount operator\"\"_btc(const char* s, size_t n) { CAmount a{0}; assert(ParseFixedPoint(std::string{s, n}, 8, &a)); return a; } \r\n\r\nint rand_percentage(FastRandomContext& rng) { return rng.randrange(101); }\r\nCAmount rand_range(FastRandomContext& rng, CAmount lo, CAmount hi) { return lo + rng.randrange(hi - lo + 1); }\r\n} // namespace\r\n```\r\nwhich would simplify the above to\r\n```suggestion\r\n        targets.push_back(rand_range(rng, 0.1_btc, 1_btc));\r\n```",
      "created_at": "2025-08-26T21:30:30Z",
      "updated_at": "2025-08-27T00:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#discussion_r2302187694",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302187694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 155,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302195389",
      "pull_request_review_id": 3157264436,
      "id": 2302195389,
      "node_id": "PRRC_kwDOABII586JOLa9",
      "diff_hunk": "@@ -99,6 +96,90 @@ static void CoinSelection(benchmark::Bench& bench)\n     });\n }\n \n+// This benchmark is based on a UTXO pool composed of 400 UTXOs. The UTXOs are\n+// pseudorandomly generated to be of the four relevant output types P2PKH,\n+// P2SH-P2WPKH, P2WPKH, and P2TR UTXOs, and fall in the range of 10'000 sats to\n+// 1â€¯â‚¿ with larger amounts being more likely.\n+// This UTXO pool is used to run coin selection for 100 pseudorandom selection\n+// targets from 0.1â€“2â€¯â‚¿. Altogether, this gives us a deterministic benchmark\n+// with a hopefully somewhat representative coin selection scenario.\n+static void CoinSelectionOnDiverseWallet(benchmark::Bench& bench)\n+{\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n+    CWallet wallet(chain.get(), \"\", CreateMockableWalletDatabase());\n+    std::vector<std::unique_ptr<CWalletTx>> wtxs;\n+    LOCK(wallet.cs_wallet);\n+\n+    // Use arbitrary static seed for generating a pseudorandom scenario\n+    uint256 arb_seed = uint256(\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\");\n+    FastRandomContext det_rand{arb_seed};\n+\n+    // Add coins.\n+    for (int i = 0; i < 400; ++i) {\n+        int x{det_rand.randrange(100)};\n+        if (x < 50) {\n+            // 0.0001â€“0.001 COIN\n+            addCoin(det_rand.randrange(90'000) + 10'000, wallet, wtxs);\n+        } else if (x < 75)  {\n+            // 0.001â€“0.01 COIN\n+            addCoin(det_rand.randrange(900'000) + 100'000, wallet, wtxs);\n+        } else if (x < 95) {\n+            // 0.01â€“0.1 COIN\n+            addCoin(det_rand.randrange(9'000'000) + 1'000'000, wallet, wtxs);\n+        } else {\n+            // 0.1â€“1 COIN\n+            addCoin(det_rand.randrange(90'000'000) + 10'000'000, wallet, wtxs);\n+        }\n+    }\n+\n+    // Create coins\n+    wallet::CoinsResult available_coins;\n+    for (const auto& wtx : wtxs) {\n+        const auto txout = wtx->tx->vout.at(0);\n+        int y{det_rand.randrange(100)};\n+        if (y < 35) {\n+            available_coins.coins[OutputType::LEGACY].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else if (y < 55) {\n+            available_coins.coins[OutputType::P2SH_SEGWIT].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else if (y < 90) {\n+            available_coins.coins[OutputType::BECH32].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else {\n+            available_coins.coins[OutputType::BECH32M].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        }\n+    }\n+\n+    std::vector<CAmount> targets;\n+    for (int i = 0; i < 100; ++i) {\n+        // 0.1â€“1 COIN\n+        targets.push_back(det_rand.randrange(90'000'000) + 10'000'000);\n+    }\n+\n+    // Allow actual randomness for selection\n+    FastRandomContext rand{};\n+    const CoinEligibilityFilter filter_standard(1, 6, 0);\n+    const CoinSelectionParams coin_selection_params{\n+        rand,\n+        /*change_output_size=*/ 31,\n+        /*change_spend_size=*/ 68,\n+        /*min_change_target=*/ CHANGE_LOWER,\n+        /*effective_feerate=*/ CFeeRate(20'000),\n+        /*long_term_feerate=*/ CFeeRate(10'000),\n+        /*discard_feerate=*/ CFeeRate(3000),\n+        /*tx_noinputs_size=*/ 72,\n+        /*avoid_partial=*/ false,\n+    };\n+    auto group = wallet::GroupOutputs(wallet, available_coins, coin_selection_params, {{filter_standard}})[filter_standard];\n+\n+    bench.run([&] {\n+        for (const auto& target : targets) {\n+            auto result = AttemptSelection(wallet.chain(), target, group, coin_selection_params, /*allow_mixed_output_types=*/true);\n+            assert(result);\n+            assert(result->GetSelectedValue() >= target);\n+        }\n+    });\n+}\n+\n // Copied from src/wallet/test/coinselector_tests.cpp\n static void add_coin(const CAmount& nValue, int nInput, std::vector<OutputGroup>& set)",
      "path": "src/bench/coin_selection.cpp",
      "position": 109,
      "original_position": 109,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "original_commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`nInput` should be `uint32_t` otherwise we'd have a narrowing conversion in `OutPoint{tx.GetHash(), nInput}`",
      "created_at": "2025-08-26T21:35:34Z",
      "updated_at": "2025-08-27T00:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#discussion_r2302195389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302195389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 184,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302256228",
      "pull_request_review_id": 3157264436,
      "id": 2302256228,
      "node_id": "PRRC_kwDOABII586JOaRk",
      "diff_hunk": "@@ -99,6 +96,90 @@ static void CoinSelection(benchmark::Bench& bench)\n     });\n }\n \n+// This benchmark is based on a UTXO pool composed of 400 UTXOs. The UTXOs are\n+// pseudorandomly generated to be of the four relevant output types P2PKH,\n+// P2SH-P2WPKH, P2WPKH, and P2TR UTXOs, and fall in the range of 10'000 sats to\n+// 1â€¯â‚¿ with larger amounts being more likely.\n+// This UTXO pool is used to run coin selection for 100 pseudorandom selection\n+// targets from 0.1â€“2â€¯â‚¿. Altogether, this gives us a deterministic benchmark\n+// with a hopefully somewhat representative coin selection scenario.\n+static void CoinSelectionOnDiverseWallet(benchmark::Bench& bench)\n+{\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n+    CWallet wallet(chain.get(), \"\", CreateMockableWalletDatabase());\n+    std::vector<std::unique_ptr<CWalletTx>> wtxs;\n+    LOCK(wallet.cs_wallet);\n+\n+    // Use arbitrary static seed for generating a pseudorandom scenario\n+    uint256 arb_seed = uint256(\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\");\n+    FastRandomContext det_rand{arb_seed};\n+\n+    // Add coins.\n+    for (int i = 0; i < 400; ++i) {\n+        int x{det_rand.randrange(100)};\n+        if (x < 50) {\n+            // 0.0001â€“0.001 COIN\n+            addCoin(det_rand.randrange(90'000) + 10'000, wallet, wtxs);\n+        } else if (x < 75)  {\n+            // 0.001â€“0.01 COIN\n+            addCoin(det_rand.randrange(900'000) + 100'000, wallet, wtxs);\n+        } else if (x < 95) {\n+            // 0.01â€“0.1 COIN\n+            addCoin(det_rand.randrange(9'000'000) + 1'000'000, wallet, wtxs);\n+        } else {\n+            // 0.1â€“1 COIN\n+            addCoin(det_rand.randrange(90'000'000) + 10'000'000, wallet, wtxs);",
      "path": "src/bench/coin_selection.cpp",
      "position": 57,
      "original_position": 57,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "original_commit_id": "76a4a4b86c9299ec1a9b365d7cbabefeb33c2598",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we could also separate the parts that change from the parts that don't, to improve readability by reducing number of moving parts:\r\n```C++\r\nfor (int i{0}; i < 400; ++i) {\r\n    CAmount val;\r\n    if (int p{rand_percentage(rng)}; p < 50) {\r\n        val = rand_range(rng, 10_ksat, 100_ksat);\r\n    } else if (p < 75) {\r\n        val = rand_range(rng, 100_ksat, 1_Msat);\r\n    } else if (p < 95) {\r\n        val = rand_range(rng, 1_Msat, 10_Msat);\r\n    } else {\r\n        val = rand_range(rng, 0.1_btc, 1_btc);\r\n    }\r\n    addCoin(val, wtxs);\r\n}\r\n```\r\nor\r\n```C++\r\nfor (int i{0}; i < 400; ++i) {\r\n    const int p{rand_percentage(rng)};\r\n    const auto val{p < 50 ? rand_range(rng, 10_ksat, 100_ksat) :\r\n                   p < 75 ? rand_range(rng, 100_ksat, 1_Msat) :\r\n                   p < 95 ? rand_range(rng, 1_Msat, 10_Msat) :\r\n                            rand_range(rng, 0.1_btc, 1_btc)};\r\n    addCoin(val, wtxs);\r\n}\r\n```",
      "created_at": "2025-08-26T22:13:49Z",
      "updated_at": "2025-08-27T00:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#discussion_r2302256228",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302256228"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302311653",
      "pull_request_review_id": 3157264436,
      "id": 2302311653,
      "node_id": "PRRC_kwDOABII586JOnzl",
      "diff_hunk": "@@ -205,16 +205,12 @@ static CAmount make_hard_case(int utxos, std::vector<OutputGroup>& utxo_pool)\n \n static void BnBExhaustion(benchmark::Bench& bench)\n {\n-    // Setup\n     std::vector<OutputGroup> utxo_pool;\n \n+    CAmount target = make_hard_case(17, utxo_pool);\n     bench.run([&] {\n         // Benchmark",
      "path": "src/bench/coin_selection.cpp",
      "position": 9,
      "original_position": 9,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "original_commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we don't have to keep this comment either in 2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "created_at": "2025-08-26T22:47:11Z",
      "updated_at": "2025-08-27T00:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#discussion_r2302311653",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302311653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 212,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302312140",
      "pull_request_review_id": 3157264436,
      "id": 2302312140,
      "node_id": "PRRC_kwDOABII586JOn7M",
      "diff_hunk": "@@ -205,16 +205,12 @@ static CAmount make_hard_case(int utxos, std::vector<OutputGroup>& utxo_pool)\n \n static void BnBExhaustion(benchmark::Bench& bench)\n {\n-    // Setup\n     std::vector<OutputGroup> utxo_pool;\n \n+    CAmount target = make_hard_case(17, utxo_pool);\n     bench.run([&] {\n         // Benchmark\n-        CAmount target = make_hard_case(17, utxo_pool);\n         SelectCoinsBnB(utxo_pool, target, 0, MAX_STANDARD_TX_WEIGHT); // Should exhaust",
      "path": "src/bench/coin_selection.cpp",
      "position": 11,
      "original_position": 11,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "original_commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`Should exhaust` - can we assert that instead of adding a dead comment?",
      "created_at": "2025-08-26T22:47:37Z",
      "updated_at": "2025-08-27T00:03:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#discussion_r2302312140",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302312140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 213,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302323691",
      "pull_request_review_id": 3157264436,
      "id": 2302323691,
      "node_id": "PRRC_kwDOABII586JOqvr",
      "diff_hunk": "@@ -99,6 +96,90 @@ static void CoinSelection(benchmark::Bench& bench)\n     });\n }\n \n+// This benchmark is based on a UTXO pool composed of 400 UTXOs. The UTXOs are\n+// pseudorandomly generated to be of the four relevant output types P2PKH,\n+// P2SH-P2WPKH, P2WPKH, and P2TR UTXOs, and fall in the range of 10'000 sats to\n+// 1â€¯â‚¿ with larger amounts being more likely.\n+// This UTXO pool is used to run coin selection for 100 pseudorandom selection\n+// targets from 0.1â€“2â€¯â‚¿. Altogether, this gives us a deterministic benchmark",
      "path": "src/bench/coin_selection.cpp",
      "position": 29,
      "original_position": 29,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "original_commit_id": "76a4a4b86c9299ec1a9b365d7cbabefeb33c2598",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "where are we adding 2 btc? Could we avoid values from the comments, they're just adding a maintenance burden when we're forgetting updating them",
      "created_at": "2025-08-26T22:55:23Z",
      "updated_at": "2025-08-27T00:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#discussion_r2302323691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302323691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302358138",
      "pull_request_review_id": 3157264436,
      "id": 2302358138,
      "node_id": "PRRC_kwDOABII586JOzJ6",
      "diff_hunk": "@@ -99,6 +96,90 @@ static void CoinSelection(benchmark::Bench& bench)\n     });\n }\n \n+// This benchmark is based on a UTXO pool composed of 400 UTXOs. The UTXOs are\n+// pseudorandomly generated to be of the four relevant output types P2PKH,\n+// P2SH-P2WPKH, P2WPKH, and P2TR UTXOs, and fall in the range of 10'000 sats to\n+// 1â€¯â‚¿ with larger amounts being more likely.\n+// This UTXO pool is used to run coin selection for 100 pseudorandom selection\n+// targets from 0.1â€“2â€¯â‚¿. Altogether, this gives us a deterministic benchmark\n+// with a hopefully somewhat representative coin selection scenario.\n+static void CoinSelectionOnDiverseWallet(benchmark::Bench& bench)\n+{\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n+    CWallet wallet(chain.get(), \"\", CreateMockableWalletDatabase());\n+    std::vector<std::unique_ptr<CWalletTx>> wtxs;\n+    LOCK(wallet.cs_wallet);\n+\n+    // Use arbitrary static seed for generating a pseudorandom scenario\n+    uint256 arb_seed = uint256(\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\");\n+    FastRandomContext det_rand{arb_seed};\n+\n+    // Add coins.\n+    for (int i = 0; i < 400; ++i) {\n+        int x{det_rand.randrange(100)};\n+        if (x < 50) {\n+            // 0.0001â€“0.001 COIN\n+            addCoin(det_rand.randrange(90'000) + 10'000, wallet, wtxs);\n+        } else if (x < 75)  {\n+            // 0.001â€“0.01 COIN\n+            addCoin(det_rand.randrange(900'000) + 100'000, wallet, wtxs);\n+        } else if (x < 95) {\n+            // 0.01â€“0.1 COIN\n+            addCoin(det_rand.randrange(9'000'000) + 1'000'000, wallet, wtxs);\n+        } else {\n+            // 0.1â€“1 COIN\n+            addCoin(det_rand.randrange(90'000'000) + 10'000'000, wallet, wtxs);\n+        }\n+    }\n+\n+    // Create coins\n+    wallet::CoinsResult available_coins;\n+    for (const auto& wtx : wtxs) {\n+        const auto txout = wtx->tx->vout.at(0);\n+        int y{det_rand.randrange(100)};\n+        if (y < 35) {\n+            available_coins.coins[OutputType::LEGACY].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else if (y < 55) {\n+            available_coins.coins[OutputType::P2SH_SEGWIT].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else if (y < 90) {\n+            available_coins.coins[OutputType::BECH32].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else {\n+            available_coins.coins[OutputType::BECH32M].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        }\n+    }\n+\n+    std::vector<CAmount> targets;\n+    for (int i = 0; i < 100; ++i) {\n+        // 0.1â€“1 COIN\n+        targets.push_back(det_rand.randrange(90'000'000) + 10'000'000);\n+    }\n+\n+    // Allow actual randomness for selection\n+    FastRandomContext rand{};\n+    const CoinEligibilityFilter filter_standard(1, 6, 0);\n+    const CoinSelectionParams coin_selection_params{\n+        rand,\n+        /*change_output_size=*/ 31,\n+        /*change_spend_size=*/ 68,\n+        /*min_change_target=*/ CHANGE_LOWER,\n+        /*effective_feerate=*/ CFeeRate(20'000),\n+        /*long_term_feerate=*/ CFeeRate(10'000),\n+        /*discard_feerate=*/ CFeeRate(3000),\n+        /*tx_noinputs_size=*/ 72,\n+        /*avoid_partial=*/ false,\n+    };\n+    auto group = wallet::GroupOutputs(wallet, available_coins, coin_selection_params, {{filter_standard}})[filter_standard];\n+\n+    bench.run([&] {\n+        for (const auto& target : targets) {\n+            auto result = AttemptSelection(wallet.chain(), target, group, coin_selection_params, /*allow_mixed_output_types=*/true);",
      "path": "src/bench/coin_selection.cpp",
      "position": 101,
      "original_position": 101,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "original_commit_id": "76a4a4b86c9299ec1a9b365d7cbabefeb33c2598",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For the record, Knapsack and CoinsBnB are *really* slow (with debug build to avoid all the inlining), making this whole benchmark one of our heaviest - could we reduce some of the iterations?\r\n<img alt=\"image\" src=\"https://github.com/user-attachments/assets/6c3c59ef-3fad-4128-b1c8-ec4c40df1dcb\" />\r\n",
      "created_at": "2025-08-26T23:18:12Z",
      "updated_at": "2025-08-27T00:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#discussion_r2302358138",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302358138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 176,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302423958",
      "pull_request_review_id": 3157264436,
      "id": 2302423958,
      "node_id": "PRRC_kwDOABII586JPDOW",
      "diff_hunk": "@@ -99,6 +96,90 @@ static void CoinSelection(benchmark::Bench& bench)\n     });\n }\n \n+// This benchmark is based on a UTXO pool composed of 400 UTXOs. The UTXOs are\n+// pseudorandomly generated to be of the four relevant output types P2PKH,\n+// P2SH-P2WPKH, P2WPKH, and P2TR UTXOs, and fall in the range of 10'000 sats to\n+// 1â€¯â‚¿ with larger amounts being more likely.\n+// This UTXO pool is used to run coin selection for 100 pseudorandom selection\n+// targets from 0.1â€“2â€¯â‚¿. Altogether, this gives us a deterministic benchmark\n+// with a hopefully somewhat representative coin selection scenario.\n+static void CoinSelectionOnDiverseWallet(benchmark::Bench& bench)\n+{\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n+    CWallet wallet(chain.get(), \"\", CreateMockableWalletDatabase());\n+    std::vector<std::unique_ptr<CWalletTx>> wtxs;\n+    LOCK(wallet.cs_wallet);\n+\n+    // Use arbitrary static seed for generating a pseudorandom scenario\n+    uint256 arb_seed = uint256(\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\");\n+    FastRandomContext det_rand{arb_seed};\n+\n+    // Add coins.\n+    for (int i = 0; i < 400; ++i) {\n+        int x{det_rand.randrange(100)};\n+        if (x < 50) {\n+            // 0.0001â€“0.001 COIN\n+            addCoin(det_rand.randrange(90'000) + 10'000, wallet, wtxs);\n+        } else if (x < 75)  {\n+            // 0.001â€“0.01 COIN\n+            addCoin(det_rand.randrange(900'000) + 100'000, wallet, wtxs);\n+        } else if (x < 95) {\n+            // 0.01â€“0.1 COIN\n+            addCoin(det_rand.randrange(9'000'000) + 1'000'000, wallet, wtxs);\n+        } else {\n+            // 0.1â€“1 COIN\n+            addCoin(det_rand.randrange(90'000'000) + 10'000'000, wallet, wtxs);\n+        }\n+    }\n+\n+    // Create coins\n+    wallet::CoinsResult available_coins;\n+    for (const auto& wtx : wtxs) {\n+        const auto txout = wtx->tx->vout.at(0);\n+        int y{det_rand.randrange(100)};\n+        if (y < 35) {\n+            available_coins.coins[OutputType::LEGACY].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else if (y < 55) {\n+            available_coins.coins[OutputType::P2SH_SEGWIT].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else if (y < 90) {\n+            available_coins.coins[OutputType::BECH32].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        } else {\n+            available_coins.coins[OutputType::BECH32M].emplace_back(COutPoint(wtx->GetHash(), 0), txout, /*depth=*/6 * 24, CalculateMaximumSignedInputSize(txout, &wallet, /*coin_control=*/nullptr), /*spendable=*/true, /*solvable=*/true, /*safe=*/true, wtx->GetTxTime(), /*from_me=*/true, /*fees=*/ 0);\n+        }\n+    }\n+\n+    std::vector<CAmount> targets;\n+    for (int i = 0; i < 100; ++i) {\n+        // 0.1â€“1 COIN\n+        targets.push_back(det_rand.randrange(90'000'000) + 10'000'000);\n+    }\n+\n+    // Allow actual randomness for selection\n+    FastRandomContext rand{};\n+    const CoinEligibilityFilter filter_standard(1, 6, 0);\n+    const CoinSelectionParams coin_selection_params{\n+        rand,\n+        /*change_output_size=*/ 31,",
      "path": "src/bench/coin_selection.cpp",
      "position": 88,
      "original_position": 88,
      "commit_id": "2dfb6d5ebdb579f58244534835f027cd11187ae3",
      "original_commit_id": "76a4a4b86c9299ec1a9b365d7cbabefeb33c2598",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: let's unify the comment styles across the file",
      "created_at": "2025-08-26T23:56:41Z",
      "updated_at": "2025-08-27T00:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33160#discussion_r2302423958",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2302423958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33160"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 163,
      "original_line": 163,
      "side": "RIGHT"
    }
  ]
}