{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896",
    "id": 2647774764,
    "node_id": "PR_kwDOABII586d0dYs",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32896",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32896.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32896.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/5c087f58245cfba6b61691ece5387eccf8a1a5f9",
    "number": 32896,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "wallet, rpc: add v3 transaction creation and wallet support",
    "user": {
      "login": "ishaanam",
      "id": 75942586,
      "node_id": "MDQ6VXNlcjc1OTQyNTg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ishaanam",
      "html_url": "https://github.com/ishaanam",
      "followers_url": "https://api.github.com/users/ishaanam/followers",
      "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
      "organizations_url": "https://api.github.com/users/ishaanam/orgs",
      "repos_url": "https://api.github.com/users/ishaanam/repos",
      "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ishaanam/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This PR Implements the following:\r\n- If creating a v3 transaction, `AvailableCoins` doesn't return unconfirmed v2 utxos (and vice versa)\r\n- `AvailableCoins` doesn't return an unconfirmed v3 utxo if its transaction already has a child\r\n- If a v3 transaction is kicked out of the mempool by a sibling, mark the sibling as a mempool conflict\r\n- Throw an error if pre-selected inputs are of the wrong transaction version\r\n- Allow setting version to 3 manually in `createrawtransaction` (uses commits from #31936)\r\n- Limits a v3 transaction weight in coin selection\r\n\r\nCloses #31348\r\n\r\nTo-Do:\r\n- [x] Test a v3 sibling conflict kicking out one of our transactions from the mempool\r\n- [x] Implement separate size limit for TRUC children\r\n- [x] Test that we can't fund a v2 transaction when everything is v3 unconfirmed\r\n- [x] Test a v3 sibling conflict being removed from the mempool\r\n- [x] Test limiting v3 transaction weight in coin selection\r\n- [x] Simplify tests\r\n- [x] Add documentation \r\n- [x] Test that user-input max weight is not overwritten by truc max weight\r\n- [x] Test v3 in RPCs other than `createrawtransaction`",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      },
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/72",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/72",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/72/labels",
      "id": 12172984,
      "node_id": "MI_kwDOABII584Aub64",
      "number": 72,
      "state": "open",
      "title": "30.0",
      "description": "",
      "creator": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "open_issues": 12,
      "closed_issues": 49,
      "created_at": "2025-01-15T19:21:36Z",
      "updated_at": "2025-08-14T22:15:41Z"
    },
    "created_at": "2025-07-07T20:13:59Z",
    "updated_at": "2025-08-15T01:19:58Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "f2af737e36c143b493b58b1dc27f2a006910f866",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "ishaanam:wallet_v3_txs",
      "ref": "wallet_v3_txs",
      "sha": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 462046293,
        "node_id": "R_kgDOG4pEVQ",
        "name": "bitcoin",
        "full_name": "ishaanam/bitcoin",
        "owner": {
          "login": "ishaanam",
          "id": 75942586,
          "node_id": "MDQ6VXNlcjc1OTQyNTg2",
          "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ishaanam",
          "html_url": "https://github.com/ishaanam",
          "followers_url": "https://api.github.com/users/ishaanam/followers",
          "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
          "organizations_url": "https://api.github.com/users/ishaanam/orgs",
          "repos_url": "https://api.github.com/users/ishaanam/repos",
          "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ishaanam/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/ishaanam/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ishaanam/bitcoin",
        "archive_url": "https://api.github.com/repos/ishaanam/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ishaanam/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ishaanam/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ishaanam/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ishaanam/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ishaanam/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ishaanam/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ishaanam/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ishaanam/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ishaanam/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ishaanam/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ishaanam/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ishaanam/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ishaanam/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ishaanam/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ishaanam/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ishaanam/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ishaanam/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ishaanam/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ishaanam/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ishaanam/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ishaanam/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ishaanam/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ishaanam/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ishaanam/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ishaanam/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ishaanam/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ishaanam/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ishaanam/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ishaanam/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ishaanam/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ishaanam/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ishaanam/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ishaanam/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ishaanam/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ishaanam/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ishaanam/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ishaanam/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ishaanam/bitcoin/hooks",
        "svn_url": "https://github.com/ishaanam/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 279340,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-14T19:49:27Z",
        "created_at": "2022-02-21T22:03:42Z",
        "updated_at": "2025-08-01T17:43:07Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "dbf8b0980b93b7c6ca0e7ade7070523e3cf0bde2",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37631,
        "stargazers_count": 85024,
        "watchers_count": 85024,
        "size": 291183,
        "default_branch": "master",
        "open_issues_count": 754,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-14T22:15:40Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-08-15T01:50:09Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 830,
    "deletions": 32,
    "changed_files": 25,
    "commits": 12,
    "review_comments": 215,
    "comments": 13
  },
  "events": [
    {
      "event": "commented",
      "id": 3046400194,
      "node_id": "IC_kwDOABII5861lGDC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3046400194",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-07T20:14:04Z",
      "updated_at": "2025-08-15T01:19:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32896.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [glozow](https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3117314908), [w0xlt](https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3117871770), [rkrux](https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3120569826) |\n| Concept ACK | [murchandamus](https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3040093165) |\n| Stale ACK | [achow101](https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3102307964) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#33189](https://github.com/bitcoin/bitcoin/pull/33189) (rpc: followups for 33106 by glozow)\n* [#33106](https://github.com/bitcoin/bitcoin/pull/33106) (policy: lower the default blockmintxfee, incrementalrelayfee, minrelaytxfee by glozow)\n* [#32983](https://github.com/bitcoin/bitcoin/pull/32983) (rpc: refactor: use string_view in Arg/MaybeArg by stickies-v)\n* [#32857](https://github.com/bitcoin/bitcoin/pull/32857) (wallet: allow skipping script paths by Sjors)\n* [#32523](https://github.com/bitcoin/bitcoin/pull/32523) (wallet: Remove isminetypes by achow101)\n* [#28201](https://github.com/bitcoin/bitcoin/pull/28201) (Silent Payments: sending by josibake)\n* [#27865](https://github.com/bitcoin/bitcoin/pull/27865) (wallet: Track no-longer-spendable TXOs separately by achow101)\n* [#21283](https://github.com/bitcoin/bitcoin/pull/21283) (Implement BIP 370 PSBTv2 by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3046400194",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18512237200,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARPalKQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18512237200",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0b5416122a8e2014e96767a9ccd269bcb714aa02",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/0b5416122a8e2014e96767a9ccd269bcb714aa02",
      "created_at": "2025-07-07T20:18:56Z"
    },
    {
      "event": "labeled",
      "id": 18512240505,
      "node_id": "LE_lADOABII586_VswkzwAAAARPal95",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18512240505",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-07T20:19:12Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3046411869,
      "node_id": "IC_kwDOABII5861lI5d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3046411869",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-07T20:19:15Z",
      "updated_at": "2025-07-07T20:19:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `lint`: https://github.com/bitcoin/bitcoin/runs/45505893140</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a lint error due to a file permission issue with a Python script that has a shebang line but incorrect executable permissions.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3046411869",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18528888651,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARQaGdL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18528888651",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/75d606c5648f8d679e69f1daa795e0ba1b624794",
      "created_at": "2025-07-08T15:18:36Z"
    },
    {
      "event": "reviewed",
      "id": 2998494185,
      "node_id": "PRR_kwDOABII586yuWPp",
      "url": null,
      "actor": null,
      "commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-08T17:41:51Z",
      "author_association": "MEMBER",
      "body": "Nice, concept ACK! Saw that these tests fail on #31936, which is helpful for showing its issues. Ultimately, I think the wallet commits should be introduced before the RPC ones.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-2998494185",
      "submitted_at": "2025-07-08T17:41:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18532637896,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARQoZzI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18532637896",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e8a200e5e4812f14d9c098c27cca9efa02122761",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/e8a200e5e4812f14d9c098c27cca9efa02122761",
      "created_at": "2025-07-08T19:21:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18532941546,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARQpj7q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18532941546",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0d3a7677a706a60b6eed64f46a0039193c79830d",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/0d3a7677a706a60b6eed64f46a0039193c79830d",
      "created_at": "2025-07-08T19:44:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18533916982,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARQtSE2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18533916982",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7fdff3ff7c3814a78eb931ccfdf3e19b5592c563",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/7fdff3ff7c3814a78eb931ccfdf3e19b5592c563",
      "created_at": "2025-07-08T21:02:57Z"
    },
    {
      "event": "reviewed",
      "id": 3000189728,
      "node_id": "PRR_kwDOABII586y00Mg",
      "url": null,
      "actor": null,
      "commit_id": "7fdff3ff7c3814a78eb931ccfdf3e19b5592c563",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-09T06:27:12Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3000189728",
      "submitted_at": "2025-07-09T06:27:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18552468458,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARR0DPq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18552468458",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5b0e65423b0bad9d792ae2a921e1faab58d0a534",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/5b0e65423b0bad9d792ae2a921e1faab58d0a534",
      "created_at": "2025-07-09T19:38:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18552767443,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARR1MPT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18552767443",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0188a16a6d0af103b9328651d82d23539405d4aa",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/0188a16a6d0af103b9328651d82d23539405d4aa",
      "created_at": "2025-07-09T20:01:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18553103414,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARR2eQ2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18553103414",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "012ccc025d3e6a81b88e6fa1299a3b2622659662",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/012ccc025d3e6a81b88e6fa1299a3b2622659662",
      "created_at": "2025-07-09T20:27:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18570900242,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARS6XMS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18570900242",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2fef28ede4b6794241cd0e7079d05008f9fd54de",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/2fef28ede4b6794241cd0e7079d05008f9fd54de",
      "created_at": "2025-07-10T17:55:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18571903008,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARS-MAg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18571903008",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c6cb62e8d2e2e6010b0ba16e02ee0e3428e5f885",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/c6cb62e8d2e2e6010b0ba16e02ee0e3428e5f885",
      "created_at": "2025-07-10T19:03:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18573620788,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARTEvY0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18573620788",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7ded135089b8247f0e251318e3961df0e95ac0f4",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/7ded135089b8247f0e251318e3961df0e95ac0f4",
      "created_at": "2025-07-10T20:54:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18609280354,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARVMxVi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18609280354",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eee86957be47eca367de43858e81da15b9e352e0",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/eee86957be47eca367de43858e81da15b9e352e0",
      "created_at": "2025-07-14T03:34:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18618968043,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARVxufr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18618968043",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ca97f19d64c6c6d98cec6117272a3334f8f4d785",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/ca97f19d64c6c6d98cec6117272a3334f8f4d785",
      "created_at": "2025-07-14T14:05:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18619724364,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARV0nJM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18619724364",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "created_at": "2025-07-14T14:45:04Z"
    },
    {
      "event": "ready_for_review",
      "id": 18619733414,
      "node_id": "RFRE_lADOABII586_VswkzwAAAARV0pWm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18619733414",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T14:45:32Z"
    },
    {
      "event": "commented",
      "id": 3069883620,
      "node_id": "IC_kwDOABII5862-rTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3069883620",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T14:46:42Z",
      "updated_at": "2025-07-14T14:46:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "This PR is now ready for review.",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3069883620",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "labeled",
      "id": 18623246336,
      "node_id": "LE_lADOABII586_VswkzwAAAARWCDAA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18623246336",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T18:12:06Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "labeled",
      "id": 18623246346,
      "node_id": "LE_lADOABII586_VswkzwAAAARWCDAK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18623246346",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T18:12:06Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "unlabeled",
      "id": 18623919498,
      "node_id": "UNLE_lADOABII586_VswkzwAAAARWEnWK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18623919498",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T18:56:18Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3020910288,
      "node_id": "PRR_kwDOABII5860D27Q",
      "url": null,
      "actor": null,
      "commit_id": "b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-15T15:17:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK b3817a822054fb2ea2964535b5a0ee55dd5d55ac\r\nThanks for picking this up, I will try to review it soon.\r\n\r\nThe TODOs seem to be done and can be removed from the PR description.",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3020910288",
      "submitted_at": "2025-07-15T15:17:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "reviewed",
      "id": 3021245623,
      "node_id": "PRR_kwDOABII5860FIy3",
      "url": null,
      "actor": null,
      "commit_id": "b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-15T16:47:11Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3021245623",
      "submitted_at": "2025-07-15T16:47:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18646282030,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARXZ68u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18646282030",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "657d153c26c2491e6e04ba135e7ac22658a0c110",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/657d153c26c2491e6e04ba135e7ac22658a0c110",
      "created_at": "2025-07-15T20:27:37Z"
    },
    {
      "event": "labeled",
      "id": 18648359471,
      "node_id": "LE_lADOABII586_VswkzwAAAARXh2Iv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18648359471",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-15T23:39:29Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3076074331,
      "node_id": "IC_kwDOABII5863WStb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3076074331",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-15T23:39:31Z",
      "updated_at": "2025-07-15T23:39:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `macOS-cross, gui, no tests`: https://github.com/bitcoin/bitcoin/runs/46044194546</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a linker error due to an undefined symbol in RPCHelpMan.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3076074331",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "reviewed",
      "id": 3023385092,
      "node_id": "PRR_kwDOABII5860NTIE",
      "url": null,
      "actor": null,
      "commit_id": "657d153c26c2491e6e04ba135e7ac22658a0c110",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-16T06:41:47Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3023385092",
      "submitted_at": "2025-07-16T06:41:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18660520039,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARYQPBn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18660520039",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "827fdc4904d8dd33609e7042ecf2c5429a23690f",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/827fdc4904d8dd33609e7042ecf2c5429a23690f",
      "created_at": "2025-07-16T14:13:52Z"
    },
    {
      "event": "unlabeled",
      "id": 18663734437,
      "node_id": "UNLE_lADOABII586_VswkzwAAAARYcfyl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18663734437",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-16T16:53:55Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3026497105,
      "node_id": "PRR_kwDOABII5860ZK5R",
      "url": null,
      "actor": null,
      "commit_id": "827fdc4904d8dd33609e7042ecf2c5429a23690f",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-16T20:06:27Z",
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3026497105",
      "submitted_at": "2025-07-16T20:06:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18684732384,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARZsmPg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18684732384",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3122ca2128d8a1856103e299a470133efbe16ef9",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/3122ca2128d8a1856103e299a470133efbe16ef9",
      "created_at": "2025-07-17T17:23:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18684838434,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARZtAIi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18684838434",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5958bd194a9167fd31f75eb49086a6ac484d06f6",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/5958bd194a9167fd31f75eb49086a6ac484d06f6",
      "created_at": "2025-07-17T17:30:22Z"
    },
    {
      "event": "labeled",
      "id": 18684840828,
      "node_id": "LE_lADOABII586_VswkzwAAAARZtAt8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18684840828",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-17T17:30:32Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3084879554,
      "node_id": "IC_kwDOABII586334bC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3084879554",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-17T17:30:33Z",
      "updated_at": "2025-07-17T17:30:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `lint`: https://github.com/bitcoin/bitcoin/runs/46200015717</sub>\n<sub>LLM reason (✨ experimental): The failure is caused by lint errors detected by `ruff` due to unused imports in Python files.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3084879554",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18684993989,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARZtmHF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18684993989",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "083886e2c00b0e811348bda5854979d6a0482f91",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/083886e2c00b0e811348bda5854979d6a0482f91",
      "created_at": "2025-07-17T17:41:03Z"
    },
    {
      "event": "commented",
      "id": 3084977883,
      "node_id": "IC_kwDOABII58634Qbb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3084977883",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-17T18:08:04Z",
      "updated_at": "2025-07-17T18:08:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the review @glozow! I've addressed your comments and also refactored a few of the functional tests.",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3084977883",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "mentioned",
      "id": 18685378738,
      "node_id": "MEE_lADOABII586_VswkzwAAAARZvECy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18685378738",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-17T18:08:05Z"
    },
    {
      "event": "subscribed",
      "id": 18685378754,
      "node_id": "SE_lADOABII586_VswkzwAAAARZvEDC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18685378754",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-17T18:08:05Z"
    },
    {
      "event": "unlabeled",
      "id": 18687298672,
      "node_id": "UNLE_lADOABII586_VswkzwAAAARZ2Yxw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18687298672",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-17T20:19:52Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 18707713468,
      "node_id": "LE_lADOABII586_VswkzwAAAARbEQ28",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18707713468",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-18T21:43:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18731100487,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARcdelH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18731100487",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "created_at": "2025-07-21T15:00:36Z"
    },
    {
      "event": "unlabeled",
      "id": 18731493846,
      "node_id": "UNLE_lADOABII586_VswkzwAAAARce-nW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18731493846",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-21T15:20:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3040093165,
      "node_id": "PRR_kwDOABII5861NCPt",
      "url": null,
      "actor": null,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-21T23:16:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3040093165",
      "submitted_at": "2025-07-21T23:16:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18777563488,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARfOuFg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18777563488",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5f3dbfe17cde2d17e515bffcd99d2a8260b5c981",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/5f3dbfe17cde2d17e515bffcd99d2a8260b5c981",
      "created_at": "2025-07-23T15:43:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18777641202,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARfPBDy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18777641202",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ddad6af1319084104961ae28af0e91cc126edb09",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/ddad6af1319084104961ae28af0e91cc126edb09",
      "created_at": "2025-07-23T15:47:04Z"
    },
    {
      "event": "labeled",
      "id": 18777655081,
      "node_id": "LE_lADOABII586_VswkzwAAAARfPEcp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18777655081",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-23T15:47:44Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3109193463,
      "node_id": "IC_kwDOABII5865Uob3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3109193463",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-23T15:47:46Z",
      "updated_at": "2025-07-23T15:47:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `lint`: https://github.com/bitcoin/bitcoin/runs/46575305874</sub>\n<sub>LLM reason (✨ experimental): Lint errors caused by f-string syntax issues caused the CI failure.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3109193463",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18777777961,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARfPicp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18777777961",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "208bc42a2ff0ebd07c1301c5102a28d99c38a6a1",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/208bc42a2ff0ebd07c1301c5102a28d99c38a6a1",
      "created_at": "2025-07-23T15:52:46Z"
    },
    {
      "event": "reviewed",
      "id": 3048555517,
      "node_id": "PRR_kwDOABII5861tUP9",
      "url": null,
      "actor": null,
      "commit_id": "208bc42a2ff0ebd07c1301c5102a28d99c38a6a1",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-23T18:39:06Z",
      "author_association": "MEMBER",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3048555517",
      "submitted_at": "2025-07-23T18:39:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "unlabeled",
      "id": 18780590163,
      "node_id": "UNLE_lADOABII586_VswkzwAAAARfaRBT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18780590163",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-23T18:43:36Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3051854806,
      "node_id": "PRR_kwDOABII586155vW",
      "url": null,
      "actor": null,
      "commit_id": "208bc42a2ff0ebd07c1301c5102a28d99c38a6a1",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-24T15:14:28Z",
      "author_association": "MEMBER",
      "body": "Looks pretty good! Generally, I prefer more detailed comments when the code is not 100% self-explanatory, particularly for the confusing areas like mempool conflicts",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3051854806",
      "submitted_at": "2025-07-24T15:14:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18862090497,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARkRKkB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18862090497",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "78a4989908b9b62a11446b4f97ab340b5f99679b",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/78a4989908b9b62a11446b4f97ab340b5f99679b",
      "created_at": "2025-07-28T18:11:44Z"
    },
    {
      "event": "commented",
      "id": 3128453950,
      "node_id": "IC_kwDOABII5866eGs-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3128453950",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-28T18:23:18Z",
      "updated_at": "2025-07-28T18:23:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the feedback @glozow and @achow101! I'm converting this to a draft while I work on some additional test cases, but otherwise the code is ready for review.",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3128453950",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "mentioned",
      "id": 18862281483,
      "node_id": "MEE_lADOABII586_VswkzwAAAARkR5ML",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18862281483",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-28T18:23:20Z"
    },
    {
      "event": "subscribed",
      "id": 18862281503,
      "node_id": "SE_lADOABII586_VswkzwAAAARkR5Mf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18862281503",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-28T18:23:20Z"
    },
    {
      "event": "mentioned",
      "id": 18862281530,
      "node_id": "MEE_lADOABII586_VswkzwAAAARkR5M6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18862281530",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-28T18:23:20Z"
    },
    {
      "event": "subscribed",
      "id": 18862281562,
      "node_id": "SE_lADOABII586_VswkzwAAAARkR5Na",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18862281562",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-28T18:23:20Z"
    },
    {
      "event": "convert_to_draft",
      "id": 18862285066,
      "node_id": "CTDE_lADOABII586_VswkzwAAAARkR6EK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18862285066",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-28T18:23:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18902209959,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARmqNWn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18902209959",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4a74a612410981336f6cfb7e1701b978af2f762d",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/4a74a612410981336f6cfb7e1701b978af2f762d",
      "created_at": "2025-07-30T15:35:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18902880846,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARmsxJO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18902880846",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a2c43c3b9447377d2f2635e23c9043e40b769dd4",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/a2c43c3b9447377d2f2635e23c9043e40b769dd4",
      "created_at": "2025-07-30T16:09:54Z"
    },
    {
      "event": "labeled",
      "id": 18902884259,
      "node_id": "LE_lADOABII586_VswkzwAAAARmsx-j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18902884259",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-30T16:10:06Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "ready_for_review",
      "id": 18902895677,
      "node_id": "RFRE_lADOABII586_VswkzwAAAARms0w9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18902895677",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-30T16:10:42Z"
    },
    {
      "event": "commented",
      "id": 3136976112,
      "node_id": "IC_kwDOABII5866-nTw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3136976112",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-30T16:11:11Z",
      "updated_at": "2025-07-30T16:11:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "I have added more tests and this PR is ready for review.",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3136976112",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "milestoned",
      "id": 18903684666,
      "node_id": "MIE_lADOABII586_VswkzwAAAARmv1Y6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18903684666",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-30T16:53:05Z",
      "milestone": {
        "title": "30.0"
      }
    },
    {
      "event": "unlabeled",
      "id": 18905824161,
      "node_id": "UNLE_lADOABII586_VswkzwAAAARm3_uh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18905824161",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-30T18:56:05Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3080238325,
      "node_id": "PRR_kwDOABII5863mLT1",
      "url": null,
      "actor": null,
      "commit_id": "a2c43c3b9447377d2f2635e23c9043e40b769dd4",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-01T19:38:39Z",
      "author_association": "MEMBER",
      "body": "a2c43c3b9447377d2f2635e23c9043e40b769dd4 looks pretty good to me! Minor comments mostly about docs",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3080238325",
      "submitted_at": "2025-08-01T19:38:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFmYmY2YzFkOTAwNjA1OWI3ZTZkNGUwNDM3NTZhYjQyOTliNDgwZWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afbf6c1d9006059b7e6d4e043756ab4299b480ed",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/afbf6c1d9006059b7e6d4e043756ab4299b480ed",
      "tree": {
        "sha": "6d86688886ad99533204e90247540957a434610b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d86688886ad99533204e90247540957a434610b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11c6a864c9ee3a9bbd65720517fd22c155fd9060",
          "sha": "11c6a864c9ee3a9bbd65720517fd22c155fd9060",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/11c6a864c9ee3a9bbd65720517fd22c155fd9060"
        }
      ],
      "message": "wallet: unconfirmed ancestors and descendants are always truc",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-04T14:11:49Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-02T19:56:28Z"
      },
      "sha": "afbf6c1d9006059b7e6d4e043756ab4299b480ed"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18973246095,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARq5MKP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18973246095",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0563fc12633a20bd4be04a52f3ee6568ec772caa",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/0563fc12633a20bd4be04a52f3ee6568ec772caa",
      "created_at": "2025-08-04T15:25:19Z"
    },
    {
      "event": "labeled",
      "id": 18975466336,
      "node_id": "LE_lADOABII586_VswkzwAAAARrBqNg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18975466336",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-04T17:32:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3085782791,
      "node_id": "PRR_kwDOABII58637U8H",
      "url": null,
      "actor": null,
      "commit_id": "0563fc12633a20bd4be04a52f3ee6568ec772caa",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-04T22:40:42Z",
      "author_association": "MEMBER",
      "body": "I think `sendall` is missing the weight check if the transaction is truc.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3085782791",
      "submitted_at": "2025-08-04T22:40:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "reviewed",
      "id": 3086959554,
      "node_id": "PRR_kwDOABII5863_0PC",
      "url": null,
      "actor": null,
      "commit_id": "0563fc12633a20bd4be04a52f3ee6568ec772caa",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-05T07:34:38Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3086959554",
      "submitted_at": "2025-08-05T07:34:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFjZTNjMDZkNDQxZmEzNTBiNmFjNGI5NjNiOTg1YWExM2FiMjQ5ZDM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ce3c06d441fa350b6ac4b963b985aa13ab249d3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1ce3c06d441fa350b6ac4b963b985aa13ab249d3",
      "tree": {
        "sha": "461131415bc740085fd9c90a02066c2cb4424f5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/461131415bc740085fd9c90a02066c2cb4424f5c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afbf6c1d9006059b7e6d4e043756ab4299b480ed",
          "sha": "afbf6c1d9006059b7e6d4e043756ab4299b480ed",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/afbf6c1d9006059b7e6d4e043756ab4299b480ed"
        }
      ],
      "message": " wallet: don't include unconfirmed v3 txs with children in available coins",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-05T14:25:34Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-08T19:09:16Z"
      },
      "sha": "1ce3c06d441fa350b6ac4b963b985aa13ab249d3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY2OGYwOWU3MDFkNjVhMGY0ODgzN2RiYTA0YjVjNGNiZTI3ZjQxYzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f68f09e701d65a0f48837dba04b5c4cbe27f41c1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f68f09e701d65a0f48837dba04b5c4cbe27f41c1",
      "tree": {
        "sha": "888b8841c6511903ce23051bb282a25d2489c0e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/888b8841c6511903ce23051bb282a25d2489c0e2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ce3c06d441fa350b6ac4b963b985aa13ab249d3",
          "sha": "1ce3c06d441fa350b6ac4b963b985aa13ab249d3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1ce3c06d441fa350b6ac4b963b985aa13ab249d3"
        }
      ],
      "message": "wallet: set m_version in coin control to default value\n\nIn future commits we assume that coin_control.m_version has a\nvalue when making sure that we follow truc rules, so we should\ngive it a default value of CTransaction::CURRENT_VERSION.",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-05T14:25:55Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-23T14:36:38Z"
      },
      "sha": "f68f09e701d65a0f48837dba04b5c4cbe27f41c1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYzYWJhMzM3MzJlYjQ2MDM2MjRkMmQ2ZjYyMGI3ZjllM2JlMjRkM2I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3aba33732eb4603624d2d6f620b7f9e3be24d3b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f3aba33732eb4603624d2d6f620b7f9e3be24d3b",
      "tree": {
        "sha": "0085008dafa992ebfe7315c61182f507f798ff85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0085008dafa992ebfe7315c61182f507f798ff85"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f68f09e701d65a0f48837dba04b5c4cbe27f41c1",
          "sha": "f68f09e701d65a0f48837dba04b5c4cbe27f41c1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f68f09e701d65a0f48837dba04b5c4cbe27f41c1"
        }
      ],
      "message": "wallet: throw error at conflicting tx versions in pre-selected inputs",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-05T14:26:03Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-08T19:10:00Z"
      },
      "sha": "f3aba33732eb4603624d2d6f620b7f9e3be24d3b"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18998491638,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARsZfn2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18998491638",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b3f0698963dd9dfc3e387c5b0436837d0775f401",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/b3f0698963dd9dfc3e387c5b0436837d0775f401",
      "created_at": "2025-08-05T19:33:00Z"
    },
    {
      "event": "commented",
      "id": 3156414008,
      "node_id": "IC_kwDOABII5868Iw44",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3156414008",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-05T19:46:23Z",
      "updated_at": "2025-08-05T19:46:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "@achow101 thanks for the review!\r\n> I think sendall is missing the weight check if the transaction is truc.\r\n\r\nI've added the weight check in sendall for truc txs (including those spending unconfirmed truc children) and I have added two additional test cases for this.",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3156414008",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "mentioned",
      "id": 18998692467,
      "node_id": "MEE_lADOABII586_VswkzwAAAARsaQpz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18998692467",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-05T19:46:24Z"
    },
    {
      "event": "subscribed",
      "id": 18998692499,
      "node_id": "SE_lADOABII586_VswkzwAAAARsaQqT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18998692499",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-05T19:46:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18998931939,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARsbLHj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18998931939",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c494594a7b2a06243e6977038f2ffa601506795b",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/c494594a7b2a06243e6977038f2ffa601506795b",
      "created_at": "2025-08-05T20:02:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18999854844,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARsesb8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18999854844",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/43a479ca6885b4222fb5e0f673354e54144d6835",
      "created_at": "2025-08-05T21:01:39Z"
    },
    {
      "event": "reviewed",
      "id": 3089833442,
      "node_id": "PRR_kwDOABII5864Kx3i",
      "url": null,
      "actor": null,
      "commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-05T21:55:17Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3089833442",
      "submitted_at": "2025-08-05T21:55:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "unlabeled",
      "id": 19001153997,
      "node_id": "UNLE_lADOABII586_VswkzwAAAARsjpnN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19001153997",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-05T22:55:15Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3093839590,
      "node_id": "PRR_kwDOABII5864aD7m",
      "url": null,
      "actor": null,
      "commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-06T19:50:10Z",
      "author_association": "MEMBER",
      "body": "ACK 43a479ca688, only minor nits",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3093839590",
      "submitted_at": "2025-08-06T19:50:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "review_requested",
      "id": 19020337803,
      "node_id": "RRE_lADOABII586_VswkzwAAAARts1KL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19020337803",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-06T19:50:16Z",
      "requested_reviewer": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 19020337970,
      "node_id": "RRE_lADOABII586_VswkzwAAAARts1My",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19020337970",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-06T19:50:16Z",
      "requested_reviewer": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3094356552,
      "node_id": "PRR_kwDOABII5864cCJI",
      "url": null,
      "actor": null,
      "commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-06T21:24:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/32896/commits/43a479ca6885b4222fb5e0f673354e54144d6835",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3094356552",
      "submitted_at": "2025-08-06T21:24:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19057123686,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARv5KFm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19057123686",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "013cbf7eda2a3c643668b467cdbeb37027044b3a",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/013cbf7eda2a3c643668b467cdbeb37027044b3a",
      "created_at": "2025-08-08T15:03:39Z"
    },
    {
      "event": "reviewed",
      "id": 3101828622,
      "node_id": "PRR_kwDOABII58644iYO",
      "url": null,
      "actor": null,
      "commit_id": "013cbf7eda2a3c643668b467cdbeb37027044b3a",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-08T18:30:26Z",
      "author_association": "MEMBER",
      "body": "reACK 013cbf7eda2\r\n\r\nChanges were braced initialization, docs/rename nits, and changing `sendall_with_unconfirmed_v3` to choose UTXOs explicitly so we can assert what's spent at the end.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3101828622",
      "submitted_at": "2025-08-08T18:30:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "review_requested",
      "id": 19060289548,
      "node_id": "RRE_lADOABII586_VswkzwAAAARwFPAM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19060289548",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-08T18:30:33Z",
      "requested_reviewer": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3102307964,
      "node_id": "PRR_kwDOABII58646XZ8",
      "url": null,
      "actor": null,
      "commit_id": "013cbf7eda2a3c643668b467cdbeb37027044b3a",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-08T23:40:39Z",
      "author_association": "MEMBER",
      "body": "ACK 013cbf7eda2a3c643668b467cdbeb37027044b3a",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3102307964",
      "submitted_at": "2025-08-08T23:40:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "reviewed",
      "id": 3108170201,
      "node_id": "PRR_kwDOABII5865QunZ",
      "url": null,
      "actor": null,
      "commit_id": "013cbf7eda2a3c643668b467cdbeb37027044b3a",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-12T00:45:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/32896/commits/013cbf7eda2a3c643668b467cdbeb37027044b3a\r\n\r\nTRUC rules implemented:  \r\n\r\n| Rules | Commits |\r\n|---|:---:|\r\n| 1. A TRUC tx must only have TRUC unconfirmed ancestors | afbf6c1, f3aba33 |\r\n| 2. A non‑TRUC tx must only have non‑TRUC unconfirmed ancestors | afbf6c1; f3aba33 |\r\n| 3. A TRUC’s ancestor set (incl. itself) must be within `TRUC_ANCESTOR_LIMIT` | Enforced by mempool/TRUC policy (outside this PR) |\r\n| 4. A TRUC’s descendant set (incl. itself) must be within TRUC_DESCENDANT_LIMIT | 1ce3c06, 9921f22 |\r\n| 5. If a TRUC tx has any unconfirmed ancestors, the tx’s sigop‑adjusted vsize must be ≤ TRUC_CHILD_MAX_VSIZE | eca8f1f | \r\n| 6. A TRUC tx must be ≤ TRUC_MAX_VSIZE | eca8f1f |\r\n\r\nAll of these rules (except the third one) are included in the added test file.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3108170201",
      "submitted_at": "2025-08-12T00:45:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "reviewed",
      "id": 3109773868,
      "node_id": "PRR_kwDOABII5865W2Is",
      "url": null,
      "actor": null,
      "commit_id": "013cbf7eda2a3c643668b467cdbeb37027044b3a",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-12T12:34:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "Looking good, code review 013cbf7eda2a3c643668b467cdbeb37027044b3a\r\n\r\nI have shared few suggestions, all are minor I believe.",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3109773868",
      "submitted_at": "2025-08-12T12:34:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "review_requested",
      "id": 19111522145,
      "node_id": "RRE_lADOABII586_VswkzwAAAARzIq9h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19111522145",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T12:34:59Z",
      "requested_reviewer": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 3179360407,
      "node_id": "IC_kwDOABII5869gTCX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3179360407",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T13:32:07Z",
      "updated_at": "2025-08-12T13:32:07Z",
      "author_association": "MEMBER",
      "body": "> 3. A TRUC’s ancestor set (incl. itself) must be within TRUC_ANCESTOR_LIMIT\r\n\r\n> All of these rules (except the third one) are included in the added test file.\r\n\r\nAh true, the wallet should never select multiple unconfirmed TRUC outputs. We can test this by having 2 unconfirmed TRUC outputs to spend, neither able to fund the transaction fully, and checking you get \"insufficient funds.\"",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3179360407",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "reviewed",
      "id": 3111401611,
      "node_id": "PRR_kwDOABII5865dDiL",
      "url": null,
      "actor": null,
      "commit_id": "eca8f1f5ef89259edd61b92b5cf8aa9761af486f",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-12T15:25:13Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3111401611",
      "submitted_at": "2025-08-12T15:25:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "review_requested",
      "id": 19115595208,
      "node_id": "RRE_lADOABII586_VswkzwAAAARzYNXI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19115595208",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T15:25:19Z",
      "requested_reviewer": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3112118543,
      "node_id": "PRR_kwDOABII5865fykP",
      "url": null,
      "actor": null,
      "commit_id": "013cbf7eda2a3c643668b467cdbeb37027044b3a",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-12T18:05:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "There's repeated logic for iterating through parent outputs and updating sibling transaction states in both `transactionAddedToMempool` and `transactionRemovedFromMempool`.\r\n\r\nThe below patch can improve this, using the same patter in both functions. If the logic for handling TRUC sibling conflicts needs to be changed in the future, it only needs to be updated in one place.\r\n\r\n```diff\r\ndiff --git a/src/wallet/wallet.cpp b/src/wallet/wallet.cpp\r\nindex 28a646ef4b..c8e5e3a8e8 100644\r\n--- a/src/wallet/wallet.cpp\r\n+++ b/src/wallet/wallet.cpp\r\n@@ -1374,6 +1374,23 @@ bool CWallet::TransactionCanBeAbandoned(const Txid& hashTx) const\r\n     return wtx && !wtx->isAbandoned() && GetTxDepthInMainChain(*wtx) == 0 && !wtx->InMempool();\r\n }\r\n \r\n+void CWallet::UpdateTrucSiblingConflicts(const CWalletTx& parent_wtx, const Txid& child_txid, bool add_conflict)\r\n+{\r\n+    AssertLockHeld(cs_wallet);\r\n+    // Find all other txs in our wallet that spend utxos from this parent\r\n+    // so that we can mark/unmark them as mempool-conflicted by this tx.\r\n+    for (size_t i = 0; i < parent_wtx.tx->vout.size(); i++) {\r\n+        for (auto range = mapTxSpends.equal_range(COutPoint(parent_wtx.tx->GetHash(), i)); range.first != range.second; range.first++) {\r\n+            const Txid& sibling_txid = range.first->second;\r\n+            // Skip the child tx itself\r\n+            if (sibling_txid == child_txid) continue;\r\n+            RecursiveUpdateTxState(/*batch=*/nullptr, sibling_txid, [&child_txid, add_conflict](CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) {\r\n+                return add_conflict ? (wtx.mempool_conflicts.insert(child_txid).second ? TxUpdate::CHANGED : TxUpdate::UNCHANGED)\r\n+                                    : (wtx.mempool_conflicts.erase(child_txid) ? TxUpdate::CHANGED : TxUpdate::UNCHANGED);\r\n+            });\r\n+        }\r\n+    }\r\n+}\r\n+\r\n void CWallet::MarkInputsDirty(const CTransactionRef& tx)\r\n {\r\n     for (const CTxIn& txin : tx->vin) {\r\n@@ -1407,20 +1424,10 @@ void CWallet::transactionAddedToMempool(const CTransactionRef& tx) {\r\n                 CWalletTx& parent_wtx = parent_it->second;\r\n                 if (parent_wtx.isUnconfirmed()) {\r\n                     parent_wtx.truc_child_in_mempool = tx->GetHash();\r\n-                    // Find all other txs in our wallet that spend utxos from this parent\r\n-                    // so that we can mark them as mempool-conflicted by this new tx.\r\n                     // Even though these siblings do not spend the same utxos, they can't\r\n                     // be present in the mempool at the same time because of TRUC policy rules\r\n-                    for (long unsigned int i = 0; i < parent_wtx.tx->vout.size(); i++) {\r\n-                        for (auto range = mapTxSpends.equal_range(COutPoint(parent_wtx.tx->GetHash(), i)); range.first != range.second; range.first++) {\r\n-                            const Txid& sibling_txid = range.first->second;\r\n-                            // Skip the recently added tx\r\n-                            if (sibling_txid == txid) continue;\r\n-                            RecursiveUpdateTxState(/*batch=*/nullptr, sibling_txid, [&txid](CWalletTx& parent_wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) {\r\n-                                return parent_wtx.mempool_conflicts.insert(txid).second ? TxUpdate::CHANGED : TxUpdate::UNCHANGED;\r\n-                            });\r\n-                        }\r\n-                    }\r\n+                    UpdateTrucSiblingConflicts(parent_wtx, txid, /*add_conflict=*/true);\r\n                 }\r\n             }\r\n         }\r\n@@ -1489,15 +1496,7 @@ void CWallet::transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRe\r\n                 CWalletTx& parent_wtx = parent_it->second;\r\n                 if (parent_wtx.truc_child_in_mempool == tx->GetHash()) {\r\n                     parent_wtx.truc_child_in_mempool = std::nullopt;\r\n-                    // Find all wallet transactions that spend utxos from the same parent_wtx\r\n-                    for (long unsigned int i = 0; i < parent_wtx.tx->vout.size(); i++) {\r\n-                        for (auto range = mapTxSpends.equal_range(COutPoint(parent_wtx.tx->GetHash(), i)); range.first != range.second; range.first++) {\r\n-                            const Txid& spent_id = range.first->second;\r\n-                            RecursiveUpdateTxState(/*batch=*/nullptr, spent_id, [&txid](CWalletTx& parent_wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) {\r\n-                                return parent_wtx.mempool_conflicts.erase(txid) ? TxUpdate::CHANGED : TxUpdate::UNCHANGED;\r\n-                            });\r\n-                        }\r\n-                    }\r\n+                    UpdateTrucSiblingConflicts(parent_wtx, txid, /*add_conflict=*/false);\r\n                 }\r\n             }\r\n         }\r\ndiff --git a/src/wallet/wallet.h b/src/wallet/wallet.h\r\nindex e056b68182..1e3a1e0e48 100644\r\n--- a/src/wallet/wallet.h\r\n+++ b/src/wallet/wallet.h\r\n@@ -598,6 +598,9 @@ private:\r\n     //! Cache of descriptor ScriptPubKeys used for IsMine. Maps ScriptPubKey to set of spkms\r\n     std::unordered_map<CScript, std::vector<ScriptPubKeyMan*>, SaltedSipHasher> m_cached_spks;\r\n \r\n+    //! Update mempool conflicts for TRUC sibling transactions\r\n+    void UpdateTrucSiblingConflicts(const CWalletTx& parent_wtx, const Txid& child_txid, bool add_conflict) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\r\n+\r\n public:\r\n     /*\r\n      * Main wallet lock.\r\n```\r\n\r\n",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3112118543",
      "submitted_at": "2025-08-12T18:05:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19120843725,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARzsOvN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19120843725",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "025692c4cf392bbd126c0cf77d47101c3a5ae5bf",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/025692c4cf392bbd126c0cf77d47101c3a5ae5bf",
      "created_at": "2025-08-12T19:41:09Z"
    },
    {
      "event": "reviewed",
      "id": 3112595853,
      "node_id": "PRR_kwDOABII5865hnGN",
      "url": null,
      "actor": null,
      "commit_id": "025692c4cf392bbd126c0cf77d47101c3a5ae5bf",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-12T20:06:37Z",
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3112595853",
      "submitted_at": "2025-08-12T20:06:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19121803326,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARzv5A-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19121803326",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "17649b183be5afc945af0ed3352c2b0c3158622a",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/17649b183be5afc945af0ed3352c2b0c3158622a",
      "created_at": "2025-08-12T20:22:52Z"
    },
    {
      "event": "labeled",
      "id": 19121807304,
      "node_id": "LE_lADOABII586_VswkzwAAAARzv5_I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19121807304",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T20:23:03Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3180909392,
      "node_id": "IC_kwDOABII5869mNNQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3180909392",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T20:23:05Z",
      "updated_at": "2025-08-12T20:23:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `lint`: https://github.com/bitcoin/bitcoin/runs/47940439625</sub>\n<sub>LLM reason (✨ experimental): Linting errors caused the CI failure.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3180909392",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19121923782,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARzwWbG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19121923782",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e4d3c9e8df5942327e98bbcaead4123de350dfac",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/e4d3c9e8df5942327e98bbcaead4123de350dfac",
      "created_at": "2025-08-12T20:28:01Z"
    },
    {
      "event": "unlabeled",
      "id": 19123698943,
      "node_id": "UNLE_lADOABII586_VswkzwAAAARz3Hz_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19123698943",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T22:20:32Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3112958276,
      "node_id": "PRR_kwDOABII5865i_lE",
      "url": null,
      "actor": null,
      "commit_id": "e4d3c9e8df5942327e98bbcaead4123de350dfac",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-12T22:29:40Z",
      "author_association": "MEMBER",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3112958276",
      "submitted_at": "2025-08-12T22:29:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVkYWI5MjVjMGYxNDI1YmEzMmMzYzQ4YjJhNTZhNDNhMzU4ZjQ1MTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edab925c0f1425ba32c3c48b2a56a43a358f4517",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/edab925c0f1425ba32c3c48b2a56a43a358f4517",
      "tree": {
        "sha": "552868f659ae166d28b8d7113a05aa190d1feb20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/552868f659ae166d28b8d7113a05aa190d1feb20"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3aba33732eb4603624d2d6f620b7f9e3be24d3b",
          "sha": "f3aba33732eb4603624d2d6f620b7f9e3be24d3b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f3aba33732eb4603624d2d6f620b7f9e3be24d3b"
        }
      ],
      "message": "wallet: mark unconfirmed v3 siblings as mempool conflicts",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-13T14:29:52Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-08T15:14:58Z"
      },
      "sha": "edab925c0f1425ba32c3c48b2a56a43a358f4517"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY5MjFhZDZkZmMwZmFjNTc3MGNkZWJiZTA5NWRhODNlZDM1NDkyMzA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6921ad6dfc0fac5770cdebbe095da83ed3549230",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6921ad6dfc0fac5770cdebbe095da83ed3549230",
      "tree": {
        "sha": "1d647cb3eec9b18b1155ba3423059a78e37fc3e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d647cb3eec9b18b1155ba3423059a78e37fc3e6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edab925c0f1425ba32c3c48b2a56a43a358f4517",
          "sha": "edab925c0f1425ba32c3c48b2a56a43a358f4517",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/edab925c0f1425ba32c3c48b2a56a43a358f4517"
        }
      ],
      "message": "wallet: limit v3 tx weight in coin selection",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-13T14:29:55Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-07T20:09:01Z"
      },
      "sha": "6921ad6dfc0fac5770cdebbe095da83ed3549230"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19139123071,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAAR0x9d_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19139123071",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "45dd78507292bf7e84493b7e6c5256ec2492b455",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/45dd78507292bf7e84493b7e6c5256ec2492b455",
      "created_at": "2025-08-13T14:40:09Z"
    },
    {
      "event": "reviewed",
      "id": 3116462142,
      "node_id": "PRR_kwDOABII5865wXA-",
      "url": null,
      "actor": null,
      "commit_id": "45dd78507292bf7e84493b7e6c5256ec2492b455",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-13T15:07:10Z",
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3116462142",
      "submitted_at": "2025-08-13T15:07:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQxZTQ1NjQ5NjU5MWNhMzFlN2NlZGI2Njc1MmExY2QwMWQwOWFlN2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41e456496591ca31e7cedb66752a1cd01d09ae7d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/41e456496591ca31e7cedb66752a1cd01d09ae7d",
      "tree": {
        "sha": "87c226d0e4417dad978f3e54064e5fa1b849e9be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87c226d0e4417dad978f3e54064e5fa1b849e9be"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6921ad6dfc0fac5770cdebbe095da83ed3549230",
          "sha": "6921ad6dfc0fac5770cdebbe095da83ed3549230",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6921ad6dfc0fac5770cdebbe095da83ed3549230"
        }
      ],
      "message": "wallet: don't return utxos from multiple truc txs in AvailableCoins",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-13T16:23:43Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-12T18:41:53Z"
      },
      "sha": "41e456496591ca31e7cedb66752a1cd01d09ae7d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDcyZWIzMDY4MWEzM2U4ZTA3MGZhNzAyYzI3ZDk5NjdiMjU1YTAyZDk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72eb30681a33e8e070fa702c27d9967b255a02d9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/72eb30681a33e8e070fa702c27d9967b255a02d9",
      "tree": {
        "sha": "87a50d1b09166ff5f1b5389e7bfb5ccf06a5c9da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87a50d1b09166ff5f1b5389e7bfb5ccf06a5c9da"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41e456496591ca31e7cedb66752a1cd01d09ae7d",
          "sha": "41e456496591ca31e7cedb66752a1cd01d09ae7d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/41e456496591ca31e7cedb66752a1cd01d09ae7d"
        }
      ],
      "message": "rpc: Add transaction min standard version parameter",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-13T16:23:46Z"
      },
      "author": {
        "name": "Bue-von-hon",
        "email": "dkssudvn2@gmail.com",
        "date": "2025-04-26T01:32:30Z"
      },
      "sha": "72eb30681a33e8e070fa702c27d9967b255a02d9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc5NmY2MzY0MGNhNzk5ZTJlOThiOWRhZmQxZmEyY2M5ZGVkNjg4M2E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/796f63640ca799e2e98b9dafd1fa2cc9ded6883a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/796f63640ca799e2e98b9dafd1fa2cc9ded6883a",
      "tree": {
        "sha": "034783c1d829bfc4aed3aacecab0945fbe9f710b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/034783c1d829bfc4aed3aacecab0945fbe9f710b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72eb30681a33e8e070fa702c27d9967b255a02d9",
          "sha": "72eb30681a33e8e070fa702c27d9967b255a02d9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/72eb30681a33e8e070fa702c27d9967b255a02d9"
        }
      ],
      "message": "rpc: Support version 3 transaction creation\n\nAdds v3 support to the following RPCs:\n- createrawtransaction\n- createpsbt\n- send\n- sendall\n- walletcreatefundedpsbt\n\nCo-authored-by: chungeun-choi <cucuridas@gmail.com>\nCo-authored-by: dongwook-chan <dongwook.chan@gmail.com>\nCo-authored-by: sean-k1 <uhs2000@naver.com>\nCo-authored-by: ishaanam <ishaana.misra@gmail.com>",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-13T16:23:46Z"
      },
      "author": {
        "name": "Bue-von-hon",
        "email": "dkssudvn2@gmail.com",
        "date": "2025-04-26T11:42:20Z"
      },
      "sha": "796f63640ca799e2e98b9dafd1fa2cc9ded6883a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYzZDlhNDA4NjUwMDA0NGRiYWYzMmY3OWYwZjYxMDQ2Y2I3ZGZiNTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3d9a4086500044dbaf32f79f0f61046cb7dfb54",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f3d9a4086500044dbaf32f79f0f61046cb7dfb54",
      "tree": {
        "sha": "a833f381ade408f3d897c45f2b02c0358a71a15a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a833f381ade408f3d897c45f2b02c0358a71a15a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/796f63640ca799e2e98b9dafd1fa2cc9ded6883a",
          "sha": "796f63640ca799e2e98b9dafd1fa2cc9ded6883a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/796f63640ca799e2e98b9dafd1fa2cc9ded6883a"
        }
      ],
      "message": "test: extract `bulk_vout` from `bulk_tx` so it can be used by wallet tests",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-13T16:23:46Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-26T06:41:29Z"
      },
      "sha": "f3d9a4086500044dbaf32f79f0f61046cb7dfb54"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDlkNzliN2QxZjY3NjMyZDhlMzJmYWE1NDk0M2NlZDhiNGEwMzIyNDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d79b7d1f67632d8e32faa54943ced8b4a032242",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9d79b7d1f67632d8e32faa54943ced8b4a032242",
      "tree": {
        "sha": "cabc7bea1693d507999bb9ce10ca09b36c3169d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cabc7bea1693d507999bb9ce10ca09b36c3169d8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3d9a4086500044dbaf32f79f0f61046cb7dfb54",
          "sha": "f3d9a4086500044dbaf32f79f0f61046cb7dfb54",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f3d9a4086500044dbaf32f79f0f61046cb7dfb54"
        }
      ],
      "message": "test: add truc wallet tests",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-13T16:23:46Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-26T06:44:14Z"
      },
      "sha": "9d79b7d1f67632d8e32faa54943ced8b4a032242"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVjMDg3ZjU4MjQ1Y2ZiYTZiNjE2OTFlY2U1Mzg3ZWNjZjhhMWE1Zjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "tree": {
        "sha": "2713610c833c6e2650123dd5585588a3ef63b2b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2713610c833c6e2650123dd5585588a3ef63b2b8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d79b7d1f67632d8e32faa54943ced8b4a032242",
          "sha": "9d79b7d1f67632d8e32faa54943ced8b4a032242",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9d79b7d1f67632d8e32faa54943ced8b4a032242"
        }
      ],
      "message": "doc: add release notes for version 3 transactions",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-13T16:23:46Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-17T17:18:38Z"
      },
      "sha": "5c087f58245cfba6b61691ece5387eccf8a1a5f9"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19141363924,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAAR06gjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19141363924",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "created_at": "2025-08-13T16:34:23Z"
    },
    {
      "event": "labeled",
      "id": 19141376229,
      "node_id": "LE_lADOABII586_VswkzwAAAAR06jjl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19141376229",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-13T16:35:07Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3184628567,
      "node_id": "IC_kwDOABII58690ZNX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3184628567",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-13T16:35:09Z",
      "updated_at": "2025-08-13T16:35:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `tidy`: https://github.com/bitcoin/bitcoin/runs/48008323258</sub>\n<sub>LLM reason (✨ experimental): Failure due to clang-tidy reported an error in spend.cpp: unnecessary temporary object created while calling emplace_back.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3184628567",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "unlabeled",
      "id": 19142606376,
      "node_id": "UNLE_lADOABII586_VswkzwAAAAR0_P4o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19142606376",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-13T17:51:27Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3117314908,
      "node_id": "PRR_kwDOABII5865znNc",
      "url": null,
      "actor": null,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-13T19:04:15Z",
      "author_association": "MEMBER",
      "body": "reACK 5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3117314908",
      "submitted_at": "2025-08-13T19:04:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "review_requested",
      "id": 19143704816,
      "node_id": "RRE_lADOABII586_VswkzwAAAAR1DcDw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19143704816",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-13T19:04:23Z",
      "requested_reviewer": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 19143705072,
      "node_id": "RRE_lADOABII586_VswkzwAAAAR1DcHw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19143705072",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-13T19:04:24Z",
      "requested_reviewer": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3117871770,
      "node_id": "PRR_kwDOABII58651vKa",
      "url": null,
      "actor": null,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-13T22:13:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/32896/commits/5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3117871770",
      "submitted_at": "2025-08-13T22:13:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "reviewed",
      "id": 3120569826,
      "node_id": "PRR_kwDOABII5866AB3i",
      "url": null,
      "actor": null,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-14T14:02:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "lgtm ACK 5c087f58245cfba6b61691ece5387eccf8a1a5f9\n\nThanks for taking this over the finish line. To implement the TRUC conditions in the wallet, I've observed that the related changes are done in the following control sites of selecting coins while building the transaction via different corresponding RPCs:\n1. `FetchSelectedInputs`: to ensure the parent-child TRUC versions are in agreement.\n2. `AvailableCoins`: to ensure the parent-child TRUC versions are in agreement, to ensure the TRUC ancestor/descendant limits are adhered to.\n3. `AutomaticCoinSelection`: to ensure the TRUC transaction weight criterion are met.\n4. Notifications - `transactionAddedToMempool`, `transactionRemovedFromMempool`: to ensure transaction mempool conflicts are updated and unconfirmed TRUC child is tracked.\n\nThe several functional tests also give more confidence.\n\nThe couple nits below can be done if there is any other need to retouch the PR.",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3120569826",
      "submitted_at": "2025-08-14T14:02:16Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193049601",
      "pull_request_review_id": 2998494185,
      "id": 2193049601,
      "node_id": "PRRC_kwDOABII586Ct0gB",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(50, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.alice.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 70,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "e7b40847385b4781118e103ac896dc6dd104cb15",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We should also check that we can't fund a v2 transaction when everything is v3 unconfirmed",
      "created_at": "2025-07-08T17:16:04Z",
      "updated_at": "2025-07-08T17:41:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193049601",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193049601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193052705",
      "pull_request_review_id": 2998494185,
      "id": 2193052705,
      "node_id": "PRRC_kwDOABII586Ct1Qh",
      "diff_hunk": "@@ -715,6 +716,12 @@ CreatedTransactionResult FundTransaction(CWallet& wallet, const CMutableTransact\n         coinControl.m_max_tx_weight = options[\"max_tx_weight\"].getInt<int>();\n     }\n \n+    if (tx.version == TRUC_VERSION) {\n+        if (!coinControl.m_max_tx_weight.has_value() || coinControl.m_max_tx_weight.value() > 40000) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Instead of magic numbers, try using `TRUC_MAX_VSIZE * WITNESS_SCALE_FACTOR`",
      "created_at": "2025-07-08T17:17:51Z",
      "updated_at": "2025-07-08T17:41:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193052705",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193052705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 720,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193065536",
      "pull_request_review_id": 2998494185,
      "id": 2193065536,
      "node_id": "PRRC_kwDOABII586Ct4ZA",
      "diff_hunk": "@@ -258,6 +258,9 @@ class CWalletTx\n     // BlockConflicted.\n     std::set<Txid> mempool_conflicts;\n \n+    // Set of v3 transactions that spend from this tx",
      "path": "src/wallet/transaction.h",
      "position": null,
      "original_position": 4,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Comment seems inaccurate: it mentions a set but this only allows for 1 transaction. Should also mention (1) that this is used to stop us from creating another unconfirmed child and (2) this is specifically the in mempool-sibling, as there can be multiple siblings but only 1 in mempool (unless there was a reorg).",
      "created_at": "2025-07-08T17:25:10Z",
      "updated_at": "2025-07-08T17:41:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193065536",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193065536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193078705",
      "pull_request_review_id": 2998494185,
      "id": 2193078705,
      "node_id": "PRRC_kwDOABII586Ct7mx",
      "diff_hunk": "@@ -715,6 +716,12 @@ CreatedTransactionResult FundTransaction(CWallet& wallet, const CMutableTransact\n         coinControl.m_max_tx_weight = options[\"max_tx_weight\"].getInt<int>();\n     }\n \n+    if (tx.version == TRUC_VERSION) {\n+        if (!coinControl.m_max_tx_weight.has_value() || coinControl.m_max_tx_weight.value() > 40000) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "in_reply_to_id": 2193052705,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also, there is a separate size limit for TRUC children - I don't think that's been implemented yet?",
      "created_at": "2025-07-08T17:33:20Z",
      "updated_at": "2025-07-08T17:41:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193078705",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193078705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 720,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193091714",
      "pull_request_review_id": 2998494185,
      "id": 2193091714,
      "node_id": "PRRC_kwDOABII586Ct-yC",
      "diff_hunk": "@@ -83,6 +83,8 @@ struct CoinFilterParams {\n     bool include_immature_coinbase{false};\n     // By default, skip locked UTXOs\n     bool skip_locked{true};\n+    // Whether or not to care about the tx version\n+    bool track_version{true}; // only used by AvailableCoinsListUnspent",
      "path": "src/wallet/spend.h",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A more descriptive name may be `exclude_version3`.",
      "created_at": "2025-07-08T17:37:49Z",
      "updated_at": "2025-07-08T17:41:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193091714",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193091714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193283389",
      "pull_request_review_id": 2998863065,
      "id": 2193283389,
      "node_id": "PRRC_kwDOABII586Cutk9",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(50, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.alice.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 70,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "e7b40847385b4781118e103ac896dc6dd104cb15",
      "in_reply_to_id": 2193049601,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point, I will add a test for this.",
      "created_at": "2025-07-08T19:22:20Z",
      "updated_at": "2025-07-08T19:22:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193283389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193283389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193284376",
      "pull_request_review_id": 2998864598,
      "id": 2193284376,
      "node_id": "PRRC_kwDOABII586Cut0Y",
      "diff_hunk": "@@ -715,6 +716,12 @@ CreatedTransactionResult FundTransaction(CWallet& wallet, const CMutableTransact\n         coinControl.m_max_tx_weight = options[\"max_tx_weight\"].getInt<int>();\n     }\n \n+    if (tx.version == TRUC_VERSION) {\n+        if (!coinControl.m_max_tx_weight.has_value() || coinControl.m_max_tx_weight.value() > 40000) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "in_reply_to_id": 2193052705,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I will look into implementing the separate size limit. ",
      "created_at": "2025-07-08T19:23:04Z",
      "updated_at": "2025-07-08T19:23:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193284376",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193284376"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 720,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193285093",
      "pull_request_review_id": 2998865668,
      "id": 2193285093,
      "node_id": "PRRC_kwDOABII586Cut_l",
      "diff_hunk": "@@ -258,6 +258,9 @@ class CWalletTx\n     // BlockConflicted.\n     std::set<Txid> mempool_conflicts;\n \n+    // Set of v3 transactions that spend from this tx",
      "path": "src/wallet/transaction.h",
      "position": null,
      "original_position": 4,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "in_reply_to_id": 2193065536,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-08T19:23:35Z",
      "updated_at": "2025-07-08T19:23:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193285093",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193285093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193289150",
      "pull_request_review_id": 2998871866,
      "id": 2193289150,
      "node_id": "PRRC_kwDOABII586Cuu--",
      "diff_hunk": "@@ -83,6 +83,8 @@ struct CoinFilterParams {\n     bool include_immature_coinbase{false};\n     // By default, skip locked UTXOs\n     bool skip_locked{true};\n+    // Whether or not to care about the tx version\n+    bool track_version{true}; // only used by AvailableCoinsListUnspent",
      "path": "src/wallet/spend.h",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "in_reply_to_id": 2193091714,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure if that name would be accurate, because this boolean is set to `true` even when we are trying to create a v3 transaction, in which case we are technically not excluding version 3.",
      "created_at": "2025-07-08T19:26:01Z",
      "updated_at": "2025-07-08T19:26:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193289150",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193289150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194156945",
      "pull_request_review_id": 3000189728,
      "id": 2194156945,
      "node_id": "PRRC_kwDOABII586CyC2R",
      "diff_hunk": "@@ -80,6 +80,9 @@\n \n DEFAULT_MEMPOOL_EXPIRY_HOURS = 336  # hours\n \n+TX_MIN_STANDARD_VERSION = 1\n+TX_MAX_STANDARD_VERSION = 3",
      "path": "test/functional/test_framework/messages.py",
      "position": 5,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "7fdff3ff7c3814a78eb931ccfdf3e19b5592c563",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "there's also `test/functional/feature_taproot.py:TX_MAX_STANDARD_VERSION = 3`",
      "created_at": "2025-07-09T06:25:22Z",
      "updated_at": "2025-07-09T06:27:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2194156945",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194156945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 84,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194159096",
      "pull_request_review_id": 3000189728,
      "id": 2194159096,
      "node_id": "PRRC_kwDOABII586CyDX4",
      "diff_hunk": "@@ -154,6 +155,13 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         rawTx.nLockTime = nLockTime;\n     }\n \n+    if (!version.isNull()) {\n+        uint32_t nVersion = version.getInt<uint32_t>();\n+        if (nVersion < TX_MIN_STANDARD_VERSION || nVersion > TX_MAX_STANDARD_VERSION)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, version out of range(\") + util::ToString(TX_MIN_STANDARD_VERSION) + \"~\" + util::ToString(TX_MAX_STANDARD_VERSION) + \")\");",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "7fdff3ff7c3814a78eb931ccfdf3e19b5592c563",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could use strprintf for shorter code? Also missing `{}` around body of the `if`?",
      "created_at": "2025-07-09T06:26:46Z",
      "updated_at": "2025-07-09T06:27:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2194159096",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194159096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195916152",
      "pull_request_review_id": 3002995392,
      "id": 2195916152,
      "node_id": "PRRC_kwDOABII586C4wV4",
      "diff_hunk": "@@ -80,6 +80,9 @@\n \n DEFAULT_MEMPOOL_EXPIRY_HOURS = 336  # hours\n \n+TX_MIN_STANDARD_VERSION = 1\n+TX_MAX_STANDARD_VERSION = 3",
      "path": "test/functional/test_framework/messages.py",
      "position": 5,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "7fdff3ff7c3814a78eb931ccfdf3e19b5592c563",
      "in_reply_to_id": 2194156945,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've changed this test to import `TX_MAX_STANDARD_VERSION` instead.",
      "created_at": "2025-07-09T20:28:07Z",
      "updated_at": "2025-07-09T20:28:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2195916152",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195916152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 84,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195917838",
      "pull_request_review_id": 3002997997,
      "id": 2195917838,
      "node_id": "PRRC_kwDOABII586C4wwO",
      "diff_hunk": "@@ -154,6 +155,13 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         rawTx.nLockTime = nLockTime;\n     }\n \n+    if (!version.isNull()) {\n+        uint32_t nVersion = version.getInt<uint32_t>();\n+        if (nVersion < TX_MIN_STANDARD_VERSION || nVersion > TX_MAX_STANDARD_VERSION)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, version out of range(\") + util::ToString(TX_MIN_STANDARD_VERSION) + \"~\" + util::ToString(TX_MAX_STANDARD_VERSION) + \")\");",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "7fdff3ff7c3814a78eb931ccfdf3e19b5592c563",
      "in_reply_to_id": 2194159096,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-09T20:29:20Z",
      "updated_at": "2025-07-09T20:29:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2195917838",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195917838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207804501",
      "pull_request_review_id": 3020910288,
      "id": 2207804501,
      "node_id": "PRRC_kwDOABII586DmGxV",
      "diff_hunk": "@@ -154,6 +155,15 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         rawTx.nLockTime = nLockTime;\n     }\n \n+    if (!version.isNull()) {\n+        uint32_t nVersion = version.getInt<uint32_t>();\n+        if (nVersion < TX_MIN_STANDARD_VERSION || nVersion > TX_MAX_STANDARD_VERSION) {\n+            // throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, version out of range(\") + util::ToString(TX_MIN_STANDARD_VERSION) + \"~\" + util::ToString(TX_MAX_STANDARD_VERSION) + \")\");",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This commented error should be removed now.",
      "created_at": "2025-07-15T15:14:08Z",
      "updated_at": "2025-07-15T15:17:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2207804501",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207804501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2208017260",
      "pull_request_review_id": 3021245623,
      "id": 2208017260,
      "node_id": "PRRC_kwDOABII586Dm6ts",
      "diff_hunk": "@@ -437,7 +438,7 @@ static RPCHelpMan createrawtransaction()\n     if (!request.params[3].isNull()) {\n         rbf = request.params[3].get_bool();\n     }\n-    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf, request.params[4]);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\n    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf, self.Arg<uint32_t>(\"version\"));\n```\n\nnit: This should allow to drop the parsing in `ConstructTransaction` and the manual indexing here.",
      "created_at": "2025-07-15T16:47:11Z",
      "updated_at": "2025-07-15T16:47:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2208017260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2208017260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2208593588",
      "pull_request_review_id": 3022192521,
      "id": 2208593588,
      "node_id": "PRRC_kwDOABII586DpHa0",
      "diff_hunk": "@@ -154,6 +155,15 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         rawTx.nLockTime = nLockTime;\n     }\n \n+    if (!version.isNull()) {\n+        uint32_t nVersion = version.getInt<uint32_t>();\n+        if (nVersion < TX_MIN_STANDARD_VERSION || nVersion > TX_MAX_STANDARD_VERSION) {\n+            // throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, version out of range(\") + util::ToString(TX_MIN_STANDARD_VERSION) + \"~\" + util::ToString(TX_MAX_STANDARD_VERSION) + \")\");",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "in_reply_to_id": 2207804501,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-15T20:28:01Z",
      "updated_at": "2025-07-15T20:28:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2208593588",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2208593588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2208595036",
      "pull_request_review_id": 3022195028,
      "id": 2208595036,
      "node_id": "PRRC_kwDOABII586DpHxc",
      "diff_hunk": "@@ -437,7 +438,7 @@ static RPCHelpMan createrawtransaction()\n     if (!request.params[3].isNull()) {\n         rbf = request.params[3].get_bool();\n     }\n-    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf, request.params[4]);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "in_reply_to_id": 2208017260,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-15T20:28:30Z",
      "updated_at": "2025-07-15T20:28:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2208595036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2208595036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2209414266",
      "pull_request_review_id": 3023385092,
      "id": 2209414266,
      "node_id": "PRRC_kwDOABII586DsPx6",
      "diff_hunk": "@@ -437,7 +438,7 @@ static RPCHelpMan createrawtransaction()\n     if (!request.params[3].isNull()) {\n         rbf = request.params[3].get_bool();\n     }\n-    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf, self.Arg<unsigned long>(\"version\"));",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "657d153c26c2491e6e04ba135e7ac22658a0c110",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Using uint32_t and something like this should fix the linker error:\n\n```\ndiff --git a/src/rpc/util.cpp b/src/rpc/util.cpp\nindex 5da02b4df4..0604dec2dc 100644\n--- a/src/rpc/util.cpp\n+++ b/src/rpc/util.cpp\n@@ -731,6 +731,7 @@ TMPL_INST(CheckRequiredOrDefault, const UniValue&, *CHECK_NONFATAL(maybe_arg););\n TMPL_INST(CheckRequiredOrDefault, bool, CHECK_NONFATAL(maybe_arg)->get_bool(););\n TMPL_INST(CheckRequiredOrDefault, int, CHECK_NONFATAL(maybe_arg)->getInt<int>(););\n TMPL_INST(CheckRequiredOrDefault, uint64_t, CHECK_NONFATAL(maybe_arg)->getInt<uint64_t>(););\n+TMPL_INST(CheckRequiredOrDefault, uint32_t, CHECK_NONFATAL(maybe_arg)->getInt<uint32_t>(););\n TMPL_INST(CheckRequiredOrDefault, const std::string&, CHECK_NONFATAL(maybe_arg)->get_str(););\n \n bool RPCHelpMan::IsValidNumArgs(size_t num_args) const\n",
      "created_at": "2025-07-16T06:41:47Z",
      "updated_at": "2025-07-16T06:41:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2209414266",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2209414266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2210830294",
      "pull_request_review_id": 3025690592,
      "id": 2210830294,
      "node_id": "PRRC_kwDOABII586DxpfW",
      "diff_hunk": "@@ -437,7 +438,7 @@ static RPCHelpMan createrawtransaction()\n     if (!request.params[3].isNull()) {\n         rbf = request.params[3].get_bool();\n     }\n-    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf, self.Arg<unsigned long>(\"version\"));",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "657d153c26c2491e6e04ba135e7ac22658a0c110",
      "in_reply_to_id": 2209414266,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this fixed the error, thanks!",
      "created_at": "2025-07-16T15:51:57Z",
      "updated_at": "2025-07-16T15:51:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2210830294",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2210830294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211351922",
      "pull_request_review_id": 3026497105,
      "id": 2211351922,
      "node_id": "PRRC_kwDOABII586Dzo1y",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 29,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "maybe these should live in mempool_util?",
      "created_at": "2025-07-16T19:22:16Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211351922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211351922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211355006",
      "pull_request_review_id": 3026497105,
      "id": 2211355006,
      "node_id": "PRRC_kwDOABII586Dzpl-",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 79,
      "original_position": 79,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This looks like it was copy-pasted from the test framework - can we just use the existing method, perhaps with a wrapper if needed?",
      "created_at": "2025-07-16T19:23:53Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211355006",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211355006"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 79,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211362713",
      "pull_request_review_id": 3026497105,
      "id": 2211362713,
      "node_id": "PRRC_kwDOABII586DzreZ",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 129,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Might want to assert that it's v2",
      "created_at": "2025-07-16T19:27:01Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211362713",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211362713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211372152",
      "pull_request_review_id": 3026497105,
      "id": 2211372152,
      "node_id": "PRRC_kwDOABII586Dztx4",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 181,
      "original_position": 200,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should there also be a test where Alice tries to spend her change after Bob has spent from the parent? That wouldn't require `include_unsafe` IIUC",
      "created_at": "2025-07-16T19:32:03Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211372152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211372152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 181,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211375162",
      "pull_request_review_id": 3026497105,
      "id": 2211375162,
      "node_id": "PRRC_kwDOABII586Dzug6",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 172,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could you also add `v2_tx_spends_confirmed_v3_tx` and `v3_tx_spends_confirmed_v2_tx` to check that version mismatches are fine there?",
      "created_at": "2025-07-16T19:33:44Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211375162",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211375162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211379860",
      "pull_request_review_id": 3026497105,
      "id": 2211379860,
      "node_id": "PRRC_kwDOABII586DzvqU",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 269,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What does \"two outputs\" mean here? This has 1 output, no?",
      "created_at": "2025-07-16T19:36:20Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211379860",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211379860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211381702",
      "pull_request_review_id": 3026497105,
      "id": 2211381702,
      "node_id": "PRRC_kwDOABII586DzwHG",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 278,
      "original_position": 278,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will Alice's wallet attempt to rebroadcast her transaction if/when the parent + Bob's confirm? Can we do an RBF of Alice's transaction to evict Bob's?",
      "created_at": "2025-07-16T19:37:30Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211381702",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211381702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 278,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211385875",
      "pull_request_review_id": 3026497105,
      "id": 2211385875,
      "node_id": "PRRC_kwDOABII586DzxIT",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 284,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        # send a v2 output to alice and confirm it\r\n````",
      "created_at": "2025-07-16T19:40:10Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211385875",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211385875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 284,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211390451",
      "pull_request_review_id": 3026497105,
      "id": 2211390451,
      "node_id": "PRRC_kwDOABII586DzyPz",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice\n+        self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] != 0][0]",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 292,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Isn't this just...?\r\n```suggestion\r\n        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\r\n```",
      "created_at": "2025-07-16T19:42:17Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211390451",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211390451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211403206",
      "pull_request_review_id": 3026497105,
      "id": 2211403206,
      "node_id": "PRRC_kwDOABII586Dz1XG",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice\n+        self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] != 0][0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+\n+        # alice spends both of her outputs\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+        # bob can't create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0},]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, inputs, outputs, 2)\n+        # bob can now create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 321,
      "original_position": 320,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can this be consolidated with `v3_conflict_removed_from_mempool` since they are mostly the same?",
      "created_at": "2025-07-16T19:47:42Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211403206",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211403206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 321,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211435769",
      "pull_request_review_id": 3026497105,
      "id": 2211435769,
      "node_id": "PRRC_kwDOABII586Dz9T5",
      "diff_hunk": "@@ -904,11 +925,17 @@ util::Result<SelectionResult> AutomaticCoinSelection(const CWallet& wallet, Coin\n         // If no solution is found, return the first detailed error (if any).\n         // future: add \"error level\" so the worst one can be picked instead.\n         std::vector<util::Result<SelectionResult>> res_detailed_errors;\n+        CoinSelectionParams temp_selection_params = coin_selection_params;\n         for (const auto& select_filter : ordered_filters) {\n             auto it = filtered_groups.find(select_filter.filter);\n             if (it == filtered_groups.end()) continue;\n+            if (temp_selection_params.m_version == TRUC_VERSION && (select_filter.filter.conf_mine == 0 || select_filter.filter.conf_theirs == 0)) {\n+                if (temp_selection_params.m_max_tx_weight > (TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR)) {\n+                    temp_selection_params.m_max_tx_weight = TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR;\n+                }",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "827fdc4904d8dd33609e7042ecf2c5429a23690f",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The approach of modifying the `CoinSelectionParams.m_max_tx_weight` seems fine to me. The only issue I notice is the error message being \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\", which could be slightly confusing, but I think out of scope for this PR. A separate PR could maybe tell the user what the limit was, since it could be MAX_STANDARD_TX_WEIGHT, max TRUC weight, max child TRUC weight, or ancestor/cluster size limits (oh, just found out that isn't handled - also a potential followup).",
      "created_at": "2025-07-16T19:55:30Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211435769",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211435769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 933,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 963,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213901825",
      "pull_request_review_id": 3030399457,
      "id": 2213901825,
      "node_id": "PRRC_kwDOABII586D9XYB",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 29,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211351922,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-17T17:23:58Z",
      "updated_at": "2025-07-17T17:23:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213901825",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213901825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213903403",
      "pull_request_review_id": 3030401668,
      "id": 2213903403,
      "node_id": "PRRC_kwDOABII586D9Xwr",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 79,
      "original_position": 79,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211355006,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've added a `bulk_vout` function to `script_util.py` which is used by `MiniWallet` and these tests.",
      "created_at": "2025-07-17T17:24:52Z",
      "updated_at": "2025-07-17T17:24:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213903403",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213903403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 79,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213914676",
      "pull_request_review_id": 3030419846,
      "id": 2213914676,
      "node_id": "PRRC_kwDOABII586D9ag0",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 129,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211362713,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've added a version 2 assertion everywhere that `sendall` is used in the tests.",
      "created_at": "2025-07-17T17:30:52Z",
      "updated_at": "2025-07-17T17:30:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213914676",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213914676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213915214",
      "pull_request_review_id": 3030420671,
      "id": 2213915214,
      "node_id": "PRRC_kwDOABII586D9apO",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 181,
      "original_position": 200,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211372152,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've added a test for alice spending change",
      "created_at": "2025-07-17T17:31:13Z",
      "updated_at": "2025-07-17T17:31:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213915214",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213915214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 181,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213915397",
      "pull_request_review_id": 3030420951,
      "id": 2213915397,
      "node_id": "PRRC_kwDOABII586D9asF",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 172,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211375162,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-17T17:31:21Z",
      "updated_at": "2025-07-17T17:31:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213915397",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213915397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213916090",
      "pull_request_review_id": 3030421999,
      "id": 2213916090,
      "node_id": "PRRC_kwDOABII586D9a26",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 269,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211379860,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, this was an outdated comment which I've now removed",
      "created_at": "2025-07-17T17:31:44Z",
      "updated_at": "2025-07-17T17:31:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213916090",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213916090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213916340",
      "pull_request_review_id": 3030422400,
      "id": 2213916340,
      "node_id": "PRRC_kwDOABII586D9a60",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 284,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211385875,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-17T17:31:54Z",
      "updated_at": "2025-07-17T17:31:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213916340",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213916340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 284,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213917014",
      "pull_request_review_id": 3030423531,
      "id": 2213917014,
      "node_id": "PRRC_kwDOABII586D9bFW",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice\n+        self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] != 0][0]",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 292,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211390451,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I've updated both of the places where I was doing this.",
      "created_at": "2025-07-17T17:32:20Z",
      "updated_at": "2025-07-17T17:32:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213917014",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213917014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213923610",
      "pull_request_review_id": 3030434604,
      "id": 2213923610,
      "node_id": "PRRC_kwDOABII586D9csa",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 278,
      "original_position": 278,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211381702,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, because when Bob confirms, it is removed from `mempool_conflicts` and Alice's transaction is considered \"Inactive\". I've added a part to this test case where Alice evicts Bob's transaction. ",
      "created_at": "2025-07-17T17:36:19Z",
      "updated_at": "2025-07-17T17:36:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213923610",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213923610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 278,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213927081",
      "pull_request_review_id": 3030440970,
      "id": 2213927081,
      "node_id": "PRRC_kwDOABII586D9dip",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice\n+        self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] != 0][0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+\n+        # alice spends both of her outputs\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+        # bob can't create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0},]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, inputs, outputs, 2)\n+        # bob can now create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 321,
      "original_position": 320,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211403206,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It would be tricky to consolidate the two because one of them is testing preventing the wallet from creating a transaction and the other is testing marking conflicts correctly. ",
      "created_at": "2025-07-17T17:38:31Z",
      "updated_at": "2025-07-17T17:38:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213927081",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213927081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 321,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220508773",
      "pull_request_review_id": 3040093165,
      "id": 2220508773,
      "node_id": "PRRC_kwDOABII586EWkZl",
      "diff_hunk": "@@ -283,6 +283,16 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\n             if (input_bytes == -1) {\n                 input_bytes = CalculateMaximumSignedInputSize(txout, &wallet, &coin_control);\n             }\n+            auto it = wallet.mapWallet.find(outpoint.hash);\n+            if (coin_control.m_version.has_value() && it != wallet.mapWallet.end()) {",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "cf712ab56e3256db5dfcf422860bdb3cf87cd03e",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"wallet: throw error at conflicting tx versions in pre-selected inputs\" (cf712ab56e3256db5dfcf422860bdb3cf87cd03e):\r\nIs `m_version` always set?\r\nOtherwise, what would happen if `coin_control.m_version` is not set, and one preselected input is TRUC, but another one is not?",
      "created_at": "2025-07-21T22:44:56Z",
      "updated_at": "2025-07-21T23:16:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2220508773",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220508773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220523528",
      "pull_request_review_id": 3040093165,
      "id": 2220523528,
      "node_id": "PRRC_kwDOABII586EWoAI",
      "diff_hunk": "@@ -1393,6 +1394,21 @@ void CWallet::transactionAddedToMempool(const CTransactionRef& tx) {\n                 return wtx.mempool_conflicts.insert(txid).second ? TxUpdate::CHANGED : TxUpdate::UNCHANGED;\n             });\n         }\n+\n+    }\n+\n+    if (tx->version == TRUC_VERSION) {\n+        // this makes an unconfirmed v3 output unspendable\n+        // for all of the utxos that this spends...",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "bff006b7ae7fa120fac4f2118e891d2c88d38f9a",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"wallet: don't include unconfirmed v3 txs with children in available coins\" (bff006b7ae7fa120fac4f2118e891d2c88d38f9a):\r\n\r\nI find this comment hard to parse. Do you mean something along the lines of:\r\n\r\n```suggestion\r\n        // this marks all outputs of any unconfirmed v3 parent transactions as unspendable\r\n        // if any of its outputs are spent by this transaction\r\n``` ",
      "created_at": "2025-07-21T22:56:06Z",
      "updated_at": "2025-07-21T23:16:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2220523528",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220523528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 1401,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220548538",
      "pull_request_review_id": 3040093165,
      "id": 2220548538,
      "node_id": "PRRC_kwDOABII586EWuG6",
      "diff_hunk": "@@ -0,0 +1,399 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # bob spends her output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        # alice tries to spend money\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 222,
      "original_position": 230,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "46f4f372b8096547049a96187e80ec49e49cb1d5",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Following the prior comment, I think it would be good to have a test where you are trying to build a transaction for which the version is not set, that has both a pre-selected version 1|2 and a pre-selected version 3 input.",
      "created_at": "2025-07-21T23:15:02Z",
      "updated_at": "2025-07-21T23:16:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2220548538",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2220548538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 222,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226003081",
      "pull_request_review_id": 3048042932,
      "id": 2226003081,
      "node_id": "PRRC_kwDOABII586ErhyJ",
      "diff_hunk": "@@ -283,6 +283,16 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\n             if (input_bytes == -1) {\n                 input_bytes = CalculateMaximumSignedInputSize(txout, &wallet, &coin_control);\n             }\n+            auto it = wallet.mapWallet.find(outpoint.hash);\n+            if (coin_control.m_version.has_value() && it != wallet.mapWallet.end()) {",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "cf712ab56e3256db5dfcf422860bdb3cf87cd03e",
      "in_reply_to_id": 2220508773,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is a good point, if `coin_control.m_version` is not set and the preselected inputs have different versions, then an error would not be thrown. I have changed `m_version` so that it has a default value of `CTransaction::CURRENT_VERSION` instead of being optional.",
      "created_at": "2025-07-23T15:43:30Z",
      "updated_at": "2025-07-23T15:43:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2226003081",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226003081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226003455",
      "pull_request_review_id": 3048043627,
      "id": 2226003455,
      "node_id": "PRRC_kwDOABII586Erh3_",
      "diff_hunk": "@@ -1393,6 +1394,21 @@ void CWallet::transactionAddedToMempool(const CTransactionRef& tx) {\n                 return wtx.mempool_conflicts.insert(txid).second ? TxUpdate::CHANGED : TxUpdate::UNCHANGED;\n             });\n         }\n+\n+    }\n+\n+    if (tx->version == TRUC_VERSION) {\n+        // this makes an unconfirmed v3 output unspendable\n+        // for all of the utxos that this spends...",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "bff006b7ae7fa120fac4f2118e891d2c88d38f9a",
      "in_reply_to_id": 2220523528,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, I've updated the comment",
      "created_at": "2025-07-23T15:43:37Z",
      "updated_at": "2025-07-23T15:43:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2226003455",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226003455"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 1401,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1402,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226004291",
      "pull_request_review_id": 3048044750,
      "id": 2226004291,
      "node_id": "PRRC_kwDOABII586EriFD",
      "diff_hunk": "@@ -0,0 +1,399 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # bob spends her output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        # alice tries to spend money\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 222,
      "original_position": 230,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "46f4f372b8096547049a96187e80ec49e49cb1d5",
      "in_reply_to_id": 2220548538,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've added a test for this.",
      "created_at": "2025-07-23T15:44:00Z",
      "updated_at": "2025-07-23T15:44:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2226004291",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226004291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 222,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226343248",
      "pull_request_review_id": 3048555517,
      "id": 2226343248,
      "node_id": "PRRC_kwDOABII586Es01Q",
      "diff_hunk": "@@ -283,6 +283,16 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\n             if (input_bytes == -1) {\n                 input_bytes = CalculateMaximumSignedInputSize(txout, &wallet, &coin_control);\n             }\n+            auto it = wallet.mapWallet.find(outpoint.hash);\n+            if (it != wallet.mapWallet.end()) {",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "40c6d135f37a1d8dd64cbea3ca30229c2e012fa2",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 40c6d135f37a1d8dd64cbea3ca30229c2e012fa2 \"wallet: throw error at conflicting tx versions in pre-selected inputs\"\r\n\r\nWe want to avoid querying `mapWallet` as much as possible for performance. `txo.GetWalletTx` returns a reference to the `CWalletTx` that can be used here instead of a `mapWallet` lookup.",
      "created_at": "2025-07-23T18:28:13Z",
      "updated_at": "2025-07-23T18:39:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2226343248",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226343248"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 286,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226356487",
      "pull_request_review_id": 3048555517,
      "id": 2226356487,
      "node_id": "PRRC_kwDOABII586Es4EH",
      "diff_hunk": "@@ -1679,7 +1680,7 @@ static RPCHelpMan createpsbt()\n     if (!request.params[3].isNull()) {\n         rbf = request.params[3].get_bool();\n     }\n-    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf, DEFAULT_RAWTX_VERSION);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "2bcdf53a58ee6cd7c70f2afd97a16fce5dcc21c6",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 2bcdf53a58ee6cd7c70f2afd97a16fce5dcc21c6 \"rpc: Support v3 raw transactions creation\"\r\n\r\nIf `createrawtransaction` is going to support setting the version, then `createpsbt`, `walletcreatefundedpsbt`, `send`, and `sendall` need to as well.",
      "created_at": "2025-07-23T18:35:31Z",
      "updated_at": "2025-07-23T18:39:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2226356487",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2226356487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228645591",
      "pull_request_review_id": 3051854806,
      "id": 2228645591,
      "node_id": "PRRC_kwDOABII586E1m7X",
      "diff_hunk": "@@ -386,6 +387,14 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n                 safeTx = false;\n             }\n \n+            if (nDepth == 0 && params.track_version) {\n+                if (coinControl->m_version == TRUC_VERSION) {\n+                    if (wtx.tx->version != TRUC_VERSION) continue;\n+                } else {\n+                    if (wtx.tx->version == TRUC_VERSION) continue;\n+                }",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "1910d9b61f23f65335367f2f8dd021ac1ccd907a",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This might be clearer:\r\nEDIT: ah nvm, I see you use the 2 clauses further in later commits. Feel free to ignore.\r\n\r\n```suggestion\r\n\r\n                // an unconfirmed TRUC must spend only TRUC, and non-TRUC must only spend non-TRUC\r\n                if ((wtx.tx->version == TRUC_VERSION) != (coinControl->m_version == TRUC_VERSION)) continue;\r\n```",
      "created_at": "2025-07-24T14:12:09Z",
      "updated_at": "2025-07-24T15:15:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228645591",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228645591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 391,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 409,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228646732",
      "pull_request_review_id": 3051854806,
      "id": 2228646732,
      "node_id": "PRRC_kwDOABII586E1nNM",
      "diff_hunk": "@@ -83,6 +83,8 @@ struct CoinFilterParams {\n     bool include_immature_coinbase{false};\n     // By default, skip locked UTXOs\n     bool skip_locked{true};\n+    // Whether or not to care about the tx version\n+    bool track_version{true}; // only used by AvailableCoinsListUnspent",
      "path": "src/wallet/spend.h",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "in_reply_to_id": 2193091714,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah right! Resolving",
      "created_at": "2025-07-24T14:12:36Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228646732",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228646732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228715272",
      "pull_request_review_id": 3051854806,
      "id": 2228715272,
      "node_id": "PRRC_kwDOABII586E138I",
      "diff_hunk": "@@ -1393,6 +1394,21 @@ void CWallet::transactionAddedToMempool(const CTransactionRef& tx) {\n                 return wtx.mempool_conflicts.insert(txid).second ? TxUpdate::CHANGED : TxUpdate::UNCHANGED;\n             });\n         }\n+\n+    }\n+\n+    if (tx->version == TRUC_VERSION) {\n+        // this marks all outputs of any unconfirmed v3 parent transactions as unspendable\n+        // if any of its outputs are spent by this transaction\n+        for (const CTxIn& tx_in : tx->vin) {\n+            auto wallet_it = mapWallet.find(tx_in.prevout.hash);\n+            if (wallet_it != mapWallet.end()) {\n+                CWalletTx& wtx = wallet_it->second;\n+                if (wtx.isUnconfirmed()) {\n+                    wtx.v3_spend = tx->GetHash();\n+                }",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "279b45e9ba649b05508ff19eec7550d53cd5306c",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Naming these `parent_it` and `parent_wtx` would make it easier to understand",
      "created_at": "2025-07-24T14:35:58Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228715272",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228715272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 1404,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1430,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228722754",
      "pull_request_review_id": 3051854806,
      "id": 2228722754,
      "node_id": "PRRC_kwDOABII586E15xC",
      "diff_hunk": "@@ -1393,6 +1394,21 @@ void CWallet::transactionAddedToMempool(const CTransactionRef& tx) {\n                 return wtx.mempool_conflicts.insert(txid).second ? TxUpdate::CHANGED : TxUpdate::UNCHANGED;\n             });\n         }\n+\n+    }\n+\n+    if (tx->version == TRUC_VERSION) {\n+        // this marks all outputs of any unconfirmed v3 parent transactions as unspendable",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "279b45e9ba649b05508ff19eec7550d53cd5306c",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I think \"marks as unspendable\" seems a little strong? Perhaps also explain why you are doing this\r\n\r\n```suggestion\r\n        // Unconfirmed TRUC transactions are only allowed a 1-parent-1-child topology.\r\n        // For any unconfirmed v3 parents (there should be a maximum of 1 except in reorgs),\r\n        // record this child so the wallet doesn't try to spend any other outputs\r\n```",
      "created_at": "2025-07-24T14:38:50Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228722754",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228722754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1401,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228737241",
      "pull_request_review_id": 3051854806,
      "id": 2228737241,
      "node_id": "PRRC_kwDOABII586E19TZ",
      "diff_hunk": "@@ -1446,6 +1462,19 @@ void CWallet::transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRe\n             });\n         }\n     }\n+\n+    // reverse what happens in transactionAddedToMempool",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "279b45e9ba649b05508ff19eec7550d53cd5306c",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe be more specific? Unset `v3_spend` to make it possible to spend from this transaction again. If this transaction was replaced by another child of the same parent, their transactionAddedToMempool will update `v3_spend`.",
      "created_at": "2025-07-24T14:44:17Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228737241",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228737241"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228739872",
      "pull_request_review_id": 3051854806,
      "id": 2228739872,
      "node_id": "PRRC_kwDOABII586E198g",
      "diff_hunk": "@@ -390,6 +390,7 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n             if (nDepth == 0 && params.track_version) {\n                 if (coinControl->m_version == TRUC_VERSION) {\n                     if (wtx.tx->version != TRUC_VERSION) continue;\n+                    if (wtx.v3_spend.has_value()) continue; // this unconfirmed v3 transaction already has a child\n                 } else {\n                     if (wtx.tx->version == TRUC_VERSION) continue;",
      "path": "src/wallet/spend.cpp",
      "position": 43,
      "original_position": 6,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "279b45e9ba649b05508ff19eec7550d53cd5306c",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think you could `Assume(!wtx.v3_spend.has_value())` here",
      "created_at": "2025-07-24T14:45:10Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228739872",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228739872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 407,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228744739",
      "pull_request_review_id": 3051854806,
      "id": 2228744739,
      "node_id": "PRRC_kwDOABII586E1_Ij",
      "diff_hunk": "@@ -258,6 +258,10 @@ class CWalletTx\n     // BlockConflicted.\n     std::set<Txid> mempool_conflicts;\n \n+    // Track v3 mempool tx that spends from this tx\n+    // so that we don't try to create another unconfirmed child\n+    std::optional<Txid> v3_spend;",
      "path": "src/wallet/transaction.h",
      "position": null,
      "original_position": 6,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "279b45e9ba649b05508ff19eec7550d53cd5306c",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Naming everywhere should replace \"v3\" with \"truc.\" We have so many versions and \"legacy\" types everywhere, so it's best to try to reduce ambiguity when possible. Also, \"child\" is more clear than \"spend,\" and \"in_mempool\" would also help with clarity.\r\n\r\n```suggestion\r\n    std::optional<Txid> truc_child_in_mempool;\r\n```",
      "created_at": "2025-07-24T14:46:59Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228744739",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228744739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228751179",
      "pull_request_review_id": 3051854806,
      "id": 2228751179,
      "node_id": "PRRC_kwDOABII586E2AtL",
      "diff_hunk": "@@ -109,10 +109,10 @@ class CCoinControl\n     int m_max_depth = DEFAULT_MAX_DEPTH;\n     //! SigningProvider that has pubkeys and scripts to do spend size estimation for external inputs\n     FlatSigningProvider m_external_provider;\n+    //! Version\n+    uint32_t m_version = CTransaction::CURRENT_VERSION;\n     //! Locktime\n     std::optional<uint32_t> m_locktime;\n-    //! Version\n-    std::optional<uint32_t> m_version;",
      "path": "src/wallet/coincontrol.h",
      "position": null,
      "original_position": 9,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "eecff95b6fe611c8ed40895108aacd6b44543234",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Question: why is eecff95b6fe611c8ed40895108aacd6b44543234 necessary? It would be helpful to put the motivation in the commit message.",
      "created_at": "2025-07-24T14:49:30Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228751179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228751179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 112,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228759954",
      "pull_request_review_id": 3051854806,
      "id": 2228759954,
      "node_id": "PRRC_kwDOABII586E2C2S",
      "diff_hunk": "@@ -1406,6 +1406,17 @@ void CWallet::transactionAddedToMempool(const CTransactionRef& tx) {\n                 CWalletTx& wtx = wallet_it->second;\n                 if (wtx.isUnconfirmed()) {\n                     wtx.v3_spend = tx->GetHash();\n+                    // Find all wallet transactions that spend utxos from this tx",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "2f62dec3681be78dddf9c72f3eca2f20f363834f",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Again would be helpful to add one or two sentences to explain why we need to do this and why marking as mempool conflict is the appropriate treatment for a sibling (I don't think it's immediately obvious to everyone).",
      "created_at": "2025-07-24T14:52:54Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228759954",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228759954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1409,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228762116",
      "pull_request_review_id": 3051854806,
      "id": 2228762116,
      "node_id": "PRRC_kwDOABII586E2DYE",
      "diff_hunk": "@@ -1406,6 +1406,17 @@ void CWallet::transactionAddedToMempool(const CTransactionRef& tx) {\n                 CWalletTx& wtx = wallet_it->second;\n                 if (wtx.isUnconfirmed()) {\n                     wtx.v3_spend = tx->GetHash();\n+                    // Find all wallet transactions that spend utxos from this tx\n+                    for (long unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n+                        for (auto range = mapTxSpends.equal_range(COutPoint(wtx.tx->GetHash(), i)); range.first != range.second; range.first++) {\n+                            const Txid& spent_id = range.first->second;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "2f62dec3681be78dddf9c72f3eca2f20f363834f",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Naming this `sibling_txid` would be clearer",
      "created_at": "2025-07-24T14:53:46Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228762116",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228762116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1412,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228770694",
      "pull_request_review_id": 3051854806,
      "id": 2228770694,
      "node_id": "PRRC_kwDOABII586E2FeG",
      "diff_hunk": "@@ -1303,6 +1310,13 @@ RPCHelpMan send()\n             if (options.exists(\"max_tx_weight\")) {\n                 coin_control.m_max_tx_weight = options[\"max_tx_weight\"].getInt<int>();\n             }\n+\n+            if (rawTx.version == TRUC_VERSION) {\n+                if (!coin_control.m_max_tx_weight.has_value() || coin_control.m_max_tx_weight.value() > TRUC_MAX_VSIZE * WITNESS_SCALE_FACTOR) {\n+                    coin_control.m_max_tx_weight = TRUC_MAX_VSIZE * WITNESS_SCALE_FACTOR;\n+                }\n+            }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "e384f69d949b3340484d5a4b1914ef5fad848341",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`m_max_tx_weight` should be corrected to the *minimum* of the original value and the TRUC maximum, otherwise you might be overriding what the user passed in above.",
      "created_at": "2025-07-24T14:56:46Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228770694",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228770694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 1310,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1322,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228771963",
      "pull_request_review_id": 3051854806,
      "id": 2228771963,
      "node_id": "PRRC_kwDOABII586E2Fx7",
      "diff_hunk": "@@ -1303,6 +1310,13 @@ RPCHelpMan send()\n             if (options.exists(\"max_tx_weight\")) {\n                 coin_control.m_max_tx_weight = options[\"max_tx_weight\"].getInt<int>();\n             }\n+\n+            if (rawTx.version == TRUC_VERSION) {\n+                if (!coin_control.m_max_tx_weight.has_value() || coin_control.m_max_tx_weight.value() > TRUC_MAX_VSIZE * WITNESS_SCALE_FACTOR) {\n+                    coin_control.m_max_tx_weight = TRUC_MAX_VSIZE * WITNESS_SCALE_FACTOR;\n+                }\n+            }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "e384f69d949b3340484d5a4b1914ef5fad848341",
      "in_reply_to_id": 2228770694,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(perhaps add a test case for this?)",
      "created_at": "2025-07-24T14:57:16Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228771963",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228771963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 1310,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1322,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228775694",
      "pull_request_review_id": 3051854806,
      "id": 2228775694,
      "node_id": "PRRC_kwDOABII586E2GsO",
      "diff_hunk": "@@ -147,6 +147,7 @@ std::vector<uint32_t> GetDust(const CTransaction& tx, CFeeRate dust_relay_rate);\n // allowing the new transaction version in the wallet/RPC.\n static constexpr decltype(CTransaction::version) TX_MIN_STANDARD_VERSION{1};\n static constexpr decltype(CTransaction::version) TX_MAX_STANDARD_VERSION{3};\n+static constexpr decltype(CTransaction::version) DEFAULT_RAWTX_VERSION{CTransaction::CURRENT_VERSION};",
      "path": "src/policy/policy.h",
      "position": null,
      "original_position": 4,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f9ed2875ab6fbe073bc8ca6192b771bda0db7af2",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "f9ed2875ab6fbe073bc8ca6192b771bda0db7af2: this is unused in the commit and should be squashed into the next one. Also, I think this should live rawtransaction.cpp and wallet should have its own default version constexpr",
      "created_at": "2025-07-24T14:58:34Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228775694",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228775694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228783155",
      "pull_request_review_id": 3051854806,
      "id": 2228783155,
      "node_id": "PRRC_kwDOABII586E2Igz",
      "diff_hunk": "@@ -1302,7 +1302,7 @@ RPCHelpMan send()\n                     ParseOutputs(outputs),\n                     InterpretSubtractFeeFromOutputInstructions(options[\"subtract_fee_from_outputs\"], outputs.getKeys())\n             );\n-            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf, DEFAULT_RAWTX_VERSION);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "2bcdf53a58ee6cd7c70f2afd97a16fce5dcc21c6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think perhaps the wallet's default tx version should be specified in a separate constexpr that lives in the wallet code?",
      "created_at": "2025-07-24T15:00:54Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228783155",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228783155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228802603",
      "pull_request_review_id": 3051854806,
      "id": 2228802603,
      "node_id": "PRRC_kwDOABII586E2NQr",
      "diff_hunk": "@@ -98,7 +98,7 @@ bool IsStandard(const CScript& scriptPubKey, TxoutType& whichType)\n \n bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_datacarrier_bytes, bool permit_bare_multisig, const CFeeRate& dust_relay_fee, std::string& reason)\n {\n-    if (tx.version > TX_MAX_STANDARD_VERSION || tx.version < 1) {\n+    if (tx.version > TX_MAX_STANDARD_VERSION || tx.version < TX_MIN_STANDARD_VERSION) {",
      "path": "src/policy/policy.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "2bcdf53a58ee6cd7c70f2afd97a16fce5dcc21c6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This change is in 2bcdf53a58ee6cd7c70f2afd97a16fce5dcc21c6 but seems to belong in b07d9b92821 instead",
      "created_at": "2025-07-24T15:07:24Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228802603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228802603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": 101,
      "original_start_line": 101,
      "start_side": "LEFT",
      "line": 101,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228809702",
      "pull_request_review_id": 3051854806,
      "id": 2228809702,
      "node_id": "PRRC_kwDOABII586E2O_m",
      "diff_hunk": "@@ -30,6 +30,11 @@\n     MiniWallet,\n )\n \n+ORPHAN_TX_EXPIRE_TIME = 1200",
      "path": "test/functional/test_framework/mempool_util.py",
      "position": null,
      "original_position": 4,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "98e865fb2c2d1231934cc572d578755d18ec56b9",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Orphans don't expire anymore and this is unused (is it from a rebase maybe?)",
      "created_at": "2025-07-24T15:10:05Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228809702",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228809702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228810695",
      "pull_request_review_id": 3051854806,
      "id": 2228810695,
      "node_id": "PRRC_kwDOABII586E2PPH",
      "diff_hunk": "@@ -121,17 +120,9 @@ def _bulk_tx(self, tx, target_vsize):\n         \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n         returns the tx\n         \"\"\"\n-        if target_vsize < tx.get_vsize():\n-            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n-\n         tx.vout.append(CTxOut(nValue=0, scriptPubKey=CScript([OP_RETURN])))\n-        # determine number of needed padding bytes\n-        dummy_vbytes = target_vsize - tx.get_vsize()\n-        # compensate for the increase of the compact-size encoded script length\n-        # (note that the length encoding of the unpadded output script needs one byte)\n-        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n-        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n-        assert_equal(tx.get_vsize(), target_vsize)",
      "path": "test/functional/test_framework/wallet.py",
      "position": 34,
      "original_position": 34,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "98e865fb2c2d1231934cc572d578755d18ec56b9",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe put the `bulk_vout` refactor into a separate commit",
      "created_at": "2025-07-24T15:10:26Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228810695",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228810695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": 124,
      "original_start_line": 124,
      "start_side": "LEFT",
      "line": 134,
      "original_line": 134,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228811904",
      "pull_request_review_id": 3051854806,
      "id": 2228811904,
      "node_id": "PRRC_kwDOABII586E2PiA",
      "diff_hunk": "@@ -0,0 +1,422 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "98e865fb2c2d1231934cc572d578755d18ec56b9",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "s/v3/TRUC\r\n",
      "created_at": "2025-07-24T15:10:54Z",
      "updated_at": "2025-07-24T15:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2228811904",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2228811904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231837660",
      "pull_request_review_id": 3056536309,
      "id": 2231837660,
      "node_id": "PRRC_kwDOABII586FByPc",
      "diff_hunk": "@@ -390,6 +390,7 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n             if (nDepth == 0 && params.track_version) {\n                 if (coinControl->m_version == TRUC_VERSION) {\n                     if (wtx.tx->version != TRUC_VERSION) continue;\n+                    if (wtx.v3_spend.has_value()) continue; // this unconfirmed v3 transaction already has a child\n                 } else {\n                     if (wtx.tx->version == TRUC_VERSION) continue;",
      "path": "src/wallet/spend.cpp",
      "position": 43,
      "original_position": 6,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "279b45e9ba649b05508ff19eec7550d53cd5306c",
      "in_reply_to_id": 2228739872,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why is it safe to assume that the transaction doesn't already have a child here?",
      "created_at": "2025-07-25T19:11:15Z",
      "updated_at": "2025-07-25T19:11:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2231837660",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231837660"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 407,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231981895",
      "pull_request_review_id": 3056754941,
      "id": 2231981895,
      "node_id": "PRRC_kwDOABII586FCVdH",
      "diff_hunk": "@@ -390,6 +390,7 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n             if (nDepth == 0 && params.track_version) {\n                 if (coinControl->m_version == TRUC_VERSION) {\n                     if (wtx.tx->version != TRUC_VERSION) continue;\n+                    if (wtx.v3_spend.has_value()) continue; // this unconfirmed v3 transaction already has a child\n                 } else {\n                     if (wtx.tx->version == TRUC_VERSION) continue;",
      "path": "src/wallet/spend.cpp",
      "position": 43,
      "original_position": 6,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "279b45e9ba649b05508ff19eec7550d53cd5306c",
      "in_reply_to_id": 2228739872,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "non-TRUC transactions shouldn't have TRUC children. I think it would be a bug if we set this variable for a transaction that isn't TRUC",
      "created_at": "2025-07-25T20:49:08Z",
      "updated_at": "2025-07-25T20:49:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2231981895",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2231981895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 407,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2236689505",
      "pull_request_review_id": 3063019095,
      "id": 2236689505,
      "node_id": "PRRC_kwDOABII586FUSxh",
      "diff_hunk": "@@ -390,6 +390,7 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n             if (nDepth == 0 && params.track_version) {\n                 if (coinControl->m_version == TRUC_VERSION) {\n                     if (wtx.tx->version != TRUC_VERSION) continue;\n+                    if (wtx.v3_spend.has_value()) continue; // this unconfirmed v3 transaction already has a child\n                 } else {\n                     if (wtx.tx->version == TRUC_VERSION) continue;",
      "path": "src/wallet/spend.cpp",
      "position": 43,
      "original_position": 6,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "279b45e9ba649b05508ff19eec7550d53cd5306c",
      "in_reply_to_id": 2228739872,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh, that makes sense, I thought that you were talking about changing the if-statement on line 393. ",
      "created_at": "2025-07-28T14:19:06Z",
      "updated_at": "2025-07-28T14:19:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2236689505",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2236689505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 407,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237491835",
      "pull_request_review_id": 3064095739,
      "id": 2237491835,
      "node_id": "PRRC_kwDOABII586FXWp7",
      "diff_hunk": "@@ -283,6 +283,16 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\n             if (input_bytes == -1) {\n                 input_bytes = CalculateMaximumSignedInputSize(txout, &wallet, &coin_control);\n             }\n+            auto it = wallet.mapWallet.find(outpoint.hash);\n+            if (it != wallet.mapWallet.end()) {",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "40c6d135f37a1d8dd64cbea3ca30229c2e012fa2",
      "in_reply_to_id": 2226343248,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-28T18:12:18Z",
      "updated_at": "2025-07-28T18:12:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237491835",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237491835"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 286,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237492581",
      "pull_request_review_id": 3064096780,
      "id": 2237492581,
      "node_id": "PRRC_kwDOABII586FXW1l",
      "diff_hunk": "@@ -1679,7 +1680,7 @@ static RPCHelpMan createpsbt()\n     if (!request.params[3].isNull()) {\n         rbf = request.params[3].get_bool();\n     }\n-    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf, DEFAULT_RAWTX_VERSION);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "2bcdf53a58ee6cd7c70f2afd97a16fce5dcc21c6",
      "in_reply_to_id": 2226356487,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, will add additional tests for these RPCs as well. ",
      "created_at": "2025-07-28T18:12:44Z",
      "updated_at": "2025-07-28T18:12:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237492581",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237492581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1683,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237493859",
      "pull_request_review_id": 3064099408,
      "id": 2237493859,
      "node_id": "PRRC_kwDOABII586FXXJj",
      "diff_hunk": "@@ -1393,6 +1394,21 @@ void CWallet::transactionAddedToMempool(const CTransactionRef& tx) {\n                 return wtx.mempool_conflicts.insert(txid).second ? TxUpdate::CHANGED : TxUpdate::UNCHANGED;\n             });\n         }\n+\n+    }\n+\n+    if (tx->version == TRUC_VERSION) {\n+        // this marks all outputs of any unconfirmed v3 parent transactions as unspendable",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "279b45e9ba649b05508ff19eec7550d53cd5306c",
      "in_reply_to_id": 2228722754,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-28T18:13:14Z",
      "updated_at": "2025-07-28T18:13:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237493859",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237493859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1401,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237494375",
      "pull_request_review_id": 3064100340,
      "id": 2237494375,
      "node_id": "PRRC_kwDOABII586FXXRn",
      "diff_hunk": "@@ -1446,6 +1462,19 @@ void CWallet::transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRe\n             });\n         }\n     }\n+\n+    // reverse what happens in transactionAddedToMempool",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "279b45e9ba649b05508ff19eec7550d53cd5306c",
      "in_reply_to_id": 2228737241,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-28T18:13:23Z",
      "updated_at": "2025-07-28T18:13:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237494375",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237494375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237495065",
      "pull_request_review_id": 3064101534,
      "id": 2237495065,
      "node_id": "PRRC_kwDOABII586FXXcZ",
      "diff_hunk": "@@ -258,6 +258,10 @@ class CWalletTx\n     // BlockConflicted.\n     std::set<Txid> mempool_conflicts;\n \n+    // Track v3 mempool tx that spends from this tx\n+    // so that we don't try to create another unconfirmed child\n+    std::optional<Txid> v3_spend;",
      "path": "src/wallet/transaction.h",
      "position": null,
      "original_position": 6,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "279b45e9ba649b05508ff19eec7550d53cd5306c",
      "in_reply_to_id": 2228744739,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-28T18:13:41Z",
      "updated_at": "2025-07-28T18:13:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237495065",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237495065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237496037",
      "pull_request_review_id": 3064103012,
      "id": 2237496037,
      "node_id": "PRRC_kwDOABII586FXXrl",
      "diff_hunk": "@@ -109,10 +109,10 @@ class CCoinControl\n     int m_max_depth = DEFAULT_MAX_DEPTH;\n     //! SigningProvider that has pubkeys and scripts to do spend size estimation for external inputs\n     FlatSigningProvider m_external_provider;\n+    //! Version\n+    uint32_t m_version = CTransaction::CURRENT_VERSION;\n     //! Locktime\n     std::optional<uint32_t> m_locktime;\n-    //! Version\n-    std::optional<uint32_t> m_version;",
      "path": "src/wallet/coincontrol.h",
      "position": null,
      "original_position": 9,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "eecff95b6fe611c8ed40895108aacd6b44543234",
      "in_reply_to_id": 2228751179,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added description to commit message.",
      "created_at": "2025-07-28T18:14:03Z",
      "updated_at": "2025-07-28T18:14:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237496037",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237496037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 112,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237499169",
      "pull_request_review_id": 3064107884,
      "id": 2237499169,
      "node_id": "PRRC_kwDOABII586FXYch",
      "diff_hunk": "@@ -1406,6 +1406,17 @@ void CWallet::transactionAddedToMempool(const CTransactionRef& tx) {\n                 CWalletTx& wtx = wallet_it->second;\n                 if (wtx.isUnconfirmed()) {\n                     wtx.v3_spend = tx->GetHash();\n+                    // Find all wallet transactions that spend utxos from this tx",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "2f62dec3681be78dddf9c72f3eca2f20f363834f",
      "in_reply_to_id": 2228759954,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-28T18:15:55Z",
      "updated_at": "2025-07-28T18:15:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237499169",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237499169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1409,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237499397",
      "pull_request_review_id": 3064108207,
      "id": 2237499397,
      "node_id": "PRRC_kwDOABII586FXYgF",
      "diff_hunk": "@@ -1406,6 +1406,17 @@ void CWallet::transactionAddedToMempool(const CTransactionRef& tx) {\n                 CWalletTx& wtx = wallet_it->second;\n                 if (wtx.isUnconfirmed()) {\n                     wtx.v3_spend = tx->GetHash();\n+                    // Find all wallet transactions that spend utxos from this tx\n+                    for (long unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n+                        for (auto range = mapTxSpends.equal_range(COutPoint(wtx.tx->GetHash(), i)); range.first != range.second; range.first++) {\n+                            const Txid& spent_id = range.first->second;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "2f62dec3681be78dddf9c72f3eca2f20f363834f",
      "in_reply_to_id": 2228762116,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-28T18:16:03Z",
      "updated_at": "2025-07-28T18:16:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237499397",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237499397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1412,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237500416",
      "pull_request_review_id": 3064110141,
      "id": 2237500416,
      "node_id": "PRRC_kwDOABII586FXYwA",
      "diff_hunk": "@@ -1303,6 +1310,13 @@ RPCHelpMan send()\n             if (options.exists(\"max_tx_weight\")) {\n                 coin_control.m_max_tx_weight = options[\"max_tx_weight\"].getInt<int>();\n             }\n+\n+            if (rawTx.version == TRUC_VERSION) {\n+                if (!coin_control.m_max_tx_weight.has_value() || coin_control.m_max_tx_weight.value() > TRUC_MAX_VSIZE * WITNESS_SCALE_FACTOR) {\n+                    coin_control.m_max_tx_weight = TRUC_MAX_VSIZE * WITNESS_SCALE_FACTOR;\n+                }\n+            }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "e384f69d949b3340484d5a4b1914ef5fad848341",
      "in_reply_to_id": 2228770694,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've corrected the code and will add a test case for this",
      "created_at": "2025-07-28T18:16:37Z",
      "updated_at": "2025-07-28T18:16:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237500416",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237500416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 1310,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1322,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237500806",
      "pull_request_review_id": 3064110576,
      "id": 2237500806,
      "node_id": "PRRC_kwDOABII586FXY2G",
      "diff_hunk": "@@ -147,6 +147,7 @@ std::vector<uint32_t> GetDust(const CTransaction& tx, CFeeRate dust_relay_rate);\n // allowing the new transaction version in the wallet/RPC.\n static constexpr decltype(CTransaction::version) TX_MIN_STANDARD_VERSION{1};\n static constexpr decltype(CTransaction::version) TX_MAX_STANDARD_VERSION{3};\n+static constexpr decltype(CTransaction::version) DEFAULT_RAWTX_VERSION{CTransaction::CURRENT_VERSION};",
      "path": "src/policy/policy.h",
      "position": null,
      "original_position": 4,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f9ed2875ab6fbe073bc8ca6192b771bda0db7af2",
      "in_reply_to_id": 2228775694,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-28T18:16:46Z",
      "updated_at": "2025-07-28T18:16:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237500806",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237500806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237501117",
      "pull_request_review_id": 3064111089,
      "id": 2237501117,
      "node_id": "PRRC_kwDOABII586FXY69",
      "diff_hunk": "@@ -1302,7 +1302,7 @@ RPCHelpMan send()\n                     ParseOutputs(outputs),\n                     InterpretSubtractFeeFromOutputInstructions(options[\"subtract_fee_from_outputs\"], outputs.getKeys())\n             );\n-            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf, DEFAULT_RAWTX_VERSION);",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "2bcdf53a58ee6cd7c70f2afd97a16fce5dcc21c6",
      "in_reply_to_id": 2228783155,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-28T18:16:58Z",
      "updated_at": "2025-07-28T18:16:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237501117",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237501117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237501642",
      "pull_request_review_id": 3064112135,
      "id": 2237501642,
      "node_id": "PRRC_kwDOABII586FXZDK",
      "diff_hunk": "@@ -98,7 +98,7 @@ bool IsStandard(const CScript& scriptPubKey, TxoutType& whichType)\n \n bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_datacarrier_bytes, bool permit_bare_multisig, const CFeeRate& dust_relay_fee, std::string& reason)\n {\n-    if (tx.version > TX_MAX_STANDARD_VERSION || tx.version < 1) {\n+    if (tx.version > TX_MAX_STANDARD_VERSION || tx.version < TX_MIN_STANDARD_VERSION) {",
      "path": "src/policy/policy.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "2bcdf53a58ee6cd7c70f2afd97a16fce5dcc21c6",
      "in_reply_to_id": 2228802603,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've moved the change to the correct commit",
      "created_at": "2025-07-28T18:17:16Z",
      "updated_at": "2025-07-28T18:17:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237501642",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237501642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": 101,
      "original_start_line": 101,
      "start_side": "LEFT",
      "line": 101,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237502419",
      "pull_request_review_id": 3064113139,
      "id": 2237502419,
      "node_id": "PRRC_kwDOABII586FXZPT",
      "diff_hunk": "@@ -30,6 +30,11 @@\n     MiniWallet,\n )\n \n+ORPHAN_TX_EXPIRE_TIME = 1200",
      "path": "test/functional/test_framework/mempool_util.py",
      "position": null,
      "original_position": 4,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "98e865fb2c2d1231934cc572d578755d18ec56b9",
      "in_reply_to_id": 2228809702,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've removed it, pretty sure it was from a rebase",
      "created_at": "2025-07-28T18:17:40Z",
      "updated_at": "2025-07-28T18:17:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237502419",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237502419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237502775",
      "pull_request_review_id": 3064113891,
      "id": 2237502775,
      "node_id": "PRRC_kwDOABII586FXZU3",
      "diff_hunk": "@@ -121,17 +120,9 @@ def _bulk_tx(self, tx, target_vsize):\n         \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n         returns the tx\n         \"\"\"\n-        if target_vsize < tx.get_vsize():\n-            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n-\n         tx.vout.append(CTxOut(nValue=0, scriptPubKey=CScript([OP_RETURN])))\n-        # determine number of needed padding bytes\n-        dummy_vbytes = target_vsize - tx.get_vsize()\n-        # compensate for the increase of the compact-size encoded script length\n-        # (note that the length encoding of the unpadded output script needs one byte)\n-        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n-        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n-        assert_equal(tx.get_vsize(), target_vsize)",
      "path": "test/functional/test_framework/wallet.py",
      "position": 34,
      "original_position": 34,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "98e865fb2c2d1231934cc572d578755d18ec56b9",
      "in_reply_to_id": 2228810695,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-28T18:17:51Z",
      "updated_at": "2025-07-28T18:17:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237502775",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237502775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": 124,
      "original_start_line": 124,
      "start_side": "LEFT",
      "line": 134,
      "original_line": 134,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237503063",
      "pull_request_review_id": 3064114246,
      "id": 2237503063,
      "node_id": "PRRC_kwDOABII586FXZZX",
      "diff_hunk": "@@ -0,0 +1,422 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "98e865fb2c2d1231934cc572d578755d18ec56b9",
      "in_reply_to_id": 2228811904,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-28T18:17:59Z",
      "updated_at": "2025-07-28T18:17:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237503063",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237503063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237503366",
      "pull_request_review_id": 3064114637,
      "id": 2237503366,
      "node_id": "PRRC_kwDOABII586FXZeG",
      "diff_hunk": "@@ -1393,6 +1394,21 @@ void CWallet::transactionAddedToMempool(const CTransactionRef& tx) {\n                 return wtx.mempool_conflicts.insert(txid).second ? TxUpdate::CHANGED : TxUpdate::UNCHANGED;\n             });\n         }\n+\n+    }\n+\n+    if (tx->version == TRUC_VERSION) {\n+        // this marks all outputs of any unconfirmed v3 parent transactions as unspendable\n+        // if any of its outputs are spent by this transaction\n+        for (const CTxIn& tx_in : tx->vin) {\n+            auto wallet_it = mapWallet.find(tx_in.prevout.hash);\n+            if (wallet_it != mapWallet.end()) {\n+                CWalletTx& wtx = wallet_it->second;\n+                if (wtx.isUnconfirmed()) {\n+                    wtx.v3_spend = tx->GetHash();\n+                }",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "279b45e9ba649b05508ff19eec7550d53cd5306c",
      "in_reply_to_id": 2228715272,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-28T18:18:08Z",
      "updated_at": "2025-07-28T18:18:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2237503366",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2237503366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 1404,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1430,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248640723",
      "pull_request_review_id": 3080238325,
      "id": 2248640723,
      "node_id": "PRRC_kwDOABII586GB4jT",
      "diff_hunk": "@@ -83,6 +83,8 @@ struct CoinFilterParams {\n     bool include_immature_coinbase{false};\n     // By default, skip locked UTXOs\n     bool skip_locked{true};\n+    // Whether or not to care about the tx version\n+    bool track_version{true}; // only used by AvailableCoinsListUnspent",
      "path": "src/wallet/spend.h",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "1910d9b61f23f65335367f2f8dd021ac1ccd907a",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "1910d9b61f23f65335367f2f8dd021ac1ccd907a\r\n\r\nCould be more specific. Also, this isn't only used by AvailableCoinsListUnspent. It's always checked in `AvailableCoins`, but `AvailableCoinsListUnspent` is the only caller that disables it because it's not building a transaction.\r\n\r\n```suggestion\r\n    // When true, filter unconfirmed coins by whether their version's TRUCness matches what is set by CCoinControl.\r\n    bool check_version_trucness{true};\r\n```",
      "created_at": "2025-08-01T18:49:44Z",
      "updated_at": "2025-08-01T19:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2248640723",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248640723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 86,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248642322",
      "pull_request_review_id": 3080238325,
      "id": 2248642322,
      "node_id": "PRRC_kwDOABII586GB48S",
      "diff_hunk": "@@ -390,8 +390,10 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n             if (nDepth == 0 && params.track_version) {\n                 if (coinControl->m_version == TRUC_VERSION) {\n                     if (wtx.tx->version != TRUC_VERSION) continue;\n+                    if (wtx.truc_child_in_mempool.has_value()) continue; // this unconfirmed v3 transaction already has a child",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "7f43b5559c5f508ac210350847bca6f0f0e091be",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "7f43b5559c5f508ac210350847bca6f0f0e091be\r\n\r\nnit: generally prefer comments to live on separate lines\r\n```suggestion\r\n                     // this unconfirmed v3 transaction already has a child\r\n                    if (wtx.truc_child_in_mempool.has_value()) continue;\r\n```",
      "created_at": "2025-08-01T18:50:43Z",
      "updated_at": "2025-08-01T19:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2248642322",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248642322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 393,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248644653",
      "pull_request_review_id": 3080238325,
      "id": 2248644653,
      "node_id": "PRRC_kwDOABII586GB5gt",
      "diff_hunk": "@@ -1446,6 +1463,22 @@ void CWallet::transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRe\n             });\n         }\n     }\n+\n+    if (tx->version == TRUC_VERSION) {\n+        // unset truc_child_in_mempool to make it possible to spend from\n+        // this again. If this tx was replaced by another\n+        // child of the same parent, transactionAddedToMempool\n+        // will update truc_child_in_mempool\n+        for (const CTxIn& tx_in : tx->vin) {\n+            auto wallet_it = mapWallet.find(tx_in.prevout.hash);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "7f43b5559c5f508ac210350847bca6f0f0e091be",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit 7f43b5559c5f508ac210350847bca6f0f0e091be\r\n\r\ncall this `parent_it` as well?",
      "created_at": "2025-08-01T18:52:15Z",
      "updated_at": "2025-08-01T19:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2248644653",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248644653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248646240",
      "pull_request_review_id": 3080238325,
      "id": 2248646240,
      "node_id": "PRRC_kwDOABII586GB55g",
      "diff_hunk": "@@ -1446,6 +1463,22 @@ void CWallet::transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRe\n             });\n         }\n     }\n+\n+    if (tx->version == TRUC_VERSION) {\n+        // unset truc_child_in_mempool to make it possible to spend from\n+        // this again. If this tx was replaced by another",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "7f43b5559c5f508ac210350847bca6f0f0e091be",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        // If this tx has a parent, unset its truc_child_in_mempool to make it possible\r\n        // to spend from the parent again. If this tx was replaced by another\r\n```",
      "created_at": "2025-08-01T18:53:11Z",
      "updated_at": "2025-08-01T19:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2248646240",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248646240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 1468,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1469,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248686896",
      "pull_request_review_id": 3080238325,
      "id": 2248686896,
      "node_id": "PRRC_kwDOABII586GCD0w",
      "diff_hunk": "@@ -1475,6 +1489,15 @@ void CWallet::transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRe\n                 CWalletTx& wtx = wallet_it->second;\n                 if (wtx.truc_child_in_mempool == tx->GetHash()) {\n                     wtx.truc_child_in_mempool = std::nullopt;\n+                    // Find all wallet transactions that spend utxos from this tx",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "ac910c5091088c8081cfae1f31499c0486682a6a",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This comment can be confusing - we're not actually looking for transactions spending from *this* tx. We're looking for siblings of this tx, which spend from utxos of `wtx` (which is actually this transaction's parent). Might be helpful to rename `wallet_it` to `parent_it` and update this comment.",
      "created_at": "2025-08-01T19:05:08Z",
      "updated_at": "2025-08-01T19:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2248686896",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248686896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1492,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248694635",
      "pull_request_review_id": 3080238325,
      "id": 2248694635,
      "node_id": "PRRC_kwDOABII586GCFtr",
      "diff_hunk": "@@ -53,6 +53,6 @@ std::vector<std::pair<CTxDestination, CAmount>> ParseOutputs(const UniValue& out\n void AddOutputs(CMutableTransaction& rawTx, const UniValue& outputs_in);\n \n /** Create a transaction from univalue parameters */\n-CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, std::optional<bool> rbf);\n+CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, std::optional<bool> rbf, const uint32_t& version);",
      "path": "src/rpc/rawtransaction_util.h",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "9b478f1f68c00b5c514a30a53d19cd58fe813795",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "9b478f1f68c00b5c514a30a53d19cd58fe813795\r\n\r\nintegers can just be passed by value",
      "created_at": "2025-08-01T19:10:01Z",
      "updated_at": "2025-08-01T19:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2248694635",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248694635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248721755",
      "pull_request_review_id": 3080238325,
      "id": 2248721755,
      "node_id": "PRRC_kwDOABII586GCMVb",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+Updated RPCs\n+------------\n+The following RPCs now contain a `version` parameter that allows\n+the user to create transactions of any standard version number (1-3):\n+- `createrawtransaction`\n+- `createpsbt`\n+- `send`\n+- `sendall`\n+- `walletcreatefundedpsbt`\n+\n+Wallet\n+------\n+Support has been added for spending version 3 transactions received by",
      "path": "doc/release-notes-32896.md",
      "position": null,
      "original_position": 13,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "a2c43c3b9447377d2f2635e23c9043e40b769dd4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Now that there is `send` and `sendall` support, is it just transactions received by the wallet?",
      "created_at": "2025-08-01T19:26:03Z",
      "updated_at": "2025-08-01T19:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2248721755",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248721755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248722112",
      "pull_request_review_id": 3080238325,
      "id": 2248722112,
      "node_id": "PRRC_kwDOABII586GCMbA",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+Updated RPCs\n+------------\n+The following RPCs now contain a `version` parameter that allows\n+the user to create transactions of any standard version number (1-3):\n+- `createrawtransaction`\n+- `createpsbt`\n+- `send`\n+- `sendall`\n+- `walletcreatefundedpsbt`\n+\n+Wallet\n+------\n+Support has been added for spending version 3 transactions received by\n+the wallet. The wallet ensures that version 3 policy rules are being",
      "path": "doc/release-notes-32896.md",
      "position": null,
      "original_position": 14,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "a2c43c3b9447377d2f2635e23c9043e40b769dd4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe mention TRUC and/or BIP 431?",
      "created_at": "2025-08-01T19:26:18Z",
      "updated_at": "2025-08-01T19:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2248722112",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248722112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248729121",
      "pull_request_review_id": 3080238325,
      "id": 2248729121,
      "node_id": "PRRC_kwDOABII586GCOIh",
      "diff_hunk": "@@ -924,11 +924,17 @@ util::Result<SelectionResult> AutomaticCoinSelection(const CWallet& wallet, Coin\n         // If no solution is found, return the first detailed error (if any).\n         // future: add \"error level\" so the worst one can be picked instead.\n         std::vector<util::Result<SelectionResult>> res_detailed_errors;\n+        CoinSelectionParams temp_selection_params = coin_selection_params;\n         for (const auto& select_filter : ordered_filters) {\n             auto it = filtered_groups.find(select_filter.filter);\n             if (it == filtered_groups.end()) continue;\n+            if (temp_selection_params.m_version == TRUC_VERSION && (select_filter.filter.conf_mine == 0 || select_filter.filter.conf_theirs == 0)) {\n+                if (temp_selection_params.m_max_tx_weight > (TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR)) {\n+                    temp_selection_params.m_max_tx_weight = TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "84c3c1a117e01bb39b0614b8e1af3a1fa703133b",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Missing test coverage for this condition I think? Need `user_input_weight_not_overwritten` test for something spending unconfirmed v3",
      "created_at": "2025-08-01T19:31:27Z",
      "updated_at": "2025-08-01T19:38:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2248729121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2248729121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 932,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 962,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251833326",
      "pull_request_review_id": 3084720478,
      "id": 2251833326,
      "node_id": "PRRC_kwDOABII586GOD_u",
      "diff_hunk": "@@ -83,6 +83,8 @@ struct CoinFilterParams {\n     bool include_immature_coinbase{false};\n     // By default, skip locked UTXOs\n     bool skip_locked{true};\n+    // Whether or not to care about the tx version\n+    bool track_version{true}; // only used by AvailableCoinsListUnspent",
      "path": "src/wallet/spend.h",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "1910d9b61f23f65335367f2f8dd021ac1ccd907a",
      "in_reply_to_id": 2248640723,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-04T15:25:53Z",
      "updated_at": "2025-08-04T15:25:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2251833326",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251833326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 86,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251834983",
      "pull_request_review_id": 3084722572,
      "id": 2251834983,
      "node_id": "PRRC_kwDOABII586GOEZn",
      "diff_hunk": "@@ -390,8 +390,10 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n             if (nDepth == 0 && params.track_version) {\n                 if (coinControl->m_version == TRUC_VERSION) {\n                     if (wtx.tx->version != TRUC_VERSION) continue;\n+                    if (wtx.truc_child_in_mempool.has_value()) continue; // this unconfirmed v3 transaction already has a child",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "7f43b5559c5f508ac210350847bca6f0f0e091be",
      "in_reply_to_id": 2248642322,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-04T15:26:36Z",
      "updated_at": "2025-08-04T15:26:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2251834983",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251834983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 393,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251835356",
      "pull_request_review_id": 3084723042,
      "id": 2251835356,
      "node_id": "PRRC_kwDOABII586GOEfc",
      "diff_hunk": "@@ -1446,6 +1463,22 @@ void CWallet::transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRe\n             });\n         }\n     }\n+\n+    if (tx->version == TRUC_VERSION) {\n+        // unset truc_child_in_mempool to make it possible to spend from\n+        // this again. If this tx was replaced by another",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "7f43b5559c5f508ac210350847bca6f0f0e091be",
      "in_reply_to_id": 2248646240,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-04T15:26:45Z",
      "updated_at": "2025-08-04T15:26:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2251835356",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251835356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 1468,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1469,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251835729",
      "pull_request_review_id": 3084723612,
      "id": 2251835729,
      "node_id": "PRRC_kwDOABII586GOElR",
      "diff_hunk": "@@ -1446,6 +1463,22 @@ void CWallet::transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRe\n             });\n         }\n     }\n+\n+    if (tx->version == TRUC_VERSION) {\n+        // unset truc_child_in_mempool to make it possible to spend from\n+        // this again. If this tx was replaced by another\n+        // child of the same parent, transactionAddedToMempool\n+        // will update truc_child_in_mempool\n+        for (const CTxIn& tx_in : tx->vin) {\n+            auto wallet_it = mapWallet.find(tx_in.prevout.hash);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "7f43b5559c5f508ac210350847bca6f0f0e091be",
      "in_reply_to_id": 2248644653,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-04T15:26:55Z",
      "updated_at": "2025-08-04T15:26:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2251835729",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251835729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251836246",
      "pull_request_review_id": 3084724348,
      "id": 2251836246,
      "node_id": "PRRC_kwDOABII586GOEtW",
      "diff_hunk": "@@ -1475,6 +1489,15 @@ void CWallet::transactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRe\n                 CWalletTx& wtx = wallet_it->second;\n                 if (wtx.truc_child_in_mempool == tx->GetHash()) {\n                     wtx.truc_child_in_mempool = std::nullopt;\n+                    // Find all wallet transactions that spend utxos from this tx",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "ac910c5091088c8081cfae1f31499c0486682a6a",
      "in_reply_to_id": 2248686896,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-04T15:27:09Z",
      "updated_at": "2025-08-04T15:27:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2251836246",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251836246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1492,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251836621",
      "pull_request_review_id": 3084725251,
      "id": 2251836621,
      "node_id": "PRRC_kwDOABII586GOEzN",
      "diff_hunk": "@@ -53,6 +53,6 @@ std::vector<std::pair<CTxDestination, CAmount>> ParseOutputs(const UniValue& out\n void AddOutputs(CMutableTransaction& rawTx, const UniValue& outputs_in);\n \n /** Create a transaction from univalue parameters */\n-CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, std::optional<bool> rbf);\n+CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniValue& outputs_in, const UniValue& locktime, std::optional<bool> rbf, const uint32_t& version);",
      "path": "src/rpc/rawtransaction_util.h",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "9b478f1f68c00b5c514a30a53d19cd58fe813795",
      "in_reply_to_id": 2248694635,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-04T15:27:19Z",
      "updated_at": "2025-08-04T15:27:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2251836621",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251836621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251837028",
      "pull_request_review_id": 3084725758,
      "id": 2251837028,
      "node_id": "PRRC_kwDOABII586GOE5k",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+Updated RPCs\n+------------\n+The following RPCs now contain a `version` parameter that allows\n+the user to create transactions of any standard version number (1-3):\n+- `createrawtransaction`\n+- `createpsbt`\n+- `send`\n+- `sendall`\n+- `walletcreatefundedpsbt`\n+\n+Wallet\n+------\n+Support has been added for spending version 3 transactions received by",
      "path": "doc/release-notes-32896.md",
      "position": null,
      "original_position": 13,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "a2c43c3b9447377d2f2635e23c9043e40b769dd4",
      "in_reply_to_id": 2248721755,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-04T15:27:30Z",
      "updated_at": "2025-08-04T15:27:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2251837028",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251837028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251837270",
      "pull_request_review_id": 3084726047,
      "id": 2251837270,
      "node_id": "PRRC_kwDOABII586GOE9W",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+Updated RPCs\n+------------\n+The following RPCs now contain a `version` parameter that allows\n+the user to create transactions of any standard version number (1-3):\n+- `createrawtransaction`\n+- `createpsbt`\n+- `send`\n+- `sendall`\n+- `walletcreatefundedpsbt`\n+\n+Wallet\n+------\n+Support has been added for spending version 3 transactions received by\n+the wallet. The wallet ensures that version 3 policy rules are being",
      "path": "doc/release-notes-32896.md",
      "position": null,
      "original_position": 14,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "a2c43c3b9447377d2f2635e23c9043e40b769dd4",
      "in_reply_to_id": 2248722112,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-04T15:27:37Z",
      "updated_at": "2025-08-04T15:27:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2251837270",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251837270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251837962",
      "pull_request_review_id": 3084726946,
      "id": 2251837962,
      "node_id": "PRRC_kwDOABII586GOFIK",
      "diff_hunk": "@@ -924,11 +924,17 @@ util::Result<SelectionResult> AutomaticCoinSelection(const CWallet& wallet, Coin\n         // If no solution is found, return the first detailed error (if any).\n         // future: add \"error level\" so the worst one can be picked instead.\n         std::vector<util::Result<SelectionResult>> res_detailed_errors;\n+        CoinSelectionParams temp_selection_params = coin_selection_params;\n         for (const auto& select_filter : ordered_filters) {\n             auto it = filtered_groups.find(select_filter.filter);\n             if (it == filtered_groups.end()) continue;\n+            if (temp_selection_params.m_version == TRUC_VERSION && (select_filter.filter.conf_mine == 0 || select_filter.filter.conf_theirs == 0)) {\n+                if (temp_selection_params.m_max_tx_weight > (TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR)) {\n+                    temp_selection_params.m_max_tx_weight = TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "84c3c1a117e01bb39b0614b8e1af3a1fa703133b",
      "in_reply_to_id": 2248729121,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've added an additional test case.",
      "created_at": "2025-08-04T15:27:55Z",
      "updated_at": "2025-08-04T15:27:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2251837962",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2251837962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 932,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 962,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252602918",
      "pull_request_review_id": 3085782791,
      "id": 2252602918,
      "node_id": "PRRC_kwDOABII586GQ_4m",
      "diff_hunk": "@@ -1404,9 +1404,23 @@ void CWallet::transactionAddedToMempool(const CTransactionRef& tx) {\n         for (const CTxIn& tx_in : tx->vin) {\n             auto parent_it = mapWallet.find(tx_in.prevout.hash);\n             if (parent_it != mapWallet.end()) {\n-                CWalletTx& parent_wtx = parent_it->second;\n-                if (parent_wtx.isUnconfirmed()) {\n-                    parent_wtx.truc_child_in_mempool = tx->GetHash();\n+                CWalletTx& parent_tx = parent_it->second;\n+                if (parent_tx.isUnconfirmed()) {\n+                    parent_tx.truc_child_in_mempool = tx->GetHash();",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "0256da5083b6a430993594b227fbae4e005e6024",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 0256da5083b6a430993594b227fbae4e005e6024 \"wallet: mark unconfirmed v3 siblings as mempool conflicts\"\r\n\r\nnit: This code is unchanged, renaming is not necessary here.",
      "created_at": "2025-08-04T21:21:00Z",
      "updated_at": "2025-08-04T22:40:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2252602918",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252602918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 1407,
      "start_side": "LEFT",
      "line": null,
      "original_line": 1409,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252616177",
      "pull_request_review_id": 3085782791,
      "id": 2252616177,
      "node_id": "PRRC_kwDOABII586GRDHx",
      "diff_hunk": "@@ -1303,6 +1310,15 @@ RPCHelpMan send()\n             if (options.exists(\"max_tx_weight\")) {\n                 coin_control.m_max_tx_weight = options[\"max_tx_weight\"].getInt<int>();\n             }\n+\n+            if (rawTx.version == TRUC_VERSION) {\n+                if (coin_control.m_max_tx_weight.has_value()) {\n+                    coin_control.m_max_tx_weight = std::min<long int>(coin_control.m_max_tx_weight.value(), TRUC_MAX_VSIZE * WITNESS_SCALE_FACTOR);\n+                } else {\n+                    coin_control.m_max_tx_weight = TRUC_MAX_VSIZE * WITNESS_SCALE_FACTOR;\n+                }\n+            }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "8d085d4c2ca451af75a9adfcaebb8cc0ccb3d86c",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 8d085d4c2ca451af75a9adfcaebb8cc0ccb3d86c \"wallet: limit v3 tx weight in coin selection\"\r\n\r\nThis check is redundant since `FundTransaction` is being called and it already is setting the weight appropriately.",
      "created_at": "2025-08-04T21:28:50Z",
      "updated_at": "2025-08-04T22:40:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2252616177",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252616177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 1314,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1320,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252630081",
      "pull_request_review_id": 3085782791,
      "id": 2252630081,
      "node_id": "PRRC_kwDOABII586GRGhB",
      "diff_hunk": "@@ -154,6 +155,11 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         rawTx.nLockTime = nLockTime;\n     }\n \n+    if (version < TX_MIN_STANDARD_VERSION || version > TX_MAX_STANDARD_VERSION) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, version out of range(%s~%s)\", util::ToString(TX_MIN_STANDARD_VERSION), util::ToString(TX_MAX_STANDARD_VERSION)));",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "894a05477e23bddb7385467d0dc07739d8557b6c",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 894a05477e23bddb7385467d0dc07739d8557b6c \"rpc: Support version 3 transaction creation\"\r\n\r\nnit: `util::ToString` is unnecessary if `%d` is used as the format specifier.\r\n\r\n```suggestion\r\n        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, version out of range(%d~%d)\", TX_MIN_STANDARD_VERSION, TX_MAX_STANDARD_VERSION));\r\n```",
      "created_at": "2025-08-04T21:38:53Z",
      "updated_at": "2025-08-04T22:40:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2252630081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252630081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252649623",
      "pull_request_review_id": 3085782791,
      "id": 2252649623,
      "node_id": "PRRC_kwDOABII586GRLSX",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 92,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 09c9f828250e3840d7557374ff568204305e2679 \"test: add truc wallet tests\"\r\n\r\nThis seems unnecessary as `setup_network` will already connect our nodes, and it doesn't look like this test does any disconnections or requires a particular node topography.",
      "created_at": "2025-08-04T21:52:48Z",
      "updated_at": "2025-08-04T22:40:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2252649623",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252649623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 91,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252652028",
      "pull_request_review_id": 3085782791,
      "id": 2252652028,
      "node_id": "PRRC_kwDOABII586GRL38",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 68,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 09c9f828250e3840d7557374ff568204305e2679 \"test: add truc wallet tests\"\r\n\r\nIt looks like we end up having just one wallet per node, and the tests only really care about the wallet separation, not that they are on different nodes. So this should be just `self.num_nodes = 1` with multiple wallets on that single node.",
      "created_at": "2025-08-04T21:54:48Z",
      "updated_at": "2025-08-04T22:40:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2252652028",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252652028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252658444",
      "pull_request_review_id": 3085782791,
      "id": 2252658444,
      "node_id": "PRRC_kwDOABII586GRNcM",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 152,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 09c9f828250e3840d7557374ff568204305e2679 \"test: add truc wallet tests\"\r\n\r\ns/unavailable/available",
      "created_at": "2025-08-04T21:59:11Z",
      "updated_at": "2025-08-04T22:40:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2252658444",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252658444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252660514",
      "pull_request_review_id": 3085782791,
      "id": 2252660514,
      "node_id": "PRRC_kwDOABII586GRN8i",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 188,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 09c9f828250e3840d7557374ff568204305e2679 \"test: add truc wallet tests\"\r\n\r\nThe `getrawmempool` can be avoided:\r\n\r\n```suggestion\r\n        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\r\n```",
      "created_at": "2025-08-04T22:00:50Z",
      "updated_at": "2025-08-04T22:40:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2252660514",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252660514"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 187,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252663859",
      "pull_request_review_id": 3085782791,
      "id": 2252663859,
      "node_id": "PRRC_kwDOABII586GROwz",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 39,
      "original_position": 37,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 09c9f828250e3840d7557374ff568204305e2679 \"test: add truc wallet tests\"\r\n\r\nSince all of the test cases do a `self.generate`, that could be added here as well before `func`.",
      "created_at": "2025-08-04T22:02:58Z",
      "updated_at": "2025-08-04T22:40:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2252663859",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252663859"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252669590",
      "pull_request_review_id": 3085782791,
      "id": 2252669590,
      "node_id": "PRRC_kwDOABII586GRQKW",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 193,
      "original_position": 209,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 09c9f828250e3840d7557374ff568204305e2679 \"test: add truc wallet tests\"\r\n\r\nI don't see how this test is materially different from `truc_tx_with_conflicting_sibling`. Based on the naming, I assume this was added in response to https://github.com/bitcoin/bitcoin/pull/32896/commits/09c9f828250e3840d7557374ff568204305e2679#r2211372152? However, this test isn't testing anything with a change output since the parent tx is from charlie.",
      "created_at": "2025-08-04T22:07:48Z",
      "updated_at": "2025-08-04T22:40:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2252669590",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252669590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 193,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252674316",
      "pull_request_review_id": 3085782791,
      "id": 2252674316,
      "node_id": "PRRC_kwDOABII586GRRUM",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 269,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211379860,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The comment still seems to be there.",
      "created_at": "2025-08-04T22:11:25Z",
      "updated_at": "2025-08-04T22:40:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2252674316",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252674316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252682715",
      "pull_request_review_id": 3085782791,
      "id": 2252682715,
      "node_id": "PRRC_kwDOABII586GRTXb",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # bob spends her output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        # alice tries to spend money\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+\n+        # alice spends both of her outputs\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 328,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 09c9f828250e3840d7557374ff568204305e2679 \"test: add truc wallet tests\"\r\n\r\nFor correctness, use `alive_v2_unspent[\"vout\"]` rather than assume the output is at 0.",
      "created_at": "2025-08-04T22:15:33Z",
      "updated_at": "2025-08-04T22:40:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2252682715",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252682715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 328,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252686015",
      "pull_request_review_id": 3085782791,
      "id": 2252686015,
      "node_id": "PRRC_kwDOABII586GRUK_",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 192,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 09c9f828250e3840d7557374ff568204305e2679 \"test: add truc wallet tests\"\r\n\r\nSince we already have the UTXO from `listunspent`, we don't need to specify the txid and vout individually.\r\n\r\n```suggestion\r\n        inputs=[alice_unspent]\r\n```\r\n\r\nSince this is short, it could also be inlined. This comment applies throughout this file.",
      "created_at": "2025-08-04T22:17:14Z",
      "updated_at": "2025-08-04T22:40:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2252686015",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252686015"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252692332",
      "pull_request_review_id": 3085782791,
      "id": 2252692332,
      "node_id": "PRRC_kwDOABII586GRVts",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # bob spends her output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        # alice tries to spend money\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 325,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 09c9f828250e3840d7557374ff568204305e2679 \"test: add truc wallet tests\"\r\n\r\n`listunspent` also has a `maxconf`, so this could be `self.alice.listunspent(minconf=0, maxconf=0)[0]`",
      "created_at": "2025-08-04T22:21:18Z",
      "updated_at": "2025-08-04T22:40:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2252692332",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252692332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252700858",
      "pull_request_review_id": 3085782791,
      "id": 2252700858,
      "node_id": "PRRC_kwDOABII586GRXy6",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # bob spends her output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        # alice tries to spend money\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+\n+        # alice spends both of her outputs\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+        # bob can't create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0},]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, inputs, outputs, 2)\n+        # bob can now create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0},]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, inputs, outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+        self.generate(self.nodes[2], 1)\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[2], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+        self.generate(self.nodes[2], 1)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}\n+        )\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten_v3_child(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc child maximum\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_CHILD_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_CHILD_MAX_VSIZE/2)}\n+        )\n+\n+        self.generate(self.nodes[2], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def createpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with createpsbt\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.createpsbt(inputs=inputs, outputs=outputs, version=3)\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def send_v3(self):\n+        self.log.info(\"Test setting version to 3 with `send`\")\n+        self.generate(self.nodes[2], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        tx_hex = self.charlie.send(outputs=outputs, add_to_wallet=False, version=3)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall\")\n+        self.generate(self.nodes[2], 1)\n+\n+        tx_hex = self.charlie.sendall(recipients=[self.alice.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_with_unconfirmed_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall + unconfirmed inputs\")\n+\n+        inputs=[]\n+\n+        # confirmed v2 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        confirmed_v2 = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # confirmed v3 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        confirmed_v3 = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # unconfirmed v2 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        unconfirmed_v2 = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # unconfirmed v3 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        unconfirmed_v3 = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # Test that the only unconfirmed inputs this v3 tx spends are v3\n+        tx_hex = self.charlie.sendall([self.bob.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+\n+        decoded_tx = self.charlie.decoderawtransaction(tx_hex)\n+        decoded_vin_txids = [txin[\"txid\"] for txin in decoded_tx[\"vin\"]]\n+\n+        assert_equal(decoded_tx[\"version\"], 3)\n+\n+        assert confirmed_v3 in decoded_vin_txids\n+        assert confirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v3 in decoded_vin_txids\n+        assert unconfirmed_v2 not in decoded_vin_txids\n+\n+        # Test that the only unconfirmed inputs this v2 tx spends are v2\n+        tx_hex = self.charlie.sendall([self.bob.getnewaddress()], version=2, add_to_wallet=False)[\"hex\"]\n+\n+        decoded_tx = self.charlie.decoderawtransaction(tx_hex)\n+        decoded_vin_txids = [txin[\"txid\"] for txin in decoded_tx[\"vin\"]]\n+\n+        assert_equal(decoded_tx[\"version\"], 2)\n+\n+        assert confirmed_v3 in decoded_vin_txids\n+        assert confirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v3 not in decoded_vin_txids\n+\n+    @cleanup\n+    def walletcreatefundedpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with walletcreatefundedpsbt\")\n+        self.log.info(\"Test setting version to 3 with createpsbt\")",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 551,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 09c9f828250e3840d7557374ff568204305e2679 \"test: add truc wallet tests\"\r\n\r\nThis log is not supposed to be here.",
      "created_at": "2025-08-04T22:27:31Z",
      "updated_at": "2025-08-04T22:40:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2252700858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2252700858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 551,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2253418093",
      "pull_request_review_id": 3086959554,
      "id": 2253418093,
      "node_id": "PRRC_kwDOABII586GUG5t",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # bob spends her output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        # alice tries to spend money\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+\n+        # alice spends both of her outputs\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+        # bob can't create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0},]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, inputs, outputs, 2)\n+        # bob can now create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0},]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, inputs, outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+        self.generate(self.nodes[2], 1)\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[2], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+        self.generate(self.nodes[2], 1)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}\n+        )\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten_v3_child(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc child maximum\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_CHILD_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_CHILD_MAX_VSIZE/2)}\n+        )\n+\n+        self.generate(self.nodes[2], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def createpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with createpsbt\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.createpsbt(inputs=inputs, outputs=outputs, version=3)\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def send_v3(self):\n+        self.log.info(\"Test setting version to 3 with `send`\")\n+        self.generate(self.nodes[2], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        tx_hex = self.charlie.send(outputs=outputs, add_to_wallet=False, version=3)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall\")\n+        self.generate(self.nodes[2], 1)\n+\n+        tx_hex = self.charlie.sendall(recipients=[self.alice.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_with_unconfirmed_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall + unconfirmed inputs\")\n+\n+        inputs=[]\n+\n+        # confirmed v2 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        confirmed_v2 = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # confirmed v3 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        confirmed_v3 = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # unconfirmed v2 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        unconfirmed_v2 = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # unconfirmed v3 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        unconfirmed_v3 = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # Test that the only unconfirmed inputs this v3 tx spends are v3\n+        tx_hex = self.charlie.sendall([self.bob.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+\n+        decoded_tx = self.charlie.decoderawtransaction(tx_hex)\n+        decoded_vin_txids = [txin[\"txid\"] for txin in decoded_tx[\"vin\"]]\n+\n+        assert_equal(decoded_tx[\"version\"], 3)\n+\n+        assert confirmed_v3 in decoded_vin_txids",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 493,
      "original_position": 530,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "0563fc12633a20bd4be04a52f3ee6568ec772caa",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://cirrus-ci.com/task/4521033710960640?logs=ci#L2066:\n\n```\n[11:45:25.309]  test  2025-08-04T15:45:24.445408Z TestFramework (ERROR): Unexpected exception \n[11:45:25.309]                                    Traceback (most recent call last):\n[11:45:25.309]                                      File \"/ci_container_base/test/functional/test_framework/test_framework.py\", line 195, in main\n[11:45:25.309]                                        self.run_test()\n[11:45:25.309]                                      File \"/ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/test/functional/wallet_v3_txs.py\", line 122, in run_test\n[11:45:25.309]                                        self.sendall_with_unconfirmed_v3()\n[11:45:25.309]                                      File \"/ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/test/functional/wallet_v3_txs.py\", line 37, in wrapper\n[11:45:25.309]                                        func(self, *args)\n[11:45:25.309]                                      File \"/ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/test/functional/wallet_v3_txs.py\", line 530, in sendall_with_unconfirmed_v3\n[11:45:25.309]                                        assert confirmed_v3 in decoded_vin_txids\n[11:45:25.309]                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n[11:45:25.309]                                    AssertionError",
      "created_at": "2025-08-05T07:34:38Z",
      "updated_at": "2025-08-05T07:34:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2253418093",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2253418093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 493,
      "original_line": 493,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255166434",
      "pull_request_review_id": 3089461689,
      "id": 2255166434,
      "node_id": "PRRC_kwDOABII586Gaxvi",
      "diff_hunk": "@@ -1404,9 +1404,23 @@ void CWallet::transactionAddedToMempool(const CTransactionRef& tx) {\n         for (const CTxIn& tx_in : tx->vin) {\n             auto parent_it = mapWallet.find(tx_in.prevout.hash);\n             if (parent_it != mapWallet.end()) {\n-                CWalletTx& parent_wtx = parent_it->second;\n-                if (parent_wtx.isUnconfirmed()) {\n-                    parent_wtx.truc_child_in_mempool = tx->GetHash();\n+                CWalletTx& parent_tx = parent_it->second;\n+                if (parent_tx.isUnconfirmed()) {\n+                    parent_tx.truc_child_in_mempool = tx->GetHash();",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "0256da5083b6a430993594b227fbae4e005e6024",
      "in_reply_to_id": 2252602918,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've fixed how these variables are named.",
      "created_at": "2025-08-05T19:34:03Z",
      "updated_at": "2025-08-05T19:34:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2255166434",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255166434"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 1407,
      "start_side": "LEFT",
      "line": null,
      "original_line": 1409,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255167142",
      "pull_request_review_id": 3089462979,
      "id": 2255167142,
      "node_id": "PRRC_kwDOABII586Gax6m",
      "diff_hunk": "@@ -1303,6 +1310,15 @@ RPCHelpMan send()\n             if (options.exists(\"max_tx_weight\")) {\n                 coin_control.m_max_tx_weight = options[\"max_tx_weight\"].getInt<int>();\n             }\n+\n+            if (rawTx.version == TRUC_VERSION) {\n+                if (coin_control.m_max_tx_weight.has_value()) {\n+                    coin_control.m_max_tx_weight = std::min<long int>(coin_control.m_max_tx_weight.value(), TRUC_MAX_VSIZE * WITNESS_SCALE_FACTOR);\n+                } else {\n+                    coin_control.m_max_tx_weight = TRUC_MAX_VSIZE * WITNESS_SCALE_FACTOR;\n+                }\n+            }",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "8d085d4c2ca451af75a9adfcaebb8cc0ccb3d86c",
      "in_reply_to_id": 2252616177,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've removed it.",
      "created_at": "2025-08-05T19:34:20Z",
      "updated_at": "2025-08-05T19:34:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2255167142",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255167142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 1314,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1320,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255167614",
      "pull_request_review_id": 3089463975,
      "id": 2255167614,
      "node_id": "PRRC_kwDOABII586GayB-",
      "diff_hunk": "@@ -154,6 +155,11 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         rawTx.nLockTime = nLockTime;\n     }\n \n+    if (version < TX_MIN_STANDARD_VERSION || version > TX_MAX_STANDARD_VERSION) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, version out of range(%s~%s)\", util::ToString(TX_MIN_STANDARD_VERSION), util::ToString(TX_MAX_STANDARD_VERSION)));",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "894a05477e23bddb7385467d0dc07739d8557b6c",
      "in_reply_to_id": 2252630081,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-05T19:34:30Z",
      "updated_at": "2025-08-05T19:34:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2255167614",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255167614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255168211",
      "pull_request_review_id": 3089464776,
      "id": 2255168211,
      "node_id": "PRRC_kwDOABII586GayLT",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 92,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": 2252649623,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've removed it",
      "created_at": "2025-08-05T19:34:46Z",
      "updated_at": "2025-08-05T19:34:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2255168211",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255168211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 91,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255169474",
      "pull_request_review_id": 3089466795,
      "id": 2255169474,
      "node_id": "PRRC_kwDOABII586GayfC",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 68,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": 2252652028,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-05T19:35:17Z",
      "updated_at": "2025-08-05T19:35:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2255169474",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255169474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255169904",
      "pull_request_review_id": 3089467693,
      "id": 2255169904,
      "node_id": "PRRC_kwDOABII586Gaylw",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 152,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": 2252658444,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-05T19:35:28Z",
      "updated_at": "2025-08-05T19:35:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2255169904",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255169904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255172700",
      "pull_request_review_id": 3089472211,
      "id": 2255172700,
      "node_id": "PRRC_kwDOABII586GazRc",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 188,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": 2252660514,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done in both places where this was applicable.",
      "created_at": "2025-08-05T19:36:44Z",
      "updated_at": "2025-08-05T19:36:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2255172700",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255172700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 187,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255174104",
      "pull_request_review_id": 3089474565,
      "id": 2255174104,
      "node_id": "PRRC_kwDOABII586GaznY",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 39,
      "original_position": 37,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": 2252663859,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-05T19:37:26Z",
      "updated_at": "2025-08-05T19:37:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2255174104",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255174104"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255177206",
      "pull_request_review_id": 3089480151,
      "id": 2255177206,
      "node_id": "PRRC_kwDOABII586Ga0X2",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 193,
      "original_position": 209,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": 2252669590,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've updated this test so it actually tests spending change now.",
      "created_at": "2025-08-05T19:38:59Z",
      "updated_at": "2025-08-05T19:38:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2255177206",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255177206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 193,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255181268",
      "pull_request_review_id": 3089487799,
      "id": 2255181268,
      "node_id": "PRRC_kwDOABII586Ga1XU",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 269,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211379860,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The comment was in multiple places, I've removed it now.",
      "created_at": "2025-08-05T19:41:01Z",
      "updated_at": "2025-08-05T19:41:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2255181268",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255181268"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255181611",
      "pull_request_review_id": 3089488323,
      "id": 2255181611,
      "node_id": "PRRC_kwDOABII586Ga1cr",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # bob spends her output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        # alice tries to spend money\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+\n+        # alice spends both of her outputs\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 328,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": 2252682715,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-05T19:41:13Z",
      "updated_at": "2025-08-05T19:41:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2255181611",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255181611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 328,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255182702",
      "pull_request_review_id": 3089490204,
      "id": 2255182702,
      "node_id": "PRRC_kwDOABII586Ga1tu",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 192,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": 2252686015,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done here and throughout the file",
      "created_at": "2025-08-05T19:41:43Z",
      "updated_at": "2025-08-05T19:41:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2255182702",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255182702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255183692",
      "pull_request_review_id": 3089491936,
      "id": 2255183692,
      "node_id": "PRRC_kwDOABII586Ga19M",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # bob spends her output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        # alice tries to spend money\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 325,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": 2252692332,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-05T19:42:09Z",
      "updated_at": "2025-08-05T19:42:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2255183692",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255183692"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255184775",
      "pull_request_review_id": 3089493527,
      "id": 2255184775,
      "node_id": "PRRC_kwDOABII586Ga2OH",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # bob spends her output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        # alice tries to spend money\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+\n+        # alice spends both of her outputs\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+        # bob can't create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0},]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, inputs, outputs, 2)\n+        # bob can now create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0},]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, inputs, outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+        self.generate(self.nodes[2], 1)\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[2], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+        self.generate(self.nodes[2], 1)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}\n+        )\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten_v3_child(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc child maximum\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_CHILD_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_CHILD_MAX_VSIZE/2)}\n+        )\n+\n+        self.generate(self.nodes[2], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def createpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with createpsbt\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.createpsbt(inputs=inputs, outputs=outputs, version=3)\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def send_v3(self):\n+        self.log.info(\"Test setting version to 3 with `send`\")\n+        self.generate(self.nodes[2], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        tx_hex = self.charlie.send(outputs=outputs, add_to_wallet=False, version=3)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall\")\n+        self.generate(self.nodes[2], 1)\n+\n+        tx_hex = self.charlie.sendall(recipients=[self.alice.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_with_unconfirmed_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall + unconfirmed inputs\")\n+\n+        inputs=[]\n+\n+        # confirmed v2 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        confirmed_v2 = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # confirmed v3 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        confirmed_v3 = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # unconfirmed v2 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        unconfirmed_v2 = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # unconfirmed v3 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        unconfirmed_v3 = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # Test that the only unconfirmed inputs this v3 tx spends are v3\n+        tx_hex = self.charlie.sendall([self.bob.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+\n+        decoded_tx = self.charlie.decoderawtransaction(tx_hex)\n+        decoded_vin_txids = [txin[\"txid\"] for txin in decoded_tx[\"vin\"]]\n+\n+        assert_equal(decoded_tx[\"version\"], 3)\n+\n+        assert confirmed_v3 in decoded_vin_txids\n+        assert confirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v3 in decoded_vin_txids\n+        assert unconfirmed_v2 not in decoded_vin_txids\n+\n+        # Test that the only unconfirmed inputs this v2 tx spends are v2\n+        tx_hex = self.charlie.sendall([self.bob.getnewaddress()], version=2, add_to_wallet=False)[\"hex\"]\n+\n+        decoded_tx = self.charlie.decoderawtransaction(tx_hex)\n+        decoded_vin_txids = [txin[\"txid\"] for txin in decoded_tx[\"vin\"]]\n+\n+        assert_equal(decoded_tx[\"version\"], 2)\n+\n+        assert confirmed_v3 in decoded_vin_txids\n+        assert confirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v3 not in decoded_vin_txids\n+\n+    @cleanup\n+    def walletcreatefundedpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with walletcreatefundedpsbt\")\n+        self.log.info(\"Test setting version to 3 with createpsbt\")",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 551,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "09c9f828250e3840d7557374ff568204305e2679",
      "in_reply_to_id": 2252700858,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've removed it.",
      "created_at": "2025-08-05T19:42:29Z",
      "updated_at": "2025-08-05T19:42:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2255184775",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255184775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 551,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255424371",
      "pull_request_review_id": 3089833442,
      "id": 2255424371,
      "node_id": "PRRC_kwDOABII586Gbwtz",
      "diff_hunk": "@@ -174,6 +174,8 @@ struct CoinSelectionParams {\n      * 1) Received from other wallets, 2) replacing other txs, 3) that have been replaced.\n      */\n     bool m_include_unsafe_inputs = false;\n+    /** The version of the transaction we are trying to create. */\n+    uint32_t m_version = CTransaction::CURRENT_VERSION;",
      "path": "src/wallet/coinselection.h",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit\r\n```suggestion\r\n    uint32_t m_version{CTransaction::CURRENT_VERSION};\r\n```",
      "created_at": "2025-08-05T21:55:03Z",
      "updated_at": "2025-08-05T21:55:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2255424371",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2255424371"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258016408",
      "pull_request_review_id": 3093839590,
      "id": 2258016408,
      "node_id": "PRRC_kwDOABII586GlpiY",
      "diff_hunk": "@@ -1483,6 +1504,11 @@ RPCHelpMan sendall()\n                     if (send_max && fee_rate.GetFee(output.input_bytes) > output.txout.nValue) {\n                         continue;\n                     }\n+                    // we are spending a TRUC child, so we have a\n+                    // lower max weight",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is this supposed to say \"we are spending an unconfirmed TRUC transaction\" ? Also, can be one line?",
      "created_at": "2025-08-06T18:57:18Z",
      "updated_at": "2025-08-06T19:50:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2258016408",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258016408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 1507,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1508,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258108951",
      "pull_request_review_id": 3093839590,
      "id": 2258108951,
      "node_id": "PRRC_kwDOABII586GmAIX",
      "diff_hunk": "@@ -0,0 +1,548 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}\n+        )\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten_v3_child(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc child maximum\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_CHILD_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_CHILD_MAX_VSIZE/2)}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def createpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with createpsbt\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.createpsbt(inputs=[], outputs=outputs, version=3)\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def send_v3(self):\n+        self.log.info(\"Test setting version to 3 with `send`\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        tx_hex = self.charlie.send(outputs=outputs, add_to_wallet=False, version=3)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall\")\n+\n+        tx_hex = self.charlie.sendall(recipients=[self.alice.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_with_unconfirmed_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall + unconfirmed inputs\")\n+\n+        inputs=[]\n+\n+        outputs = {}\n+        for _ in range(2):\n+            outputs[self.alice.getnewaddress()] = 5.0\n+\n+        self.send_tx(self.charlie, inputs, outputs, 2)\n+        self.generate(self.nodes[0], 1)\n+\n+        # confirmed v2 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        confirmed_v2 = self.send_tx(self.alice, inputs, outputs, 2)\n+\n+        # confirmed v3 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        confirmed_v3 = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        # unconfirmed v2 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        unconfirmed_v2 = self.send_tx(self.alice, inputs, outputs, 2)\n+\n+        # unconfirmed v3 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        unconfirmed_v3 = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # Test that the only unconfirmed inputs this v3 tx spends are v3\n+        tx_hex = self.alice.sendall([self.bob.getnewaddress()], version=3, add_to_wallet=False, minconf=0)[\"hex\"]\n+\n+        decoded_tx = self.alice.decoderawtransaction(tx_hex)\n+        decoded_vin_txids = [txin[\"txid\"] for txin in decoded_tx[\"vin\"]]\n+\n+        assert_equal(decoded_tx[\"version\"], 3)\n+\n+        assert confirmed_v3 in decoded_vin_txids\n+        assert confirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v3 in decoded_vin_txids\n+        assert unconfirmed_v2 not in decoded_vin_txids\n+\n+        # Test that the only unconfirmed inputs this v2 tx spends are v2\n+        tx_hex = self.alice.sendall([self.bob.getnewaddress()], version=2, add_to_wallet=False, minconf=0)[\"hex\"]\n+\n+        decoded_tx = self.alice.decoderawtransaction(tx_hex)\n+        decoded_vin_txids = [txin[\"txid\"] for txin in decoded_tx[\"vin\"]]\n+\n+        assert_equal(decoded_tx[\"version\"], 2)\n+\n+        assert confirmed_v3 in decoded_vin_txids\n+        assert confirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v3 not in decoded_vin_txids\n+\n+    @cleanup\n+    def walletcreatefundedpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with walletcreatefundedpsbt\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.walletcreatefundedpsbt(inputs=[], outputs=outputs, version=3)[\"psbt\"]\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_truc_weight_limit(self):\n+        self.charlie.sendall([self.alice.getnewaddress() for _ in range(300)], add_to_wallet=False)",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 521,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could make this version 2 to be explicit\r\n\r\nAlso, could make this more efficient by reusing the outputs vector",
      "created_at": "2025-08-06T19:42:18Z",
      "updated_at": "2025-08-06T19:50:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2258108951",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258108951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 521,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258112001",
      "pull_request_review_id": 3093839590,
      "id": 2258112001,
      "node_id": "PRRC_kwDOABII586GmA4B",
      "diff_hunk": "@@ -0,0 +1,548 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 147,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\r\n```",
      "created_at": "2025-08-06T19:43:22Z",
      "updated_at": "2025-08-06T19:50:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2258112001",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258112001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258125275",
      "pull_request_review_id": 3093839590,
      "id": 2258125275,
      "node_id": "PRRC_kwDOABII586GmEHb",
      "diff_hunk": "@@ -0,0 +1,548 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}\n+        )\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten_v3_child(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc child maximum\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_CHILD_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_CHILD_MAX_VSIZE/2)}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def createpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with createpsbt\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.createpsbt(inputs=[], outputs=outputs, version=3)\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def send_v3(self):\n+        self.log.info(\"Test setting version to 3 with `send`\")",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 441,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: this format seems to be an outlier\r\n\r\n```suggestion\r\n        self.log.info(\"Test setting version to 3 with send\")\r\n```",
      "created_at": "2025-08-06T19:48:34Z",
      "updated_at": "2025-08-06T19:50:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2258125275",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258125275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258128435",
      "pull_request_review_id": 3093839590,
      "id": 2258128435,
      "node_id": "PRRC_kwDOABII586GmE4z",
      "diff_hunk": "@@ -0,0 +1,548 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}\n+        )\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten_v3_child(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc child maximum\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_CHILD_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_CHILD_MAX_VSIZE/2)}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def createpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with createpsbt\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.createpsbt(inputs=[], outputs=outputs, version=3)\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def send_v3(self):\n+        self.log.info(\"Test setting version to 3 with `send`\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        tx_hex = self.charlie.send(outputs=outputs, add_to_wallet=False, version=3)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall\")\n+\n+        tx_hex = self.charlie.sendall(recipients=[self.alice.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_with_unconfirmed_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall + unconfirmed inputs\")\n+\n+        inputs=[]\n+\n+        outputs = {}\n+        for _ in range(2):\n+            outputs[self.alice.getnewaddress()] = 5.0\n+\n+        self.send_tx(self.charlie, inputs, outputs, 2)\n+        self.generate(self.nodes[0], 1)\n+\n+        # confirmed v2 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        confirmed_v2 = self.send_tx(self.alice, inputs, outputs, 2)\n+\n+        # confirmed v3 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        confirmed_v3 = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        # unconfirmed v2 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        unconfirmed_v2 = self.send_tx(self.alice, inputs, outputs, 2)\n+\n+        # unconfirmed v3 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        unconfirmed_v3 = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # Test that the only unconfirmed inputs this v3 tx spends are v3\n+        tx_hex = self.alice.sendall([self.bob.getnewaddress()], version=3, add_to_wallet=False, minconf=0)[\"hex\"]\n+\n+        decoded_tx = self.alice.decoderawtransaction(tx_hex)\n+        decoded_vin_txids = [txin[\"txid\"] for txin in decoded_tx[\"vin\"]]\n+\n+        assert_equal(decoded_tx[\"version\"], 3)\n+\n+        assert confirmed_v3 in decoded_vin_txids\n+        assert confirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v3 in decoded_vin_txids\n+        assert unconfirmed_v2 not in decoded_vin_txids\n+\n+        # Test that the only unconfirmed inputs this v2 tx spends are v2\n+        tx_hex = self.alice.sendall([self.bob.getnewaddress()], version=2, add_to_wallet=False, minconf=0)[\"hex\"]\n+\n+        decoded_tx = self.alice.decoderawtransaction(tx_hex)\n+        decoded_vin_txids = [txin[\"txid\"] for txin in decoded_tx[\"vin\"]]\n+\n+        assert_equal(decoded_tx[\"version\"], 2)\n+\n+        assert confirmed_v3 in decoded_vin_txids\n+        assert confirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v3 not in decoded_vin_txids\n+\n+    @cleanup\n+    def walletcreatefundedpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with walletcreatefundedpsbt\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.walletcreatefundedpsbt(inputs=[], outputs=outputs, version=3)[\"psbt\"]\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_truc_weight_limit(self):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 520,
      "original_position": 520,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: These last 2 subtests don't have a log associated with them",
      "created_at": "2025-08-06T19:49:57Z",
      "updated_at": "2025-08-06T19:50:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2258128435",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258128435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 520,
      "original_line": 520,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258335380",
      "pull_request_review_id": 3094347623,
      "id": 2258335380,
      "node_id": "PRRC_kwDOABII586Gm3aU",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # bob spends her output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        # alice tries to spend money\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+\n+        # alice spends both of her outputs\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+        # bob can't create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0},]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, inputs, outputs, 2)\n+        # bob can now create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0},]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, inputs, outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+        self.generate(self.nodes[2], 1)\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[2], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+        self.generate(self.nodes[2], 1)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}\n+        )\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten_v3_child(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc child maximum\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_CHILD_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_CHILD_MAX_VSIZE/2)}\n+        )\n+\n+        self.generate(self.nodes[2], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def createpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with createpsbt\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.createpsbt(inputs=inputs, outputs=outputs, version=3)\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def send_v3(self):\n+        self.log.info(\"Test setting version to 3 with `send`\")\n+        self.generate(self.nodes[2], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        tx_hex = self.charlie.send(outputs=outputs, add_to_wallet=False, version=3)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall\")\n+        self.generate(self.nodes[2], 1)\n+\n+        tx_hex = self.charlie.sendall(recipients=[self.alice.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_with_unconfirmed_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall + unconfirmed inputs\")\n+\n+        inputs=[]\n+\n+        # confirmed v2 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        confirmed_v2 = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # confirmed v3 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        confirmed_v3 = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # unconfirmed v2 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        unconfirmed_v2 = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # unconfirmed v3 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        unconfirmed_v3 = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # Test that the only unconfirmed inputs this v3 tx spends are v3\n+        tx_hex = self.charlie.sendall([self.bob.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+\n+        decoded_tx = self.charlie.decoderawtransaction(tx_hex)\n+        decoded_vin_txids = [txin[\"txid\"] for txin in decoded_tx[\"vin\"]]\n+\n+        assert_equal(decoded_tx[\"version\"], 3)\n+\n+        assert confirmed_v3 in decoded_vin_txids",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 493,
      "original_position": 530,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "0563fc12633a20bd4be04a52f3ee6568ec772caa",
      "in_reply_to_id": 2253418093,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The CI failure is caused by `charlie` spending the `confirmed_v2` UTXO when it is creating one of the unconfirmed UTXOs.\r\n\r\nIn 2d37a5113ff0b0ab682788e4ef13c4cc223c17fe, we should still expect to see this failure, and in fact, more likely to see it (~50% of the time) because the UTXO pool of alice is much smaller at this point in time. The only reason we do not see it is because the test framework sets fallbackfee to 20 sat/vb which is in the high feerate regime which changes the behavior of coin selection to prefer smaller input sets. However this is not behavior that we should rely on.\r\n\r\nThis failure can be forced by setting a lower feerate in `send_tx`.\r\n\r\nThere are a few possible solutions:\r\n* explicitly choose the utxos to spend when creating the unconfirmed utxos\r\n* use `lockunspent` on the confirmed utxos before creating the unconfirmed utxos",
      "created_at": "2025-08-06T21:22:28Z",
      "updated_at": "2025-08-06T21:22:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2258335380",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2258335380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 493,
      "original_line": 493,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263232011",
      "pull_request_review_id": 3101178861,
      "id": 2263232011,
      "node_id": "PRRC_kwDOABII586G5i4L",
      "diff_hunk": "@@ -0,0 +1,560 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        self.send_tx(self.bob, inputs, outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # bob spends her output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        # alice tries to spend money\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+\n+        # alice spends both of her outputs\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+        # bob can't create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0},]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, inputs, outputs, 2)\n+        # bob can now create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0},]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, inputs, outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+        self.generate(self.nodes[2], 1)\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[2], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+        self.generate(self.nodes[2], 1)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}\n+        )\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten_v3_child(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc child maximum\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_CHILD_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_CHILD_MAX_VSIZE/2)}\n+        )\n+\n+        self.generate(self.nodes[2], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def createpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with createpsbt\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.createpsbt(inputs=inputs, outputs=outputs, version=3)\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def send_v3(self):\n+        self.log.info(\"Test setting version to 3 with `send`\")\n+        self.generate(self.nodes[2], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        tx_hex = self.charlie.send(outputs=outputs, add_to_wallet=False, version=3)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall\")\n+        self.generate(self.nodes[2], 1)\n+\n+        tx_hex = self.charlie.sendall(recipients=[self.alice.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_with_unconfirmed_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall + unconfirmed inputs\")\n+\n+        inputs=[]\n+\n+        # confirmed v2 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        confirmed_v2 = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # confirmed v3 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        confirmed_v3 = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # unconfirmed v2 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        unconfirmed_v2 = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # unconfirmed v3 utxos\n+        outputs = {self.charlie.getnewaddress() : 2.0}\n+        unconfirmed_v3 = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # Test that the only unconfirmed inputs this v3 tx spends are v3\n+        tx_hex = self.charlie.sendall([self.bob.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+\n+        decoded_tx = self.charlie.decoderawtransaction(tx_hex)\n+        decoded_vin_txids = [txin[\"txid\"] for txin in decoded_tx[\"vin\"]]\n+\n+        assert_equal(decoded_tx[\"version\"], 3)\n+\n+        assert confirmed_v3 in decoded_vin_txids",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 493,
      "original_position": 530,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "0563fc12633a20bd4be04a52f3ee6568ec772caa",
      "in_reply_to_id": 2253418093,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for finding this! I've fixed it by explicitly choosing the utxos to spend. I've also tested that this works by setting a lower feerate in `send_tx` and ensuring that the test still passes. ",
      "created_at": "2025-08-08T15:05:57Z",
      "updated_at": "2025-08-08T15:05:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2263232011",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263232011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 493,
      "original_line": 493,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263232746",
      "pull_request_review_id": 3101179882,
      "id": 2263232746,
      "node_id": "PRRC_kwDOABII586G5jDq",
      "diff_hunk": "@@ -174,6 +174,8 @@ struct CoinSelectionParams {\n      * 1) Received from other wallets, 2) replacing other txs, 3) that have been replaced.\n      */\n     bool m_include_unsafe_inputs = false;\n+    /** The version of the transaction we are trying to create. */\n+    uint32_t m_version = CTransaction::CURRENT_VERSION;",
      "path": "src/wallet/coinselection.h",
      "position": null,
      "original_position": 5,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "in_reply_to_id": 2255424371,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-08T15:06:19Z",
      "updated_at": "2025-08-08T15:06:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2263232746",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263232746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263233230",
      "pull_request_review_id": 3101180657,
      "id": 2263233230,
      "node_id": "PRRC_kwDOABII586G5jLO",
      "diff_hunk": "@@ -1483,6 +1504,11 @@ RPCHelpMan sendall()\n                     if (send_max && fee_rate.GetFee(output.input_bytes) > output.txout.nValue) {\n                         continue;\n                     }\n+                    // we are spending a TRUC child, so we have a\n+                    // lower max weight",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "in_reply_to_id": 2258016408,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-08T15:06:33Z",
      "updated_at": "2025-08-08T15:06:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2263233230",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263233230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 1507,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1508,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263235039",
      "pull_request_review_id": 3101183807,
      "id": 2263235039,
      "node_id": "PRRC_kwDOABII586G5jnf",
      "diff_hunk": "@@ -0,0 +1,548 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}\n+        )\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten_v3_child(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc child maximum\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_CHILD_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_CHILD_MAX_VSIZE/2)}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def createpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with createpsbt\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.createpsbt(inputs=[], outputs=outputs, version=3)\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def send_v3(self):\n+        self.log.info(\"Test setting version to 3 with `send`\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        tx_hex = self.charlie.send(outputs=outputs, add_to_wallet=False, version=3)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall\")\n+\n+        tx_hex = self.charlie.sendall(recipients=[self.alice.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_with_unconfirmed_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall + unconfirmed inputs\")\n+\n+        inputs=[]\n+\n+        outputs = {}\n+        for _ in range(2):\n+            outputs[self.alice.getnewaddress()] = 5.0\n+\n+        self.send_tx(self.charlie, inputs, outputs, 2)\n+        self.generate(self.nodes[0], 1)\n+\n+        # confirmed v2 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        confirmed_v2 = self.send_tx(self.alice, inputs, outputs, 2)\n+\n+        # confirmed v3 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        confirmed_v3 = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        # unconfirmed v2 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        unconfirmed_v2 = self.send_tx(self.alice, inputs, outputs, 2)\n+\n+        # unconfirmed v3 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        unconfirmed_v3 = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # Test that the only unconfirmed inputs this v3 tx spends are v3\n+        tx_hex = self.alice.sendall([self.bob.getnewaddress()], version=3, add_to_wallet=False, minconf=0)[\"hex\"]\n+\n+        decoded_tx = self.alice.decoderawtransaction(tx_hex)\n+        decoded_vin_txids = [txin[\"txid\"] for txin in decoded_tx[\"vin\"]]\n+\n+        assert_equal(decoded_tx[\"version\"], 3)\n+\n+        assert confirmed_v3 in decoded_vin_txids\n+        assert confirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v3 in decoded_vin_txids\n+        assert unconfirmed_v2 not in decoded_vin_txids\n+\n+        # Test that the only unconfirmed inputs this v2 tx spends are v2\n+        tx_hex = self.alice.sendall([self.bob.getnewaddress()], version=2, add_to_wallet=False, minconf=0)[\"hex\"]\n+\n+        decoded_tx = self.alice.decoderawtransaction(tx_hex)\n+        decoded_vin_txids = [txin[\"txid\"] for txin in decoded_tx[\"vin\"]]\n+\n+        assert_equal(decoded_tx[\"version\"], 2)\n+\n+        assert confirmed_v3 in decoded_vin_txids\n+        assert confirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v3 not in decoded_vin_txids\n+\n+    @cleanup\n+    def walletcreatefundedpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with walletcreatefundedpsbt\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.walletcreatefundedpsbt(inputs=[], outputs=outputs, version=3)[\"psbt\"]\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_truc_weight_limit(self):\n+        self.charlie.sendall([self.alice.getnewaddress() for _ in range(300)], add_to_wallet=False)",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 521,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "in_reply_to_id": 2258108951,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've made version 2 explicit. I didn't reuse the output because sendall doesn't allow for duplicate outputs. ",
      "created_at": "2025-08-08T15:07:16Z",
      "updated_at": "2025-08-08T15:07:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2263235039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263235039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 521,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263235423",
      "pull_request_review_id": 3101184318,
      "id": 2263235423,
      "node_id": "PRRC_kwDOABII586G5jtf",
      "diff_hunk": "@@ -0,0 +1,548 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 147,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "in_reply_to_id": 2258112001,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-08T15:07:25Z",
      "updated_at": "2025-08-08T15:07:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2263235423",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263235423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263235703",
      "pull_request_review_id": 3101184696,
      "id": 2263235703,
      "node_id": "PRRC_kwDOABII586G5jx3",
      "diff_hunk": "@@ -0,0 +1,548 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}\n+        )\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten_v3_child(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc child maximum\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_CHILD_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_CHILD_MAX_VSIZE/2)}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def createpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with createpsbt\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.createpsbt(inputs=[], outputs=outputs, version=3)\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def send_v3(self):\n+        self.log.info(\"Test setting version to 3 with `send`\")",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 441,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "in_reply_to_id": 2258125275,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-08T15:07:33Z",
      "updated_at": "2025-08-08T15:07:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2263235703",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263235703"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263236895",
      "pull_request_review_id": 3101186250,
      "id": 2263236895,
      "node_id": "PRRC_kwDOABII586G5kEf",
      "diff_hunk": "@@ -0,0 +1,548 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.v2_tx_spends_confirmed_v3_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_confirmed_v3_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}\n+        )\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten_v3_child(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc child maximum\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_CHILD_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_CHILD_MAX_VSIZE/2)}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def createpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with createpsbt\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.createpsbt(inputs=[], outputs=outputs, version=3)\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def send_v3(self):\n+        self.log.info(\"Test setting version to 3 with `send`\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        tx_hex = self.charlie.send(outputs=outputs, add_to_wallet=False, version=3)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall\")\n+\n+        tx_hex = self.charlie.sendall(recipients=[self.alice.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_with_unconfirmed_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall + unconfirmed inputs\")\n+\n+        inputs=[]\n+\n+        outputs = {}\n+        for _ in range(2):\n+            outputs[self.alice.getnewaddress()] = 5.0\n+\n+        self.send_tx(self.charlie, inputs, outputs, 2)\n+        self.generate(self.nodes[0], 1)\n+\n+        # confirmed v2 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        confirmed_v2 = self.send_tx(self.alice, inputs, outputs, 2)\n+\n+        # confirmed v3 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        confirmed_v3 = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        # unconfirmed v2 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        unconfirmed_v2 = self.send_tx(self.alice, inputs, outputs, 2)\n+\n+        # unconfirmed v3 utxos\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        unconfirmed_v3 = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # Test that the only unconfirmed inputs this v3 tx spends are v3\n+        tx_hex = self.alice.sendall([self.bob.getnewaddress()], version=3, add_to_wallet=False, minconf=0)[\"hex\"]\n+\n+        decoded_tx = self.alice.decoderawtransaction(tx_hex)\n+        decoded_vin_txids = [txin[\"txid\"] for txin in decoded_tx[\"vin\"]]\n+\n+        assert_equal(decoded_tx[\"version\"], 3)\n+\n+        assert confirmed_v3 in decoded_vin_txids\n+        assert confirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v3 in decoded_vin_txids\n+        assert unconfirmed_v2 not in decoded_vin_txids\n+\n+        # Test that the only unconfirmed inputs this v2 tx spends are v2\n+        tx_hex = self.alice.sendall([self.bob.getnewaddress()], version=2, add_to_wallet=False, minconf=0)[\"hex\"]\n+\n+        decoded_tx = self.alice.decoderawtransaction(tx_hex)\n+        decoded_vin_txids = [txin[\"txid\"] for txin in decoded_tx[\"vin\"]]\n+\n+        assert_equal(decoded_tx[\"version\"], 2)\n+\n+        assert confirmed_v3 in decoded_vin_txids\n+        assert confirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v2 in decoded_vin_txids\n+        assert unconfirmed_v3 not in decoded_vin_txids\n+\n+    @cleanup\n+    def walletcreatefundedpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with walletcreatefundedpsbt\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.walletcreatefundedpsbt(inputs=[], outputs=outputs, version=3)[\"psbt\"]\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_truc_weight_limit(self):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 520,
      "original_position": 520,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "43a479ca6885b4222fb5e0f673354e54144d6835",
      "in_reply_to_id": 2258128435,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've added logs.",
      "created_at": "2025-08-08T15:07:56Z",
      "updated_at": "2025-08-08T15:07:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2263236895",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2263236895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 520,
      "original_line": 520,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2264120873",
      "pull_request_review_id": 3102307964,
      "id": 2264120873,
      "node_id": "PRRC_kwDOABII586G874p",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}\n+        )\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten_v3_child(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc child maximum\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_CHILD_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_CHILD_MAX_VSIZE/2)}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def createpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with createpsbt\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.createpsbt(inputs=[], outputs=outputs, version=3)\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def send_v3(self):\n+        self.log.info(\"Test setting version to 3 with send\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        tx_hex = self.charlie.send(outputs=outputs, add_to_wallet=False, version=3)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall\")\n+\n+        tx_hex = self.charlie.sendall(recipients=[self.alice.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_with_unconfirmed_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall + unconfirmed inputs\")\n+\n+        outputs = {}\n+        for _ in range(4):\n+            outputs[self.alice.getnewaddress()] = 2.00001\n+\n+        self.send_tx(self.charlie, [], outputs, 2)\n+        self.generate(self.nodes[0], 1)\n+\n+        unspent1 = self.alice.listunspent()[0]\n+        unspent2 = self.alice.listunspent()[1]\n+        unspent3 = self.alice.listunspent()[2]\n+        unspent4 = self.alice.listunspent()[3]",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 468,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f4d209c0e94fad8435215abba3e61d79585d0d12 \"test: add truc wallet tests\"\r\n\r\nCould store the result of `listunspent` and access the specific utxos by index later:\r\n\r\n```suggestion\r\n        utxos = self.alice.listunspent()\r\n```",
      "created_at": "2025-08-08T23:18:53Z",
      "updated_at": "2025-08-08T23:40:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2264120873",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2264120873"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 465,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 468,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2264133252",
      "pull_request_review_id": 3102307964,
      "id": 2264133252,
      "node_id": "PRRC_kwDOABII586G8-6E",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}\n+        )\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten_v3_child(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc child maximum\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_CHILD_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_CHILD_MAX_VSIZE/2)}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def createpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with createpsbt\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.createpsbt(inputs=[], outputs=outputs, version=3)\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def send_v3(self):\n+        self.log.info(\"Test setting version to 3 with send\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        tx_hex = self.charlie.send(outputs=outputs, add_to_wallet=False, version=3)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall\")\n+\n+        tx_hex = self.charlie.sendall(recipients=[self.alice.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_with_unconfirmed_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall + unconfirmed inputs\")\n+\n+        outputs = {}\n+        for _ in range(4):\n+            outputs[self.alice.getnewaddress()] = 2.00001",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 460,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f4d209c0e94fad8435215abba3e61d79585d0d12 \"test: add truc wallet tests\"\r\n\r\nThis could be condensed into a one-liner\r\n\r\n```suggestion\r\n        outputs = {self.alice.getnewaddress(): 2.00001 for _ in range(4)}\r\n```",
      "created_at": "2025-08-08T23:40:13Z",
      "updated_at": "2025-08-08T23:40:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2264133252",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2264133252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 458,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269387712",
      "pull_request_review_id": 3109773868,
      "id": 2269387712,
      "node_id": "PRRC_kwDOABII586HRBvA",
      "diff_hunk": "@@ -283,6 +283,14 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\n             if (input_bytes == -1) {\n                 input_bytes = CalculateMaximumSignedInputSize(txout, &wallet, &coin_control);\n             }\n+            const CWalletTx& parent_tx = txo->GetWalletTx();\n+            if (wallet.GetTxDepthInMainChain(parent_tx) == 0) {\n+                if (parent_tx.tx->version == TRUC_VERSION && coin_control.m_version != TRUC_VERSION) {\n+                    return util::Error{strprintf(_(\"Can't spend unconfirmed version 3 pre-selected input with a version %d tx\"), coin_control.m_version)};\n+                } else if (coin_control.m_version == TRUC_VERSION && parent_tx.tx->version != TRUC_VERSION) {\n+                    return util::Error{strprintf(_(\"Can't spend unconfirmed version %d pre-selected input with a version 3 tx\"), parent_tx.tx->version)};\n+                }\n+            }",
      "path": "src/wallet/spend.cpp",
      "position": 19,
      "original_position": 11,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f3aba33732eb4603624d2d6f620b7f9e3be24d3b",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f3aba33732eb4603624d2d6f620b7f9e3be24d3b \"wallet: throw error at conflicting tx versions in pre-selected inputs\"\r\n\r\nThis passes tests.\r\n```diff\r\ndiff --git a/src/wallet/spend.cpp b/src/wallet/spend.cpp\r\nindex 63ac992183..0f74c5f55b 100644\r\n--- a/src/wallet/spend.cpp\r\n+++ b/src/wallet/spend.cpp\r\n@@ -284,12 +284,8 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\r\n                 input_bytes = CalculateMaximumSignedInputSize(txout, &wallet, &coin_control);\r\n             }\r\n             const CWalletTx& parent_tx = txo->GetWalletTx();\r\n-            if (wallet.GetTxDepthInMainChain(parent_tx) == 0) {\r\n-                if (parent_tx.tx->version == TRUC_VERSION && coin_control.m_version != TRUC_VERSION) {\r\n-                    return util::Error{strprintf(_(\"Can't spend unconfirmed version 3 pre-selected input with a version %d tx\"), coin_control.m_version)};\r\n-                } else if (coin_control.m_version == TRUC_VERSION && parent_tx.tx->version != TRUC_VERSION) {\r\n-                    return util::Error{strprintf(_(\"Can't spend unconfirmed version %d pre-selected input with a version 3 tx\"), parent_tx.tx->version)};\r\n-                }\r\n+            if (wallet.GetTxDepthInMainChain(parent_tx) == 0 && parent_tx.tx->version != coin_control.m_version) {\r\n+                return util::Error{strprintf(_(\"Can't spend unconfirmed version %d pre-selected input with a version %d tx\"), parent_tx.tx->version, coin_control.m_version)};\r\n             }\r\n         } else {\r\n             // The input is external. We did not find the tx in mapWallet.\r\n```",
      "created_at": "2025-08-12T10:18:42Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269387712",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269387712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": 287,
      "original_start_line": 287,
      "start_side": "RIGHT",
      "line": 293,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269405425",
      "pull_request_review_id": 3109773868,
      "id": 2269405425,
      "node_id": "PRRC_kwDOABII586HRGDx",
      "diff_hunk": "@@ -704,6 +705,12 @@ CreatedTransactionResult FundTransaction(CWallet& wallet, const CMutableTransact\n         coinControl.m_max_tx_weight = options[\"max_tx_weight\"].getInt<int>();\n     }\n \n+    if (tx.version == TRUC_VERSION) {\n+        if (!coinControl.m_max_tx_weight.has_value() || coinControl.m_max_tx_weight.value() > TRUC_MAX_VSIZE * WITNESS_SCALE_FACTOR) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "eca8f1f5ef89259edd61b92b5cf8aa9761af486f",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In eca8f1f5ef89259edd61b92b5cf8aa9761af486f \"wallet: limit v3 tx weight in coin selection\"\r\n\r\nNit: can consider using `TRUC_MAX_WEIGHT` now that `TRUC_MAX_VSIZE * WITNESS_SCALE_FACTOR` has been used thrice in the file.",
      "created_at": "2025-08-12T10:26:02Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269405425",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269405425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 709,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269407949",
      "pull_request_review_id": 3109773868,
      "id": 2269407949,
      "node_id": "PRRC_kwDOABII586HRGrN",
      "diff_hunk": "@@ -925,11 +925,17 @@ util::Result<SelectionResult> AutomaticCoinSelection(const CWallet& wallet, Coin\n         // If no solution is found, return the first detailed error (if any).\n         // future: add \"error level\" so the worst one can be picked instead.\n         std::vector<util::Result<SelectionResult>> res_detailed_errors;\n+        CoinSelectionParams temp_selection_params = coin_selection_params;\n         for (const auto& select_filter : ordered_filters) {\n             auto it = filtered_groups.find(select_filter.filter);\n             if (it == filtered_groups.end()) continue;\n+            if (temp_selection_params.m_version == TRUC_VERSION && (select_filter.filter.conf_mine == 0 || select_filter.filter.conf_theirs == 0)) {\n+                if (temp_selection_params.m_max_tx_weight > (TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR)) {\n+                    temp_selection_params.m_max_tx_weight = TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "eca8f1f5ef89259edd61b92b5cf8aa9761af486f",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In eca8f1f5ef89259edd61b92b5cf8aa9761af486f \"wallet: limit v3 tx weight in coin selection\"\r\n\r\nSame nit for `TRUC_CHILD_MAX_WEIGHT`.",
      "created_at": "2025-08-12T10:27:02Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269407949",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269407949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 962,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269411762",
      "pull_request_review_id": 3109773868,
      "id": 2269411762,
      "node_id": "PRRC_kwDOABII586HRHmy",
      "diff_hunk": "@@ -98,7 +98,7 @@ bool IsStandard(const CScript& scriptPubKey, TxoutType& whichType)\n ",
      "path": "src/policy/policy.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "9bc49a8d10c7f840de73709bef913dfbaedd1907",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 9bc49a8d10c7f840de73709bef913dfbaedd1907 \"rpc: Add version parameter for transaction\"\r\n\r\nIn commit message:\r\n```diff\r\n- rpc: Add version parameter for transaction\r\n+ rpc: Add transaction min standard version parameter\r\n``` ",
      "created_at": "2025-08-12T10:28:43Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269411762",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269411762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269466201",
      "pull_request_review_id": 3109773868,
      "id": 2269466201,
      "node_id": "PRRC_kwDOABII586HRU5Z",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 74,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f4d209c0e94fad8435215abba3e61d79585d0d12 \"test: add truc wallet tests\"\r\n\r\nIIUC, different `from` wallets are passed to this function while the node remains same.\r\n```diff\r\n- def send_tx(self, from_node, inputs, outputs, version):\r\n+ def send_tx(self, from_wallet, inputs, outputs, version):\r\n```",
      "created_at": "2025-08-12T10:52:41Z",
      "updated_at": "2025-08-12T12:36:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269466201",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269466201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269468791",
      "pull_request_review_id": 3109773868,
      "id": 2269468791,
      "node_id": "PRRC_kwDOABII586HRVh3",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 175,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f4d209c0e94fad8435215abba3e61d79585d0d12 \"test: add truc wallet tests\"\r\n\r\n```diff\r\n     @cleanup\r\n     def truc_tx_with_conflicting_sibling(self):\r\n-        # unconfirmed v3 tx to alice & bob\r\n         self.log.info(\"Test v3 transaction with conflicting sibling\")\r\n \r\n+        # unconfirmed v3 tx to alice & bob\r\n         outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\r\n```",
      "created_at": "2025-08-12T10:53:51Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269468791",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269468791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 171,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269481381",
      "pull_request_review_id": 3109773868,
      "id": 2269481381,
      "node_id": "PRRC_kwDOABII586HRYml",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 244,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f4d209c0e94fad8435215abba3e61d79585d0d12 \"test: add truc wallet tests\"\r\n\r\n```diff\r\n@@ -241,7 +241,7 @@ class WalletV3Test(BitcoinTestFramework):\r\n \r\n     @cleanup\r\n     def spend_inputs_with_different_versions_default_version(self):\r\n-        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\r\n+        self.log.info(\"Test spending a pre-selected v3 input with the default version of transaction\")\r\n```\r\nOtherwise, we end up with duplicated subtest logs.",
      "created_at": "2025-08-12T10:59:00Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269481381",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269481381"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269506910",
      "pull_request_review_id": 3109773868,
      "id": 2269506910,
      "node_id": "PRRC_kwDOABII586HRe1e",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 148,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f4d209c0e94fad8435215abba3e61d79585d0d12 \"test: add truc wallet tests\"\r\n\r\nIIUC, v_b txs seem to be spending v_a txs?\r\n\r\n```diff\r\n     @cleanup\r\n     def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\r\n-        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\r\n+        self.log.info(f\"Test unavailable funds when v{version_b} tx spends unconfirmed v{version_a} tx\")\r\n \r\n         outputs = {self.bob.getnewaddress() : 2.0}\r\n         self.send_tx(self.charlie, [], outputs, version_a)\r\n@@ -145,7 +145,7 @@ class WalletV3Test(BitcoinTestFramework):\r\n \r\n     @cleanup\r\n     def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\r\n-        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\r\n+        self.log.info(f\"Test available funds when v{version_b} tx spends confirmed v{version_a} tx\")\r\n```\r\n",
      "created_at": "2025-08-12T11:10:45Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269506910",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269506910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 126,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269540699",
      "pull_request_review_id": 3109773868,
      "id": 2269540699,
      "node_id": "PRRC_kwDOABII586HRnFb",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 80,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/f4d209c0e94fad8435215abba3e61d79585d0d12 \"test: add truc wallet tests\"\r\n\r\nBecause there is only one node in the test, I don't think these mempool sync calls are needed.\r\n```diff\r\ndiff --git a/test/functional/wallet_v3_txs.py b/test/functional/wallet_v3_txs.py\r\nindex a357022c42..db13960537 100755\r\n--- a/test/functional/wallet_v3_txs.py\r\n+++ b/test/functional/wallet_v3_txs.py\r\n@@ -37,7 +37,6 @@ def cleanup(func):\r\n             self.generate(self.nodes[0], 1)\r\n             func(self, *args)\r\n         finally:\r\n-            self.sync_mempools()\r\n             self.generate(self.nodes[0], 1)\r\n             try:\r\n                 self.alice.sendall([self.charlie.getnewaddress()])\r\n@@ -47,7 +46,6 @@ def cleanup(func):\r\n                 self.bob.sendall([self.charlie.getnewaddress()])\r\n             except JSONRPCException as e:\r\n                 assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\r\n-            self.sync_mempools()\r\n             self.generate(self.nodes[0], 1)\r\n             assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\r\n             assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\r\n@@ -77,7 +75,6 @@ class WalletV3Test(BitcoinTestFramework):\r\n             raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\r\n         raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\r\n         txid = from_node.sendrawtransaction(raw_tx)\r\n-        self.sync_mempools()\r\n         return txid\r\n \r\n         outputs = {self.alice.getnewaddress() : 2.0}\r\n         self.send_tx(self.charlie, [], outputs, 3)\r\n@@ -336,7 +333,6 @@ class WalletV3Test(BitcoinTestFramework):\r\n         # alice spends both of her utxos, replacing bob's tx\r\n         outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\r\n         alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\r\n-        self.sync_mempools()\r\n         # bob's tx now has a mempool conflict\r\n         assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\r\n         # alice fee-bumps her tx so it only spends the v2 utxo\r\n\r\n```",
      "created_at": "2025-08-12T11:26:51Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269540699",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269540699"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269555287",
      "pull_request_review_id": 3109773868,
      "id": 2269555287,
      "node_id": "PRRC_kwDOABII586HRqpX",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 196,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/f4d209c0e94fad8435215abba3e61d79585d0d12 \"test: add truc wallet tests\"\r\n\r\n```diff\r\n     @cleanup\r\n     def truc_tx_with_conflicting_sibling_change(self):\r\n-        # unconfirmed v3 tx to alice & bob\r\n         self.log.info(\"Test v3 transaction with conflicting sibling\")\r\n \r\n         outputs = {self.alice.getnewaddress() : 8.0}\r\n@@ -201,6 +197,7 @@ class WalletV3Test(BitcoinTestFramework):\r\n \r\n         self.generate(self.nodes[0], 1)\r\n \r\n+        # unconfirmed v3 tx from alice to bob with change\r\n         outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\r\n         self.send_tx(self.alice, [], outputs, 3)\r\n```",
      "created_at": "2025-08-12T11:33:33Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269555287",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269555287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269562651",
      "pull_request_review_id": 3109773868,
      "id": 2269562651,
      "node_id": "PRRC_kwDOABII586HRscb",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 267,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```diff\r\n@@ -260,9 +257,9 @@ class WalletV3Test(BitcoinTestFramework):\r\n \r\n     @cleanup\r\n     def v3_tx_evicted_from_mempool_by_sibling(self):\r\n-        # unconfirmed v3 tx to alice & bob\r\n         self.log.info(\"Test v3 transaction with conflicting sibling\")\r\n \r\n+        # unconfirmed v3 tx to alice & bob\r\n         outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\r\n         self.send_tx(self.charlie, [], outputs, 3)\r\n```",
      "created_at": "2025-08-12T11:36:48Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269562651",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269562651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 262,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 265,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269573503",
      "pull_request_review_id": 3109773868,
      "id": 2269573503,
      "node_id": "PRRC_kwDOABII586HRvF_",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 282,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For clarity purpose:\r\n\r\n```diff\r\n         # alice spends her output with a v3 transaction\r\n         alice_unspent = self.alice.listunspent(minconf=0)[0]\r\n-        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\r\n+        alice_fee = Decimal(0.00000120)\r\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - alice_fee}\r\n         alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\r\n \r\n         # bob tries to spend money\r\n@@ -279,7 +277,8 @@ class WalletV3Test(BitcoinTestFramework):\r\n         assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\r\n \r\n         self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\r\n-        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\r\n+        fee_delta = Decimal(0.00030000)\r\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - (alice_fee + fee_delta)}\r\n         alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\r\n         assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\r\n```",
      "created_at": "2025-08-12T11:41:39Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269573503",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269573503"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 281,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269597770",
      "pull_request_review_id": 3109773868,
      "id": 2269597770,
      "node_id": "PRRC_kwDOABII586HR1BK",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 345,
      "original_position": 345,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f4d209c0e94fad8435215abba3e61d79585d0d12 \"test: add truc wallet tests\"\r\n\r\nTo test the \"can be rebroadcast\" assumption.\r\n```diff\r\n         self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\r\n         # bob's tx now has non conflicts and can be rebroadcast\r\n-        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\r\n+        bob_tx_details = self.bob.gettransaction(bob_txid)\r\n+        assert_equal(bob_tx_details['mempoolconflicts'], [])\r\n+        self.bob.sendrawtransaction(bob_tx_details['hex'])\r\n```",
      "created_at": "2025-08-12T11:52:03Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269597770",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269597770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 345,
      "original_line": 345,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269617723",
      "pull_request_review_id": 3109773868,
      "id": 2269617723,
      "node_id": "PRRC_kwDOABII586HR547",
      "diff_hunk": "@@ -128,6 +131,16 @@ def script_to_p2sh_p2wsh_script(script):\n     p2shscript = CScript([OP_0, sha256(script)])\n     return script_to_p2sh_script(p2shscript)\n \n+def bulk_vout(tx, target_vsize):\n+    if target_vsize < tx.get_vsize():\n+        raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+    # determine number of needed padding bytes\n+    dummy_vbytes = target_vsize - tx.get_vsize()\n+    # compensate for the increase of the compact-size encoded script length\n+    # (note that the length encoding of the unpadded output script needs one byte)\n+    dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+    tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)",
      "path": "test/functional/test_framework/script_util.py",
      "position": 29,
      "original_position": 29,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "633aa947d684a0fdd3c13353ddd8418cb0195aa5",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 633aa947d684a0fdd3c13353ddd8418cb0195aa5 \"test: extract `bulk_vout` from `bulk_tx` so it can be used by wallet tests\"\r\n\r\nFine to extract it but since it particularly bulks the last `vout`, we can call the function `bulk_last_vout`? \r\n<details>\r\n<summary>Diff</summary>\r\n\r\n```diff\r\ndiff --git a/test/functional/test_framework/script_util.py b/test/functional/test_framework/script_util.py\r\nindex 5736eb6bc4..caf9deb346 100755\r\n--- a/test/functional/test_framework/script_util.py\r\n+++ b/test/functional/test_framework/script_util.py\r\n@@ -131,7 +131,7 @@ def script_to_p2sh_p2wsh_script(script):\r\n     p2shscript = CScript([OP_0, sha256(script)])\r\n     return script_to_p2sh_script(p2shscript)\r\n \r\n-def bulk_vout(tx, target_vsize):\r\n+def bulk_last_vout(tx, target_vsize):\r\n     if target_vsize < tx.get_vsize():\r\n         raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\r\n     # determine number of needed padding bytes\r\ndiff --git a/test/functional/test_framework/wallet.py b/test/functional/test_framework/wallet.py\r\nindex a47ccab01c..f6ae1f70ef 100644\r\n--- a/test/functional/test_framework/wallet.py\r\n+++ b/test/functional/test_framework/wallet.py\r\n@@ -43,7 +43,7 @@ from test_framework.script import (\r\n     taproot_construct,\r\n )\r\n from test_framework.script_util import (\r\n-    bulk_vout,\r\n+    bulk_last_vout,\r\n     key_to_p2pk_script,\r\n     key_to_p2pkh_script,\r\n     key_to_p2sh_p2wpkh_script,\r\n@@ -121,7 +121,7 @@ class MiniWallet:\r\n         returns the tx\r\n         \"\"\"\r\n         tx.vout.append(CTxOut(nValue=0, scriptPubKey=CScript([OP_RETURN])))\r\n-        bulk_vout(tx, target_vsize)\r\n+        bulk_last_vout(tx, target_vsize)\r\n \r\n \r\n     def get_balance(self):\r\ndiff --git a/test/functional/wallet_v3_txs.py b/test/functional/wallet_v3_txs.py\r\nindex db9f1483ab..53ad9c068c 100755\r\n--- a/test/functional/wallet_v3_txs.py\r\n+++ b/test/functional/wallet_v3_txs.py\r\n@@ -17,7 +17,7 @@ from test_framework.script import (\r\n     OP_RETURN\r\n )\r\n \r\n-from test_framework.script_util import bulk_vout\r\n+from test_framework.script_util import bulk_last_vout\r\n \r\n from test_framework.test_framework import BitcoinTestFramework\r\n from test_framework.util import (\r\n@@ -78,7 +78,7 @@ class WalletV3Test(BitcoinTestFramework):\r\n \r\n     def bulk_tx(self, tx, amount, target_vsize):\r\n         tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\r\n-        bulk_vout(tx, target_vsize)\r\n+        bulk_last_vout(tx, target_vsize)\r\n \r\n     def run_test_with_swapped_versions(self, test_func):\r\n         test_func(2, 3)\r\n\r\n```\r\n</details>\r\n\r\n\r\nAn alternative could be that this function can also append the op_return vout in the transaction instead of assuming the caller does it, in which case this function would become `bulk_tx` - but this could be a larger change and can be avoided in this PR. ",
      "created_at": "2025-08-12T12:00:46Z",
      "updated_at": "2025-08-13T09:40:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269617723",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269617723"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 142,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269621282",
      "pull_request_review_id": 3109773868,
      "id": 2269621282,
      "node_id": "PRRC_kwDOABII586HR6wi",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 407,
      "original_position": 405,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f4d209c0e94fad8435215abba3e61d79585d0d12 \"test: add truc wallet tests\"\r\n\r\nThe user-input tx weight is the same as the previously bulk-ed tx weight?",
      "created_at": "2025-08-12T12:02:22Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269621282",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269621282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 407,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269634122",
      "pull_request_review_id": 3109773868,
      "id": 2269634122,
      "node_id": "PRRC_kwDOABII586HR95K",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 72,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/f4d209c0e94fad8435215abba3e61d79585d0d12 \"test: add truc wallet tests\"\r\n\r\nI don't think this is required because there is only one node in the test.",
      "created_at": "2025-08-12T12:08:10Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269634122",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269634122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 71,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269638481",
      "pull_request_review_id": 3109773868,
      "id": 2269638481,
      "node_id": "PRRC_kwDOABII586HR-9R",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 197,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "To deduplicate subtest logs.\r\n\r\n```diff\r\n- self.log.info(\"Test v3 transaction with conflicting sibling\")\r\n+ self.log.info(\"Test v3 transaction with conflicting sibling change\") \r\n```",
      "created_at": "2025-08-12T12:10:17Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269638481",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269638481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269639497",
      "pull_request_review_id": 3109773868,
      "id": 2269639497,
      "node_id": "PRRC_kwDOABII586HR_NJ",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 264,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "To deduplicate subtest logs.\r\n\r\n```diff\r\n- self.log.info(\"Test v3 transaction with conflicting sibling\")\r\n+ self.log.info(\"Test v3 transaction evicted because of conflicting sibling\") \r\n```",
      "created_at": "2025-08-12T12:10:46Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269639497",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269639497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269654159",
      "pull_request_review_id": 3109773868,
      "id": 2269654159,
      "node_id": "PRRC_kwDOABII586HSCyP",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 36,
      "original_position": 35,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f4d209c0e94fad8435215abba3e61d79585d0d12 \"test: add truc wallet tests\"\r\n\r\nCan add a comment before this wrapper to mention the expectation - from what I understand, the intent is to drain the alice and bob wallets by sending their funds to charlie, along with clearing the node mempool by generating blocks (of pending transactions). ",
      "created_at": "2025-08-12T12:17:28Z",
      "updated_at": "2025-08-12T12:38:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269654159",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269654159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269655665",
      "pull_request_review_id": 3109773868,
      "id": 2269655665,
      "node_id": "PRRC_kwDOABII586HSDJx",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 57,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/f4d209c0e94fad8435215abba3e61d79585d0d12 \"test: add truc wallet tests\"\r\n\r\nTo avoid the redundant RPCs.\r\n\r\n```diff\r\n             self.generate(self.nodes[0], 1)\r\n-            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\r\n-            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\r\n-            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\r\n-            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\r\n-            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\r\n-            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\r\n+\r\n+            for balance in [self.alice.getbalances()[\"mine\"], self.bob.getbalances()[\"mine\"]]:\r\n+                for balance_type in [\"untrusted_pending\", \"trusted\", \"immature\"]:\r\n+                    assert_equal(0, balance[balance_type])\r\n```",
      "created_at": "2025-08-12T12:18:09Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269655665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269655665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 52,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269679125",
      "pull_request_review_id": 3109773868,
      "id": 2269679125,
      "node_id": "PRRC_kwDOABII586HSI4V",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 321,
      "original_position": 321,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In f4d209c0e94fad8435215abba3e61d79585d0d12 \"test: add truc wallet tests\"\r\n\r\nThere doesn't seem to be a test log for this one.",
      "created_at": "2025-08-12T12:28:06Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269679125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269679125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 321,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269695855",
      "pull_request_review_id": 3109773868,
      "id": 2269695855,
      "node_id": "PRRC_kwDOABII586HSM9v",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 339,
      "original_position": 338,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Contrary to what's seen in the previous test - by spending a confirmed unspent with a TRUC unspent, the alice transaction is allowed to be created even if bob's transaction spending a TRUC unspent was already there. Which TRUC rule does it correspond to?",
      "created_at": "2025-08-12T12:34:34Z",
      "updated_at": "2025-08-12T12:34:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269695855",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269695855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": 337,
      "original_start_line": 336,
      "start_side": "RIGHT",
      "line": 339,
      "original_line": 339,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269780891",
      "pull_request_review_id": 3110518443,
      "id": 2269780891,
      "node_id": "PRRC_kwDOABII586HShub",
      "diff_hunk": "@@ -283,6 +283,14 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\n             if (input_bytes == -1) {\n                 input_bytes = CalculateMaximumSignedInputSize(txout, &wallet, &coin_control);\n             }\n+            const CWalletTx& parent_tx = txo->GetWalletTx();\n+            if (wallet.GetTxDepthInMainChain(parent_tx) == 0) {\n+                if (parent_tx.tx->version == TRUC_VERSION && coin_control.m_version != TRUC_VERSION) {\n+                    return util::Error{strprintf(_(\"Can't spend unconfirmed version 3 pre-selected input with a version %d tx\"), coin_control.m_version)};\n+                } else if (coin_control.m_version == TRUC_VERSION && parent_tx.tx->version != TRUC_VERSION) {\n+                    return util::Error{strprintf(_(\"Can't spend unconfirmed version %d pre-selected input with a version 3 tx\"), parent_tx.tx->version)};\n+                }\n+            }",
      "path": "src/wallet/spend.cpp",
      "position": 19,
      "original_position": 11,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f3aba33732eb4603624d2d6f620b7f9e3be24d3b",
      "in_reply_to_id": 2269387712,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "While the suggestions is shorter, I don't think this is as thorough as the original implementation. I'm not sure if transaction version 1 could cause an issue here - this suggestion can be ignored.",
      "created_at": "2025-08-12T13:04:15Z",
      "updated_at": "2025-08-12T14:17:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269780891",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269780891"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": 287,
      "original_start_line": 287,
      "start_side": "RIGHT",
      "line": 293,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269982120",
      "pull_request_review_id": 3110834299,
      "id": 2269982120,
      "node_id": "PRRC_kwDOABII586HTS2o",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 339,
      "original_position": 338,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269695855,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, I debugged these transactions. \r\n\r\nIn the `mempool_conflicts_removed_when_v3_conflict_removed` test, I can understand that the latter Alice tx has higher fees than the former Bob tx due to which Alice's tx sibling-evicts Bob's tx.\r\n\r\nWhat's not clear to me is that why in the `v3_conflict_removed_from_mempool` test the latter Bob tx can't sibling-evict the former Alice's tx even though it has higher fees (and instead the \"insufficient funds\" is thrown)?",
      "created_at": "2025-08-12T14:07:37Z",
      "updated_at": "2025-08-12T14:07:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269982120",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269982120"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": 337,
      "original_start_line": 336,
      "start_side": "RIGHT",
      "line": 339,
      "original_line": 339,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269997316",
      "pull_request_review_id": 3110860558,
      "id": 2269997316,
      "node_id": "PRRC_kwDOABII586HTWkE",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 339,
      "original_position": 338,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269695855,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sibling eviction isn't implemented here - the wallet doesn't try to fund a transaction that would \"conflict\" with that transaction. This is consistent with the wallet never trying to RBF something that has descendants, even though it is possible.",
      "created_at": "2025-08-12T14:12:17Z",
      "updated_at": "2025-08-12T14:12:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2269997316",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2269997316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": 337,
      "original_start_line": 336,
      "start_side": "RIGHT",
      "line": 339,
      "original_line": 339,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270268020",
      "pull_request_review_id": 3111401611,
      "id": 2270268020,
      "node_id": "PRRC_kwDOABII586HUYp0",
      "diff_hunk": "@@ -925,11 +925,17 @@ util::Result<SelectionResult> AutomaticCoinSelection(const CWallet& wallet, Coin\n         // If no solution is found, return the first detailed error (if any).\n         // future: add \"error level\" so the worst one can be picked instead.\n         std::vector<util::Result<SelectionResult>> res_detailed_errors;\n+        CoinSelectionParams temp_selection_params = coin_selection_params;\n         for (const auto& select_filter : ordered_filters) {\n             auto it = filtered_groups.find(select_filter.filter);\n             if (it == filtered_groups.end()) continue;\n+            if (temp_selection_params.m_version == TRUC_VERSION && (select_filter.filter.conf_mine == 0 || select_filter.filter.conf_theirs == 0)) {\n+                if (temp_selection_params.m_max_tx_weight > (TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR)) {\n+                    temp_selection_params.m_max_tx_weight = TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "eca8f1f5ef89259edd61b92b5cf8aa9761af486f",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/eca8f1f5ef89259edd61b92b5cf8aa9761af486f \"wallet: limit v3 tx weight in coin selection\"\r\n\r\nNit: The `temp_selection_params` object can be called `updated_coin_selection_params` - better to avoid the `temp` prefix imho. \r\n\r\nA separate approach could be to update the property in the argument reference `coin_selection_params` which might even help in achieving the points in [this comment](https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211435769), but it need not be done in this PR.",
      "created_at": "2025-08-12T15:25:12Z",
      "updated_at": "2025-08-13T14:49:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2270268020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270268020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 962,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270996976",
      "pull_request_review_id": 3112506291,
      "id": 2270996976,
      "node_id": "PRRC_kwDOABII586HXKnw",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}\n+        )\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten_v3_child(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc child maximum\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_CHILD_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_CHILD_MAX_VSIZE/2)}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def createpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with createpsbt\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.createpsbt(inputs=[], outputs=outputs, version=3)\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def send_v3(self):\n+        self.log.info(\"Test setting version to 3 with send\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        tx_hex = self.charlie.send(outputs=outputs, add_to_wallet=False, version=3)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall\")\n+\n+        tx_hex = self.charlie.sendall(recipients=[self.alice.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_with_unconfirmed_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall + unconfirmed inputs\")\n+\n+        outputs = {}\n+        for _ in range(4):\n+            outputs[self.alice.getnewaddress()] = 2.00001\n+\n+        self.send_tx(self.charlie, [], outputs, 2)\n+        self.generate(self.nodes[0], 1)\n+\n+        unspent1 = self.alice.listunspent()[0]\n+        unspent2 = self.alice.listunspent()[1]\n+        unspent3 = self.alice.listunspent()[2]\n+        unspent4 = self.alice.listunspent()[3]",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 468,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2264120873,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:41:26Z",
      "updated_at": "2025-08-12T19:41:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2270996976",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270996976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 465,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 468,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270997600",
      "pull_request_review_id": 3112507145,
      "id": 2270997600,
      "node_id": "PRRC_kwDOABII586HXKxg",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}\n+        )\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten_v3_child(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc child maximum\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_CHILD_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_CHILD_MAX_VSIZE/2)}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def createpsbt_v3(self):\n+        self.log.info(\"Test setting version to 3 with createpsbt\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        psbt = self.charlie.createpsbt(inputs=[], outputs=outputs, version=3)\n+        assert_equal(self.charlie.decodepsbt(psbt)[\"tx\"][\"version\"], 3)\n+\n+    @cleanup\n+    def send_v3(self):\n+        self.log.info(\"Test setting version to 3 with send\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        tx_hex = self.charlie.send(outputs=outputs, add_to_wallet=False, version=3)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall\")\n+\n+        tx_hex = self.charlie.sendall(recipients=[self.alice.getnewaddress()], version=3, add_to_wallet=False)[\"hex\"]\n+        assert_equal(self.charlie.decoderawtransaction(tx_hex)[\"version\"], 3)\n+\n+    @cleanup\n+    def sendall_with_unconfirmed_v3(self):\n+        self.log.info(\"Test setting version to 3 with sendall + unconfirmed inputs\")\n+\n+        outputs = {}\n+        for _ in range(4):\n+            outputs[self.alice.getnewaddress()] = 2.00001",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 460,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2264133252,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:41:35Z",
      "updated_at": "2025-08-12T19:41:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2270997600",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2270997600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 458,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271001097",
      "pull_request_review_id": 3112511761,
      "id": 2271001097,
      "node_id": "PRRC_kwDOABII586HXLoJ",
      "diff_hunk": "@@ -283,6 +283,14 @@ util::Result<PreSelectedInputs> FetchSelectedInputs(const CWallet& wallet, const\n             if (input_bytes == -1) {\n                 input_bytes = CalculateMaximumSignedInputSize(txout, &wallet, &coin_control);\n             }\n+            const CWalletTx& parent_tx = txo->GetWalletTx();\n+            if (wallet.GetTxDepthInMainChain(parent_tx) == 0) {\n+                if (parent_tx.tx->version == TRUC_VERSION && coin_control.m_version != TRUC_VERSION) {\n+                    return util::Error{strprintf(_(\"Can't spend unconfirmed version 3 pre-selected input with a version %d tx\"), coin_control.m_version)};\n+                } else if (coin_control.m_version == TRUC_VERSION && parent_tx.tx->version != TRUC_VERSION) {\n+                    return util::Error{strprintf(_(\"Can't spend unconfirmed version %d pre-selected input with a version 3 tx\"), parent_tx.tx->version)};\n+                }\n+            }",
      "path": "src/wallet/spend.cpp",
      "position": 19,
      "original_position": 11,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f3aba33732eb4603624d2d6f620b7f9e3be24d3b",
      "in_reply_to_id": 2269387712,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "transaction version 1 would cause an issue here, I have added a test case for it so this should fail tests now. ",
      "created_at": "2025-08-12T19:42:54Z",
      "updated_at": "2025-08-12T19:42:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271001097",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271001097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": 287,
      "original_start_line": 287,
      "start_side": "RIGHT",
      "line": 293,
      "original_line": 293,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271001840",
      "pull_request_review_id": 3112512636,
      "id": 2271001840,
      "node_id": "PRRC_kwDOABII586HXLzw",
      "diff_hunk": "@@ -98,7 +98,7 @@ bool IsStandard(const CScript& scriptPubKey, TxoutType& whichType)\n ",
      "path": "src/policy/policy.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "9bc49a8d10c7f840de73709bef913dfbaedd1907",
      "in_reply_to_id": 2269411762,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:43:08Z",
      "updated_at": "2025-08-12T19:43:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271001840",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271001840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271002110",
      "pull_request_review_id": 3112512945,
      "id": 2271002110,
      "node_id": "PRRC_kwDOABII586HXL3-",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 74,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269466201,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:43:14Z",
      "updated_at": "2025-08-12T19:43:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271002110",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271002110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271002949",
      "pull_request_review_id": 3112514039,
      "id": 2271002949,
      "node_id": "PRRC_kwDOABII586HXMFF",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 175,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269468791,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:43:27Z",
      "updated_at": "2025-08-12T19:43:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271002949",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271002949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 171,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271003235",
      "pull_request_review_id": 3112514328,
      "id": 2271003235,
      "node_id": "PRRC_kwDOABII586HXMJj",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 244,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269481381,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:43:34Z",
      "updated_at": "2025-08-12T19:43:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271003235",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271003235"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271003616",
      "pull_request_review_id": 3112514736,
      "id": 2271003616,
      "node_id": "PRRC_kwDOABII586HXMPg",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 148,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269506910,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:43:43Z",
      "updated_at": "2025-08-12T19:43:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271003616",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271003616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 126,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271004065",
      "pull_request_review_id": 3112515457,
      "id": 2271004065,
      "node_id": "PRRC_kwDOABII586HXMWh",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 80,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269540699,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:43:54Z",
      "updated_at": "2025-08-12T19:43:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271004065",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271004065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271004332",
      "pull_request_review_id": 3112515798,
      "id": 2271004332,
      "node_id": "PRRC_kwDOABII586HXMas",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 267,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269562651,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:44:00Z",
      "updated_at": "2025-08-12T19:44:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271004332",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271004332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 262,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 265,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271004693",
      "pull_request_review_id": 3112516205,
      "id": 2271004693,
      "node_id": "PRRC_kwDOABII586HXMgV",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 282,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269573503,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:44:06Z",
      "updated_at": "2025-08-12T19:44:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271004693",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271004693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 281,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271004956",
      "pull_request_review_id": 3112516435,
      "id": 2271004956,
      "node_id": "PRRC_kwDOABII586HXMkc",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 345,
      "original_position": 345,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269597770,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:44:11Z",
      "updated_at": "2025-08-12T19:44:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271004956",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271004956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 345,
      "original_line": 345,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271005623",
      "pull_request_review_id": 3112517333,
      "id": 2271005623,
      "node_id": "PRRC_kwDOABII586HXMu3",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 321,
      "original_position": 321,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269679125,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:44:33Z",
      "updated_at": "2025-08-12T19:44:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271005623",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271005623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 321,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271005950",
      "pull_request_review_id": 3112517884,
      "id": 2271005950,
      "node_id": "PRRC_kwDOABII586HXMz-",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 57,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269655665,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:44:38Z",
      "updated_at": "2025-08-12T19:44:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271005950",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271005950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 52,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271006331",
      "pull_request_review_id": 3112518305,
      "id": 2271006331,
      "node_id": "PRRC_kwDOABII586HXM57",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 36,
      "original_position": 35,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269654159,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:44:44Z",
      "updated_at": "2025-08-12T19:44:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271006331",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271006331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271006624",
      "pull_request_review_id": 3112518610,
      "id": 2271006624,
      "node_id": "PRRC_kwDOABII586HXM-g",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 264,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269639497,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:44:50Z",
      "updated_at": "2025-08-12T19:44:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271006624",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271006624"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271006846",
      "pull_request_review_id": 3112518883,
      "id": 2271006846,
      "node_id": "PRRC_kwDOABII586HXNB-",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 197,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269638481,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:44:55Z",
      "updated_at": "2025-08-12T19:44:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271006846",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271006846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271007087",
      "pull_request_review_id": 3112519123,
      "id": 2271007087,
      "node_id": "PRRC_kwDOABII586HXNFv",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 72,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269634122,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:45:01Z",
      "updated_at": "2025-08-12T19:45:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271007087",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271007087"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 71,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271009200",
      "pull_request_review_id": 3112521790,
      "id": 2271009200,
      "node_id": "PRRC_kwDOABII586HXNmw",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 8.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.alice, [], outputs, 3)\n+\n+        # bob spends his output with a v3 transaction\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        # alice tries to spend money\n+        outputs = {self.alice.getnewaddress() : 1.999}\n+        alice_tx = self.alice.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.alice.fundrawtransaction,\n+            alice_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions(self, version_a, version_b):\n+        self.log.info(f\"Test spending a pre-selected v{version_a} input with a v{version_b} transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            f\"Can't spend unconfirmed version {version_a} pre-selected input with a version {version_b} tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_inputs_with_different_versions_default_version(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_tx = self.alice.createrawtransaction(inputs=[alice_unspent], outputs=outputs) # don't set the version here\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)}\n+        bob_txid = self.send_tx(self.bob, [bob_unspent], outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+        self.log.info(\"Test that re-submitting Alice's transaction with a higher fee removes bob's tx as a mempool conflict\")\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00030120)}\n+        alice_txid = self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+\n+        # alice spends both of her outputs\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        # bob can't create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob can now create a transaction\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, [], outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):\n+        # send a v2 output to alice and confirm it\n+        txid = self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        assert_equal(self.charlie.gettransaction(txid, verbose=True)[\"decoded\"][\"version\"], 2)\n+        self.generate(self.nodes[0], 1)\n+        # create a v3 tx to alice and bob\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\n+        alice_unspent = self.alice.listunspent(minconf=0, maxconf=0)[0]\n+        # bob spends his utxo\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+        # alice spends both of her utxos, replacing bob's tx\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        alice_txid = self.send_tx(self.alice, [alice_v2_unspent, alice_unspent], outputs, 3)\n+        self.sync_mempools()\n+        # bob's tx now has a mempool conflict\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [alice_txid])\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, [alice_v2_unspent], outputs, 2)\n+        # bob's tx now has non conflicts and can be rebroadcast\n+        assert_equal(self.bob.gettransaction(bob_txid)['mempoolconflicts'], [])\n+\n+    @cleanup\n+    def max_tx_weight(self):\n+        self.log.info(\"Test max v3 transaction weight.\")\n+\n+        tx = CTransaction()\n+        tx.version = 3 # make this a truc tx\n+        # increase tx weight almost to the max truc size\n+        self.bulk_tx(tx, 5, TRUC_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        tx.version = 2\n+        self.charlie.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def max_tx_child_weight(self):\n+        self.log.info(\"Test max v3 transaction child weight.\")\n+\n+        outputs = {self.alice.getnewaddress() : 10}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, TRUC_CHILD_MAX_VSIZE - 100)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\",\n+            self.alice.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True}\n+        )\n+\n+        self.generate(self.nodes[0], 1)\n+        self.alice.fundrawtransaction(tx.serialize_with_witness().hex())\n+\n+    @cleanup\n+    def user_input_weight_not_overwritten(self):\n+        self.log.info(\"Test that the user-input tx weight is not overwritten by the truc maximum\")\n+\n+        tx = CTransaction()\n+        tx.version = 3\n+\n+        self.bulk_tx(tx, 5, int(TRUC_MAX_VSIZE/2))\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Maximum transaction weight is less than transaction weight without inputs\",\n+            self.charlie.fundrawtransaction,\n+            tx.serialize_with_witness().hex(),\n+            {'include_unsafe' : True, 'max_tx_weight' : int(TRUC_MAX_VSIZE/2)}",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 407,
      "original_position": 405,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269621282,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, because this is an easy way to check that we are accounting for the right maximum tx weight. ",
      "created_at": "2025-08-12T19:45:49Z",
      "updated_at": "2025-08-12T19:45:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271009200",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271009200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 407,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271010621",
      "pull_request_review_id": 3112523613,
      "id": 2271010621,
      "node_id": "PRRC_kwDOABII586HXN89",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with TRUC transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_RETURN\n+)\n+\n+from test_framework.script_util import bulk_vout\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+from test_framework.mempool_util import (\n+    TRUC_MAX_VSIZE,\n+    TRUC_CHILD_MAX_VSIZE,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self, *args):\n+        try:\n+            self.generate(self.nodes[0], 1)\n+            func(self, *args)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        bulk_vout(tx, target_vsize)\n+\n+    def run_test_with_swapped_versions(self, test_func):\n+        test_func(2, 3)\n+        test_func(3, 2)\n+\n+    def run_test(self):\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[0].createwallet(\"bob\")\n+        self.bob = self.nodes[0].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[0].createwallet(\"charlie\")\n+        self.charlie = self.nodes[0].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.run_test_with_swapped_versions(self.tx_spends_unconfirmed_tx_with_wrong_version)\n+        self.run_test_with_swapped_versions(self.va_tx_spends_confirmed_vb_tx)\n+        self.run_test_with_swapped_versions(self.spend_inputs_with_different_versions)\n+        self.spend_inputs_with_different_versions_default_version()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.truc_tx_with_conflicting_sibling_change()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+        self.user_input_weight_not_overwritten()\n+        self.user_input_weight_not_overwritten_v3_child()\n+        self.createpsbt_v3()\n+        self.send_v3()\n+        self.sendall_v3()\n+        self.sendall_with_unconfirmed_v3()\n+        self.walletcreatefundedpsbt_v3()\n+        self.sendall_truc_weight_limit()\n+        self.sendall_truc_child_weight_limit()\n+\n+    @cleanup\n+    def tx_spends_unconfirmed_tx_with_wrong_version(self, version_a, version_b):\n+        self.log.info(f\"Test unavailable funds when v{version_a} tx spends unconfirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=version_b)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def va_tx_spends_confirmed_vb_tx(self, version_a, version_b):\n+        self.log.info(f\"Test available funds when v{version_a} tx spends confirmed v{version_b} tx\")\n+\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, version_a)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        self.generate(self.nodes[0], 1)\n+\n+        self.send_tx(self.bob, [], outputs, version_b)\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, [], outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, [], outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)}\n+        self.send_tx(self.alice, [alice_unspent], outputs, 3)\n+\n+        # bob tries to spend money\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=[], outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling_change(self):\n+        # unconfirmed v3 tx to alice & bob",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 196,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "f4d209c0e94fad8435215abba3e61d79585d0d12",
      "in_reply_to_id": 2269555287,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T19:46:21Z",
      "updated_at": "2025-08-12T19:46:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271010621",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271010621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271061301",
      "pull_request_review_id": 3112595853,
      "id": 2271061301,
      "node_id": "PRRC_kwDOABII586HXaU1",
      "diff_hunk": "@@ -316,6 +325,9 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n     AssertLockHeld(wallet.cs_wallet);\n \n     CoinsResult result;\n+    // track unconfirmed truc outputs separately if we are tracking trucness\n+    CoinsResult unconfirmed_truc_coins;\n+    std::unordered_map<uint256, CAmount, SaltedTxidHasher> truc_txid_by_value;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "025692c4cf392bbd126c0cf77d47101c3a5ae5bf",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should use `Txid` when possible",
      "created_at": "2025-08-12T20:03:53Z",
      "updated_at": "2025-08-12T20:06:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271061301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271061301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271066235",
      "pull_request_review_id": 3112595853,
      "id": 2271066235,
      "node_id": "PRRC_kwDOABII586HXbh7",
      "diff_hunk": "@@ -468,6 +501,21 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (params.check_version_trucness && unconfirmed_truc_coins.Size() > 0) {\n+        auto highest_value_truc_tx = std::max_element(truc_txid_by_value.begin(), truc_txid_by_value.end(), [](const auto& tx1, const auto& tx2){\n+                return tx1.second < tx2.second;\n+                });\n+\n+        const uint256& truc_txid = highest_value_truc_tx->first;\n+        for (const auto& [type, outputs] : unconfirmed_truc_coins.coins) {\n+            for (const COutput& output : outputs) {\n+                if (output.outpoint.hash == truc_txid) {\n+                        result.Add(type, output);\n+                }\n+            }\n+        }",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "025692c4cf392bbd126c0cf77d47101c3a5ae5bf",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do you need to track all of them or can you just keep a `pair<Txid, CAmount>`?",
      "created_at": "2025-08-12T20:05:38Z",
      "updated_at": "2025-08-12T20:06:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271066235",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271066235"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 505,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 516,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271125192",
      "pull_request_review_id": 3112685024,
      "id": 2271125192,
      "node_id": "PRRC_kwDOABII586HXp7I",
      "diff_hunk": "@@ -704,6 +705,12 @@ CreatedTransactionResult FundTransaction(CWallet& wallet, const CMutableTransact\n         coinControl.m_max_tx_weight = options[\"max_tx_weight\"].getInt<int>();\n     }\n \n+    if (tx.version == TRUC_VERSION) {\n+        if (!coinControl.m_max_tx_weight.has_value() || coinControl.m_max_tx_weight.value() > TRUC_MAX_VSIZE * WITNESS_SCALE_FACTOR) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "eca8f1f5ef89259edd61b92b5cf8aa9761af486f",
      "in_reply_to_id": 2269405425,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T20:23:01Z",
      "updated_at": "2025-08-12T20:23:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271125192",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271125192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 709,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271125481",
      "pull_request_review_id": 3112685468,
      "id": 2271125481,
      "node_id": "PRRC_kwDOABII586HXp_p",
      "diff_hunk": "@@ -925,11 +925,17 @@ util::Result<SelectionResult> AutomaticCoinSelection(const CWallet& wallet, Coin\n         // If no solution is found, return the first detailed error (if any).\n         // future: add \"error level\" so the worst one can be picked instead.\n         std::vector<util::Result<SelectionResult>> res_detailed_errors;\n+        CoinSelectionParams temp_selection_params = coin_selection_params;\n         for (const auto& select_filter : ordered_filters) {\n             auto it = filtered_groups.find(select_filter.filter);\n             if (it == filtered_groups.end()) continue;\n+            if (temp_selection_params.m_version == TRUC_VERSION && (select_filter.filter.conf_mine == 0 || select_filter.filter.conf_theirs == 0)) {\n+                if (temp_selection_params.m_max_tx_weight > (TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR)) {\n+                    temp_selection_params.m_max_tx_weight = TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "eca8f1f5ef89259edd61b92b5cf8aa9761af486f",
      "in_reply_to_id": 2269407949,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-12T20:23:08Z",
      "updated_at": "2025-08-12T20:23:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271125481",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271125481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 962,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271131621",
      "pull_request_review_id": 3112693756,
      "id": 2271131621,
      "node_id": "PRRC_kwDOABII586HXrfl",
      "diff_hunk": "@@ -925,11 +925,17 @@ util::Result<SelectionResult> AutomaticCoinSelection(const CWallet& wallet, Coin\n         // If no solution is found, return the first detailed error (if any).\n         // future: add \"error level\" so the worst one can be picked instead.\n         std::vector<util::Result<SelectionResult>> res_detailed_errors;\n+        CoinSelectionParams temp_selection_params = coin_selection_params;\n         for (const auto& select_filter : ordered_filters) {\n             auto it = filtered_groups.find(select_filter.filter);\n             if (it == filtered_groups.end()) continue;\n+            if (temp_selection_params.m_version == TRUC_VERSION && (select_filter.filter.conf_mine == 0 || select_filter.filter.conf_theirs == 0)) {\n+                if (temp_selection_params.m_max_tx_weight > (TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR)) {\n+                    temp_selection_params.m_max_tx_weight = TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "eca8f1f5ef89259edd61b92b5cf8aa9761af486f",
      "in_reply_to_id": 2270268020,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've updated the name to `updated_selection_params`. I agree that updating `coin_selection_params` directly would be outside the scope of this pr. ",
      "created_at": "2025-08-12T20:25:10Z",
      "updated_at": "2025-08-12T20:25:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271131621",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271131621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 962,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271133279",
      "pull_request_review_id": 3112695683,
      "id": 2271133279,
      "node_id": "PRRC_kwDOABII586HXr5f",
      "diff_hunk": "@@ -316,6 +325,9 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n     AssertLockHeld(wallet.cs_wallet);\n \n     CoinsResult result;\n+    // track unconfirmed truc outputs separately if we are tracking trucness\n+    CoinsResult unconfirmed_truc_coins;\n+    std::unordered_map<uint256, CAmount, SaltedTxidHasher> truc_txid_by_value;",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "025692c4cf392bbd126c0cf77d47101c3a5ae5bf",
      "in_reply_to_id": 2271061301,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Updated here and later in the function",
      "created_at": "2025-08-12T20:25:38Z",
      "updated_at": "2025-08-12T20:25:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271133279",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271133279"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 330,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271136518",
      "pull_request_review_id": 3112700084,
      "id": 2271136518,
      "node_id": "PRRC_kwDOABII586HXssG",
      "diff_hunk": "@@ -468,6 +501,21 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (params.check_version_trucness && unconfirmed_truc_coins.Size() > 0) {\n+        auto highest_value_truc_tx = std::max_element(truc_txid_by_value.begin(), truc_txid_by_value.end(), [](const auto& tx1, const auto& tx2){\n+                return tx1.second < tx2.second;\n+                });\n+\n+        const uint256& truc_txid = highest_value_truc_tx->first;\n+        for (const auto& [type, outputs] : unconfirmed_truc_coins.coins) {\n+            for (const COutput& output : outputs) {\n+                if (output.outpoint.hash == truc_txid) {\n+                        result.Add(type, output);\n+                }\n+            }\n+        }",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "025692c4cf392bbd126c0cf77d47101c3a5ae5bf",
      "in_reply_to_id": 2271066235,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I figured it would be simplest to just track all of the unconfirmed truc outputs and just select the ones that we need at the end of the function. ",
      "created_at": "2025-08-12T20:26:41Z",
      "updated_at": "2025-08-12T20:26:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271136518",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271136518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 505,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 516,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271344125",
      "pull_request_review_id": 3112958276,
      "id": 2271344125,
      "node_id": "PRRC_kwDOABII586HYfX9",
      "diff_hunk": "@@ -1238,6 +1238,22 @@ bool CWallet::TransactionCanBeAbandoned(const Txid& hashTx) const\n     const CWalletTx* wtx = GetWalletTx(hashTx);\n     return wtx && !wtx->isAbandoned() && GetTxDepthInMainChain(*wtx) == 0 && !wtx->InMempool();\n }\n+void CWallet::UpdateTrucSiblingConflicts(const CWalletTx& parent_wtx, const Txid& child_txid, bool add_conflict) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)",
      "path": "src/wallet/wallet.cpp",
      "position": 12,
      "original_position": 4,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "28113b9913c9b1d70907a28c553d5223ba63be42",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 28113b9913c9b1d70907a28c553d5223ba63be42 \"wallet: mark unconfirmed v3 siblings as mempool conflicts\"\r\n\r\nnit: needs an empty line between this function and the previous.",
      "created_at": "2025-08-12T21:38:53Z",
      "updated_at": "2025-08-12T22:29:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271344125",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271344125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1242,
      "original_line": 1242,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271380939",
      "pull_request_review_id": 3112958276,
      "id": 2271380939,
      "node_id": "PRRC_kwDOABII586HYoXL",
      "diff_hunk": "@@ -470,8 +473,18 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n             is_from_p2sh = true;\n         }\n \n-        result.Add(GetOutputType(type, is_from_p2sh),\n-                   COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\n+        if (wtx.tx->version == TRUC_VERSION && nDepth == 0 && params.check_version_trucness) {\n+            unconfirmed_truc_coins.Add(GetOutputType(type, is_from_p2sh),\n+                       COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "e7f4eb9e3e95eeedab0b4c3dd643c7614de02880",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In e7f4eb9e3e95eeedab0b4c3dd643c7614de02880 \"wallet: don't return utxos from multiple truc txs in AvailableCoins\"\r\n\r\nnit: Could deduplicate the two `Add` calls by storing the output type and the `COutput` in a variable.",
      "created_at": "2025-08-12T21:53:28Z",
      "updated_at": "2025-08-12T22:29:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271380939",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271380939"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 477,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 478,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271386890",
      "pull_request_review_id": 3112958276,
      "id": 2271386890,
      "node_id": "PRRC_kwDOABII586HYp0K",
      "diff_hunk": "@@ -470,8 +473,18 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n             is_from_p2sh = true;\n         }\n \n-        result.Add(GetOutputType(type, is_from_p2sh),\n-                   COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\n+        if (wtx.tx->version == TRUC_VERSION && nDepth == 0 && params.check_version_trucness) {\n+            unconfirmed_truc_coins.Add(GetOutputType(type, is_from_p2sh),\n+                       COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\n+            if (truc_txid_by_value.find(wtx.tx->GetHash()) == truc_txid_by_value.end()) {\n+                truc_txid_by_value[wtx.tx->GetHash()] = output.nValue;\n+            } else {\n+                truc_txid_by_value[wtx.tx->GetHash()] += output.nValue;\n+            }",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "e7f4eb9e3e95eeedab0b4c3dd643c7614de02880",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In e7f4eb9e3e95eeedab0b4c3dd643c7614de02880 \"wallet: don't return utxos from multiple truc txs in AvailableCoins\"\r\n\r\nnit: Can reduce map lookups with a `try_emplace`\r\n\r\n```suggestion\r\n            auto& [_, it] = truc_txid_by_value.try_emplace(wtx.tx->GetHash(), 0);\r\n            it += output.nValue;\r\n```",
      "created_at": "2025-08-12T21:57:35Z",
      "updated_at": "2025-08-12T22:29:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271386890",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2271386890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 479,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273217782",
      "pull_request_review_id": 3115638817,
      "id": 2273217782,
      "node_id": "PRRC_kwDOABII586Hfoz2",
      "diff_hunk": "@@ -470,8 +473,18 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n             is_from_p2sh = true;\n         }\n \n-        result.Add(GetOutputType(type, is_from_p2sh),\n-                   COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\n+        if (wtx.tx->version == TRUC_VERSION && nDepth == 0 && params.check_version_trucness) {\n+            unconfirmed_truc_coins.Add(GetOutputType(type, is_from_p2sh),\n+                       COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\n+            if (truc_txid_by_value.find(wtx.tx->GetHash()) == truc_txid_by_value.end()) {\n+                truc_txid_by_value[wtx.tx->GetHash()] = output.nValue;\n+            } else {\n+                truc_txid_by_value[wtx.tx->GetHash()] += output.nValue;\n+            }",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "e7f4eb9e3e95eeedab0b4c3dd643c7614de02880",
      "in_reply_to_id": 2271386890,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```diff\r\ndiff --git a/src/wallet/spend.cpp b/src/wallet/spend.cpp\r\nindex 3f04b83905..f4a4dea7ad 100644\r\n--- a/src/wallet/spend.cpp\r\n+++ b/src/wallet/spend.cpp\r\n@@ -476,11 +476,8 @@ CoinsResult AvailableCoins(const CWallet& wallet,\r\n         if (wtx.tx->version == TRUC_VERSION && nDepth == 0 && params.check_version_trucness) {\r\n             unconfirmed_truc_coins.Add(GetOutputType(type, is_from_p2sh),\r\n                        COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\r\n-            if (truc_txid_by_value.find(wtx.tx->GetHash()) == truc_txid_by_value.end()) {\r\n-                truc_txid_by_value[wtx.tx->GetHash()] = output.nValue;\r\n-            } else {\r\n-                truc_txid_by_value[wtx.tx->GetHash()] += output.nValue;\r\n-            }\r\n+            auto [it, _] = truc_txid_by_value.try_emplace(wtx.tx->GetHash(), 0);\r\n+            it->second += output.nValue;\r\n         } else {\r\n             result.Add(GetOutputType(type, is_from_p2sh),\r\n                        COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\r\n```\r\n\r\nOtherwise there is a compilation error.",
      "created_at": "2025-08-13T12:08:36Z",
      "updated_at": "2025-08-13T12:08:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2273217782",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273217782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 479,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273686906",
      "pull_request_review_id": 3116355203,
      "id": 2273686906,
      "node_id": "PRRC_kwDOABII586HhbV6",
      "diff_hunk": "@@ -1238,6 +1238,22 @@ bool CWallet::TransactionCanBeAbandoned(const Txid& hashTx) const\n     const CWalletTx* wtx = GetWalletTx(hashTx);\n     return wtx && !wtx->isAbandoned() && GetTxDepthInMainChain(*wtx) == 0 && !wtx->InMempool();\n }\n+void CWallet::UpdateTrucSiblingConflicts(const CWalletTx& parent_wtx, const Txid& child_txid, bool add_conflict) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)",
      "path": "src/wallet/wallet.cpp",
      "position": 12,
      "original_position": 4,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "28113b9913c9b1d70907a28c553d5223ba63be42",
      "in_reply_to_id": 2271344125,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-13T14:40:39Z",
      "updated_at": "2025-08-13T14:40:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2273686906",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273686906"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1242,
      "original_line": 1242,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273688566",
      "pull_request_review_id": 3116357287,
      "id": 2273688566,
      "node_id": "PRRC_kwDOABII586Hhbv2",
      "diff_hunk": "@@ -470,8 +473,18 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n             is_from_p2sh = true;\n         }\n \n-        result.Add(GetOutputType(type, is_from_p2sh),\n-                   COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\n+        if (wtx.tx->version == TRUC_VERSION && nDepth == 0 && params.check_version_trucness) {\n+            unconfirmed_truc_coins.Add(GetOutputType(type, is_from_p2sh),\n+                       COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "e7f4eb9e3e95eeedab0b4c3dd643c7614de02880",
      "in_reply_to_id": 2271380939,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have replaced `CoinsResult` with a vector",
      "created_at": "2025-08-13T14:41:06Z",
      "updated_at": "2025-08-13T14:41:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2273688566",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273688566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 477,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 478,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273689541",
      "pull_request_review_id": 3116358515,
      "id": 2273689541,
      "node_id": "PRRC_kwDOABII586Hhb_F",
      "diff_hunk": "@@ -470,8 +473,18 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n             is_from_p2sh = true;\n         }\n \n-        result.Add(GetOutputType(type, is_from_p2sh),\n-                   COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\n+        if (wtx.tx->version == TRUC_VERSION && nDepth == 0 && params.check_version_trucness) {\n+            unconfirmed_truc_coins.Add(GetOutputType(type, is_from_p2sh),\n+                       COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\n+            if (truc_txid_by_value.find(wtx.tx->GetHash()) == truc_txid_by_value.end()) {\n+                truc_txid_by_value[wtx.tx->GetHash()] = output.nValue;\n+            } else {\n+                truc_txid_by_value[wtx.tx->GetHash()] += output.nValue;\n+            }",
      "path": "src/wallet/spend.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "e7f4eb9e3e95eeedab0b4c3dd643c7614de02880",
      "in_reply_to_id": 2271386890,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-08-13T14:41:19Z",
      "updated_at": "2025-08-13T14:41:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2273689541",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273689541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 479,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273766441",
      "pull_request_review_id": 3116462142,
      "id": 2273766441,
      "node_id": "PRRC_kwDOABII586Hhuwp",
      "diff_hunk": "@@ -468,6 +498,19 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (params.check_version_trucness && unconfirmed_truc_coins.size() > 0) {\n+        auto highest_value_truc_tx = std::max_element(truc_txid_by_value.begin(), truc_txid_by_value.end(), [](const auto& tx1, const auto& tx2){",
      "path": "src/wallet/spend.cpp",
      "position": 79,
      "original_position": 74,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "45dd78507292bf7e84493b7e6c5256ec2492b455",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do I understand correctly that the approach here is to just return 1 unconfirmed TRUC coin from `AvailableCoins`, i.e. the one with the highest value? That seems like it could weaken coin selection quality a little bit - is there a way to encode these kinds of restrictions (once coin X is selected, ABC are off the table) into the coin selection process instead?\r\n\r\nThis is probably rare in practice (I think people would only use unconfirmed TRUC when CPFPing or really desperate), but it would be helpful to provide justification here.",
      "created_at": "2025-08-13T15:07:10Z",
      "updated_at": "2025-08-13T15:07:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2273766441",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273766441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 507,
      "original_line": 507,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273811579",
      "pull_request_review_id": 3116524945,
      "id": 2273811579,
      "node_id": "PRRC_kwDOABII586Hh5x7",
      "diff_hunk": "@@ -468,6 +498,19 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    if (params.check_version_trucness && unconfirmed_truc_coins.size() > 0) {\n+        auto highest_value_truc_tx = std::max_element(truc_txid_by_value.begin(), truc_txid_by_value.end(), [](const auto& tx1, const auto& tx2){",
      "path": "src/wallet/spend.cpp",
      "position": 79,
      "original_position": 74,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "45dd78507292bf7e84493b7e6c5256ec2492b455",
      "in_reply_to_id": 2273766441,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It returns either 1 unconfirmed TRUC coin, or multiple coins that are outputs of the same transaction (if the combined value is higher than the alternatives ). I think that adding these more complex restrictions to coin selection would be a longer project. I will add a comment here to explain the reasoning. ",
      "created_at": "2025-08-13T15:21:47Z",
      "updated_at": "2025-08-13T15:21:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2273811579",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2273811579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 507,
      "original_line": 507,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274362319",
      "pull_request_review_id": 3117314908,
      "id": 2274362319,
      "node_id": "PRRC_kwDOABII586HkAPP",
      "diff_hunk": "@@ -488,6 +498,24 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    // Return the unconfirmed TRUC coin, or multiple TRUC coins from\n+    // the same transaction, that have the highest value. This could\n+    // be improved in the future by encoding these restrictions in\n+    // the coin selection itself so that we don't have to filter out\n+    // other unconfirmed TRUC coins beforehand.\n+    if (params.check_version_trucness && unconfirmed_truc_coins.size() > 0) {\n+        auto highest_value_truc_tx = std::max_element(truc_txid_by_value.begin(), truc_txid_by_value.end(), [](const auto& tx1, const auto& tx2){\n+                return tx1.second < tx2.second;",
      "path": "src/wallet/spend.cpp",
      "position": 80,
      "original_position": 39,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "41e456496591ca31e7cedb66752a1cd01d09ae7d",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There isn't coverage for this comparator being correct, though lgtm",
      "created_at": "2025-08-13T19:03:22Z",
      "updated_at": "2025-08-13T19:04:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2274362319",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2274362319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 508,
      "original_line": 508,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2276615957",
      "pull_request_review_id": 3120569826,
      "id": 2276615957,
      "node_id": "PRRC_kwDOABII586HsmcV",
      "diff_hunk": "@@ -470,8 +473,15 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n             is_from_p2sh = true;\n         }\n \n-        result.Add(GetOutputType(type, is_from_p2sh),\n-                   COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\n+        if (wtx.tx->version == TRUC_VERSION && nDepth == 0 && params.check_version_trucness) {\n+            unconfirmed_truc_coins.emplace_back(GetOutputType(type, is_from_p2sh),\n+                       COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\n+            auto [it, _] = truc_txid_by_value.try_emplace(wtx.tx->GetHash(), 0);\n+            it->second += output.nValue;\n+        } else {\n+            result.Add(GetOutputType(type, is_from_p2sh),\n+                       COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\n+        }",
      "path": "src/wallet/spend.cpp",
      "position": 65,
      "original_position": 24,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "41e456496591ca31e7cedb66752a1cd01d09ae7d",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 41e456496591ca31e7cedb66752a1cd01d09ae7d \"wallet: don't return utxos from multiple truc txs in AvailableCoins\"\r\n\r\nI think this nit https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2271380939 was more around to avoid the duplication in the map key-value objects.\r\n\r\n```diff\r\ndiff --git a/src/wallet/spend.cpp b/src/wallet/spend.cpp\r\nindex 9049c0ba32..149320b2e0 100644\r\n--- a/src/wallet/spend.cpp\r\n+++ b/src/wallet/spend.cpp\r\n@@ -473,14 +473,14 @@ CoinsResult AvailableCoins(const CWallet& wallet,\r\n             is_from_p2sh = true;\r\n         }\r\n \r\n+        auto available_output_type = GetOutputType(type, is_from_p2sh);\r\n+        auto available_output = COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate);\r\n         if (wtx.tx->version == TRUC_VERSION && nDepth == 0 && params.check_version_trucness) {\r\n-            unconfirmed_truc_coins.emplace_back(GetOutputType(type, is_from_p2sh),\r\n-                       COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\r\n+            unconfirmed_truc_coins.emplace_back(available_output_type, available_output);\r\n             auto [it, _] = truc_txid_by_value.try_emplace(wtx.tx->GetHash(), 0);\r\n             it->second += output.nValue;\r\n         } else {\r\n-            result.Add(GetOutputType(type, is_from_p2sh),\r\n-                       COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\r\n+            result.Add(available_output_type, available_output);\r\n         }\r\n \r\n         outpoints.push_back(outpoint);\r\n```\r\n",
      "created_at": "2025-08-14T13:19:29Z",
      "updated_at": "2025-08-14T14:02:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2276615957",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2276615957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": 476,
      "original_start_line": 476,
      "start_side": "RIGHT",
      "line": 484,
      "original_line": 484,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2276627492",
      "pull_request_review_id": 3120569826,
      "id": 2276627492,
      "node_id": "PRRC_kwDOABII586HspQk",
      "diff_hunk": "@@ -488,6 +498,24 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n         }\n     }\n \n+    // Return the unconfirmed TRUC coin, or multiple TRUC coins from\n+    // the same transaction, that have the highest value. This could",
      "path": "src/wallet/spend.cpp",
      "position": 74,
      "original_position": 33,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "41e456496591ca31e7cedb66752a1cd01d09ae7d",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/41e456496591ca31e7cedb66752a1cd01d09ae7d \"wallet: don't return utxos from multiple truc txs in AvailableCoins\"\r\n\r\nnit if retouched: don't think it's important to mention if a single coin is returned, it should be covered by the second phrase.\r\n\r\n```diff\r\n@@ -498,9 +498,8 @@ CoinsResult AvailableCoins(const CWallet& wallet,\r\n         }\r\n     }\r\n \r\n-    // Return the unconfirmed TRUC coin, or multiple TRUC coins from\r\n-    // the same transaction, that have the highest value. This could\r\n-    // be improved in the future by encoding these restrictions in\r\n+    // Return all the coins from one TRUC transaction, that have\r\n+    // the highest value. This could be improved in the future by encoding these restrictions in\r\n     // the coin selection itself so that we don't have to filter out\r\n     // other unconfirmed TRUC coins beforehand.\r\n```",
      "created_at": "2025-08-14T13:23:42Z",
      "updated_at": "2025-08-14T14:02:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2276627492",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2276627492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": 501,
      "original_start_line": 501,
      "start_side": "RIGHT",
      "line": 502,
      "original_line": 502,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2276725039",
      "pull_request_review_id": 3120569826,
      "id": 2276725039,
      "node_id": "PRRC_kwDOABII586HtBEv",
      "diff_hunk": "@@ -1369,6 +1371,7 @@ RPCHelpMan sendall()\n                         {\"send_max\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only use UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. send_max is incompatible with providing specific inputs.\"},\n                         {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Require inputs with at least this many confirmations.\"},\n                         {\"maxconf\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"Require inputs with at most this many confirmations.\"},\n+                        {\"version\", RPCArg::Type::NUM, RPCArg::Default{DEFAULT_WALLET_TX_VERSION}, \"Transaction version\"},",
      "path": "src/wallet/rpc/spend.cpp",
      "position": 51,
      "original_position": 23,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "796f63640ca799e2e98b9dafd1fa2cc9ded6883a",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 796f63640ca799e2e98b9dafd1fa2cc9ded6883a \"rpc: Support version 3 transaction creation\"\r\n\r\nThere's an `inputs` version in the `sendall` RPC few lines above that accepts a set of inputs given by the user and a corresponding `if` block few lines below. I think the TRUC changes (ancestor/child version match) of `FetchSelectedInputs` need to be added here too? The `AvailableCoins` function used in this RPC as well has the TRUC changes already. \r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/9b1a7c3e8dd78d97fbf47c2d056d043b05969176/src/wallet/rpc/spend.cpp#L1481-L1491\r\n\r\nIf makes sense, it can be done in a follow-up PR as well.",
      "created_at": "2025-08-14T13:59:26Z",
      "updated_at": "2025-08-14T14:02:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2276725039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2276725039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1374,
      "original_line": 1374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277609140",
      "pull_request_review_id": 3121966970,
      "id": 2277609140,
      "node_id": "PRRC_kwDOABII586HwY60",
      "diff_hunk": "@@ -470,8 +473,15 @@ CoinsResult AvailableCoins(const CWallet& wallet,\n             is_from_p2sh = true;\n         }\n \n-        result.Add(GetOutputType(type, is_from_p2sh),\n-                   COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\n+        if (wtx.tx->version == TRUC_VERSION && nDepth == 0 && params.check_version_trucness) {\n+            unconfirmed_truc_coins.emplace_back(GetOutputType(type, is_from_p2sh),\n+                       COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\n+            auto [it, _] = truc_txid_by_value.try_emplace(wtx.tx->GetHash(), 0);\n+            it->second += output.nValue;\n+        } else {\n+            result.Add(GetOutputType(type, is_from_p2sh),\n+                       COutput(outpoint, output, nDepth, input_bytes, spendable, solvable, tx_safe, wtx.GetTxTime(), tx_from_me, feerate));\n+        }",
      "path": "src/wallet/spend.cpp",
      "position": 65,
      "original_position": 24,
      "commit_id": "5c087f58245cfba6b61691ece5387eccf8a1a5f9",
      "original_commit_id": "41e456496591ca31e7cedb66752a1cd01d09ae7d",
      "in_reply_to_id": 2276615957,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, this is what I meant with that comment.",
      "created_at": "2025-08-14T20:04:03Z",
      "updated_at": "2025-08-14T20:04:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2277609140",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2277609140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": 476,
      "original_start_line": 476,
      "start_side": "RIGHT",
      "line": 484,
      "original_line": 484,
      "side": "RIGHT"
    }
  ]
}