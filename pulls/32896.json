{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896",
    "id": 2647774764,
    "node_id": "PR_kwDOABII586d0dYs",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32896",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32896.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32896.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
    "number": 32896,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "wallet, rpc: add v3 transaction creation and wallet support",
    "user": {
      "login": "ishaanam",
      "id": 75942586,
      "node_id": "MDQ6VXNlcjc1OTQyNTg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ishaanam",
      "html_url": "https://github.com/ishaanam",
      "followers_url": "https://api.github.com/users/ishaanam/followers",
      "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
      "organizations_url": "https://api.github.com/users/ishaanam/orgs",
      "repos_url": "https://api.github.com/users/ishaanam/repos",
      "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ishaanam/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This PR Implements the following:\r\n- If creating a v3 transaction, `AvailableCoins` doesn't return unconfirmed v2 utxos (and vice versa)\r\n- `AvailableCoins` doesn't return an unconfirmed v3 utxo if its transaction already has a child\r\n- If a v3 transaction is kicked out of the mempool by a sibling, mark the sibling as a mempool conflict\r\n- Throw an error if pre-selected inputs are of the wrong transaction version\r\n- Allow setting version to 3 manually in `createrawtransaction` (uses commits from #31936)\r\n- Limits a v3 transaction weight in coin selection\r\n\r\nCloses #31348\r\n\r\nTo-Do:\r\n- [x] Test a v3 sibling conflict kicking out one of our transactions from the mempool\r\n- [x] Implement separate size limit for TRUC children\r\n- [x] Test that we can't fund a v2 transaction when everything is v3 unconfirmed\r\n- [x] Test a v3 sibling conflict being removed from the mempool\r\n- [x] Test limiting v3 transaction weight in coin selection\r\n- [x] Simplify tests\r\n- [x] Add documentation ",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      },
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "created_at": "2025-07-07T20:13:59Z",
    "updated_at": "2025-07-21T15:20:06Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "8cb7fe294806457f37556d742dfb7b48f2228aac",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "ishaanam:wallet_v3_txs",
      "ref": "wallet_v3_txs",
      "sha": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 462046293,
        "node_id": "R_kgDOG4pEVQ",
        "name": "bitcoin",
        "full_name": "ishaanam/bitcoin",
        "owner": {
          "login": "ishaanam",
          "id": 75942586,
          "node_id": "MDQ6VXNlcjc1OTQyNTg2",
          "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ishaanam",
          "html_url": "https://github.com/ishaanam",
          "followers_url": "https://api.github.com/users/ishaanam/followers",
          "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
          "organizations_url": "https://api.github.com/users/ishaanam/orgs",
          "repos_url": "https://api.github.com/users/ishaanam/repos",
          "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ishaanam/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/ishaanam/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ishaanam/bitcoin",
        "archive_url": "https://api.github.com/repos/ishaanam/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ishaanam/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ishaanam/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ishaanam/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ishaanam/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ishaanam/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ishaanam/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ishaanam/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ishaanam/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ishaanam/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ishaanam/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ishaanam/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ishaanam/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ishaanam/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ishaanam/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ishaanam/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ishaanam/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ishaanam/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ishaanam/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ishaanam/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ishaanam/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ishaanam/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ishaanam/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ishaanam/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ishaanam/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ishaanam/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ishaanam/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ishaanam/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ishaanam/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ishaanam/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ishaanam/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ishaanam/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ishaanam/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ishaanam/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ishaanam/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ishaanam/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ishaanam/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ishaanam/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ishaanam/bitcoin/hooks",
        "svn_url": "https://github.com/ishaanam/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 278296,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-07-21T15:00:35Z",
        "created_at": "2022-02-21T22:03:42Z",
        "updated_at": "2025-07-03T19:00:10Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "11c6a864c9ee3a9bbd65720517fd22c155fd9060",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37553,
        "stargazers_count": 84659,
        "watchers_count": 84659,
        "size": 289333,
        "default_branch": "master",
        "open_issues_count": 758,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-07-21T15:02:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-07-21T15:05:21Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 571,
    "deletions": 23,
    "changed_files": 22,
    "commits": 10,
    "review_comments": 40,
    "comments": 6
  },
  "events": [
    {
      "event": "commented",
      "id": 3046400194,
      "node_id": "IC_kwDOABII5861lGDC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3046400194",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-07T20:14:04Z",
      "updated_at": "2025-07-18T04:51:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32896.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [glozow](https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-2998494185), [rkrux](https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3020910288) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#32983](https://github.com/bitcoin/bitcoin/pull/32983) (rpc: refactor: use string_view in Arg/MaybeArg by stickies-v)\n* [#32966](https://github.com/bitcoin/bitcoin/pull/32966) (Silent Payments: Receiving by Eunovo)\n* [#32941](https://github.com/bitcoin/bitcoin/pull/32941) (p2p: TxOrphanage revamp cleanups by glozow)\n* [#32523](https://github.com/bitcoin/bitcoin/pull/32523) (wallet: Remove isminetypes by achow101)\n* [#32521](https://github.com/bitcoin/bitcoin/pull/32521) (policy: make pathological transactions packed with legacy sigops non-standard by darosior)\n* [#31829](https://github.com/bitcoin/bitcoin/pull/31829) (p2p: improve TxOrphanage denial of service bounds by glozow)\n* [#28201](https://github.com/bitcoin/bitcoin/pull/28201) (Silent Payments: sending by josibake)\n* [#21283](https://github.com/bitcoin/bitcoin/pull/21283) (Implement BIP 370 PSBTv2 by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3046400194",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18512237200,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARPalKQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18512237200",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0b5416122a8e2014e96767a9ccd269bcb714aa02",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/0b5416122a8e2014e96767a9ccd269bcb714aa02",
      "created_at": "2025-07-07T20:18:56Z"
    },
    {
      "event": "labeled",
      "id": 18512240505,
      "node_id": "LE_lADOABII586_VswkzwAAAARPal95",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18512240505",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-07T20:19:12Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3046411869,
      "node_id": "IC_kwDOABII5861lI5d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3046411869",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-07T20:19:15Z",
      "updated_at": "2025-07-07T20:19:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `lint`: https://github.com/bitcoin/bitcoin/runs/45505893140</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a lint error due to a file permission issue with a Python script that has a shebang line but incorrect executable permissions.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3046411869",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18528888651,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARQaGdL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18528888651",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/75d606c5648f8d679e69f1daa795e0ba1b624794",
      "created_at": "2025-07-08T15:18:36Z"
    },
    {
      "event": "reviewed",
      "id": 2998494185,
      "node_id": "PRR_kwDOABII586yuWPp",
      "url": null,
      "actor": null,
      "commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Nice, concept ACK! Saw that these tests fail on #31936, which is helpful for showing its issues. Ultimately, I think the wallet commits should be introduced before the RPC ones.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-2998494185",
      "submitted_at": "2025-07-08T17:41:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18532637896,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARQoZzI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18532637896",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e8a200e5e4812f14d9c098c27cca9efa02122761",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/e8a200e5e4812f14d9c098c27cca9efa02122761",
      "created_at": "2025-07-08T19:21:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18532941546,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARQpj7q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18532941546",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0d3a7677a706a60b6eed64f46a0039193c79830d",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/0d3a7677a706a60b6eed64f46a0039193c79830d",
      "created_at": "2025-07-08T19:44:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18533916982,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARQtSE2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18533916982",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7fdff3ff7c3814a78eb931ccfdf3e19b5592c563",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/7fdff3ff7c3814a78eb931ccfdf3e19b5592c563",
      "created_at": "2025-07-08T21:02:57Z"
    },
    {
      "event": "reviewed",
      "id": 3000189728,
      "node_id": "PRR_kwDOABII586y00Mg",
      "url": null,
      "actor": null,
      "commit_id": "7fdff3ff7c3814a78eb931ccfdf3e19b5592c563",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3000189728",
      "submitted_at": "2025-07-09T06:27:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18552468458,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARR0DPq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18552468458",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5b0e65423b0bad9d792ae2a921e1faab58d0a534",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/5b0e65423b0bad9d792ae2a921e1faab58d0a534",
      "created_at": "2025-07-09T19:38:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18552767443,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARR1MPT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18552767443",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0188a16a6d0af103b9328651d82d23539405d4aa",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/0188a16a6d0af103b9328651d82d23539405d4aa",
      "created_at": "2025-07-09T20:01:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18553103414,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARR2eQ2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18553103414",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "012ccc025d3e6a81b88e6fa1299a3b2622659662",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/012ccc025d3e6a81b88e6fa1299a3b2622659662",
      "created_at": "2025-07-09T20:27:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18570900242,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARS6XMS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18570900242",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2fef28ede4b6794241cd0e7079d05008f9fd54de",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/2fef28ede4b6794241cd0e7079d05008f9fd54de",
      "created_at": "2025-07-10T17:55:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18571903008,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARS-MAg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18571903008",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c6cb62e8d2e2e6010b0ba16e02ee0e3428e5f885",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/c6cb62e8d2e2e6010b0ba16e02ee0e3428e5f885",
      "created_at": "2025-07-10T19:03:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18573620788,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARTEvY0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18573620788",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7ded135089b8247f0e251318e3961df0e95ac0f4",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/7ded135089b8247f0e251318e3961df0e95ac0f4",
      "created_at": "2025-07-10T20:54:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18609280354,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARVMxVi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18609280354",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eee86957be47eca367de43858e81da15b9e352e0",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/eee86957be47eca367de43858e81da15b9e352e0",
      "created_at": "2025-07-14T03:34:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18618968043,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARVxufr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18618968043",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ca97f19d64c6c6d98cec6117272a3334f8f4d785",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/ca97f19d64c6c6d98cec6117272a3334f8f4d785",
      "created_at": "2025-07-14T14:05:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18619724364,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARV0nJM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18619724364",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "created_at": "2025-07-14T14:45:04Z"
    },
    {
      "event": "ready_for_review",
      "id": 18619733414,
      "node_id": "RFRE_lADOABII586_VswkzwAAAARV0pWm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18619733414",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T14:45:32Z"
    },
    {
      "event": "commented",
      "id": 3069883620,
      "node_id": "IC_kwDOABII5862-rTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3069883620",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T14:46:42Z",
      "updated_at": "2025-07-14T14:46:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "This PR is now ready for review.",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3069883620",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "labeled",
      "id": 18623246336,
      "node_id": "LE_lADOABII586_VswkzwAAAARWCDAA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18623246336",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T18:12:06Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "labeled",
      "id": 18623246346,
      "node_id": "LE_lADOABII586_VswkzwAAAARWCDAK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18623246346",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T18:12:06Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "unlabeled",
      "id": 18623919498,
      "node_id": "UNLE_lADOABII586_VswkzwAAAARWEnWK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18623919498",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T18:56:18Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3020910288,
      "node_id": "PRR_kwDOABII5860D27Q",
      "url": null,
      "actor": null,
      "commit_id": "b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK b3817a822054fb2ea2964535b5a0ee55dd5d55ac\r\nThanks for picking this up, I will try to review it soon.\r\n\r\nThe TODOs seem to be done and can be removed from the PR description.",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3020910288",
      "submitted_at": "2025-07-15T15:17:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "reviewed",
      "id": 3021245623,
      "node_id": "PRR_kwDOABII5860FIy3",
      "url": null,
      "actor": null,
      "commit_id": "b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3021245623",
      "submitted_at": "2025-07-15T16:47:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18646282030,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARXZ68u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18646282030",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "657d153c26c2491e6e04ba135e7ac22658a0c110",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/657d153c26c2491e6e04ba135e7ac22658a0c110",
      "created_at": "2025-07-15T20:27:37Z"
    },
    {
      "event": "labeled",
      "id": 18648359471,
      "node_id": "LE_lADOABII586_VswkzwAAAARXh2Iv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18648359471",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-15T23:39:29Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3076074331,
      "node_id": "IC_kwDOABII5863WStb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3076074331",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-15T23:39:31Z",
      "updated_at": "2025-07-15T23:39:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `macOS-cross, gui, no tests`: https://github.com/bitcoin/bitcoin/runs/46044194546</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a linker error due to an undefined symbol in RPCHelpMan.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3076074331",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "reviewed",
      "id": 3023385092,
      "node_id": "PRR_kwDOABII5860NTIE",
      "url": null,
      "actor": null,
      "commit_id": "657d153c26c2491e6e04ba135e7ac22658a0c110",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3023385092",
      "submitted_at": "2025-07-16T06:41:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18660520039,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARYQPBn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18660520039",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "827fdc4904d8dd33609e7042ecf2c5429a23690f",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/827fdc4904d8dd33609e7042ecf2c5429a23690f",
      "created_at": "2025-07-16T14:13:52Z"
    },
    {
      "event": "unlabeled",
      "id": 18663734437,
      "node_id": "UNLE_lADOABII586_VswkzwAAAARYcfyl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18663734437",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-16T16:53:55Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 3026497105,
      "node_id": "PRR_kwDOABII5860ZK5R",
      "url": null,
      "actor": null,
      "commit_id": "827fdc4904d8dd33609e7042ecf2c5429a23690f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#pullrequestreview-3026497105",
      "submitted_at": "2025-07-16T20:06:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18684732384,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARZsmPg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18684732384",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3122ca2128d8a1856103e299a470133efbe16ef9",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/3122ca2128d8a1856103e299a470133efbe16ef9",
      "created_at": "2025-07-17T17:23:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18684838434,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARZtAIi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18684838434",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5958bd194a9167fd31f75eb49086a6ac484d06f6",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/5958bd194a9167fd31f75eb49086a6ac484d06f6",
      "created_at": "2025-07-17T17:30:22Z"
    },
    {
      "event": "labeled",
      "id": 18684840828,
      "node_id": "LE_lADOABII586_VswkzwAAAARZtAt8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18684840828",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-17T17:30:32Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3084879554,
      "node_id": "IC_kwDOABII586334bC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3084879554",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-17T17:30:33Z",
      "updated_at": "2025-07-17T17:30:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `lint`: https://github.com/bitcoin/bitcoin/runs/46200015717</sub>\n<sub>LLM reason (✨ experimental): The failure is caused by lint errors detected by `ruff` due to unused imports in Python files.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3084879554",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18684993989,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARZtmHF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18684993989",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "083886e2c00b0e811348bda5854979d6a0482f91",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/083886e2c00b0e811348bda5854979d6a0482f91",
      "created_at": "2025-07-17T17:41:03Z"
    },
    {
      "event": "commented",
      "id": 3084977883,
      "node_id": "IC_kwDOABII58634Qbb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3084977883",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-17T18:08:04Z",
      "updated_at": "2025-07-17T18:08:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the review @glozow! I've addressed your comments and also refactored a few of the functional tests.",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#issuecomment-3084977883",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32896"
    },
    {
      "event": "mentioned",
      "id": 18685378738,
      "node_id": "MEE_lADOABII586_VswkzwAAAARZvECy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18685378738",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-17T18:08:05Z"
    },
    {
      "event": "subscribed",
      "id": 18685378754,
      "node_id": "SE_lADOABII586_VswkzwAAAARZvEDC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18685378754",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-17T18:08:05Z"
    },
    {
      "event": "unlabeled",
      "id": 18687298672,
      "node_id": "UNLE_lADOABII586_VswkzwAAAARZ2Yxw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18687298672",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-17T20:19:52Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 18707713468,
      "node_id": "LE_lADOABII586_VswkzwAAAARbEQ28",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18707713468",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-18T21:43:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE5MTBkOWI2MWYyM2Y2NTMzNTM2N2YyZjhkZDAyMWFjMWNjZDkwN2E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1910d9b61f23f65335367f2f8dd021ac1ccd907a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1910d9b61f23f65335367f2f8dd021ac1ccd907a",
      "tree": {
        "sha": "9fcdee2bd6e29c2c3f120d9c7a2eeef6feb9b49c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fcdee2bd6e29c2c3f120d9c7a2eeef6feb9b49c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11c6a864c9ee3a9bbd65720517fd22c155fd9060",
          "sha": "11c6a864c9ee3a9bbd65720517fd22c155fd9060",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/11c6a864c9ee3a9bbd65720517fd22c155fd9060"
        }
      ],
      "message": "wallet: unconfirmed ancestors and descendants are always truc",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-21T14:45:26Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-02T19:56:28Z"
      },
      "sha": "1910d9b61f23f65335367f2f8dd021ac1ccd907a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJmZjAwNmI3YWU3ZmExMjBmYWM0ZjIxMThlODkxZDJjODhkMzhmOWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bff006b7ae7fa120fac4f2118e891d2c88d38f9a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bff006b7ae7fa120fac4f2118e891d2c88d38f9a",
      "tree": {
        "sha": "02a8ed22d31bfca6aca4497deef2749640ecf8ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02a8ed22d31bfca6aca4497deef2749640ecf8ab"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1910d9b61f23f65335367f2f8dd021ac1ccd907a",
          "sha": "1910d9b61f23f65335367f2f8dd021ac1ccd907a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1910d9b61f23f65335367f2f8dd021ac1ccd907a"
        }
      ],
      "message": " wallet: don't include unconfirmed v3 txs with children in available coins",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-21T14:45:26Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-08T19:09:16Z"
      },
      "sha": "bff006b7ae7fa120fac4f2118e891d2c88d38f9a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNmNzEyYWI1NmUzMjU2ZGI1ZGZjZjQyMjg2MGJkYjNjZjg3Y2QwM2U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf712ab56e3256db5dfcf422860bdb3cf87cd03e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cf712ab56e3256db5dfcf422860bdb3cf87cd03e",
      "tree": {
        "sha": "22a68c81db748bbaa13aafebe5b4dc41fa45f84b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22a68c81db748bbaa13aafebe5b4dc41fa45f84b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bff006b7ae7fa120fac4f2118e891d2c88d38f9a",
          "sha": "bff006b7ae7fa120fac4f2118e891d2c88d38f9a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bff006b7ae7fa120fac4f2118e891d2c88d38f9a"
        }
      ],
      "message": "wallet: throw error at conflicting tx versions in pre-selected inputs",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-21T14:45:27Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-08T19:10:00Z"
      },
      "sha": "cf712ab56e3256db5dfcf422860bdb3cf87cd03e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg1Njc2MzRlOTQyY2E1MDViYmQ2OTc5MGI3ODUwNjI4NzQzZDZjODM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8567634e942ca505bbd69790b7850628743d6c83",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8567634e942ca505bbd69790b7850628743d6c83",
      "tree": {
        "sha": "e1a536c3a458e8d8d477df8b71127e50debc60f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1a536c3a458e8d8d477df8b71127e50debc60f7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf712ab56e3256db5dfcf422860bdb3cf87cd03e",
          "sha": "cf712ab56e3256db5dfcf422860bdb3cf87cd03e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cf712ab56e3256db5dfcf422860bdb3cf87cd03e"
        }
      ],
      "message": "wallet: mark unconfirmed v3 siblings as mempool conflicts",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-21T14:45:27Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-08T15:14:58Z"
      },
      "sha": "8567634e942ca505bbd69790b7850628743d6c83"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNmYmEwY2FkOTRjNjI3NzRlYzcxNGRhMmM3YzY5N2Y2MTI4ODkxMGE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfba0cad94c62774ec714da2c7c697f61288910a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cfba0cad94c62774ec714da2c7c697f61288910a",
      "tree": {
        "sha": "b213ad6ac4fed532bed7de900e8c711062ffc8a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b213ad6ac4fed532bed7de900e8c711062ffc8a1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8567634e942ca505bbd69790b7850628743d6c83",
          "sha": "8567634e942ca505bbd69790b7850628743d6c83",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8567634e942ca505bbd69790b7850628743d6c83"
        }
      ],
      "message": "wallet: limit v3 tx weight in coin selection",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-21T14:45:27Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-07T20:09:01Z"
      },
      "sha": "cfba0cad94c62774ec714da2c7c697f61288910a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQxNjY3YmJlMTgwYzc5ZDU5ZjlkNjBmNTg0YTEwNWJiNjAxNDc3OWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41667bbe180c79d59f9d60f584a105bb6014779e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/41667bbe180c79d59f9d60f584a105bb6014779e",
      "tree": {
        "sha": "22118e67a5a15bf0b24012c34d8ce350197b68bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22118e67a5a15bf0b24012c34d8ce350197b68bd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfba0cad94c62774ec714da2c7c697f61288910a",
          "sha": "cfba0cad94c62774ec714da2c7c697f61288910a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cfba0cad94c62774ec714da2c7c697f61288910a"
        }
      ],
      "message": "rpc: Add version parameter for transaction",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-21T14:45:27Z"
      },
      "author": {
        "name": "Bue-von-hon",
        "email": "dkssudvn2@gmail.com",
        "date": "2025-04-26T01:32:30Z"
      },
      "sha": "41667bbe180c79d59f9d60f584a105bb6014779e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM5ZWQ4NDliZTBjZTJiMDkwYWU1ZjFmOWQwZTFjODE2MjhmOWUzNDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9ed849be0ce2b090ae5f1f9d0e1c81628f9e340",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c9ed849be0ce2b090ae5f1f9d0e1c81628f9e340",
      "tree": {
        "sha": "1b2bd6984f34d80ceed328492c9d3e1db1260d25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b2bd6984f34d80ceed328492c9d3e1db1260d25"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41667bbe180c79d59f9d60f584a105bb6014779e",
          "sha": "41667bbe180c79d59f9d60f584a105bb6014779e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/41667bbe180c79d59f9d60f584a105bb6014779e"
        }
      ],
      "message": "rpc: Add current version parameter for transaction",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-21T14:45:27Z"
      },
      "author": {
        "name": "Bue-von-hon",
        "email": "dkssudvn2@gmail.com",
        "date": "2025-04-26T11:42:20Z"
      },
      "sha": "c9ed849be0ce2b090ae5f1f9d0e1c81628f9e340"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDlmZTZmYzI2YjUzODE3MmU5NGQ3N2VjODVkYTFiYzU3NDk1NGIyYzI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fe6fc26b538172e94d77ec85da1bc574954b2c2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9fe6fc26b538172e94d77ec85da1bc574954b2c2",
      "tree": {
        "sha": "3c1c00d02948838081667d50d26cce658ccf2673",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c1c00d02948838081667d50d26cce658ccf2673"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9ed849be0ce2b090ae5f1f9d0e1c81628f9e340",
          "sha": "c9ed849be0ce2b090ae5f1f9d0e1c81628f9e340",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c9ed849be0ce2b090ae5f1f9d0e1c81628f9e340"
        }
      ],
      "message": "rpc: Support v3 raw transactions creation\n\nAdded support for creating v3 raw transaction:\n- Overloaded  to include additional parameter\n\nCo-authored-by: chungeun-choi <cucuridas@gmail.com>\nCo-authored-by: dongwook-chan <dongwook.chan@gmail.com>\nCo-authored-by: sean-k1 <uhs2000@naver.com>",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-21T14:45:27Z"
      },
      "author": {
        "name": "Bue-von-hon",
        "email": "dkssudvn2@gmail.com",
        "date": "2025-02-22T07:27:23Z"
      },
      "sha": "9fe6fc26b538172e94d77ec85da1bc574954b2c2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ2ZjRmMzcyYjgwOTY1NDcwNDlhOTYxODdlODBlYzQ5ZTQ5Y2IxZDU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46f4f372b8096547049a96187e80ec49e49cb1d5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/46f4f372b8096547049a96187e80ec49e49cb1d5",
      "tree": {
        "sha": "b669856bd6dceb42f4b5fc8eb7426b87f4bffaf9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b669856bd6dceb42f4b5fc8eb7426b87f4bffaf9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fe6fc26b538172e94d77ec85da1bc574954b2c2",
          "sha": "9fe6fc26b538172e94d77ec85da1bc574954b2c2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9fe6fc26b538172e94d77ec85da1bc574954b2c2"
        }
      ],
      "message": "test: add transaction version 3 wallet tests",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-21T14:47:35Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-17T17:18:03Z"
      },
      "sha": "46f4f372b8096547049a96187e80ec49e49cb1d5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDYyYzY2ZmVjOWI4ZDljNTFiYjQ3Y2NmMzljNDg4ODdjOGI4MGIwNjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "tree": {
        "sha": "e94872c833e5158ad7b51c64bb7474d1c0a9553d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e94872c833e5158ad7b51c64bb7474d1c0a9553d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46f4f372b8096547049a96187e80ec49e49cb1d5",
          "sha": "46f4f372b8096547049a96187e80ec49e49cb1d5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/46f4f372b8096547049a96187e80ec49e49cb1d5"
        }
      ],
      "message": "doc: add release notes for version 3 transactions",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-21T14:47:36Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-17T17:18:38Z"
      },
      "sha": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18731100487,
      "node_id": "HRFPE_lADOABII586_VswkzwAAAARcdelH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18731100487",
      "actor": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "commit_url": "https://api.github.com/repos/ishaanam/bitcoin/commits/62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "created_at": "2025-07-21T15:00:36Z"
    },
    {
      "event": "unlabeled",
      "id": 18731493846,
      "node_id": "UNLE_lADOABII586_VswkzwAAAARce-nW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18731493846",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-21T15:20:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193049601",
      "pull_request_review_id": 2998494185,
      "id": 2193049601,
      "node_id": "PRRC_kwDOABII586Ct0gB",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(50, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.alice.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 70,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "e7b40847385b4781118e103ac896dc6dd104cb15",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We should also check that we can't fund a v2 transaction when everything is v3 unconfirmed",
      "created_at": "2025-07-08T17:16:04Z",
      "updated_at": "2025-07-08T17:41:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193049601",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193049601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193052705",
      "pull_request_review_id": 2998494185,
      "id": 2193052705,
      "node_id": "PRRC_kwDOABII586Ct1Qh",
      "diff_hunk": "@@ -715,6 +716,12 @@ CreatedTransactionResult FundTransaction(CWallet& wallet, const CMutableTransact\n         coinControl.m_max_tx_weight = options[\"max_tx_weight\"].getInt<int>();\n     }\n \n+    if (tx.version == TRUC_VERSION) {\n+        if (!coinControl.m_max_tx_weight.has_value() || coinControl.m_max_tx_weight.value() > 40000) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Instead of magic numbers, try using `TRUC_MAX_VSIZE * WITNESS_SCALE_FACTOR`",
      "created_at": "2025-07-08T17:17:51Z",
      "updated_at": "2025-07-08T17:41:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193052705",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193052705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 720,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193065536",
      "pull_request_review_id": 2998494185,
      "id": 2193065536,
      "node_id": "PRRC_kwDOABII586Ct4ZA",
      "diff_hunk": "@@ -258,6 +258,9 @@ class CWalletTx\n     // BlockConflicted.\n     std::set<Txid> mempool_conflicts;\n \n+    // Set of v3 transactions that spend from this tx",
      "path": "src/wallet/transaction.h",
      "position": null,
      "original_position": 4,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Comment seems inaccurate: it mentions a set but this only allows for 1 transaction. Should also mention (1) that this is used to stop us from creating another unconfirmed child and (2) this is specifically the in mempool-sibling, as there can be multiple siblings but only 1 in mempool (unless there was a reorg).",
      "created_at": "2025-07-08T17:25:10Z",
      "updated_at": "2025-07-08T17:41:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193065536",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193065536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193078705",
      "pull_request_review_id": 2998494185,
      "id": 2193078705,
      "node_id": "PRRC_kwDOABII586Ct7mx",
      "diff_hunk": "@@ -715,6 +716,12 @@ CreatedTransactionResult FundTransaction(CWallet& wallet, const CMutableTransact\n         coinControl.m_max_tx_weight = options[\"max_tx_weight\"].getInt<int>();\n     }\n \n+    if (tx.version == TRUC_VERSION) {\n+        if (!coinControl.m_max_tx_weight.has_value() || coinControl.m_max_tx_weight.value() > 40000) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "in_reply_to_id": 2193052705,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also, there is a separate size limit for TRUC children - I don't think that's been implemented yet?",
      "created_at": "2025-07-08T17:33:20Z",
      "updated_at": "2025-07-08T17:41:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193078705",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193078705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 720,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193091714",
      "pull_request_review_id": 2998494185,
      "id": 2193091714,
      "node_id": "PRRC_kwDOABII586Ct-yC",
      "diff_hunk": "@@ -83,6 +83,8 @@ struct CoinFilterParams {\n     bool include_immature_coinbase{false};\n     // By default, skip locked UTXOs\n     bool skip_locked{true};\n+    // Whether or not to care about the tx version\n+    bool track_version{true}; // only used by AvailableCoinsListUnspent",
      "path": "src/wallet/spend.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A more descriptive name may be `exclude_version3`.",
      "created_at": "2025-07-08T17:37:49Z",
      "updated_at": "2025-07-08T17:41:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193091714",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193091714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193283389",
      "pull_request_review_id": 2998863065,
      "id": 2193283389,
      "node_id": "PRRC_kwDOABII586Cutk9",
      "diff_hunk": "@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.generate(self.nodes[0], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[0], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(50, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.alice.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 70,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "e7b40847385b4781118e103ac896dc6dd104cb15",
      "in_reply_to_id": 2193049601,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point, I will add a test for this.",
      "created_at": "2025-07-08T19:22:20Z",
      "updated_at": "2025-07-08T19:22:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193283389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193283389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193284376",
      "pull_request_review_id": 2998864598,
      "id": 2193284376,
      "node_id": "PRRC_kwDOABII586Cut0Y",
      "diff_hunk": "@@ -715,6 +716,12 @@ CreatedTransactionResult FundTransaction(CWallet& wallet, const CMutableTransact\n         coinControl.m_max_tx_weight = options[\"max_tx_weight\"].getInt<int>();\n     }\n \n+    if (tx.version == TRUC_VERSION) {\n+        if (!coinControl.m_max_tx_weight.has_value() || coinControl.m_max_tx_weight.value() > 40000) {",
      "path": "src/wallet/rpc/spend.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "in_reply_to_id": 2193052705,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I will look into implementing the separate size limit. ",
      "created_at": "2025-07-08T19:23:04Z",
      "updated_at": "2025-07-08T19:23:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193284376",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193284376"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 720,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193285093",
      "pull_request_review_id": 2998865668,
      "id": 2193285093,
      "node_id": "PRRC_kwDOABII586Cut_l",
      "diff_hunk": "@@ -258,6 +258,9 @@ class CWalletTx\n     // BlockConflicted.\n     std::set<Txid> mempool_conflicts;\n \n+    // Set of v3 transactions that spend from this tx",
      "path": "src/wallet/transaction.h",
      "position": null,
      "original_position": 4,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "in_reply_to_id": 2193065536,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-08T19:23:35Z",
      "updated_at": "2025-07-08T19:23:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193285093",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193285093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193289150",
      "pull_request_review_id": 2998871866,
      "id": 2193289150,
      "node_id": "PRRC_kwDOABII586Cuu--",
      "diff_hunk": "@@ -83,6 +83,8 @@ struct CoinFilterParams {\n     bool include_immature_coinbase{false};\n     // By default, skip locked UTXOs\n     bool skip_locked{true};\n+    // Whether or not to care about the tx version\n+    bool track_version{true}; // only used by AvailableCoinsListUnspent",
      "path": "src/wallet/spend.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "75d606c5648f8d679e69f1daa795e0ba1b624794",
      "in_reply_to_id": 2193091714,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure if that name would be accurate, because this boolean is set to `true` even when we are trying to create a v3 transaction, in which case we are technically not excluding version 3.",
      "created_at": "2025-07-08T19:26:01Z",
      "updated_at": "2025-07-08T19:26:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2193289150",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193289150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194156945",
      "pull_request_review_id": 3000189728,
      "id": 2194156945,
      "node_id": "PRRC_kwDOABII586CyC2R",
      "diff_hunk": "@@ -80,6 +80,9 @@\n \n DEFAULT_MEMPOOL_EXPIRY_HOURS = 336  # hours\n \n+TX_MIN_STANDARD_VERSION = 1\n+TX_MAX_STANDARD_VERSION = 3",
      "path": "test/functional/test_framework/messages.py",
      "position": 5,
      "original_position": 5,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "7fdff3ff7c3814a78eb931ccfdf3e19b5592c563",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "there's also `test/functional/feature_taproot.py:TX_MAX_STANDARD_VERSION = 3`",
      "created_at": "2025-07-09T06:25:22Z",
      "updated_at": "2025-07-09T06:27:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2194156945",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194156945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 84,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194159096",
      "pull_request_review_id": 3000189728,
      "id": 2194159096,
      "node_id": "PRRC_kwDOABII586CyDX4",
      "diff_hunk": "@@ -154,6 +155,13 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         rawTx.nLockTime = nLockTime;\n     }\n \n+    if (!version.isNull()) {\n+        uint32_t nVersion = version.getInt<uint32_t>();\n+        if (nVersion < TX_MIN_STANDARD_VERSION || nVersion > TX_MAX_STANDARD_VERSION)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, version out of range(\") + util::ToString(TX_MIN_STANDARD_VERSION) + \"~\" + util::ToString(TX_MAX_STANDARD_VERSION) + \")\");",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "7fdff3ff7c3814a78eb931ccfdf3e19b5592c563",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could use strprintf for shorter code? Also missing `{}` around body of the `if`?",
      "created_at": "2025-07-09T06:26:46Z",
      "updated_at": "2025-07-09T06:27:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2194159096",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194159096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195916152",
      "pull_request_review_id": 3002995392,
      "id": 2195916152,
      "node_id": "PRRC_kwDOABII586C4wV4",
      "diff_hunk": "@@ -80,6 +80,9 @@\n \n DEFAULT_MEMPOOL_EXPIRY_HOURS = 336  # hours\n \n+TX_MIN_STANDARD_VERSION = 1\n+TX_MAX_STANDARD_VERSION = 3",
      "path": "test/functional/test_framework/messages.py",
      "position": 5,
      "original_position": 5,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "7fdff3ff7c3814a78eb931ccfdf3e19b5592c563",
      "in_reply_to_id": 2194156945,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've changed this test to import `TX_MAX_STANDARD_VERSION` instead.",
      "created_at": "2025-07-09T20:28:07Z",
      "updated_at": "2025-07-09T20:28:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2195916152",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195916152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 84,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195917838",
      "pull_request_review_id": 3002997997,
      "id": 2195917838,
      "node_id": "PRRC_kwDOABII586C4wwO",
      "diff_hunk": "@@ -154,6 +155,13 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         rawTx.nLockTime = nLockTime;\n     }\n \n+    if (!version.isNull()) {\n+        uint32_t nVersion = version.getInt<uint32_t>();\n+        if (nVersion < TX_MIN_STANDARD_VERSION || nVersion > TX_MAX_STANDARD_VERSION)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, version out of range(\") + util::ToString(TX_MIN_STANDARD_VERSION) + \"~\" + util::ToString(TX_MAX_STANDARD_VERSION) + \")\");",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "7fdff3ff7c3814a78eb931ccfdf3e19b5592c563",
      "in_reply_to_id": 2194159096,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-09T20:29:20Z",
      "updated_at": "2025-07-09T20:29:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2195917838",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195917838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207804501",
      "pull_request_review_id": 3020910288,
      "id": 2207804501,
      "node_id": "PRRC_kwDOABII586DmGxV",
      "diff_hunk": "@@ -154,6 +155,15 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         rawTx.nLockTime = nLockTime;\n     }\n \n+    if (!version.isNull()) {\n+        uint32_t nVersion = version.getInt<uint32_t>();\n+        if (nVersion < TX_MIN_STANDARD_VERSION || nVersion > TX_MAX_STANDARD_VERSION) {\n+            // throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, version out of range(\") + util::ToString(TX_MIN_STANDARD_VERSION) + \"~\" + util::ToString(TX_MAX_STANDARD_VERSION) + \")\");",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This commented error should be removed now.",
      "created_at": "2025-07-15T15:14:08Z",
      "updated_at": "2025-07-15T15:17:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2207804501",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2207804501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2208017260",
      "pull_request_review_id": 3021245623,
      "id": 2208017260,
      "node_id": "PRRC_kwDOABII586Dm6ts",
      "diff_hunk": "@@ -437,7 +438,7 @@ static RPCHelpMan createrawtransaction()\n     if (!request.params[3].isNull()) {\n         rbf = request.params[3].get_bool();\n     }\n-    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf, request.params[4]);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\n    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf, self.Arg<uint32_t>(\"version\"));\n```\n\nnit: This should allow to drop the parsing in `ConstructTransaction` and the manual indexing here.",
      "created_at": "2025-07-15T16:47:11Z",
      "updated_at": "2025-07-15T16:47:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2208017260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2208017260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2208593588",
      "pull_request_review_id": 3022192521,
      "id": 2208593588,
      "node_id": "PRRC_kwDOABII586DpHa0",
      "diff_hunk": "@@ -154,6 +155,15 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         rawTx.nLockTime = nLockTime;\n     }\n \n+    if (!version.isNull()) {\n+        uint32_t nVersion = version.getInt<uint32_t>();\n+        if (nVersion < TX_MIN_STANDARD_VERSION || nVersion > TX_MAX_STANDARD_VERSION) {\n+            // throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, version out of range(\") + util::ToString(TX_MIN_STANDARD_VERSION) + \"~\" + util::ToString(TX_MAX_STANDARD_VERSION) + \")\");",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "in_reply_to_id": 2207804501,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-15T20:28:01Z",
      "updated_at": "2025-07-15T20:28:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2208593588",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2208593588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2208595036",
      "pull_request_review_id": 3022195028,
      "id": 2208595036,
      "node_id": "PRRC_kwDOABII586DpHxc",
      "diff_hunk": "@@ -437,7 +438,7 @@ static RPCHelpMan createrawtransaction()\n     if (!request.params[3].isNull()) {\n         rbf = request.params[3].get_bool();\n     }\n-    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf, request.params[4]);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b3817a822054fb2ea2964535b5a0ee55dd5d55ac",
      "in_reply_to_id": 2208017260,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-15T20:28:30Z",
      "updated_at": "2025-07-15T20:28:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2208595036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2208595036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2209414266",
      "pull_request_review_id": 3023385092,
      "id": 2209414266,
      "node_id": "PRRC_kwDOABII586DsPx6",
      "diff_hunk": "@@ -437,7 +438,7 @@ static RPCHelpMan createrawtransaction()\n     if (!request.params[3].isNull()) {\n         rbf = request.params[3].get_bool();\n     }\n-    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf, self.Arg<unsigned long>(\"version\"));",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "657d153c26c2491e6e04ba135e7ac22658a0c110",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Using uint32_t and something like this should fix the linker error:\n\n```\ndiff --git a/src/rpc/util.cpp b/src/rpc/util.cpp\nindex 5da02b4df4..0604dec2dc 100644\n--- a/src/rpc/util.cpp\n+++ b/src/rpc/util.cpp\n@@ -731,6 +731,7 @@ TMPL_INST(CheckRequiredOrDefault, const UniValue&, *CHECK_NONFATAL(maybe_arg););\n TMPL_INST(CheckRequiredOrDefault, bool, CHECK_NONFATAL(maybe_arg)->get_bool(););\n TMPL_INST(CheckRequiredOrDefault, int, CHECK_NONFATAL(maybe_arg)->getInt<int>(););\n TMPL_INST(CheckRequiredOrDefault, uint64_t, CHECK_NONFATAL(maybe_arg)->getInt<uint64_t>(););\n+TMPL_INST(CheckRequiredOrDefault, uint32_t, CHECK_NONFATAL(maybe_arg)->getInt<uint32_t>(););\n TMPL_INST(CheckRequiredOrDefault, const std::string&, CHECK_NONFATAL(maybe_arg)->get_str(););\n \n bool RPCHelpMan::IsValidNumArgs(size_t num_args) const\n",
      "created_at": "2025-07-16T06:41:47Z",
      "updated_at": "2025-07-16T06:41:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2209414266",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2209414266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2210830294",
      "pull_request_review_id": 3025690592,
      "id": 2210830294,
      "node_id": "PRRC_kwDOABII586DxpfW",
      "diff_hunk": "@@ -437,7 +438,7 @@ static RPCHelpMan createrawtransaction()\n     if (!request.params[3].isNull()) {\n         rbf = request.params[3].get_bool();\n     }\n-    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf, self.Arg<unsigned long>(\"version\"));",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "657d153c26c2491e6e04ba135e7ac22658a0c110",
      "in_reply_to_id": 2209414266,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this fixed the error, thanks!",
      "created_at": "2025-07-16T15:51:57Z",
      "updated_at": "2025-07-16T15:51:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2210830294",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2210830294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211351922",
      "pull_request_review_id": 3026497105,
      "id": 2211351922,
      "node_id": "PRRC_kwDOABII586Dzo1y",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 29,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "maybe these should live in mempool_util?",
      "created_at": "2025-07-16T19:22:16Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211351922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211351922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211355006",
      "pull_request_review_id": 3026497105,
      "id": 2211355006,
      "node_id": "PRRC_kwDOABII586Dzpl-",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 82,
      "original_position": 79,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This looks like it was copy-pasted from the test framework - can we just use the existing method, perhaps with a wrapper if needed?",
      "created_at": "2025-07-16T19:23:53Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211355006",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211355006"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211362713",
      "pull_request_review_id": 3026497105,
      "id": 2211362713,
      "node_id": "PRRC_kwDOABII586DzreZ",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 129,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Might want to assert that it's v2",
      "created_at": "2025-07-16T19:27:01Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211362713",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211362713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211372152",
      "pull_request_review_id": 3026497105,
      "id": 2211372152,
      "node_id": "PRRC_kwDOABII586Dztx4",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 188,
      "original_position": 200,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should there also be a test where Alice tries to spend her change after Bob has spent from the parent? That wouldn't require `include_unsafe` IIUC",
      "created_at": "2025-07-16T19:32:03Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211372152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211372152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 188,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211375162",
      "pull_request_review_id": 3026497105,
      "id": 2211375162,
      "node_id": "PRRC_kwDOABII586Dzug6",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 172,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could you also add `v2_tx_spends_confirmed_v3_tx` and `v3_tx_spends_confirmed_v2_tx` to check that version mismatches are fine there?",
      "created_at": "2025-07-16T19:33:44Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211375162",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211375162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211379860",
      "pull_request_review_id": 3026497105,
      "id": 2211379860,
      "node_id": "PRRC_kwDOABII586DzvqU",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 264,
      "original_position": 269,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What does \"two outputs\" mean here? This has 1 output, no?",
      "created_at": "2025-07-16T19:36:20Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211379860",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211379860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 264,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211381702",
      "pull_request_review_id": 3026497105,
      "id": 2211381702,
      "node_id": "PRRC_kwDOABII586DzwHG",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 273,
      "original_position": 278,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will Alice's wallet attempt to rebroadcast her transaction if/when the parent + Bob's confirm? Can we do an RBF of Alice's transaction to evict Bob's?",
      "created_at": "2025-07-16T19:37:30Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211381702",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211381702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 273,
      "original_line": 273,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211385875",
      "pull_request_review_id": 3026497105,
      "id": 2211385875,
      "node_id": "PRRC_kwDOABII586DzxIT",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 284,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        # send a v2 output to alice and confirm it\r\n````",
      "created_at": "2025-07-16T19:40:10Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211385875",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211385875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 284,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211390451",
      "pull_request_review_id": 3026497105,
      "id": 2211390451,
      "node_id": "PRRC_kwDOABII586DzyPz",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice\n+        self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] != 0][0]",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 292,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Isn't this just...?\r\n```suggestion\r\n        alice_v2_unspent = self.alice.listunspent(minconf=1)[0]\r\n```",
      "created_at": "2025-07-16T19:42:17Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211390451",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211390451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211403206",
      "pull_request_review_id": 3026497105,
      "id": 2211403206,
      "node_id": "PRRC_kwDOABII586Dz1XG",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice\n+        self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] != 0][0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+\n+        # alice spends both of her outputs\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+        # bob can't create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0},]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, inputs, outputs, 2)\n+        # bob can now create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 322,
      "original_position": 320,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can this be consolidated with `v3_conflict_removed_from_mempool` since they are mostly the same?",
      "created_at": "2025-07-16T19:47:42Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211403206",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211403206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 322,
      "original_line": 322,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211435769",
      "pull_request_review_id": 3026497105,
      "id": 2211435769,
      "node_id": "PRRC_kwDOABII586Dz9T5",
      "diff_hunk": "@@ -904,11 +925,17 @@ util::Result<SelectionResult> AutomaticCoinSelection(const CWallet& wallet, Coin\n         // If no solution is found, return the first detailed error (if any).\n         // future: add \"error level\" so the worst one can be picked instead.\n         std::vector<util::Result<SelectionResult>> res_detailed_errors;\n+        CoinSelectionParams temp_selection_params = coin_selection_params;\n         for (const auto& select_filter : ordered_filters) {\n             auto it = filtered_groups.find(select_filter.filter);\n             if (it == filtered_groups.end()) continue;\n+            if (temp_selection_params.m_version == TRUC_VERSION && (select_filter.filter.conf_mine == 0 || select_filter.filter.conf_theirs == 0)) {\n+                if (temp_selection_params.m_max_tx_weight > (TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR)) {\n+                    temp_selection_params.m_max_tx_weight = TRUC_CHILD_MAX_VSIZE * WITNESS_SCALE_FACTOR;\n+                }",
      "path": "src/wallet/spend.cpp",
      "position": 60,
      "original_position": 60,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "827fdc4904d8dd33609e7042ecf2c5429a23690f",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The approach of modifying the `CoinSelectionParams.m_max_tx_weight` seems fine to me. The only issue I notice is the error message being \"The inputs size exceeds the maximum weight. Please try sending a smaller amount or manually consolidating your wallet's UTXOs\", which could be slightly confusing, but I think out of scope for this PR. A separate PR could maybe tell the user what the limit was, since it could be MAX_STANDARD_TX_WEIGHT, max TRUC weight, max child TRUC weight, or ancestor/cluster size limits (oh, just found out that isn't handled - also a potential followup).",
      "created_at": "2025-07-16T19:55:30Z",
      "updated_at": "2025-07-16T20:06:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2211435769",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2211435769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": 933,
      "original_start_line": 933,
      "start_side": "RIGHT",
      "line": 935,
      "original_line": 935,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213901825",
      "pull_request_review_id": 3030399457,
      "id": 2213901825,
      "node_id": "PRRC_kwDOABII586D9XYB",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 29,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211351922,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-17T17:23:58Z",
      "updated_at": "2025-07-17T17:23:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213901825",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213901825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213903403",
      "pull_request_review_id": 3030401668,
      "id": 2213903403,
      "node_id": "PRRC_kwDOABII586D9Xwr",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 82,
      "original_position": 79,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211355006,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've added a `bulk_vout` function to `script_util.py` which is used by `MiniWallet` and these tests.",
      "created_at": "2025-07-17T17:24:52Z",
      "updated_at": "2025-07-17T17:24:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213903403",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213903403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213914676",
      "pull_request_review_id": 3030419846,
      "id": 2213914676,
      "node_id": "PRRC_kwDOABII586D9ag0",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 129,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211362713,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've added a version 2 assertion everywhere that `sendall` is used in the tests.",
      "created_at": "2025-07-17T17:30:52Z",
      "updated_at": "2025-07-17T17:30:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213914676",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213914676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213915214",
      "pull_request_review_id": 3030420671,
      "id": 2213915214,
      "node_id": "PRRC_kwDOABII586D9apO",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 188,
      "original_position": 200,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211372152,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've added a test for alice spending change",
      "created_at": "2025-07-17T17:31:13Z",
      "updated_at": "2025-07-17T17:31:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213915214",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213915214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 188,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213915397",
      "pull_request_review_id": 3030420951,
      "id": 2213915397,
      "node_id": "PRRC_kwDOABII586D9asF",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 172,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211375162,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-17T17:31:21Z",
      "updated_at": "2025-07-17T17:31:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213915397",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213915397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213916090",
      "pull_request_review_id": 3030421999,
      "id": 2213916090,
      "node_id": "PRRC_kwDOABII586D9a26",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 264,
      "original_position": 269,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211379860,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, this was an outdated comment which I've now removed",
      "created_at": "2025-07-17T17:31:44Z",
      "updated_at": "2025-07-17T17:31:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213916090",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213916090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 264,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213916340",
      "pull_request_review_id": 3030422400,
      "id": 2213916340,
      "node_id": "PRRC_kwDOABII586D9a60",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 284,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211385875,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-07-17T17:31:54Z",
      "updated_at": "2025-07-17T17:31:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213916340",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213916340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 284,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213917014",
      "pull_request_review_id": 3030423531,
      "id": 2213917014,
      "node_id": "PRRC_kwDOABII586D9bFW",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice\n+        self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] != 0][0]",
      "path": "test/functional/wallet_v3_txs.py",
      "position": null,
      "original_position": 292,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211390451,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I've updated both of the places where I was doing this.",
      "created_at": "2025-07-17T17:32:20Z",
      "updated_at": "2025-07-17T17:32:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213917014",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213917014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213923610",
      "pull_request_review_id": 3030434604,
      "id": 2213923610,
      "node_id": "PRRC_kwDOABII586D9csa",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 273,
      "original_position": 278,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211381702,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, because when Bob confirms, it is removed from `mempool_conflicts` and Alice's transaction is considered \"Inactive\". I've added a part to this test case where Alice evicts Bob's transaction. ",
      "created_at": "2025-07-17T17:36:19Z",
      "updated_at": "2025-07-17T17:36:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213923610",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213923610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 273,
      "original_line": 273,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213927081",
      "pull_request_review_id": 3030440970,
      "id": 2213927081,
      "node_id": "PRRC_kwDOABII586D9dip",
      "diff_hunk": "@@ -0,0 +1,396 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test how the wallet deals with v3 transactions\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxOut,\n+    ser_compact_size\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_RETURN\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+TRUC_MAX_VSIZE = 10000\n+TRUC_CHILD_MAX_VSIZE = 1000\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        try:\n+            func(self)\n+        finally:\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            try:\n+                self.alice.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            try:\n+                self.bob.sendall([self.charlie.getnewaddress()])\n+            except JSONRPCException as e:\n+                assert \"Total value of UTXO pool too low to pay for transaction\" in e.error['message']\n+            self.sync_mempools()\n+            self.generate(self.nodes[2], 1)\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"untrusted_pending\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"trusted\"])\n+            assert_equal(0, self.alice.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(0, self.bob.getbalances()[\"mine\"][\"immature\"])\n+            assert_equal(self.alice.getrawmempool(), [])\n+            assert_equal(self.bob.getrawmempool(), [])\n+\n+    return wrapper\n+\n+class WalletV3Test(BitcoinTestFramework):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        # whitelist peers to speed up tx relay / mempool sync\n+        self.noban_tx_relay = True\n+\n+    def send_tx(self, from_node, inputs, outputs, version):\n+        raw_tx = from_node.createrawtransaction(inputs=inputs, outputs=outputs, version=version)\n+        if inputs == []:\n+            raw_tx = from_node.fundrawtransaction(raw_tx, {'include_unsafe' : True})[\"hex\"]\n+        raw_tx = from_node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n+        txid = from_node.sendrawtransaction(raw_tx)\n+        self.sync_mempools()\n+        return txid\n+\n+    def bulk_tx(self, tx, amount, target_vsize):\n+        \"\"\"Pad a transaction with extra outputs until it reaches a target vsize.\n+        returns the tx\n+        \"\"\"\n+        if target_vsize < tx.get_vsize():\n+            raise RuntimeError(f\"target_vsize {target_vsize} is less than transaction virtual size {tx.get_vsize()}\")\n+\n+        tx.vout.append(CTxOut(nValue=(amount * COIN), scriptPubKey=CScript([OP_RETURN])))\n+        # determine number of needed padding bytes\n+        dummy_vbytes = target_vsize - tx.get_vsize()\n+        # compensate for the increase of the compact-size encoded script length\n+        # (note that the length encoding of the unpadded output script needs one byte)\n+        dummy_vbytes -= len(ser_compact_size(dummy_vbytes)) - 1\n+        tx.vout[-1].scriptPubKey = CScript([OP_RETURN] + [OP_1] * dummy_vbytes)\n+        assert_equal(tx.get_vsize(), target_vsize)\n+\n+    def run_test(self):\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.nodes[0].createwallet(\"alice\")\n+        self.alice = self.nodes[0].get_wallet_rpc(\"alice\")\n+\n+        self.nodes[1].createwallet(\"bob\")\n+        self.bob = self.nodes[1].get_wallet_rpc(\"bob\")\n+\n+        self.nodes[2].createwallet(\"charlie\")\n+        self.charlie = self.nodes[2].get_wallet_rpc(\"charlie\")\n+\n+        self.generatetoaddress(self.nodes[0], 100, self.charlie.getnewaddress())\n+\n+        self.v3_tx_spends_unconfirmed_v2_tx()\n+        self.v2_tx_spends_unconfirmed_v3_tx()\n+        self.v3_utxos_appear_in_listunspent()\n+        self.truc_tx_with_conflicting_sibling()\n+        self.spend_v3_input_with_v2()\n+        self.spend_v2_input_with_v3()\n+        self.v3_tx_evicted_from_mempool_by_sibling()\n+        self.v3_conflict_removed_from_mempool()\n+        self.mempool_conflicts_removed_when_v3_conflict_removed()\n+        self.max_tx_weight()\n+        self.max_tx_child_weight()\n+\n+    @cleanup\n+    def v3_tx_spends_unconfirmed_v2_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        # by default, sendall uses tx version 2\n+        self.charlie.sendall([self.bob.getnewaddress()])\n+        assert_equal(self.charlie.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        self.sync_mempools()\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 49)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v3 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v3, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v2_tx_spends_unconfirmed_v3_tx(self):\n+        self.log.info(\"Test unavailable funds when v3 tx spends unconfirmed v2 tx\")\n+\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        assert_equal(self.bob.getbalances()[\"mine\"][\"trusted\"], 0)\n+        assert_greater_than(self.bob.getbalances()[\"mine\"][\"untrusted_pending\"], 0)\n+\n+        inputs = []\n+        outputs = {self.alice.getnewaddress() : 1.0}\n+\n+        raw_tx_v2 = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            raw_tx_v2, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def v3_utxos_appear_in_listunspent(self):\n+        self.log.info(\"Test that unconfirmed v3 utxos still appear in listunspent\")\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+        assert_equal(self.alice.listunspent(minconf=0)[0][\"txid\"], parent_txid)\n+\n+    @cleanup\n+    def truc_tx_with_conflicting_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+        parent_txid = self.charlie.getrawmempool()[0]\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+\n+    @cleanup\n+    def spend_v3_input_with_v2(self):\n+        self.log.info(\"Test spending a pre-selected v3 input with a v2 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=2)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 3 pre-selected input with a version 2 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def spend_v2_input_with_v3(self):\n+        self.log.info(\"Test spending a pre-selected v2 input with a v3 transaction\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 2)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_tx = self.alice.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Can't spend unconfirmed version 2 pre-selected input with a version 3 tx\",\n+            self.alice.fundrawtransaction,\n+            alice_tx\n+        )\n+\n+    @cleanup\n+    def v3_tx_evicted_from_mempool_by_sibling(self):\n+        # unconfirmed v3 tx to alice & bob\n+        self.log.info(\"Test v3 transaction with conflicting sibling\")\n+        self.generate(self.nodes[2], 1)\n+\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        parent_txid = self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        # alice spends her output with a v3 transaction\n+        alice_unspent = self.alice.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : alice_unspent['vout']},]\n+        outputs = {self.alice.getnewaddress() : alice_unspent['amount'] - Decimal(0.00000120)} # two outputs\n+        alice_txid = self.send_tx(self.alice, inputs, outputs, 3)\n+\n+        # bob tries to spend money\n+        bob_unspent = self.bob.listunspent(minconf=0)[0]\n+        inputs=[{'txid' : parent_txid, 'vout' : bob_unspent['vout']},]\n+        outputs = {self.bob.getnewaddress() : bob_unspent['amount'] - Decimal(0.00010120)} # two outputs\n+        bob_txid = self.send_tx(self.bob, inputs, outputs, 3)\n+\n+        assert_equal(self.alice.gettransaction(alice_txid)['mempoolconflicts'], [bob_txid])\n+\n+    @cleanup\n+    def v3_conflict_removed_from_mempool(self):\n+        self.log.info(\"Test a v3 conflict being removed\")\n+        self.generate(self.nodes[2], 1)\n+        # send a v2 output to alice\n+        self.charlie.sendall([self.alice.getnewaddress()])[\"txid\"]\n+        self.generate(self.nodes[2], 1)\n+        # create a v3 tx to alice and bob\n+        inputs=[]\n+        outputs = {self.alice.getnewaddress() : 2.0, self.bob.getnewaddress() : 2.0}\n+        self.send_tx(self.charlie, inputs, outputs, 3)\n+\n+        alice_v2_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] != 0][0]\n+        alice_unspent = [unspent for unspent in self.alice.listunspent(minconf=0) if unspent[\"confirmations\"] == 0][0]\n+\n+        # alice spends both of her outputs\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0}, {'txid' : alice_unspent['txid'], 'vout' : alice_unspent['vout']}]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] + alice_unspent['amount'] - Decimal(0.00005120)}\n+        self.send_tx(self.alice, inputs, outputs, 3)\n+        # bob can't create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        bob_tx = self.bob.createrawtransaction(inputs=inputs, outputs=outputs, version=3)\n+\n+        assert_raises_rpc_error(\n+            -4,\n+            \"Insufficient funds\",\n+            self.bob.fundrawtransaction,\n+            bob_tx, {'include_unsafe': True}\n+        )\n+        # alice fee-bumps her tx so it only spends the v2 utxo\n+        inputs = [{'txid' : alice_v2_unspent['txid'], 'vout' : 0},]\n+        outputs = {self.charlie.getnewaddress() : alice_v2_unspent['amount'] - Decimal(0.00015120)}\n+        self.send_tx(self.alice, inputs, outputs, 2)\n+        # bob can now create a transaction\n+        inputs=[]\n+        outputs = {self.bob.getnewaddress() : 1.999}\n+        self.send_tx(self.bob, inputs, outputs, 3)\n+\n+    @cleanup\n+    def mempool_conflicts_removed_when_v3_conflict_removed(self):",
      "path": "test/functional/wallet_v3_txs.py",
      "position": 322,
      "original_position": 320,
      "commit_id": "62c66fec9b8d9c51bb47ccf39c48887c8b80b067",
      "original_commit_id": "b7f8be8c4d16c3e819c0368d6ba938b87b6397e4",
      "in_reply_to_id": 2211403206,
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It would be tricky to consolidate the two because one of them is testing preventing the wallet from creating a transaction and the other is testing marking conflicts correctly. ",
      "created_at": "2025-07-17T17:38:31Z",
      "updated_at": "2025-07-17T17:38:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32896#discussion_r2213927081",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2213927081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32896"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 322,
      "original_line": 322,
      "side": "RIGHT"
    }
  ]
}