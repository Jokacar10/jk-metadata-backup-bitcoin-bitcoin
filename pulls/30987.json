{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30987",
    "id": 2094697569,
    "node_id": "PR_kwDOABII58582oxh",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30987",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30987.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30987.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30987/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30987/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/906e67b95157fd557438c37b3085cf5dec2ae135",
    "number": 30987,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Don't zero-after-free `DataStream`: Faster IBD on some configurations",
    "user": {
      "login": "davidgumberg",
      "id": 2257631,
      "node_id": "MDQ6VXNlcjIyNTc2MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidgumberg",
      "html_url": "https://github.com/davidgumberg",
      "followers_url": "https://api.github.com/users/davidgumberg/followers",
      "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
      "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
      "repos_url": "https://api.github.com/users/davidgumberg/repos",
      "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This PR modifies `DataStream`'s byte-vector `vch` to use the default allocator `std::allocator` rather than the `zero_after_free_allocator` which degrades performance greatly. The `zero_after_free_allocator` is identical to the default `std::allocator` except that it zeroes memory using `memory_cleanse()` before deallocating.\r\n\r\nThis PR also drops the `zero_after_free_allocator`, since this was only used by `DataStream` and `SerializeData`. \r\n\r\nIn my testing (n=2) on a Raspberry Pi 5 with 4GB of memory, syncing from a fast connection to a stable dedicated node, my branch takes **~74%** of the time taken by master[^1] to sync to height 815,000; average wall clock time was 35h 58m 40s on this branch and 48h 17m 15s on master. (See the benchmarking [appendix](https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2379480304))\r\n\r\nI expect most of the performance improvement to come from the use of `DataStream` for all `CDBWrapper` keys and values, and for all P2P messages. I suspect there are other use cases where performance is improved, but I have only tested IBD.\r\n\r\nAny objects that contains secrets should *not* be allocated using `zero_after_free_allocator` since they are liable to get mapped to swap space and written to disk if the user is running low on memory, and I intuit this is a likelier path than scanning unzero'd memory for an attacker to find cryptographic secrets. Secrets should be allocated using `secure_allocator` which cleanses on deallocation and `mlock()`s the memory reserved for secrets to prevent it from being mapped to swap space.\r\n\r\n## Are any secrets stored in `DataStream` that will lose security?\r\n\r\nI have reviewed every appearance of `DataStream` and `SerializeData` as of [`39219fe`](https://github.com/bitcoin/bitcoin/commit/39219fe145e5e6e6f079b591e3f4b5fea8e718040) and have made notes in the [appendix](https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2379480304) below with notes that provide context for each instance where either is used.\r\n\r\nThe only use case that I wasn't certain of is PSBT's, I believe these are never secrets, but I am not certain if there are use cases where PSBT's are worthy of being treated as secrets, and being vigilant about not writing them to disk is wise.\r\n\r\nAs I understand, most of the use of `DataStream` in the wallet code is for the reading and writing of \"crypted\" key and value data, and they get decrypted somewhere else in a `ScriptPubKeyMan` far away from any `DataStream` container, but I could also be wrong about this, or have misunderstood its use elsewhere in the wallet.\r\n\r\n## Zero-after-free as a buffer overflow mitigation\r\n\r\nThe `zero_after_free` allocator was added as a buffer overflow mitigation, the idea being that `DataStream`'s store a lot of unsecured data that we don't control like the UTXO set and all P2P messages, and an attacker could fill memory in a predictable way to escalate a buffer overflow into an RCE. (See Historical Background [appendix](https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2379480304)).\r\n\r\nI agree completely with practicing security in depth, but I don't think this mitigation is worth the performance hit because: \r\n\r\n1. Aren't there still an abundance of other opportunities for an attacker to fill memory that never gets deallocated?\r\n2. Doesn't ASLR mostly mitigate this issue and don't most devices have some form of ASLR?\r\n\r\nI'm not a security expert and I had a hard time finding any writing anywhere that discusses this particular mitigation strategy of zeroing memory, so I hope someone with more knowledge of memory vulnerabilities can assist.\r\n\r\n----------\r\n\r\n#### Other notes\r\n\r\n- I opted to leave `SerializeData` as `std::vector<std::byte>` instead of deleting it and refactoring in the spots where it's used in the wallet to keep the PR small, if others think it would be better to delete it I would be happy to do it.\r\n- I have a feeling that it's not just that we're memsetting everything to 0 in `memory_cleanse` that is causing the performance issue, but the trick we do to prevent compilers from optimizing out the `memset` call is also preventing other optimizations on the `DataStream`'s, but I have yet to test this.\r\n-  I also make a small change to a unit test where boost mysteriously fails to find a left shift-operator for `SerializeData` once it loses its custom allocator.\r\n\r\n[^1]: Master at the time of my testing was: [`6d546336e800`](https://github.com/bitcoin/bitcoin/commit/6d546336e800)\r\n",
    "labels": [
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 326918230,
        "node_id": "MDU6TGFiZWwzMjY5MTgyMzA=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Resource%20usage",
        "name": "Resource usage",
        "color": "981023",
        "default": false
      },
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2024-09-26T22:40:32Z",
    "updated_at": "2025-03-10T13:22:44Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "9907f507b7335ec7f2978c803bf8d6b5f756a083",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "davidgumberg:zero_after_free_allocator_change",
      "ref": "zero_after_free_allocator_change",
      "sha": "906e67b95157fd557438c37b3085cf5dec2ae135",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 529442895,
        "node_id": "R_kgDOH46oTw",
        "name": "bitcoin",
        "full_name": "davidgumberg/bitcoin",
        "owner": {
          "login": "davidgumberg",
          "id": 2257631,
          "node_id": "MDQ6VXNlcjIyNTc2MzE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/davidgumberg",
          "html_url": "https://github.com/davidgumberg",
          "followers_url": "https://api.github.com/users/davidgumberg/followers",
          "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
          "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
          "repos_url": "https://api.github.com/users/davidgumberg/repos",
          "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/davidgumberg/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/davidgumberg/bitcoin",
        "archive_url": "https://api.github.com/repos/davidgumberg/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/davidgumberg/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/davidgumberg/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/davidgumberg/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/davidgumberg/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/davidgumberg/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/davidgumberg/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/davidgumberg/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/davidgumberg/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/davidgumberg/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/davidgumberg/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/davidgumberg/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/davidgumberg/bitcoin/events",
        "forks_url": "https://api.github.com/repos/davidgumberg/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/davidgumberg/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/davidgumberg/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/davidgumberg/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/davidgumberg/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/davidgumberg/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/davidgumberg/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/davidgumberg/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/davidgumberg/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/davidgumberg/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/davidgumberg/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/davidgumberg/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/davidgumberg/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/davidgumberg/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/davidgumberg/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/davidgumberg/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:davidgumberg/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/davidgumberg/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/davidgumberg/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/davidgumberg/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/davidgumberg/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/davidgumberg/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/davidgumberg/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/davidgumberg/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/davidgumberg/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/davidgumberg/bitcoin/hooks",
        "svn_url": "https://github.com/davidgumberg/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 236164,
        "default_branch": "master",
        "open_issues_count": 8,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-06T23:30:40Z",
        "created_at": "2022-08-27T00:44:27Z",
        "updated_at": "2025-03-06T23:28:33Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "0c2c3bb3f5c6f52c8db625c3edb51409c72c14b0",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36900,
        "stargazers_count": 82419,
        "watchers_count": 82419,
        "size": 276270,
        "default_branch": "master",
        "open_issues_count": 677,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-09T16:44:52Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-03-10T11:18:48Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30987"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 229,
    "deletions": 67,
    "changed_files": 13,
    "commits": 9,
    "review_comments": 0,
    "comments": 15
  },
  "events": [
    {
      "event": "commented",
      "id": 2378063467,
      "node_id": "IC_kwDOABII586Nvl5r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2378063467",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-26T22:40:35Z",
      "updated_at": "2025-03-10T13:22:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/30987.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [laanwj](https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2413262312) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31868](https://github.com/bitcoin/bitcoin/pull/31868) (optimization: speed up block serialization by l0rinc)\n* [#31829](https://github.com/bitcoin/bitcoin/pull/31829) (p2p: improve TxOrphanage denial of service bounds and increase -maxorphantxs by glozow)\n* [#31519](https://github.com/bitcoin/bitcoin/pull/31519) (refactor: Use std::span over Span by maflcko)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2378063467",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987"
    },
    {
      "event": "labeled",
      "id": 14423743141,
      "node_id": "LE_lADOABII586YFxARzwAAAANbuNql",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14423743141",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-26T23:56:09Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2378137067,
      "node_id": "IC_kwDOABII586Nv33r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2378137067",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-26T23:56:10Z",
      "updated_at": "2024-09-26T23:56:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/30733746913</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2378137067",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14424256003,
      "node_id": "HRFPE_lADOABII586YFxARzwAAAANbwK4D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14424256003",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5cf2fefd33907c48f79e444032d79f7c889345d8",
      "commit_url": "https://api.github.com/repos/davidgumberg/bitcoin/commits/5cf2fefd33907c48f79e444032d79f7c889345d8",
      "created_at": "2024-09-27T01:20:50Z"
    },
    {
      "event": "commented",
      "id": 2379480304,
      "node_id": "IC_kwDOABII586N0_zw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2379480304",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-27T15:00:38Z",
      "updated_at": "2024-09-27T23:44:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "## Appendix\r\n\r\n<details>\r\n\r\n<summary>\r\n\r\n### Benchmarks\r\n\r\n</summary>\r\n\r\nCommand being timed:\r\n```bash\r\n./src/bitcoind -daemon=0 -connect=amd-ryzen-7900x-node:8333 -stopatheight=815000 -port=8444 -rpcport=8445 -dbcache=2048 -prune=550 -debug=bench -debug=blockstorage -debug=coindb -debug=mempool -debug=prune\"\r\n```\r\n\r\nI applied my branch on [6d546336e800](https://github.com/bitcoin/bitcoin/commit/6d546336e800), which is \"master\" in the data below.\r\n\r\nAverage master time (hh:mm:ss): 48:17:15 (173835s)\r\nAverage branch time (hh:mm:ss): 35:58:40 (129520s)\r\n\r\n~25% reduction in IBD time on a raspberry Pi 5 with a DB cache of 2GB.\r\n\r\n#### Master run 1\r\nWall clock time (hh:mm:ss): 49:38:31 (178711s)\r\n\r\n```console\r\nBitcoin Core version v27.99.0-6d546336e800 (release build)\r\n- Connect block: 158290.53s (620.94ms/blk)\r\n    - Sanity checks: 10.89s (0.01ms/blk)\r\n    - Fork checks: 151.82s (0.02ms/blk)\r\n    - Verify 7077 txins: 135057.68s (165.71ms/blk)\r\n      - Connect 1760 transactions: 134786.36s (165.38ms/blk)\r\n    - Write undo data: 2681.34s (7.38ms/blk)\r\n    - Index writing: 52.76s (0.03ms/blk)\r\n  - Connect total: 138100.75s (611.27ms/blk)\r\n  - Flush: 3933.29s (8.97ms/blk)\r\n  - Writing chainstate: 15814.36s (0.14ms/blk)\r\n  - Connect postprocess: 273.39s (0.52ms/blk)\r\n```\r\n\r\n#### Master run 2\r\nWall clock time (hh:mm:ss): 46:55:58 (168958s)\r\n\r\n```console\r\nBitcoin Core version v27.99.0-6d546336e800 (release build)\r\n- Connect block: 145449.95s (940.78ms/blk)\r\n    - Sanity checks: 10.69s (0.01ms/blk)\r\n    - Fork checks: 155.81s (0.02ms/blk)\r\n    - Verify 7077 txins: 115935.55s (142.25ms/blk)\r\n      - Connect 1760 transactions: 115481.15s (141.69ms/blk)\r\n    - Write undo data: 2561.36s (9.05ms/blk)\r\n    - Index writing: 73.63s (0.04ms/blk)\r\n  - Connect total: 118877.56s (929.93ms/blk)\r\n  - Flush: 3864.34s (10.11ms/blk)\r\n  - Writing chainstate: 22294.82s (0.14ms/blk)\r\n  - Connect postprocess: 267.68s (0.56ms/blk)\r\n```\r\n\r\n#### Branch run 1\r\nWall clock time (hh:mm:ss): 34:28:56 (124136s)\r\n\r\n```console\r\nBitcoin Core version v27.99.0-a0dddf8b4092 (release build)\r\n- Connect block: 107134.59s (1017.01ms/blk)\r\n    - Sanity checks: 11.01s (0.01ms/blk)\r\n    - Fork checks: 150.93s (0.03ms/blk)\r\n    - Verify 7077 txins: 87446.53s (107.30ms/blk)\r\n      - Connect 1760 transactions: 87329.99s (107.15ms/blk)\r\n    - Write undo data: 2495.47s (7.36ms/blk)\r\n    - Index writing: 37.95s (0.04ms/blk)\r\n  - Connect total: 90318.60s (1006.42ms/blk)\r\n  - Flush: 3917.28s (9.92ms/blk)\r\n  - Writing chainstate: 12560.43s (0.15ms/blk)\r\n  - Connect postprocess: 259.89s (0.47ms/blk)\r\n```\r\n\r\n#### Branch run 2\r\nWall clock time (hh:mm:ss): 37:28:24 (134904s)\r\n\r\n```console\r\nBitcoin Core version v27.99.0-a0dddf8b4092 (release build)\r\n- Connect block: 117991.55s (144.77ms/blk)\r\n  - Connect total: 101298.20s (124.29ms/blk)\r\n    - Sanity checks: 11.17s (0.01ms/blk)\r\n    - Fork checks: 151.24s (0.19ms/blk)\r\n    - Verify 7077 txins: 98446.38s (120.79ms/blk)\r\n      - Connect 1760 transactions: 98339.79s (120.66ms/blk)\r\n    - Write undo data: 2484.75s (3.05ms/blk)\r\n    - Index writing: 36.62s (0.04ms/blk)\r\n  - Flush: 3892.28s (4.78ms/blk)\r\n  - Writing chainstate: 12446.33s (15.27ms/blk)\r\n  - Connect postprocess: 259.11s (0.32ms/blk)\r\n```\r\n</details>\r\n\r\n<details>\r\n\r\n<summary>\r\n\r\n### Historical background\r\n\r\n</summary>\r\n\r\nAt some point prior to the oldest git commit for the repo, an allocator `secure_allocator` was [added](https://github.com/bitcoin/bitcoin/blob/0a61b0df1224a5470bcddab302bc199ca5a9e356/serialize.h#L675-L702) that zeroes out memory on deallocation with `memset()`, and was [used](https://github.com/bitcoin/bitcoin/blob/0a61b0df1224a5470bcddab302bc199ca5a9e356/serialize.h#L711-L714) as the allocator for the vector `vch` in `CDataStream` (now `DataStream`).\r\n\r\nIn July 2011, PR [#352](https://github.com/bitcoin/bitcoin/pull/352) adding support for encrypted wallets [modified](https://github.com/bitcoin/bitcoin/pull/352/commits/c1aacf0be347b10a6ab9bbce841e8127412bce41) `secure_allocator`  to also `mlock()` data on allocation to prevent the wallet passphrase or other secrets from being paged to swap space (written to disk).\r\n\r\nIn January 2012, findings were shared (https://bitcointalk.org/index.php?topic=56491.0) that [#352](https://github.com/bitcoin/bitcoin/pull/352) modifying `CDataStream`'s allocator slowed down IBD substantially[^1], since `CDataStream` was used in many places that did not need the guarantees of `mlock()`, and since every call to `mlock()` results in a flush of the TLB (a cache that maps virtual memory to physical memory).\r\n\r\nPR [#740](https://github.com/bitcoin/bitcoin/pull/740) was opened to fix this, initially[^2] by removing the custom allocator `secure_allocator` from `CDataStream`'s `vector_type`:\r\n\r\n```diff\r\n class CDataStream\r\n {\r\n protected:\r\n-    typedef std::vector<char, secure_allocator<char> > vector_type;\r\n+    typedef std::vector<char> vector_type;\r\n     vector_type vch;\r\n```\r\n\r\nA reviewer of [#740](https://github.com/bitcoin/bitcoin/pull/740) [suggested](https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3356239) that dropping `mlock()` was a good idea, but that the original behavior of zeroing-after-freeing (should it be zeroing-*before*-freeing?) `CDataStream` should be restored as a mitigation for buffer overflows:\r\n\r\n> I love the performance improvement, but I still don't like the elimination of zero-after-free. Security in depth is important.\r\n>\r\n> Here's the danger:\r\n>\r\n> Attacker finds a remotely-exploitable buffer overrun somewhere in the networking code that crashes the process.\r\n> They turn the crash into a full remote exploit by sending carefully constructed packets before the crash packet, to initialize used-but-then-freed memory to a known state.\r\n>\r\n> Unlikely? Sure.\r\n>\r\n> Is it ugly to define a zero_after_free_allocator for CDataStream? Sure. (simplest implementation: copy secure_allocator, remove the mlock/munlock calls).\r\n>\r\n> But given that CDataStream is the primary interface between bitcoin and the network, I think being extra paranoid here is a very good idea.\r\n\r\nAnother reviewer [benchmarked](https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3356541) `CDataStream` with an allocator that zeroed memory using `memset` without `mlock`ing it and found that performance was almost identical to the default allocator, while both were substantially faster than the `mlock`ing variant of `CDataStream`. (https://web.archive.org/web/20130622160044/https://people.xiph.org/~greg/bitcoin-sync.png).\r\n\r\nBased on the benchmark, and the potential security benefit, the `zero_after_free` allocator was created and used as `CDataStream`'s allocator.\r\n\r\nIn November 2012, PR [#1992](https://github.com/bitcoin/bitcoin/pull/1992) was opened to address the fact that in many cases `memset()` calls are optimized away by compilers as part of a family of compiler optimizations called [dead store elimination](https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/yang) by replacing the `memset` call with openssl's `OPENSSL_cleanse` which is meant to solve this problem by doing things that spook compilers into not wanting to optimize the `memset`. Given that all of the data being zero'ed out in the deallocator is also having it's only pointer destroyed, these memset calls were candidates for being optimized.\r\n\r\nI suspect that the reason no performance regression was found in the benchmarking of [#740](https://github.com/bitcoin/bitcoin/pull/740) which introduced the `zero_after_free` allocator is that the `memset` calls were being optimized out.\r\n\r\nI am not the first to suggest that this is a performance issue:\r\n\r\nhttps://bitcoin-irc.chaincode.com/bitcoin-core-dev/2015-11-06#1446837840-1446854100;\r\n\r\nhttps://bitcoin-irc.chaincode.com/bitcoin-core-dev/2016-11-23#1479883620-1479882900;\r\n\r\nOr to write a patch changing it:\r\n\r\nhttps://github.com/bitcoin/bitcoin/commit/671c724716abdd69b9d253a01f8fec67a37ab7d7\r\n\r\n</details>\r\n\r\n<details>\r\n\r\n<summary>\r\n\r\n### All uses of DataStream and SerializeData\r\n( ⚠️ when opening: very long)\r\n\r\n</summary>\r\n\r\nI performed this review on commit [39219fe145e5e6e6f079b591e3f4b5fea8e71804](https://github.com/bitcoin/bitcoin/commit/39219fe145e5e6e6f079b591e3f4b5fea8e71804)\r\n\r\nI look, briefly, at every single use of `DataStream` outside of test code, to see whether or not it contains secret information that should be zeroed out, or should be mlocked to prevent paging to swap.\r\n\r\nI've taken liberties to editorialize some of the codeblocks below for legibility, and all comments that have `[]` are my own.\r\n\r\n##### `DataStream`\r\n\r\nIn `src/addrdb.cpp`+`src/addrdb.h`:\r\n\r\n```cpp\r\n/** Only used by tests. */\r\nvoid ReadFromStream(AddrMan& addr, DataStream& ssPeers);\r\n```\r\n\r\nOnly used by tests.\r\n\r\n-----\r\n\r\nIn `src/addrman.cpp` `Addrman::Serialize(DataStream&)` & `Unserialize(DataStream&)`, are explicitly instantiated, these are used in `SerializeFileDB` and `DeserializeDB` which are used to serialize (`DumpPeerAddresses`) addrman to disk, and to deserialize addrman from disk (`LoadAddrman`).\r\n\r\nThe most valuable secret seems to be addrman's `nKey` used to determine the address buckets randomly.\r\n\r\n-------\r\n\r\nIn `src/blockencodings.cpp`:\r\n\r\n```cpp\r\nvoid CBlockHeaderAndShortTxIDs::FillShortTxIDSelector() const {\r\n    DataStream stream{};\r\n    stream << header << nonce;\r\n    CSHA256 hasher;\r\n    hasher.Write((unsigned char*)&(*stream.begin()), stream.end() - stream.begin());\r\n    uint256 shorttxidhash;\r\n    hasher.Finalize(shorttxidhash.begin());\r\n    shorttxidk0 = shorttxidhash.GetUint64(0);\r\n    shorttxidk1 = shorttxidhash.GetUint64(1);\r\n}\r\n```\r\n\r\nHere we are just using the DataStream to be able to Serialize the block header and nonce into a string of bytes that get hashed to make short id k0 and k1 for [BIP 152](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki#short-transaction-ids).\r\n\r\nThis gets invoked when we construct a `CBlockHeaderandShortTxIDs` for an INV of type `MSG_CMPCT_BLOCK` in `PeerManagerImpl::SendMessage()`.\r\n\r\n-------\r\n\r\nIn `src/common/blooms.cpp`:\r\n\r\nDataStream is used to deserialize outpoints into our bloom filter, these are not secrets in any way:\r\n\r\n```cpp\r\nvoid CBloomFilter::insert(const COutPoint& outpoint)\r\n{\r\n    DataStream stream{};\r\n    stream << outpoint;\r\n    insert(MakeUCharSpan(stream));\r\n}\r\n```\r\n\r\n-------\r\n\r\nIn `src/core_read.cpp`:\r\n\r\nDataStream is used in `DecodeTx` for serialization/deserialization of the transaction data, used afaict only in RPC's for deserializing user arguments into `CMutableTransaction`'s.\r\n\r\nIt's used in `DecodeHexBlockHeader()`which deserializes a block header argument into a `CBlockHeader` for the `submitheader` rpc.\r\n\r\nSimilar for `DecodeHexBlk()` used by the `getblocktemplate` and `submitblock` rpc's.\r\n\r\n----\r\n\r\nIn `src/core_write.cpp`:\r\n\r\n```cpp\r\nvoid CBloomFilter::insert(const COutPoint& outpoint)\r\n{\r\n    DataStream stream{};\r\n    stream << outpoint;\r\n    insert(MakeUCharSpan(stream));\r\n}\r\n```\r\n\r\n`EncodeHexTx` is only used in RPC's, and transaction data does not contain secrets.\r\n\r\n------\r\n\r\nIn `dbwrapper.h` and `dbwrapper.cpp` it is used exclusively to serialize and deserialize coinsdb keys and values, none of which is secret.\r\n\r\n--------\r\n\r\nIn `src/external_signer`:\r\n\r\n```cpp\r\nbool ExternalSigner::SignTransaction(PartiallySignedTransaction& psbtx, std::string& error)\r\n{\r\n    // Serialize the PSBT\r\n    DataStream ssTx{};\r\n    ssTx << psbtx;\r\n```\r\n\r\nI don't think this is a secret, but I don't know enough about PSBT's to be sure.\r\n\r\n-------\r\n\r\nThere is some scaffolding for being able to transmit serializable stuff over the IPC wire in `src/capnp/common-types.h`, I assume this depends on how it's used, nothing essentially secret.\r\n\r\n--------\r\n\r\nIn `src/kernel/coinstats.cpp`:\r\n\r\n```cpp\r\nvoid ApplyCoinHash(MuHash3072& muhash, const COutPoint& outpoint, const Coin& coin)\r\n{\r\n    DataStream ss{};\r\n    TxOutSer(ss, outpoint, coin);\r\n    muhash.Insert(MakeUCharSpan(ss));\r\n}\r\n```\r\n\r\nHere it's used for serializing oupoints and coins for creating the AssumeUTXO assumed utxo set hash, nothing secret.\r\n\r\n-------\r\n\r\nIn `src/net.cpp`:\r\n\r\nIn `ConvertSeeds()` serialized seeds get converted into usable address objects, we initialize a DataStream with the input seeds that we are going to try connecting to during node bootstrapping.\r\n\r\n```cpp\r\n//! Convert the serialized seeds into usable address objects.\r\nstatic std::vector<CAddress> ConvertSeeds(const std::vector<uint8_t> &vSeedsIn)\r\n{\r\n    // It'll only connect to one or two seed nodes because once it connects,\r\n    // it'll get a pile of addresses with newer timestamps.\r\n    // Seed nodes are given a random 'last seen time' of between one and two\r\n    // weeks ago.\r\n    const auto one_week{7 * 24h};\r\n    std::vector<CAddress> vSeedsOut;\r\n    FastRandomContext rng;\r\n    ParamsStream s{DataStream{vSeedsIn}, CAddress::V2_NETWORK};\r\n    while (!s.eof()) {\r\n        CService endpoint;\r\n        s >> endpoint;\r\n        CAddress addr{endpoint, SeedsServiceFlags()};\r\n        addr.nTime = rng.rand_uniform_delay(Now<NodeSeconds>() - one_week, -one_week);\r\n        LogDebug(BCLog::NET, \"Added hardcoded seed: %s\\n\", addr.ToStringAddrPort());\r\n        vSeedsOut.push_back(addr);\r\n    }\r\n    return vSeedsOut;\r\n}\r\n```\r\n\r\nIt is also used for creating an empty `CNetMessage` which has a `DataStream` member in `CNetMessage V2Transport::GetReceivedMessage()`:\r\n\r\n```cpp\r\n//! Convert the serialized seeds into usable address objects.\r\nstatic std::vector<CAddress> ConvertSeeds(const std::vector<uint8_t> &vSeedsIn)\r\n{\r\n    // It'll only connect to one or two seed nodes because once it connects,\r\n    // it'll get a pile of addresses with newer timestamps.\r\n    // Seed nodes are given a random 'last seen time' of between one and two\r\n    // weeks ago.\r\n    const auto one_week{7 * 24h};\r\n    std::vector<CAddress> vSeedsOut;\r\n    FastRandomContext rng;\r\n    ParamsStream s{DataStream{vSeedsIn}, CAddress::V2_NETWORK};\r\n    while (!s.eof()) {\r\n        CService endpoint;\r\n        s >> endpoint;\r\n        CAddress addr{endpoint, SeedsServiceFlags()};\r\n        addr.nTime = rng.rand_uniform_delay(Now<NodeSeconds>() - one_week, -one_week);\r\n        LogDebug(BCLog::NET, \"Added hardcoded seed: %s\\n\", addr.ToStringAddrPort());\r\n        vSeedsOut.push_back(addr);\r\n    }\r\n    return vSeedsOut;\r\n}\r\n```\r\n\r\n--------\r\n\r\nIn `net.h`\r\n\r\n`CNetMessage` the universal p2p message container used a `DataStream` to store received message data.\r\n\r\n```cpp\r\n/** Transport protocol agnostic message container.\r\n * Ideally it should only contain receive time, payload,\r\n * type and size.\r\n */\r\nclass CNetMessage\r\n{\r\npublic:\r\n    DataStream m_recv;                   //!< received message data\r\n    std::chrono::microseconds m_time{0}; //!< time of message receipt\r\n    uint32_t m_message_size{0};          //!< size of the payload\r\n    uint32_t m_raw_message_size{0};      //!< used wire size of the message (including header/checksum)\r\n    std::string m_type;\r\n\r\n    explicit CNetMessage(DataStream&& recv_in) : m_recv(std::move(recv_in)) {}\r\n    // Only one CNetMessage object will exist for the same message on either\r\n    // the receive or processing queue. For performance reasons we therefore\r\n    // delete the copy constructor and assignment operator to avoid the\r\n    // possibility of copying CNetMessage objects.\r\n    CNetMessage(CNetMessage&&) = default;\r\n    CNetMessage(const CNetMessage&) = delete;\r\n    CNetMessage& operator=(CNetMessage&&) = default;\r\n    CNetMessage& operator=(const CNetMessage&) = delete;\r\n};\r\n```\r\n\r\nIt's also used for the lower level handling of messages, including partially received header buffers and received socket data in `V1Transport` as in v2 transport above in `net.cpp`.\r\n\r\n```cpp\r\n/** Transport protocol agnostic message container.\r\n * Ideally it should only contain receive time, payload,\r\n * type and size.\r\n */\r\nclass CNetMessage\r\n{\r\npublic:\r\n    DataStream m_recv;                   //!< received message data\r\n    std::chrono::microseconds m_time{0}; //!< time of message receipt\r\n    uint32_t m_message_size{0};          //!< size of the payload\r\n    uint32_t m_raw_message_size{0};      //!< used wire size of the message (including header/checksum)\r\n    std::string m_type;\r\n\r\n    explicit CNetMessage(DataStream&& recv_in) : m_recv(std::move(recv_in)) {}\r\n    // Only one CNetMessage object will exist for the same message on either\r\n    // the receive or processing queue. For performance reasons we therefore\r\n    // delete the copy constructor and assignment operator to avoid the\r\n    // possibility of copying CNetMessage objects.\r\n    CNetMessage(CNetMessage&&) = default;\r\n    CNetMessage(const CNetMessage&) = delete;\r\n    CNetMessage& operator=(CNetMessage&&) = default;\r\n    CNetMessage& operator=(const CNetMessage&) = delete;\r\n};\r\n```\r\n\r\n--------\r\n\r\nIn `src/net_processing.cpp` it used for representing the received data when\r\nprocessing messages in the great `PeerManagerImpl::ProcessMessage()`:\r\n\r\n```cpp\r\nvoid PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type, DataStream& vRecv,\r\n                                     const std::chrono::microseconds time_received,\r\n                                     const std::atomic<bool>& interruptMsgProc)\r\n{\r\n```\r\n\r\nAnd for Processing BIP 157 cfilters: \r\n\r\n```cpp\r\n/**\r\n * Handle a cfilters request.\r\n *\r\n * May disconnect from the peer in the case of a bad request.\r\n *\r\n * @param[in]   node            The node that we received the request from\r\n * @param[in]   peer            The peer that we received the request from\r\n * @param[in]   vRecv           The raw message received\r\n */\r\nvoid PeerManagerImpl::ProcessGetCFilters(CNode& node, Peer& peer, DataStream& vRecv)\r\n{\r\n    uint8_t filter_type_ser;\r\n    uint32_t start_height;\r\n    uint256 stop_hash;\r\n\r\n    vRecv >> filter_type_ser >> start_height >> stop_hash;\r\n\r\n    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\r\n\r\n    const CBlockIndex* stop_index;\r\n    BlockFilterIndex* filter_index;\r\n    if (!PrepareBlockFilterRequest(node, peer, filter_type, start_height, stop_hash,\r\n                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\r\n        return;\r\n    }\r\n\r\n    std::vector<BlockFilter> filters;\r\n    if (!filter_index->LookupFilterRange(start_height, stop_index, filters)) {\r\n        LogDebug(BCLog::NET, \"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\\n\",\r\n                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\r\n        return;\r\n    }\r\n\r\n    for (const auto& filter : filters) {\r\n        MakeAndPushMessage(node, NetMsgType::CFILTER, filter);\r\n    }\r\n```\r\n\r\nand bip 157 cfheaders:\r\n\r\n```cpp\r\n/**\r\n * Handle a cfheaders request.\r\n *\r\n * May disconnect from the peer in the case of a bad request.\r\n *\r\n * @param[in]   node            The node that we received the request from\r\n * @param[in]   peer            The peer that we received the request from\r\n * @param[in]   vRecv           The raw message received\r\n */\r\n void PeerManagerImpl::ProcessGetCFHeaders(CNode& node, Peer& peer, DataStream& vRecv)\r\n{\r\n    uint8_t filter_type_ser;\r\n    uint32_t start_height;\r\n    uint256 stop_hash;\r\n\r\n    vRecv >> filter_type_ser >> start_height >> stop_hash;\r\n\r\n    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\r\n\r\n    const CBlockIndex* stop_index;\r\n    BlockFilterIndex* filter_index;\r\n    if (!PrepareBlockFilterRequest(node, peer, filter_type, start_height, stop_hash,\r\n                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\r\n        return;\r\n    }\r\n\r\n    uint256 prev_header;\r\n    if (start_height > 0) {\r\n        const CBlockIndex* const prev_block =\r\n            stop_index->GetAncestor(static_cast<int>(start_height - 1));\r\n        if (!filter_index->LookupFilterHeader(prev_block, prev_header)) {\r\n            LogDebug(BCLog::NET, \"Failed to find block filter header in index: filter_type=%s, block_hash=%s\\n\",\r\n                         BlockFilterTypeName(filter_type), prev_block->GetBlockHash().ToString());\r\n            return;\r\n        }\r\n    }\r\n\r\n    std::vector<uint256> filter_hashes;\r\n    if (!filter_index->LookupFilterHashRange(start_height, stop_index, filter_hashes)) {\r\n        LogDebug(BCLog::NET, \"Failed to find block filter hashes in index: filter_type=%s, start_height=%d, stop_hash=%s\\n\",\r\n                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\r\n        return;\r\n    }\r\n\r\n    MakeAndPushMessage(node, NetMsgType::CFHEADERS,\r\n              filter_type_ser,\r\n              stop_index->GetBlockHash(),\r\n              prev_header,\r\n              filter_hashes);\r\n}\r\n```\r\n\r\n------\r\n\r\nIn `src/psbt.cpp`:\r\n\r\n```cpp\r\nbool DecodeRawPSBT(PartiallySignedTransaction& psbt, Span<const std::byte> tx_data, std::string& error)\r\n{\r\n    DataStream ss_data{tx_data};\r\n    try {\r\n        ss_data >> psbt;\r\n        if (!ss_data.empty()) {\r\n            error = \"extra data after PSBT\";\r\n            return false;\r\n        }\r\n    } catch (const std::exception& e) {\r\n        error = e.what();\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n```\r\n\r\nIt is used for deserializing hex data into a `PartiallySignedTransaction` object.\r\n\r\n--------\r\n\r\n\r\nIn `src/qt/psbtoperationsdialog.cpp`:\r\n\r\nBitcoin Qt interface for Copying psbt to clipboard:\r\n\r\n```cpp\r\nvoid PSBTOperationsDialog::copyToClipboard() {\r\n    DataStream ssTx{};\r\n    ssTx << m_transaction_data;\r\n    GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\r\n    showStatus(tr(\"PSBT copied to clipboard.\"), StatusLevel::INFO);\r\n}\r\n```\r\n\r\nSaving PSBT to disk:\r\n```cpp\r\nvoid PSBTOperationsDialog::saveTransaction() {\r\n    DataStream ssTx{};\r\n    ssTx << m_transaction_data;\r\n\r\n    QString selected_filter;\r\n    QString filename_suggestion = \"\";\r\n    bool first = true;\r\n    for (const CTxOut& out : m_transaction_data.tx->vout) {\r\n        if (!first) {\r\n            filename_suggestion.append(\"-\");\r\n        }\r\n        CTxDestination address;\r\n        ExtractDestination(out.scriptPubKey, address);\r\n        QString amount = BitcoinUnits::format(m_client_model->getOptionsModel()->getDisplayUnit(), out.nValue);\r\n        QString address_str = QString::fromStdString(EncodeDestination(address));\r\n        filename_suggestion.append(address_str + \"-\" + amount);\r\n        first = false;\r\n    }\r\n    filename_suggestion.append(\".psbt\");\r\n    QString filename = GUIUtil::getSaveFileName(this,\r\n        tr(\"Save Transaction Data\"), filename_suggestion,\r\n        //: Expanded name of the binary PSBT file format. See: BIP 174.\r\n        tr(\"Partially Signed Transaction (Binary)\") + QLatin1String(\" (*.psbt)\"), &selected_filter);\r\n    if (filename.isEmpty()) {\r\n        return;\r\n    }\r\n    std::ofstream out{filename.toLocal8Bit().data(), std::ofstream::out | std::ofstream::binary};\r\n    out << ssTx.str();\r\n    out.close();\r\n    showStatus(tr(\"PSBT saved to disk.\"), StatusLevel::INFO);\r\n}\r\n```\r\n\r\n--------\r\n\r\nIn `src/qt/recentrequestsstablemodel.cpp`:\r\n\r\n```cpp\r\n// called when adding a request from the GUI\r\nvoid RecentRequestsTableModel::addNewRequest(const SendCoinsRecipient &recipient)\r\n{\r\n    RecentRequestEntry newEntry;\r\n    newEntry.id = ++nReceiveRequestsMaxId;\r\n    newEntry.date = QDateTime::currentDateTime();\r\n    newEntry.recipient = recipient;\r\n\r\n    DataStream ss{};\r\n    ss << newEntry;\r\n\r\n    if (!walletModel->wallet().setAddressReceiveRequest(DecodeDestination(recipient.address.toStdString()), ToString(newEntry.id), ss.str()))\r\n        return;\r\n\r\n    addNewRequest(newEntry);\r\n}\r\n```\r\n\r\nI am not very familiar with the GUI but as far as I can tell the `RecentRequestsTable` stores and displays receive addresses / payment requests that you've generated. Here the `SendCoinsRecipient` of payment request consists of an address, a label, an amount, and a memo/message. We serialize the recipient and other data about the request, an ID, and a date/time for the request, and then pass the string into a function which will store it in the `RecentRequestsTable`.\r\n\r\n--------\r\n\r\nIn `src/qt/sendcoinsdialog.cpp`:\r\n\r\n```cpp\r\nvoid SendCoinsDialog::presentPSBT(PartiallySignedTransaction& psbtx)\r\n{\r\n    // Serialize the PSBT\r\n    DataStream ssTx{};\r\n    ssTx << psbtx;\r\n    GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\r\n    QMessageBox msgBox(this);\r\n    //: Caption of \"PSBT has been copied\" messagebox\r\n    msgBox.setText(tr(\"Unsigned Transaction\", \"PSBT copied\"));\r\n    msgBox.setInformativeText(tr(\"The PSBT has been copied to the clipboard. You can also save it.\"));\r\n    msgBox.setStandardButtons(QMessageBox::Save | QMessageBox::Discard);\r\n    msgBox.setDefaultButton(QMessageBox::Discard);\r\n    msgBox.setObjectName(\"psbt_copied_message\");\r\n    switch (msgBox.exec()) {\r\n    case QMessageBox::Save: {\r\n        QString selectedFilter;\r\n        QString fileNameSuggestion = \"\";\r\n        bool first = true;\r\n        for (const SendCoinsRecipient &rcp : m_current_transaction->getRecipients()) {\r\n            if (!first) {\r\n                fileNameSuggestion.append(\" - \");\r\n            }\r\n            QString labelOrAddress = rcp.label.isEmpty() ? rcp.address : rcp.label;\r\n            QString amount = BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), rcp.amount);\r\n            fileNameSuggestion.append(labelOrAddress + \"-\" + amount);\r\n            first = false;\r\n        }\r\n        fileNameSuggestion.append(\".psbt\");\r\n        QString filename = GUIUtil::getSaveFileName(this,\r\n            tr(\"Save Transaction Data\"), fileNameSuggestion,\r\n            //: Expanded name of the binary PSBT file format. See: BIP 174.\r\n            tr(\"Partially Signed Transaction (Binary)\") + QLatin1String(\" (*.psbt)\"), &selectedFilter);\r\n        if (filename.isEmpty()) {\r\n            return;\r\n        }\r\n        std::ofstream out{filename.toLocal8Bit().data(), std::ofstream::out | std::ofstream::binary};\r\n        out << ssTx.str();\r\n        out.close();\r\n        //: Popup message when a PSBT has been saved to a file\r\n        Q_EMIT message(tr(\"PSBT saved\"), tr(\"PSBT saved to disk\"), CClientUIInterface::MSG_INFORMATION);\r\n        break;\r\n    }\r\n    case QMessageBox::Discard:\r\n        break;\r\n    default:\r\n        assert(false);\r\n    } // msgBox.exec()\r\n}\r\n```\r\n\r\nHere it's used to serialize the PSBT in order to display it to the user during the process of sending in the GUI.\r\n\r\n\r\n---------\r\n\r\nIn `src/qt/walletmodel.cpp`:\r\n\r\n`DataStream`'s are used to serialize PSBT's when fee bumping a stuck transaction\r\nin:\r\n\r\n```cpp\r\nbool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\r\n```\r\n\r\nand to serialize the sent transaction in `WalletModel::sendCoins()`:\r\n\r\n```cpp\r\nvoid WalletModel::sendCoins(WalletModelTransaction& transaction)\r\n{\r\n    QByteArray transaction_array; /* store serialized transaction */\r\n\r\n    {\r\n        std::vector<std::pair<std::string, std::string>> vOrderForm;\r\n        for (const SendCoinsRecipient &rcp : transaction.getRecipients())\r\n        {\r\n            if (!rcp.message.isEmpty()) // Message from normal bitcoin:URI (bitcoin:123...?message=example)\r\n                vOrderForm.emplace_back(\"Message\", rcp.message.toStdString());\r\n        }\r\n\r\n        auto& newTx = transaction.getWtx();\r\n        wallet().commitTransaction(newTx, /*value_map=*/{}, std::move(vOrderForm));\r\n\r\n        DataStream ssTx;\r\n        ssTx << TX_WITH_WITNESS(*newTx);\r\n        transaction_array.append((const char*)ssTx.data(), ssTx.size());\r\n    }\r\n\r\n    // Add addresses / update labels that we've sent to the address book,\r\n    // and emit coinsSent signal for each recipient\r\n    for (const SendCoinsRecipient &rcp : transaction.getRecipients())\r\n    {\r\n        // [...]\r\n        Q_EMIT coinsSent(this, rcp, transaction_array);\r\n    }\r\n\r\n    checkBalanceChanged(m_wallet->getBalances()); // update balance immediately, otherwise there could be a short noticeable delay until pollBalanceChanged hits\r\n}\r\n```\r\n\r\n-----------------------------\r\n\r\nIn `src/rest.cpp`:\r\n\r\n`DataStream` is used by Bitcoin Core's REST interface to serialize responses to requests for headers in `rest_headers()`, blocks in `rest_block()`, blockfilterheaders in `rest_filter_header()` blockfilters in `rest_block_filter()`, tx's in `rest_tx()` utxo's in `rest_getutxos()` and blockhashes in `rest_blockhash_by_height()`.\r\n\r\n---------------------------\r\n\r\nIn `src/rpc/blockchain.cpp`:\r\n\r\n`DataStream` is used to serialize the block header in the `getblockheader` rpc\r\ncommand:\r\n\r\n```cpp\r\n    if (!fVerbose)\r\n    {\r\n        DataStream ssBlock{};\r\n        ssBlock << pblockindex->GetBlockHeader();\r\n        std::string strHex = HexStr(ssBlock);\r\n        return strHex;\r\n    }\r\n```\r\n\r\nand to deserialize the block data into a `CBlock` in the `getblock` rpc command:\r\n\r\n```cpp\r\n    const std::vector<uint8_t> block_data{GetRawBlockChecked(chainman.m_blockman, *pblockindex)};\r\n\r\n    DataStream block_stream{block_data};\r\n    CBlock block{};\r\n    block_stream >> TX_WITH_WITNESS(block);\r\n\r\n    return blockToJSON(chainman.m_blockman, block, *tip, *pblockindex, tx_verbosity);\r\n```\r\n\r\n------------------\r\n\r\nIn `src/rpc/mining.cpp`:\r\n\r\n`DataStream` is used by the `generateblock` rpc for serializing the output hex of a generated block when `generateblock` is called with `submit=false`:\r\n\r\n```cpp\r\n    UniValue obj(UniValue::VOBJ);\r\n    obj.pushKV(\"hash\", block_out->GetHash().GetHex());\r\n    if (!process_new_block) {\r\n        DataStream block_ser;\r\n        block_ser << TX_WITH_WITNESS(*block_out);\r\n        obj.pushKV(\"hex\", HexStr(block_ser));\r\n    }\r\n```\r\n\r\n----------------\r\n\r\nIn `src/rpc/rawtransaction.cpp`:\r\n\r\n`DataStream` is used to serialize the resulting PSBT's that get passed to `EncodeBase64()` and returned in `combinepsbt`:\r\n\r\n```cpp\r\nstatic RPCHelpMan combinepsbt()\r\n    // [ ..preparing merged_psbt.. ]\r\n\r\n    DataStream ssTx{};\r\n    ssTx << merged_psbt;\r\n    return EncodeBase64(ssTx);\r\n```\r\n\r\nand `finalizepsbt()` which also might serialize the final transaction hex using a `DataStream` of `TX_WITH_WITNESS(tx)` passed to `HexStr()`:\r\n\r\n```cpp\r\nstatic RPCHelpMan finalizepsbt()\r\n{\r\n    // Unserialize the transactions\r\n    PartiallySignedTransaction psbtx;\r\n    std::string error;\r\n    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\r\n        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\r\n    }\r\n\r\n    bool extract = request.params[1].isNull() || (!request.params[1].isNull() && request.params[1].get_bool());\r\n\r\n    CMutableTransaction mtx;\r\n    bool complete = FinalizeAndExtractPSBT(psbtx, mtx);\r\n\r\n    UniValue result(UniValue::VOBJ);\r\n    DataStream ssTx{};\r\n    std::string result_str;\r\n\r\n    if (complete && extract) {\r\n        ssTx << TX_WITH_WITNESS(mtx);\r\n        result_str = HexStr(ssTx);\r\n        result.pushKV(\"hex\", result_str);\r\n    } else {\r\n        ssTx << psbtx;\r\n        result_str = EncodeBase64(ssTx.str());\r\n        result.pushKV(\"psbt\", result_str);\r\n    }\r\n    result.pushKV(\"complete\", complete);\r\n\r\n    return result;\r\n}\r\n```\r\n\r\nand in `createpsbt`:\r\n\r\n```cpp\r\nstatic RPCHelpMan createpsbt()\r\n{\r\n\r\n    std::optional<bool> rbf;\r\n    if (!request.params[3].isNull()) {\r\n        rbf = request.params[3].get_bool();\r\n    }\r\n    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\r\n\r\n    // Make a blank psbt\r\n    PartiallySignedTransaction psbtx;\r\n    psbtx.tx = rawTx;\r\n    for (unsigned int i = 0; i < rawTx.vin.size(); ++i) {\r\n        psbtx.inputs.emplace_back();\r\n    }\r\n    for (unsigned int i = 0; i < rawTx.vout.size(); ++i) {\r\n        psbtx.outputs.emplace_back();\r\n    }\r\n\r\n    // Serialize the PSBT\r\n    DataStream ssTx{};\r\n    ssTx << psbtx;\r\n\r\n    return EncodeBase64(ssTx);\r\n}\r\n```\r\n\r\nand in `utxoupdatepsbt()`:\r\n\r\n```cpp\r\nstatic RPCHelpMan utxoupdatepsbt()\r\n{\r\n    // Parse descriptors, if any.\r\n    FlatSigningProvider provider;\r\n    if (!request.params[1].isNull()) {\r\n        auto descs = request.params[1].get_array();\r\n        for (size_t i = 0; i < descs.size(); ++i) {\r\n            EvalDescriptorStringOrObject(descs[i], provider);\r\n        }\r\n    }\r\n\r\n    // We don't actually need private keys further on; hide them as a precaution.\r\n    const PartiallySignedTransaction& psbtx = ProcessPSBT(\r\n        request.params[0].get_str(),\r\n        request.context,\r\n        HidingSigningProvider(&provider, /*hide_secret=*/true, /*hide_origin=*/false),\r\n        /*sighash_type=*/SIGHASH_ALL,\r\n        /*finalize=*/false);\r\n\r\n    DataStream ssTx{};\r\n    ssTx << psbtx;\r\n    return EncodeBase64(ssTx);\r\n}\r\n```\r\n\r\nand `joinpsbts`:\r\n\r\n```cpp\r\nstatic RPCHelpMan joinpsbts()\r\n    // [ ... prepare PartiallySignedTransaction shuffled psbt ... ]\r\n    DataStream ssTx{};\r\n    ssTx << shuffled_psbt;\r\n    return EncodeBase64(ssTx);\r\n}\r\n```\r\n\r\nand in `descriptorprocesspsbt`, which like `finalizepsbt` above might also use `DataStream` for serializing a final transaction hex that gets passed to `HexStr` and return if the psbt is complete:\r\n\r\n```cpp\r\nRPCHelpMan descriptorprocesspsbt()\r\n    // [ ...prepare PartiallySignedTransaction &psbtx... ]\r\n    DataStream ssTx{};\r\n    ssTx << psbtx;\r\n\r\n    UniValue result(UniValue::VOBJ);\r\n\r\n    result.pushKV(\"psbt\", EncodeBase64(ssTx));\r\n    result.pushKV(\"complete\", complete);\r\n    if (complete) {\r\n        CMutableTransaction mtx;\r\n        PartiallySignedTransaction psbtx_copy = psbtx;\r\n        CHECK_NONFATAL(FinalizeAndExtractPSBT(psbtx_copy, mtx));\r\n        DataStream ssTx_final;\r\n        ssTx_final << TX_WITH_WITNESS(mtx);\r\n        result.pushKV(\"hex\", HexStr(ssTx_final));\r\n    }\r\n    return result;\r\n}\r\n```\r\n\r\n------\r\n\r\nIn `src/rpc/txoutproof`:\r\n\r\nIt is used for serializing the merkle inclusion proof in `gettxoutproof()`:\r\n\r\n```cpp\r\nstatic RPCHelpMan gettxoutproof()\r\n{\r\n    // [...]\r\n\r\n    DataStream ssMB{};\r\n    CMerkleBlock mb(block, setTxids);\r\n    ssMB << mb;\r\n    std::string strHex = HexStr(ssMB);\r\n    return strHex;\r\n}\r\n```\r\n\r\nand for deserializing the inclusion proof in `verifytxoutproof`:\r\n\r\n```cpp\r\nstatic RPCHelpMan verifytxoutproof()\r\n{\r\n    DataStream ssMB{ParseHexV(request.params[0], \"proof\")};\r\n    CMerkleBlock merkleBlock;\r\n    ssMB >> merkleBlock;\r\n\r\n    // [ ... Validate merkleBlock ... ] \r\n}\r\n```\r\n\r\n-------\r\n\r\n#### Wallet\r\n\r\nIf wallet is unencrypted on disk, I feel there is no reason for us to be delicate about how it is handled in memory.\r\n\r\n##### How wallet disk encryption happens\r\n\r\nMy understanding of the way that wallet encryption on disk works is that keys and values are written and read by the wallet in crypted form, and they are decrypted/encrypted in memory by `ScriptPubKeyMan`, for example:\r\n\r\n```cpp\r\n// [ Getting the private key for `CKeyID` address and storing the result \r\n//   in `CKey& keyOut` ]\r\nbool LegacyDataSPKM::GetKey(const CKeyID &address, CKey& keyOut) const\r\n{\r\n    LOCK(cs_KeyStore);\r\n    if (!m_storage.HasEncryptionKeys()) {\r\n        return FillableSigningProvider::GetKey(address, keyOut);\r\n    }\r\n\r\n    // [ a map of crypted keys is created on legacy wallet load in\r\n    //   `LoadLegacyWalletRecords()` ]\r\n    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\r\n    if (mi != mapCryptedKeys.end())\r\n    {\r\n        const CPubKey &vchPubKey = (*mi).second.first;\r\n        const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\r\n        // [ Use the encryption key to decrypt the crypted key from the map. ]\r\n        return m_storage.WithEncryptionKey([&](const CKeyingMaterial& encryption_key) {\r\n            return DecryptKey(encryption_key, vchCryptedSecret, vchPubKey, keyOut);\r\n        });\r\n    }\r\n    return false;\r\n}\r\n```\r\n\r\nBecause of this, we should not be vigilant about securing memory that contains crypted data from the disk.\r\n\r\n------\r\n\r\nIn `src/wallet/bdb.cpp`:\r\n\r\n`BerkeleyDatabase::Rewrite()` uses `DataStream` to serialize the keys and values from the existing db when rewriting the database. \r\n\r\n`BerkeleyDatabase::Rewrite()` is used when encrypting a wallet for the first time, since, according to comments \"BDB might keep bits of the unencrypted private key in slack space in the database file.\" or when we detect a wallet that was encrypted by version <0.5.0 and >0.4.0 of bitcoin, presumably because of some horrible bug in those versions. (PR [#635](https://github.com/bitcoin/bitcoin/pull/635)\r\n\r\nBut at this point, the wallet has already been encrypted, and we won't be loading anything from slack space when rewriting the db, so no problems.\r\n\r\n`BerkeleyCursor::Next()` is used when cursoring through the BDB, and stores the retrieved Key and Value in DataStream's, if the wallet is encrypted these will be crypted, if not, the keys are on disk in plaintext anyways.\r\n\r\n`BerkeleyBatch::ReadKey()` retrieves the value for a given key in the database:\r\n\r\n```cpp\r\nbool BerkeleyBatch::ReadKey(DataStream&& key, DataStream& value)\r\n{\r\n    if (!pdb)\r\n        return false;\r\n\r\n    SafeDbt datKey(key.data(), key.size());\r\n\r\n    SafeDbt datValue;\r\n    int ret = pdb->get(activeTxn, datKey, datValue, 0);\r\n    if (ret == 0 && datValue.get_data() != nullptr) {\r\n        value.clear();\r\n        value.write(SpanFromDbt(datValue));\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n```\r\n\r\nThis is not a concern because like above, this data is either in plaintext on disk, or it is being retrieved in crypted form and will be decrypted elsewhere by SPKM.\r\n\r\nSimilar arguments to the above apply for `BerkeleyBatch::WriteKey()`, `BerkeleyBatch::EraseKey()`, and `BerkeleyBatch::HasKey()`\r\n\r\n-------\r\n\r\nIn `src/wallet/db.h`:\r\n\r\nThe same argument as above applies for keys and values used here in `DatabaseBatch` functions Read, Write, Erase, Exists:\r\n\r\n```cpp\r\n/** RAII class that provides access to a WalletDatabase */\r\nclass DatabaseBatch\r\n{\r\nprivate:\r\n    virtual bool ReadKey(DataStream&& key, DataStream& value) = 0;\r\n    virtual bool WriteKey(DataStream&& key, DataStream&& value, bool overwrite = true) = 0;\r\n    virtual bool EraseKey(DataStream&& key) = 0;\r\n    virtual bool HasKey(DataStream&& key) = 0;\r\n\r\npublic:\r\n    template <typename K, typename T>\r\n    bool Read(const K& key, T& value)\r\n    {\r\n        DataStream ssKey{};\r\n        ssKey.reserve(1000);\r\n        ssKey << key;\r\n\r\n        DataStream ssValue{};\r\n        if (!ReadKey(std::move(ssKey), ssValue)) return false;\r\n        try {\r\n            ssValue >> value;\r\n            return true;\r\n        } catch (const std::exception&) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    template <typename K, typename T>\r\n    bool Write(const K& key, const T& value, bool fOverwrite = true)\r\n    {\r\n        DataStream ssKey{};\r\n        ssKey.reserve(1000);\r\n        ssKey << key;\r\n\r\n        DataStream ssValue{};\r\n        ssValue.reserve(10000);\r\n        ssValue << value;\r\n\r\n        return WriteKey(std::move(ssKey), std::move(ssValue), fOverwrite);\r\n    }\r\n\r\n    template <typename K>\r\n    bool Erase(const K& key)\r\n    {\r\n        DataStream ssKey{};\r\n        ssKey.reserve(1000);\r\n        ssKey << key;\r\n\r\n        return EraseKey(std::move(ssKey));\r\n    }\r\n\r\n    template <typename K>\r\n    bool Exists(const K& key)\r\n    {\r\n        DataStream ssKey{};\r\n        ssKey.reserve(1000);\r\n        ssKey << key;\r\n\r\n        return HasKey(std::move(ssKey));\r\n    }\r\n};\r\n```\r\n\r\n-----\r\n\r\nIn `dump.cpp`:\r\n\r\n`DumpWallet()` invoked by doing `bitcoin-wallet dump` prints all keys and values in a wallet, but does not decrypt them:\r\n\r\n```cpp\r\n// [ I've editorialized this codeblock to focus on the part I'm interested in ]\r\nbool DumpWallet(const ArgsManager& args, WalletDatabase& db, bilingual_str& error)\r\n{\r\n    // [.. handle dump file stuff ..]\r\n    std::unique_ptr<DatabaseBatch> batch = db.MakeBatch();\r\n    std::unique_ptr<DatabaseCursor> cursor = batch->GetNewCursor();\r\n\r\n    // Read the records\r\n    while (true) {\r\n        DataStream ss_key{};\r\n        DataStream ss_value{};\r\n        DatabaseCursor::Status status = cursor->Next(ss_key, ss_value);\r\n        if (status == DatabaseCursor::Status::DONE) {\r\n            ret = true;\r\n            break;\r\n        } else if (status == DatabaseCursor::Status::FAIL) {\r\n            error = _(\"Error reading next record from wallet database\");\r\n            ret = false;\r\n            break;\r\n        }\r\n        std::string key_str = HexStr(ss_key);\r\n        std::string value_str = HexStr(ss_value);\r\n        line = strprintf(\"%s,%s\\n\", key_str, value_str);\r\n        dump_file.write(line.data(), line.size());\r\n        hasher << Span{line};\r\n    }\r\n\r\n    cursor.reset();\r\n    batch.reset();\r\n\r\n    // [.. handle dump file stuff ..]\r\n\r\n    return ret;\r\n}\r\n```\r\n\r\n----------------\r\n\r\nIn `src/wallet/migrate.cpp` & `src/wallet/migrate.h`:\r\n\r\n`BerkeleyRO*` exist so that we can read keys and values from a legacy bdb wallet when migrating so that we can drop the bdb wallet entirely in the future, the same as in `db.h` applies here, all the ekys and values read in `BerkeleyROBatch::ReadKey()`, `HasKey` and `BerkeleyROCursor::Next()` are crypted as in their non-RO counterparts found above.\r\n\r\n---------------------\r\n\r\nIn `src/wallet/rpc/backup.cpp`:\r\n\r\n`DataStream` is used to serialize the transaction inclusion proof argument to the `importprunedfunds()` rpc which lets pruned nodes import funds without rescanning if they have inclusion proofs similar to above in `src/rpc/txoutproof.cpp`.\r\n\r\n```cpp\r\nRPCHelpMan importprunedfunds()\r\n{\r\n    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\r\n    if (!pwallet) return UniValue::VNULL;\r\n\r\n    CMutableTransaction tx;\r\n    if (!DecodeHexTx(tx, request.params[0].get_str())) {\r\n        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\r\n    }\r\n    uint256 hashTx = tx.GetHash();\r\n\r\n    DataStream ssMB{ParseHexV(request.params[1], \"proof\")};\r\n    CMerkleBlock merkleBlock;\r\n    ssMB >> merkleBlock;\r\n\r\n    // [.. validate merkle block ..]\r\n\r\n    // [.. add transactions to wallet.. ]\r\n}\r\n```\r\n\r\n------------------------\r\n\r\n\r\nIn `src/wallet/rpc/txoutproof.cpp`:\r\n\r\nIn `static Univalue FinishTransaction` used by the rpc's `send()` and `sendall()`, DataStream is used to serialize the completed psbt and print it if either was called with `psbt=true`.\r\n\r\nIn `bumpfee_helper` when invoked as the `psbtbumpfee` rpc, a DataStream is used to serialize the unsigned psbt of the new transaction that gets returned.\r\n\r\nIn `walletprocesspsbt()` `DataStream is used to serialize the PSBT, and if the transaction is complete to serialize the final transaction:\r\n\r\n```cpp\r\nRPCHelpMan walletprocesspsbt()\r\n{\r\n    // [...prepare psbtx...]\r\n\r\n    UniValue result(UniValue::VOBJ);\r\n    DataStream ssTx{};\r\n    ssTx << psbtx;\r\n    result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\r\n    result.pushKV(\"complete\", complete);\r\n    if (complete) {\r\n        CMutableTransaction mtx;\r\n        // Returns true if complete, which we already think it is.\r\n        CHECK_NONFATAL(FinalizeAndExtractPSBT(psbtx, mtx));\r\n        DataStream ssTx_final;\r\n        ssTx_final << TX_WITH_WITNESS(mtx);\r\n        result.pushKV(\"hex\", HexStr(ssTx_final));\r\n    }\r\n\r\n    return result;\r\n}\r\n```\r\n\r\nin the `walletcreatefundedpsbt` rpc, it contains the serialized psbt\r\n\r\n--------------------\r\n\r\nIn `src/wallet/salvage.cpp`:\r\n\r\n`DataStream` is used during `RecoverDatabaseFile()` when trying to recover key and value data from a db, nothing gets decrypted here:\r\n\r\n```cpp\r\n    for (KeyValPair& row : salvagedData)\r\n    {\r\n        /* Filter for only private key type KV pairs to be added to the salvaged wallet */\r\n        DataStream ssKey{row.first};\r\n        DataStream ssValue(row.second);\r\n        std::string strType, strErr;\r\n\r\n        // We only care about KEY, MASTER_KEY, CRYPTED_KEY, and HDCHAIN types\r\n        ssKey >> strType;\r\n        bool fReadOK = false;\r\n        // [ The below just load the crypted form of the key, no decryption. ]\r\n        if (strType == DBKeys::KEY) {\r\n            fReadOK = LoadKey(&dummyWallet, ssKey, ssValue, strErr);\r\n        } else if (strType == DBKeys::CRYPTED_KEY) {\r\n            fReadOK = LoadCryptedKey(&dummyWallet, ssKey, ssValue, strErr);\r\n        } else if (strType == DBKeys::MASTER_KEY) {\r\n            fReadOK = LoadEncryptionKey(&dummyWallet, ssKey, ssValue, strErr);\r\n        } else if (strType == DBKeys::HDCHAIN) {\r\n            fReadOK = LoadHDChain(&dummyWallet, ssValue, strErr);\r\n        } else {\r\n            continue;\r\n        }\r\n```\r\n\r\n--------\r\n\r\nIn `src/wallet/sqlite.cpp` & `src/wallet/sqlite.h`:\r\n\r\n`SQLiteBatch::ReadKey`, WriteKey, etc. and `SQLiteCursor::next` mirror berkeley and berkeley RO batches above, again: all reading crypted data from disk, data gets decrypted somewhere else, once it's far away from it's humble `DataStream` beginnings.\r\n\r\n---------\r\n\r\nIn `src/wallet/wallet.cpp`:\r\n\r\nUsed in `MigrateToSQLite()` when iterating through BDB with the bdb cursor:\r\n\r\n```cpp\r\nbool CWallet::MigrateToSQLite(bilingual_str& error)\r\n{\r\n    while (true) {\r\n        DataStream ss_key{};\r\n        DataStream ss_value{};\r\n        status = cursor->Next(ss_key, ss_value);\r\n        if (status != DatabaseCursor::Status::MORE) {\r\n            break;\r\n        }\r\n        SerializeData key(ss_key.begin(), ss_key.end());\r\n        SerializeData value(ss_value.begin(), ss_value.end());\r\n        records.emplace_back(key, value);\r\n    }\r\n    cursor.reset();\r\n    batch.reset();\r\n\r\n    // [....insert the records in to the new sqlite db...] \r\n}\r\n```\r\n\r\n---------------------\r\n\r\nIn `src/wallet/walletdb.cpp`:\r\n\r\nMost of the arguments above about encrypted data on disk hold true here...\r\n\r\n```cpp\r\nbool WalletBatch::IsEncrypted()\r\n{\r\n    DataStream prefix;\r\n    prefix << DBKeys::MASTER_KEY;\r\n    if (auto cursor = m_batch->GetNewPrefixCursor(prefix)) {\r\n        DataStream k, v;\r\n        if (cursor->Next(k, v) == DatabaseCursor::Status::MORE) return true;\r\n    }\r\n    return false;\r\n}\r\n```\r\n\r\nmaster encryption keys are stored in the db (in crypted form!), this is just serializing the master key prefix and then searching for such an entry, no secrets in the prefix!\r\n\r\n`LoadKey` and `LoadCryptedKey` don't do any decryption of the keys. LoadKey just grabs all the keys that have the unencrypted key prefix as-is, and loadcryptedkey loads keys with the crypted key prefix as-is. The story is almost identical with `LoadHDChain` and `LoadEncryptionKey` and the same with the rest of the `LoadRecords()`, `LoadLegacyWalletRecoreds()`, and `LoadDescriptorWalletRecords()` circus.\r\n\r\nI definitely got tired and slacked a little while reviewing `walletdb.cpp` but I'm pretty confident about this.\r\n\r\n-------------------------\r\n\r\nIn `src/zmq/zmpqpublishnotifier.cpp`:\r\n\r\n```cpp\r\nbool CZMQPublishRawTransactionNotifier::NotifyTransaction(const CTransaction &transaction)\r\n{\r\n    uint256 hash = transaction.GetHash();\r\n    LogDebug(BCLog::ZMQ, \"Publish rawtx %s to %s\\n\", hash.GetHex(), this->address);\r\n    DataStream ss;\r\n    ss << TX_WITH_WITNESS(transaction);\r\n    return SendZmqMessage(MSG_RAWTX, &(*ss.begin()), ss.size());\r\n}`\r\n```\r\n\r\nUsed to serialize the raw transaction that we are sending a ZeroMQ notification about.\r\n\r\n#### Not done yet, `SerializeData`\r\n\r\nLet's also look at every instance of `SerializeData` being used, since this is a vector of bytes, with the `zero_after_free_allocator`:\r\n\r\n-----------\r\n\r\nIn `src/wallet/migrate.cpp`:\r\n\r\nUsed in the `BerkeleyROBatch::*` family of `ReadKey()`, `HasKey()` to represent the vector portion of the same `DataStream`'s I used and described above that have just crypted key data, or unencrypted data *if* the wallet itself is unencrypted, e.g.:\r\n\r\n```cpp\r\n\r\nbool BerkeleyROBatch::ReadKey(DataStream&& key, DataStream& value)\r\n{\r\n    SerializeData key_data{key.begin(), key.end()};\r\n    const auto it{m_database.m_records.find(key_data)};\r\n    if (it == m_database.m_records.end()) {\r\n        return false;\r\n    }\r\n    auto val = it->second;\r\n    value.clear();\r\n    value.write(Span(val));\r\n    return true;\r\n}\r\n```\r\n\r\n-----------\r\n\r\nIn `src/wallet/wallet.cpp`:\r\n\r\nUsed in `MigrateToSQLite()` as discussed above to store the `DataStream` data described above:\r\n\r\n```cpp\r\nwhile (true) {\r\n    DataStream ss_key{};\r\n    DataStream ss_value{};\r\n    status = cursor->Next(ss_key, ss_value);\r\n    if (status != DatabaseCursor::Status::MORE) {\r\n        break;\r\n    }\r\n    SerializeData key(ss_key.begin(), ss_key.end());\r\n    SerializeData value(ss_value.begin(), ss_value.end());\r\n    records.emplace_back(key, value);\r\n}\r\n```\r\n\r\n</details>\r\n\r\n[^1]: Maybe as much as 50x: https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3337245\r\n[^2]: I am assuming this from the discussion, github seems to not have dead commits for old pr's",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2379480304",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987"
    },
    {
      "event": "commented",
      "id": 2379857634,
      "node_id": "IC_kwDOABII586N2b7i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2379857634",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-27T18:41:33Z",
      "updated_at": "2024-09-27T18:41:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "The CI failure on ARM is related, and I am able to reproduce locally. It is from a  `-Warray-bounds` warning that I believe is spurious, I'm trying to create a minimal reproduction.",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2379857634",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987"
    },
    {
      "event": "commented",
      "id": 2385580772,
      "node_id": "IC_kwDOABII586OMRLk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2385580772",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T11:55:48Z",
      "updated_at": "2024-10-01T11:55:48Z",
      "author_association": "MEMBER",
      "body": "I tested this PR on an AMD Ryzen 7950x machine with Ubuntu 24.04, with one local network peer and a gigabit internet connection.\r\n\r\n```\r\nbitcoind -dbcache=30000 -stopatheight=863000 -blocksdir=/magnetic/.bitcoin -addnode=local-network\r\n```\r\n\r\nBefore: 5 hours 10 minutes\r\nAfter: 4 hours and 55 minutes\r\n\r\nTime includes 20 minutes to flush chainstate to disk during shutdown.\r\n\r\nThat's nowhere near a 25% difference and probably not statistically significant. Some configurations might do better than others from this change. It's certainly not worse. \r\n\r\nThe node was additionally patched to drop the `-par` limit and use 31 threads for signature validation (in both runs).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2385580772",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987"
    },
    {
      "event": "renamed",
      "id": 14473870527,
      "node_id": "RTE_lADOABII586YFxARzwAAAANetby_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14473870527",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T14:13:54Z",
      "rename": {
        "from": "Don't zero-after-free `DataStream`: ~25% faster IBD",
        "to": "Don't zero-after-free `DataStream`: ~25% faster IBD on some configurations"
      }
    },
    {
      "event": "commented",
      "id": 2386390637,
      "node_id": "IC_kwDOABII586OPW5t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2386390637",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T15:54:39Z",
      "updated_at": "2024-10-01T15:55:40Z",
      "author_association": "MEMBER",
      "body": "@davidgumberg Thanks for the very detailed description!\r\n\r\nI suspect the speedup here is going to be very dependent on the architecture/environment, but it's not clear to me exactly what variables would matter most.\r\n\r\nWould you be interested in working up a specific zero-after-free benchmark that illustrates the difference? If we knew exactly where the speedup was coming from, we could make a more informed decision about what/where to optimize.",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2386390637",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987"
    },
    {
      "event": "mentioned",
      "id": 14475616759,
      "node_id": "MEE_lADOABII586YFxARzwAAAANe0GH3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14475616759",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T15:54:40Z"
    },
    {
      "event": "subscribed",
      "id": 14475616769,
      "node_id": "SE_lADOABII586YFxARzwAAAANe0GIB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14475616769",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T15:54:40Z"
    },
    {
      "event": "commented",
      "id": 2387137498,
      "node_id": "IC_kwDOABII586OSNPa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2387137498",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T21:49:07Z",
      "updated_at": "2024-10-01T23:04:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I tested this PR on an AMD Ryzen 7950x machine with Ubuntu 24.04, with one local network peer and a gigabit internet connection.\r\n> \r\n> ```\r\n> bitcoind -dbcache=30000 -stopatheight=863000 -blocksdir=/magnetic/.bitcoin -addnode=local-network\r\n> ```\r\n> \r\n> Before: 5 hours 10 minutes After: 4 hours and 55 minutes\r\n> \r\n> Time includes 20 minutes to flush chainstate to disk during shutdown.\r\n\r\n@Sjors Thanks for testing and showing that the benefit (if any) here is setup-dependent. I suspect that the biggest improvements will be seen on memory bandwidth constrained systems and when flushing/syncing coinsdb to disk, which you have skipped most of by running such a high dbcache and unpruned, so I think that your setup is worst case scenario for improvements seen from this change but this could be my own wishful thinking! \r\n\r\n> I suspect the speedup here is going to be very dependent on the architecture/environment, but it's not clear to me exactly what variables would matter most.\r\n> \r\n> Would you be interested in working up a specific zero-after-free benchmark that illustrates the difference? If we knew exactly where the speedup was coming from, we could make a more informed decision about what/where to optimize.\r\n\r\n@theuni Good point, especially given Sjors result, I will draft up a zero-after-free benchmark to isolate the causes / relevant factors of any performance benefit that might be here. I think a `CDBWrapper::BatchWrite()` benchmark could also be helpful for this and other PR's like #30039 that claim to improve IBD write performance.\r\n\r\n",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2387137498",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987"
    },
    {
      "event": "mentioned",
      "id": 14479936677,
      "node_id": "MEE_lADOABII586YFxARzwAAAANfEkyl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14479936677",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T21:49:08Z"
    },
    {
      "event": "subscribed",
      "id": 14479936701,
      "node_id": "SE_lADOABII586YFxARzwAAAANfEky9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14479936701",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T21:49:08Z"
    },
    {
      "event": "mentioned",
      "id": 14479936712,
      "node_id": "MEE_lADOABII586YFxARzwAAAANfEkzI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14479936712",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T21:49:08Z"
    },
    {
      "event": "subscribed",
      "id": 14479936725,
      "node_id": "SE_lADOABII586YFxARzwAAAANfEkzV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14479936725",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-01T21:49:08Z"
    },
    {
      "event": "renamed",
      "id": 14507511138,
      "node_id": "RTE_lADOABII586YFxARzwAAAANgtw1i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14507511138",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-03T16:56:00Z",
      "rename": {
        "from": "Don't zero-after-free `DataStream`: ~25% faster IBD on some configurations",
        "to": "Don't zero-after-free `DataStream`: Faster IBD on some configurations"
      }
    },
    {
      "event": "labeled",
      "id": 14558880283,
      "node_id": "LE_lADOABII586YFxARzwAAAANjxuIb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14558880283",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T15:24:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14564696207,
      "node_id": "HRFPE_lADOABII586YFxARzwAAAANkH6CP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14564696207",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "10a58367463eee3f4419aade9a2f11d469a7faae",
      "commit_url": "https://api.github.com/repos/davidgumberg/bitcoin/commits/10a58367463eee3f4419aade9a2f11d469a7faae",
      "created_at": "2024-10-09T01:52:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14564710685,
      "node_id": "HRFPE_lADOABII586YFxARzwAAAANkH9kd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14564710685",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d12a1497089f896e3fc99cf4cfff90001125e2a9",
      "commit_url": "https://api.github.com/repos/davidgumberg/bitcoin/commits/d12a1497089f896e3fc99cf4cfff90001125e2a9",
      "created_at": "2024-10-09T01:55:02Z"
    },
    {
      "event": "unlabeled",
      "id": 14564845849,
      "node_id": "UNLE_lADOABII586YFxARzwAAAANkIekZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14564845849",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-09T02:17:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14564856896,
      "node_id": "HRFPE_lADOABII586YFxARzwAAAANkIhRA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14564856896",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1e6cb11958387ac82e7560c45b582f296f6eca6d",
      "commit_url": "https://api.github.com/repos/davidgumberg/bitcoin/commits/1e6cb11958387ac82e7560c45b582f296f6eca6d",
      "created_at": "2024-10-09T02:19:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14580427817,
      "node_id": "HRFPE_lADOABII586YFxARzwAAAANlD6wp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14580427817",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d146017fd6770577da8f3efd712308b08ef62e77",
      "commit_url": "https://api.github.com/repos/davidgumberg/bitcoin/commits/d146017fd6770577da8f3efd712308b08ef62e77",
      "created_at": "2024-10-09T22:45:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14582365777,
      "node_id": "HRFPE_lADOABII586YFxARzwAAAANlLT5R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14582365777",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3c5d8d4400c1e43170c2b4221b07d7d11f3371fb",
      "commit_url": "https://api.github.com/repos/davidgumberg/bitcoin/commits/3c5d8d4400c1e43170c2b4221b07d7d11f3371fb",
      "created_at": "2024-10-10T03:14:04Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFlMDk2YjMwZGE4MDhkNmIwNjkxZjVjZGUxNGM1MjllMWM4NWZmMWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e096b30da808d6b0691f5cde14c529e1c85ff1b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1e096b30da808d6b0691f5cde14c529e1c85ff1b",
      "tree": {
        "sha": "ee7528d3949a39b7a23ad32d843fb1831ed79509",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee7528d3949a39b7a23ad32d843fb1831ed79509"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c2c3bb3f5c6f52c8db625c3edb51409c72c14b0",
          "sha": "0c2c3bb3f5c6f52c8db625c3edb51409c72c14b0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0c2c3bb3f5c6f52c8db625c3edb51409c72c14b0"
        }
      ],
      "message": "test: refactor: Add RandScript utility",
      "committer": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-10-10T05:57:37Z"
      },
      "author": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-10-09T00:33:02Z"
      },
      "sha": "1e096b30da808d6b0691f5cde14c529e1c85ff1b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRjMzA4MTk3YzNkNWI0ODhhOTJiMDQ1MDMzMTBjMTQ2NTBhM2MxYzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c308197c3d5b488a92b04503310c14650a3c1c3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4c308197c3d5b488a92b04503310c14650a3c1c3",
      "tree": {
        "sha": "d1547845aae3e942591a59dcc2eedce37a8f65e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1547845aae3e942591a59dcc2eedce37a8f65e8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e096b30da808d6b0691f5cde14c529e1c85ff1b",
          "sha": "1e096b30da808d6b0691f5cde14c529e1c85ff1b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1e096b30da808d6b0691f5cde14c529e1c85ff1b"
        }
      ],
      "message": "bench: Add datastream benchmark",
      "committer": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-10-10T05:57:37Z"
      },
      "author": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-10-08T17:31:35Z"
      },
      "sha": "4c308197c3d5b488a92b04503310c14650a3c1c3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU5ZDEwNWVjMzM2M2VkN2UyNjVjMGVlM2UxOGUxMmY4YjI1NTY4YmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59d105ec3363ed7e265c0ee3e18e12f8b25568bb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/59d105ec3363ed7e265c0ee3e18e12f8b25568bb",
      "tree": {
        "sha": "86b43e30f5aa30a4c017d866f0c69008ef3e6ace",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86b43e30f5aa30a4c017d866f0c69008ef3e6ace"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c308197c3d5b488a92b04503310c14650a3c1c3",
          "sha": "4c308197c3d5b488a92b04503310c14650a3c1c3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4c308197c3d5b488a92b04503310c14650a3c1c3"
        }
      ],
      "message": "bench: Add ProcessMessage NetMsgType::BLOCK bench",
      "committer": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-10-10T05:57:38Z"
      },
      "author": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-10-09T22:36:01Z"
      },
      "sha": "59d105ec3363ed7e265c0ee3e18e12f8b25568bb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFlYzA0OTFhNDk3NzA2MGU1MGZhY2MxMzAyYWI3YWIzMTRmMzg0NjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aec0491a4977060e50facc1302ab7ab314f38461",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/aec0491a4977060e50facc1302ab7ab314f38461",
      "tree": {
        "sha": "4d95878e2927defa683fafe35c0a49de8d44e63a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d95878e2927defa683fafe35c0a49de8d44e63a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59d105ec3363ed7e265c0ee3e18e12f8b25568bb",
          "sha": "59d105ec3363ed7e265c0ee3e18e12f8b25568bb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/59d105ec3363ed7e265c0ee3e18e12f8b25568bb"
        }
      ],
      "message": "test: Randomize AddTestCoin height and SPK",
      "committer": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-10-10T05:57:38Z"
      },
      "author": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-10-09T00:34:09Z"
      },
      "sha": "aec0491a4977060e50facc1302ab7ab314f38461"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFjMjMxYjNmMzM3Y2VmMTUyMjM3YWYyZjBlMWU5ZTM4ZGU2ODU0N2M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac231b3f337cef152237af2f0e1e9e38de68547c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ac231b3f337cef152237af2f0e1e9e38de68547c",
      "tree": {
        "sha": "d82589fe633076a31c1ad5c2e29a1d24b623e4b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d82589fe633076a31c1ad5c2e29a1d24b623e4b6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aec0491a4977060e50facc1302ab7ab314f38461",
          "sha": "aec0491a4977060e50facc1302ab7ab314f38461",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/aec0491a4977060e50facc1302ab7ab314f38461"
        }
      ],
      "message": "bench: Add CCoinsViewDB flush test",
      "committer": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-10-10T05:57:38Z"
      },
      "author": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-10-09T00:35:08Z"
      },
      "sha": "ac231b3f337cef152237af2f0e1e9e38de68547c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14584248209,
      "node_id": "HRFPE_lADOABII586YFxARzwAAAANlSfeR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14584248209",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0a3bae78aaa4742ca3d7bfa0810f8fec619cab08",
      "commit_url": "https://api.github.com/repos/davidgumberg/bitcoin/commits/0a3bae78aaa4742ca3d7bfa0810f8fec619cab08",
      "created_at": "2024-10-10T05:57:42Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMyOTJhMjFlOTM1NTI4M2ZmZWY1NDlhZTQ4OWU3NTA4YjUyYmUxZWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3292a21e9355283ffef549ae489e7508b52be1ed",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3292a21e9355283ffef549ae489e7508b52be1ed",
      "tree": {
        "sha": "bfc4c6f81416f3bc6285ddcf0ffd0f6e3ffe095b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfc4c6f81416f3bc6285ddcf0ffd0f6e3ffe095b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac231b3f337cef152237af2f0e1e9e38de68547c",
          "sha": "ac231b3f337cef152237af2f0e1e9e38de68547c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ac231b3f337cef152237af2f0e1e9e38de68547c"
        }
      ],
      "message": "bench: Remove unnecessary byte append to block\n\nThe removed passage, introduced with this benchmark in\nPR#16267(https://github.com/bitcoin/bitcoin/pull/16267/) appears to have\nbeen copied and pasted from the earlier block tests in\n`bench/checkblock.cpp`. (https://github.com/bitcoin/bitcoin/pull/9049)\nThere, it is relevant to prevent triggering what seems to be a vestigial\nbranch of DataStream::Rewind() related to the unused\nDataStream::Compact().\n\nWhile harmless, it is removed because it can trigger a spurious bounds\nwarning in GCC <12.3 & <11.4. This issue was previously worked around in\nc78d8ff4 (PR#30765).\n\nGCC Bugzilla issue: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100366",
      "committer": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-10-10T06:27:59Z"
      },
      "author": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-10-10T06:00:59Z"
      },
      "sha": "3292a21e9355283ffef549ae489e7508b52be1ed"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc3MmIxZjYwNmZmNThjMjc4N2FkM2Q5ZWY5ZTdlOGZjZGY4N2FlYWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/772b1f606ff58c2787ad3d9ef9e7e8fcdf87aeae",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/772b1f606ff58c2787ad3d9ef9e7e8fcdf87aeae",
      "tree": {
        "sha": "b1bcbca7440adefd638e957b31c3d1b74a8ce2fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1bcbca7440adefd638e957b31c3d1b74a8ce2fb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3292a21e9355283ffef549ae489e7508b52be1ed",
          "sha": "3292a21e9355283ffef549ae489e7508b52be1ed",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3292a21e9355283ffef549ae489e7508b52be1ed"
        }
      ],
      "message": "test: avoid BOOST_CHECK_EQUAL for complex types\n\nAvoid using BOOST_CHECK_EQUAL_COLLECTIONS for two\nstd::vector<std::pair<SerializeData, SerializeData>> since boost expects\nprinting methods that are very brittle. See:\n\n* https://www.boost.org/doc/libs/1_86_0/libs/test/doc/html/boost_test/test_output/test_tools_support_for_logging/testing_tool_output_disable.html\n* https://stackoverflow.com/questions/10976130/boost-check-equal-with-pairint-int-and-custom-operator\n* https://stackoverflow.com/questions/3999644/how-to-compare-vectors-with-boost-test\n* https://github.com/boostorg/type_traits/issues/196",
      "committer": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-10-10T06:27:59Z"
      },
      "author": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-08-17T01:03:14Z"
      },
      "sha": "772b1f606ff58c2787ad3d9ef9e7e8fcdf87aeae"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY4YzJhMTI5YWI3MDZiZGVlNDc0MzFjMzE0ODBkMWU5OTMwNzA2ZWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8c2a129ab706bdee47431c31480d1e9930706ea",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f8c2a129ab706bdee47431c31480d1e9930706ea",
      "tree": {
        "sha": "b3466a8328fc86514bb7722bc8eb6139148c1ef9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3466a8328fc86514bb7722bc8eb6139148c1ef9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/772b1f606ff58c2787ad3d9ef9e7e8fcdf87aeae",
          "sha": "772b1f606ff58c2787ad3d9ef9e7e8fcdf87aeae",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/772b1f606ff58c2787ad3d9ef9e7e8fcdf87aeae"
        }
      ],
      "message": "util: Stop zero-before-freeing all serialized data\n\n`SerializeData` is used by `DataStream` which is used throughout the\ncodebase for non-secret data. Originally introduced as a mitigation for\nbuffer-overflows. The potential mitigation is not worth the performance\ncost. This slows down IBD by as much as ~25%.",
      "committer": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-10-10T06:27:59Z"
      },
      "author": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-08-15T22:09:33Z"
      },
      "sha": "f8c2a129ab706bdee47431c31480d1e9930706ea"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkwNmU2N2I5NTE1N2ZkNTU3NDM4YzM3YjMwODVjZjVkZWMyYWUxMzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/906e67b95157fd557438c37b3085cf5dec2ae135",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/906e67b95157fd557438c37b3085cf5dec2ae135",
      "tree": {
        "sha": "edd941fba6fe3fef64b43e220557a6b8195f3c61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edd941fba6fe3fef64b43e220557a6b8195f3c61"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8c2a129ab706bdee47431c31480d1e9930706ea",
          "sha": "f8c2a129ab706bdee47431c31480d1e9930706ea",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f8c2a129ab706bdee47431c31480d1e9930706ea"
        }
      ],
      "message": "refactor: Drop unused `zero_after_free_allocator`",
      "committer": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-10-10T06:27:59Z"
      },
      "author": {
        "name": "David Gumberg",
        "email": "davidzgumberg@gmail.com",
        "date": "2024-08-15T22:12:35Z"
      },
      "sha": "906e67b95157fd557438c37b3085cf5dec2ae135"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14584656373,
      "node_id": "HRFPE_lADOABII586YFxARzwAAAANlUDH1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14584656373",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "906e67b95157fd557438c37b3085cf5dec2ae135",
      "commit_url": "https://api.github.com/repos/davidgumberg/bitcoin/commits/906e67b95157fd557438c37b3085cf5dec2ae135",
      "created_at": "2024-10-10T06:28:37Z"
    },
    {
      "event": "unlabeled",
      "id": 14586137129,
      "node_id": "UNLE_lADOABII586YFxARzwAAAANlZsop",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14586137129",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-10T07:54:07Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2405956954,
      "node_id": "IC_kwDOABII586PZ_1a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2405956954",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-10T20:12:21Z",
      "updated_at": "2024-10-10T20:16:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "Fixed the spurious array bounds warning that occurs on Debian because it uses GCC 12.2, which has a bug where some uses of `std::vector::insert()` result in an incorrect array bounds warning, this issue was previously discussed in #30765. (See: https://github.com/bitcoin/bitcoin/commit/c78d8ff4cb83506413bb73833fc5c04885d0ece8)\r\n\r\nAs suggested by @theuni, I've added some benchmarks that help show where the performance improvement is coming from. In a test where a 1000-byte `CScript`  is serialized into a `DataStream`, a Ryzen 7900x machine (5200 MT/s DDR5) serializes ~23.33GB/s on my branch and ~4.58 GB/s on master, and a Raspberry Pi 5 4GB serializes ~7.03GB/s on my branch and ~5.42GB/s on master.\r\n\r\nI also made a branch(https://github.com/davidgumberg/bitcoin/commit/c832feda63c586094193433a336b930147472285) with a version of the zero after free allocator that keeps the compiler optimization prevention, but doesn't actually memset the stream to zero, and performance in some cases is only slightly better than master. For example, in the same test as above, it managed ~4.72 GB/s on the 7900x, on the Raspberry Pi performance of this \"partial zero-after-free\" branch was closer to my no-zeroing branch, getting ~6.95GB/s. This seems to hint that a large part of the performance issue here isn't just from zeroing memory with `memset()`: it's other compiler optimizations prevented by [what we do](https://github.com/bitcoin/bitcoin/blob/489e5aa3a2999cb18e018c40414a27667891b1c2/src/support/cleanse.cpp#L33) to prevent `memset()` from being optimized out.\r\n\r\nI ran the benchmarks on three devices, and the data is below, the most curious result is from the Ryzen 7640U w/ 5600 MT/s memory, which showed the least improvement between the master, \"partial zero\", and my branch. Repeated runs were noisy, I used `pyperf system tune` to try to stabilize these results, but I think there is inherent thermal instability in that device's laptop form factor. Worth pointing out is that the 7640U has worse compute performance than the 7900x but the 7640U has faster memory. [^1] So this may just be a consequence of the 7640U being the least memory-bandwidth-constrained of the three devices.\r\n\r\n<details>\r\n\r\n<summary>\r\n\r\n## Benchmark Results\r\n\r\n</summary>\r\n\r\n### Raspberry Pi 5 4GB\r\n\r\n#### Original zero-after-free allocator still in use with DataStream\r\n\r\n```console\r\n~/bitcoin $ git checkout --detach $yeszero && cmake -B build -DBUILD_BENCH=ON -DCMAKE_BUILD_TYPE=Release &>/dev/null && cmake --build build -j $(nproc) &>/dev/null && ./build/src/bench/bench_bitcoin -filter=\"(DataStream.*|CCoinsViewDB.*|ProcessMessage.*|Deserial.*)\" -min-time=60000\r\nHEAD is now at 772b1f606f test: avoid BOOST_CHECK_EQUAL for complex types\r\n```\r\n\r\n\r\n|             ns/byte |              byte/s |    err% |        ins/byte |        cyc/byte |    IPC |       bra/byte |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|               20.67 |       48,369,994.69 |    0.6% |           61.83 |           47.04 |  1.314 |           8.87 |    0.8% |     68.71 | `CCoinsViewDBFlush`\r\n|                0.86 |    1,165,414,983.28 |    0.0% |            5.14 |            2.06 |  2.498 |           1.04 |    0.0% |     66.01 | `DataStreamAlloc`\r\n|                0.18 |    5,416,728,210.85 |    0.1% |            1.26 |            0.44 |  2.839 |           0.25 |    0.0% |     66.00 | `DataStreamSerializeScript`\r\n|                9.06 |      110,322,628.58 |    0.1% |           32.40 |           21.69 |  1.493 |           6.06 |    0.7% |     66.09 | `ProcessMessageBlock`\r\n\r\n|            ns/block |             block/s |    err% |       ins/block |       cyc/block |    IPC |      bra/block |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|        4,319,764.64 |              231.49 |    0.2% |   21,518,823.54 |   10,347,746.41 |  2.080 |   3,965,023.40 |    1.1% |     64.06 | `DeserializeAndCheckBlockTest`\r\n|        2,983,304.65 |              335.20 |    0.1% |   14,726,319.41 |    7,146,940.53 |  2.061 |   2,622,747.10 |    0.7% |     66.04 | `DeserializeBlockTest`\r\n\r\n-----\r\n\r\n#### Modified zero-after-free allocator that prevents memory optimization but doesn't zero memory.\r\n\r\n```console\r\n~/bitcoin $ git checkout --detach $partzero && cmake -B build -DBUILD_BENCH=ON -DCMAKE_BUILD_TYPE=Release &>/dev/null && cmake --build build -j $(nproc) &>/dev/null && ./build/src/bench/bench_bitcoin -filter=\"(DataStream.*|CCoinsViewDB.*|ProcessMessage.*|Deserial.*)\" -min-time=60000\r\nHEAD is now at 0351c4242a Modify zero after free allocator to prevent optimizations without zeroing memory\r\n```\r\n\r\n|             ns/byte |              byte/s |    err% |        ins/byte |        cyc/byte |    IPC |       bra/byte |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|               20.64 |       48,461,301.71 |    0.5% |           61.84 |           46.60 |  1.327 |           8.87 |    0.8% |     68.28 | `CCoinsViewDBFlush`\r\n|                0.84 |    1,183,775,230.65 |    0.0% |            5.08 |            2.03 |  2.505 |           1.02 |    0.0% |     66.02 | `DataStreamAlloc`\r\n|                0.14 |    6,951,563,016.33 |    0.0% |            1.13 |            0.35 |  3.273 |           0.21 |    0.0% |     66.00 | `DataStreamSerializeScript`\r\n|                9.45 |      105,798,798.06 |    0.3% |           46.75 |           22.67 |  2.062 |           8.46 |    0.5% |     66.14 | `ProcessMessageBlock`\r\n\r\n|            ns/block |             block/s |    err% |       ins/block |       cyc/block |    IPC |      bra/block |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|        4,172,021.00 |              239.69 |    0.1% |   21,543,066.84 |    9,993,817.02 |  2.156 |   3,988,350.18 |    1.0% |     63.92 | `DeserializeAndCheckBlockTest`\r\n|        2,919,977.25 |              342.47 |    0.0% |   14,750,310.48 |    6,994,754.12 |  2.109 |   2,646,087.06 |    0.5% |     66.07 | `DeserializeBlockTest`\r\n\r\n-----\r\n\r\n#### My PR branch with no zero-after-free allocator:\r\n\r\n```console\r\n~/bitcoin $ git checkout --detach $nozero && cmake -B build -DBUILD_BENCH=ON -DCMAKE_BUILD_TYPE=Release &>/dev/null && cmake --build build -j $(nproc) &>/dev/null && ./build/src/bench/bench_bitcoin -filter=\"(DataStream.*|CCoinsViewDB.*|ProcessMessage.*|Deserial.*)\" -min-time=60000\r\nHEAD is now at 906e67b951 refactor: Drop unused `zero_after_free_allocator`\r\n```\r\n\r\n|             ns/byte |              byte/s |    err% |        ins/byte |        cyc/byte |    IPC |       bra/byte |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|               20.89 |       47,868,766.30 |    0.7% |           60.74 |           47.24 |  1.286 |           9.12 |    0.9% |     69.52 | `CCoinsViewDBFlush`\r\n|                0.04 |   27,639,502,423.73 |    0.0% |            0.20 |            0.09 |  2.312 |           0.04 |    0.0% |     66.02 | `DataStreamAlloc`\r\n|                0.14 |    7,030,720,015.31 |    0.0% |            1.09 |            0.34 |  3.203 |           0.22 |    0.0% |     66.03 | `DataStreamSerializeScript`\r\n|                8.46 |      118,171,923.30 |    0.1% |           29.40 |           20.25 |  1.452 |           5.06 |    0.8% |     66.06 | `ProcessMessageBlock`\r\n\r\n|            ns/block |             block/s |    err% |       ins/block |       cyc/block |    IPC |      bra/block |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|        4,111,234.73 |              243.24 |    0.1% |   21,519,664.21 |    9,847,208.26 |  2.185 |   3,965,210.98 |    1.0% |     63.80 | `DeserializeAndCheckBlockTest`\r\n|        2,857,220.97 |              349.99 |    0.1% |   14,727,090.03 |    6,843,201.05 |  2.152 |   2,622,831.00 |    0.5% |     65.95 | `DeserializeBlockTest`\r\n\r\n--------------------\r\n--------------------\r\n\r\n### Ryzen 7900x 5200 MT/s DDR5\r\n\r\n#### Original zero-after-free allocator still in use with DataStream\r\n\r\n```console\r\n~/bitcoin$ git checkout --detach $yeszero && cmake -B build -DBUILD_BENCH=ON -DCMAKE_BUILD_TYPE=Release &>/dev/null && cmake --build build -j $(nproc) &>/dev/null && ./build/src/bench/bench_bitcoin -filter=\"(DataStream.*|CCoinsViewDB.*|ProcessMessage.*|Deserial.*)\" -min-time=60000\r\nHEAD is now at 772b1f606f test: avoid BOOST_CHECK_EQUAL for complex types\r\n```\r\n\r\n|             ns/byte |              byte/s |    err% |        ins/byte |        cyc/byte |    IPC |       bra/byte |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|                6.14 |      162,782,032.39 |    0.7% |           56.96 |           27.77 |  2.051 |           8.25 |    0.7% |     61.54 | `CCoinsViewDBFlush`\r\n|                0.19 |    5,280,744,677.81 |    0.1% |            5.10 |            0.89 |  5.755 |           1.02 |    0.0% |     65.93 | `DataStreamAlloc`\r\n|                0.22 |    4,577,202,378.38 |    0.5% |            5.70 |            1.02 |  5.579 |           1.16 |    0.1% |     66.27 | `DataStreamSerializeScript`\r\n|                2.37 |      422,778,468.05 |    0.2% |           32.39 |           11.06 |  2.929 |           5.12 |    0.6% |     66.04 | `ProcessMessageBlock`\r\n\r\n|            ns/block |             block/s |    err% |       ins/block |       cyc/block |    IPC |      bra/block |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|        1,319,284.06 |              757.99 |    0.4% |   20,617,084.61 |    6,164,538.66 |  3.344 |   3,706,003.42 |    0.7% |     65.82 | `DeserializeAndCheckBlockTest`\r\n|          879,982.73 |            1,136.39 |    0.4% |   14,213,986.82 |    4,113,201.90 |  3.456 |   2,432,431.24 |    0.2% |     65.87 | `DeserializeBlockTest`\r\n\r\n------\r\n\r\n#### Modified zero-after-free allocator that prevents memory optimization but doesn't zero memory.\r\n\r\n```console\r\n~/btc/bitcoin$ git checkout --detach $partzero && cmake -B build -DBUILD_BENCH=ON -DCMAKE_BUILD_TYPE=Release &>/dev/null && cmake --build build -j $(nproc) &>/dev/null && ./build/src/bench/bench_bitcoin -filter=\"(DataStream.*|CCoinsViewDB.*|ProcessMessage.*|Deserial.*)\" -min-time=60000\r\nHEAD is now at 3bdd43680e Modify zero after free allocator to prevent optimizations without zeroing memory\r\n```\r\n\r\n|             ns/byte |              byte/s |    err% |        ins/byte |        cyc/byte |    IPC |       bra/byte |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|                6.24 |      160,226,428.51 |    0.5% |           56.96 |           27.99 |  2.035 |           8.25 |    0.7% |     62.34 | `CCoinsViewDBFlush`\r\n|                0.18 |    5,415,824,062.30 |    0.1% |            5.07 |            0.86 |  5.869 |           1.02 |    0.0% |     65.99 | `DataStreamAlloc`\r\n|                0.21 |    4,715,585,681.78 |    0.1% |            5.62 |            0.99 |  5.664 |           1.14 |    0.1% |     65.93 | `DataStreamSerializeScript`\r\n|                2.36 |      424,307,427.06 |    0.1% |           32.36 |           11.02 |  2.938 |           5.12 |    0.6% |     66.07 | `ProcessMessageBlock`\r\n\r\n|            ns/block |             block/s |    err% |       ins/block |       cyc/block |    IPC |      bra/block |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|        1,304,195.07 |              766.76 |    0.1% |   20,615,353.83 |    6,096,229.68 |  3.382 |   3,705,797.43 |    0.7% |     66.01 | `DeserializeAndCheckBlockTest`\r\n|          876,218.51 |            1,141.27 |    0.0% |   14,212,309.42 |    4,095,993.88 |  3.470 |   2,431,660.20 |    0.2% |     65.98 | `DeserializeBlockTest`\r\n\r\n---------\r\n---------\r\n\r\n#### My PR branch with no zero-after-free allocator:\r\n\r\n```console\r\n~/btc/bitcoin$ git checkout --detach $nozero && cmake -B build -DBUILD_BENCH=ON -DCMAKE_BUILD_TYPE=Release &>/dev/null && cmake --build build -j $(nproc) &>/dev/null && ./build/src/bench/bench_bitcoin -filter=\"(DataStream.*|CCoinsViewDB.*|ProcessMessage.*|Deserial.*)\" -min-time=60000\r\nHEAD is now at 906e67b951 refactor: Drop unused `zero_after_free_allocator`\r\n```\r\n\r\n|             ns/byte |              byte/s |    err% |        ins/byte |        cyc/byte |    IPC |       bra/byte |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|                6.24 |      160,367,026.40 |    0.8% |           57.70 |           28.03 |  2.059 |           8.46 |    0.7% |     62.47 | `CCoinsViewDBFlush`\r\n|                0.01 |  113,328,653,394.82 |    0.0% |            0.12 |            0.04 |  2.854 |           0.02 |    0.0% |     65.69 | `DataStreamAlloc`\r\n|                0.04 |   23,329,286,239.78 |    0.0% |            0.89 |            0.20 |  4.454 |           0.19 |    0.0% |     64.00 | `DataStreamSerializeScript`\r\n|                2.26 |      441,734,425.78 |    0.1% |           29.88 |           10.58 |  2.825 |           4.62 |    0.6% |     65.89 | `ProcessMessageBlock`\r\n\r\n|            ns/block |             block/s |    err% |       ins/block |       cyc/block |    IPC |      bra/block |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|        1,302,825.68 |              767.56 |    0.2% |   20,617,190.29 |    6,090,178.32 |  3.385 |   3,706,032.36 |    0.7% |     65.93 | `DeserializeAndCheckBlockTest`\r\n|          874,097.45 |            1,144.04 |    0.1% |   14,212,631.31 |    4,085,149.78 |  3.479 |   2,431,804.86 |    0.2% |     66.24 | `DeserializeBlockTest`\r\n\r\n--------\r\n--------\r\n\r\n### Ryzen 5 7640U 5600 MT/s DDR5\r\nThis run was done with a slightly updated version of `CCoinsViewDBFlush` from the above runs.\r\n\r\n#### Original zero-after-free allocator still in use with DataStream\r\n\r\n```console\r\n~/bitcoin$ git checkout --detach $yeszero && cmake -B build -DBUILD_BENCH=ON -DCMAKE_BUILD_TYPE=Release &>/dev/null && cmake --build build -j $(nproc) &>/dev/null && ./build/src/bench/bench_bitcoin -filter=\"(DataStream.*|CCoinsViewDB.*|ProcessMessage.*|Deserial.*)\" -min-time=60000\r\nHEAD is now at 970e7822d4 test: avoid BOOST_CHECK_EQUAL for complex types`\r\n```\r\n\r\n|             ns/coin |              coin/s |    err% |        ins/coin |        cyc/coin |    IPC |       bra/coin |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|            1,537.95 |          650,216.26 |    1.0% |        8,199.37 |        5,151.04 |  1.592 |       1,377.36 |    0.8% |     67.93 | `CCoinsViewDBFlush`\r\n\r\n|             ns/byte |              byte/s |    err% |        ins/byte |        cyc/byte |    IPC |       bra/byte |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|                0.02 |   44,829,302,792.99 |    0.2% |            0.16 |            0.08 |  2.009 |           0.03 |    0.0% |     65.87 | `DataStreamAlloc`\r\n|                0.08 |   12,714,010,775.32 |    0.1% |            1.25 |            0.27 |  4.579 |           0.24 |    0.0% |     66.38 | `DataStreamSerializeScript`\r\n|                3.74 |      267,485,270.13 |    0.6% |           31.97 |           12.92 |  2.474 |           5.01 |    0.6% |     63.25 | `ProcessMessageBlock`\r\n\r\n|            ns/block |             block/s |    err% |       ins/block |       cyc/block |    IPC |      bra/block |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|        2,157,061.67 |              463.59 |    0.8% |   21,937,911.43 |    7,472,463.20 |  2.936 |   3,976,431.11 |    0.7% |     66.21 | `DeserializeAndCheckBlockTest`\r\n|        1,523,202.16 |              656.51 |    0.5% |   16,402,554.71 |    5,276,345.85 |  3.109 |   2,930,545.76 |    0.2% |     66.23 | `DeserializeBlockTest`\r\n\r\n----------\r\n\r\n#### Modified zero-after-free allocator that prevents memory optimization but doesn't zero memory.\r\n\r\n```console\r\n~/bitcoin$ git checkout --detach $partzero && cmake -B build -DBUILD_BENCH=ON -DCMAKE_BUILD_TYPE=Release &>/dev/null && cmake --build build -j $(nproc) &>/dev/null && ./build/src/bench/bench_bitcoin -filter=\"(DataStream.*|CCoinsViewDB.*|ProcessMessage.*|Deserial.*)\" -min-time=60000\r\nHEAD is now at c832feda63 Modify zero after free allocator to prevent optimizations without zeroing memory\r\n```\r\n\r\n|             ns/coin |              coin/s |    err% |        ins/coin |        cyc/coin |    IPC |       bra/coin |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|            1,558.58 |          641,609.73 |    0.4% |        8,200.70 |        5,210.43 |  1.574 |       1,377.66 |    0.8% |     69.12 | `CCoinsViewDBFlush`\r\n\r\n|             ns/byte |              byte/s |    err% |        ins/byte |        cyc/byte |    IPC |       bra/byte |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|                0.01 |   71,945,612,656.56 |    0.1% |            0.12 |            0.05 |  2.567 |           0.02 |    0.0% |     65.35 | `DataStreamAlloc`\r\n|                0.06 |   17,044,987,379.75 |    0.3% |            1.16 |            0.20 |  5.685 |           0.21 |    0.0% |     66.07 | `DataStreamSerializeScript`\r\n|                3.67 |      272,659,024.97 |    0.3% |           31.94 |           12.71 |  2.514 |           5.01 |    0.6% |     63.38 | `ProcessMessageBlock`\r\n\r\n|            ns/block |             block/s |    err% |       ins/block |       cyc/block |    IPC |      bra/block |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|        2,131,937.90 |              469.06 |    0.2% |   21,935,850.89 |    7,404,122.77 |  2.963 |   3,975,866.20 |    0.7% |     66.04 | `DeserializeAndCheckBlockTest`\r\n|        1,516,657.38 |              659.34 |    0.3% |   16,397,963.21 |    5,259,062.71 |  3.118 |   2,929,264.57 |    0.2% |     66.02 | `DeserializeBlockTest`\r\n\r\n------\r\n\r\n#### My PR branch with no zero-after-free allocator:\r\n\r\n```console\r\n~/bitcoin$ git checkout --detach $nozero && cmake -B build -DBUILD_BENCH=ON -DCMAKE_BUILD_TYPE=Release &>/dev/null && cmake --build build -j $(nproc) &>/dev/null && ./build/src/bench/bench_bitcoin -filter=\"(DataStream.*|CCoinsViewDB.*|ProcessMessage.*|Deserial.*)\" -min-time=60000\r\nHEAD is now at b5fee2fd09 refactor: Drop unused `zero_after_free_allocator`\r\n```\r\n\r\n|             ns/coin |              coin/s |    err% |        ins/coin |        cyc/coin |    IPC |       bra/coin |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|            1,504.51 |          664,666.35 |    0.9% |        7,902.94 |        5,023.82 |  1.573 |       1,342.60 |    0.8% |     66.38 | `CCoinsViewDBFlush`\r\n\r\n|             ns/byte |              byte/s |    err% |        ins/byte |        cyc/byte |    IPC |       bra/byte |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|                0.01 |   75,642,383,126.35 |    0.3% |            0.12 |            0.05 |  2.695 |           0.02 |    0.0% |     65.00 | `DataStreamAlloc`\r\n|                0.05 |   18,357,256,774.43 |    0.2% |            0.91 |            0.19 |  4.800 |           0.19 |    0.0% |     66.02 | `DataStreamSerializeScript`\r\n|                3.65 |      273,613,395.28 |    0.0% |           31.94 |           12.70 |  2.515 |           5.01 |    0.6% |     63.30 | `ProcessMessageBlock`\r\n\r\n|            ns/block |             block/s |    err% |       ins/block |       cyc/block |    IPC |      bra/block |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|        2,127,133.96 |              470.12 |    0.4% |   21,940,668.03 |    7,392,562.32 |  2.968 |   3,976,863.37 |    0.7% |     66.20 | `DeserializeAndCheckBlockTest`\r\n|        1,512,064.24 |              661.35 |    0.4% |   16,399,530.70 |    5,255,082.56 |  3.121 |   2,929,551.27 |    0.2% |     65.85 | `DeserializeBlockTest`\r\n\r\n</details>\r\n\r\n\r\n[^1]: I'm not very knowledgeable about memory performance, but I suspect the Ryzen 7640U device's memory is faster for reasons beyond the \"max bandwidth\". (5200 MT/s for 7900x, 5600 MT/s for the 7640U) I don't have a reference for this but I believe that the 7640U has a one generation newer memory controller than the Ryzen 7900x, and anecdotally I see better performance doing LLM inference on the CPU of the 7640U,  which is a memory bandwidth bound workload.",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2405956954",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987"
    },
    {
      "event": "mentioned",
      "id": 14596844035,
      "node_id": "MEE_lADOABII586YFxARzwAAAANmCioD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14596844035",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-10T20:12:23Z"
    },
    {
      "event": "subscribed",
      "id": 14596844047,
      "node_id": "SE_lADOABII586YFxARzwAAAANmCioP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14596844047",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-10T20:12:23Z"
    },
    {
      "event": "commented",
      "id": 2406059129,
      "node_id": "IC_kwDOABII586PaYx5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2406059129",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-10T21:21:06Z",
      "updated_at": "2024-10-10T21:21:06Z",
      "author_association": "MEMBER",
      "body": "> I also made a branch([davidgumberg@c832fed](https://github.com/davidgumberg/bitcoin/commit/c832feda63c586094193433a336b930147472285)) with a version of the zero after free allocator that keeps the compiler optimization prevention, but doesn't actually memset the stream to zero, and performance in some cases is only slightly better than master.\r\n\r\nThis is an interesting (and expected, I suppose) takeaway. Sadly, it suggests that there's really nothing that we can do to optimize our implementation. I looked around at clang/gcc/glibc/llvm-libc to see if there are any other ways of handling this, but they all resort to the same memory barrier trick.\r\n\r\nThis is definitely interesting enough to consider disabling selectively, though I'm not convinced we should just nuke it everywhere.\r\n\r\nI know you've already collected a good bit of data on this, but it's still not clear to me _exactly_ why this is speeding up IBD. It could be, for example, that the net messages account for 90% of the memory_cleanse() calls.\r\n\r\nWould you be up for creating a callgraph/flamegraph which shows the hierarchy for these calls? ",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2406059129",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987"
    },
    {
      "event": "commented",
      "id": 2407036182,
      "node_id": "IC_kwDOABII586PeHUW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2407036182",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-11T09:41:29Z",
      "updated_at": "2024-10-13T08:09:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "I have compared the full IBD speed of\r\n* (before) 0449a22bc0: test: avoid BOOST_CHECK_EQUAL for complex types\r\n* (after) 5cf2fefd33: refactor: Drop unused `zero_after_free_allocator`\r\n\r\nThe added test served as a baseline, dropping the zero fee allocator as the purpose of this PR (I know you've added new commits since, let me know if you think that changes the landscape).\r\n\r\nI've used a low, but reasonable 2GB dbcache for the first 800k blocks to measure the underlying database instead of a single final dump with real nodes (which is surprisingly stable, given enough blocks).\r\n\r\nI ran it on a Hetzner HDD, the results are unfortunately not very promising:\r\n\r\n<details>\r\n<summary>benchmark</summary>\r\n\r\n```bash\r\nhyperfine --runs 1 \\\r\n--export-json /mnt/ibd_full-zero_after_free_allocator_change.json \\\r\n--parameter-list COMMIT 0449a22bc0bcd610a898ec921af30175e2b34757,5cf2fefd33907c48f79e444032d79f7c889345d8 \\\r\n--prepare 'git checkout {COMMIT} && git clean -fxd && git reset --hard && cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_UTIL=OFF -DBUILD_TX=OFF -DBUILD_TESTS=OFF -DENABLE_WALLET=OFF -DINSTALL_MAN=OFF && cmake --build build -j$(nproc) && rm -rf /mnt/BitcoinData/*' \\\r\n'COMMIT={COMMIT} ./build/src/bitcoind -datadir=/mnt/BitcoinData -stopatheight=800000 -dbcache=2000 -printtoconsole=0'\r\n```\r\n\r\n</details>\r\n\r\n```bash\r\nBenchmark 1: COMMIT=0449a22bc0bcd610a898ec921af30175e2b34757 ./build/src/bitcoind -datadir=/mnt/BitcoinData -stopatheight=800000 -dbcache=2000 -printtoconsole=0\r\n  Time (abs ≡):        33806.099 s               [User: 27353.365 s, System: 4255.723 s]\r\n\r\nBenchmark 2: COMMIT=5cf2fefd33907c48f79e444032d79f7c889345d8 ./build/src/bitcoind -datadir=/mnt/BitcoinData -stopatheight=800000 -dbcache=2000 -printtoconsole=0\r\n  Time (abs ≡):        33978.406 s               [User: 27050.874 s, System: 4283.780 s]\r\n\r\nSummary\r\n  COMMIT=0449a22bc0bcd610a898ec921af30175e2b34757 ./build/src/bitcoind -datadir=/mnt/BitcoinData -stopatheight=800000 -dbcache=2000 -printtoconsole=0 ran\r\n    1.01 times faster than COMMIT=5cf2fefd33907c48f79e444032d79f7c889345d8 ./build/src/bitcoind -datadir=/mnt/BitcoinData -stopatheight=800000 -dbcache=2000 -printtoconsole=0\r\n```\r\n\r\nso basically this change didn't seem to affect IBD speed at all.\r\nI know that LevelDB is not optimized for HDD, but SSDs are already fast enough.\r\nAm I measuring something incorrectly?",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2407036182",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987"
    },
    {
      "event": "commented",
      "id": 2408875704,
      "node_id": "IC_kwDOABII586PlIa4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2408875704",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-13T08:09:15Z",
      "updated_at": "2024-10-13T08:10:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "I reran it on the same platform until 840000 with 1GB dbcache with the latest commits.\r\n\r\n<details>\r\n<summary>benchmark</summary>\r\n\r\n```bash\r\nhyperfine \\\r\n--runs 1 \\\r\n--export-json /mnt/my_storage/ibd_full-zero_after_free_allocator_change.json \\\r\n--parameter-list COMMIT 1e096b30da808d6b0691f5cde14c529e1c85ff1b,906e67b95157fd557438c37b3085cf5dec2ae135 \\\r\n--prepare 'git checkout {COMMIT} && git clean -fxd && git reset \\\r\n--hard && cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_UTIL=OFF -DBUILD_TX=OFF -DBUILD_TESTS=OFF -DENABLE_WALLET=OFF -DINSTALL_MAN=OFF && cmake \\\r\n--build build -j$(nproc) && rm -rf /mnt/my_storage/BitcoinData/*' 'COMMIT={COMMIT} ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=840000 -dbcache=1000 -printtoconsole=0'\r\n```\r\n\r\n</details>\r\n\r\nI've compared these two:\r\n* (before) 1e096b30da test: refactor: Add RandScript utility\r\n* (after) 906e67b951 refactor: Drop unused `zero_after_free_allocator`\r\n\r\nresults:\r\n\r\n```bash\r\nBenchmark 1: COMMIT=1e096b30da808d6b0691f5cde14c529e1c85ff1b ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=840000 -dbcache=1000 -printtoconsole=0\r\n  Time (abs ≡):        41489.685 s               [User: 35294.609 s, System: 6578.215 s]\r\n\r\nBenchmark 2: COMMIT=906e67b95157fd557438c37b3085cf5dec2ae135 ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=840000 -dbcache=1000 -printtoconsole=0\r\n  Time (abs ≡):        42348.064 s               [User: 35077.894 s, System: 7019.189 s]\r\n\r\nSummary\r\n  COMMIT=1e096b30da808d6b0691f5cde14c529e1c85ff1b ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=840000 -dbcache=1000 -printtoconsole=0 ran\r\n    1.02 times faster than COMMIT=906e67b95157fd557438c37b3085cf5dec2ae135 ./build/src/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=840000 -dbcache=1000 -printtoconsole=0\r\n```\r\n\r\nWhich seems to indicate that there wasn't any speedup after this change.\r\n",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2408875704",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987"
    },
    {
      "event": "commented",
      "id": 2413262312,
      "node_id": "IC_kwDOABII586P13Xo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2413262312",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-15T08:43:25Z",
      "updated_at": "2024-10-17T12:52:08Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. Using zero-after-free allocators for all CDataStream usage is overkill. i don't think there are any, but if there are places where it is used (wallet)  where security against key leaks is important, we could parametrize `CDataStream<AllocatorType>` and pass a `secure_allocator`. Agree that zeroing adding extra security against buffer overflows is a red herring.\r\n\r\ni expect this can make a significant differences on systems with relatively slow CPU or memory, like ARM systems (will run some benchmarks).\r\n\r\n> Any objects that contains secrets should not be allocated using zero_after_free_allocator since they are liable to get mapped to swap space and written to disk if the user is running low on memory\r\n\r\nExactly. We have `secure_allocator` that creates a pool of non-paged memory, as well as zeros on deallocation, `zero_after_free_allocator`s insufficient for this purpose. This is very inefficient, though, so should be used with care.\r\n\r\n**Edit:** Benchmarked on a Rpi5 with NVME hat, synchronizing from a node directly connected over a 1Gbit network ,\r\ncompiler: `gcc (Debian 12.2.0-14) 12.2.0`\r\nbitcoin running with default dbcache setting (450), `-connect=192.168.1.x:8333 -nolisten -stopatheight=800000`\r\n```\r\n0c2c3bb3f5c6f52c8db625c3edb51409c72c14b0  Base\r\n\r\n    2024-10-16T08:14:13Z UpdateTip: new best=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f height=0 version=0x00000001 log2_work=32.000022 tx=1 date='2009-01-03T18:15:05Z' progress=0.000000 cache=0.3MiB(0txo)\r\n    2024-10-16T18:56:56Z UpdateTip: new best=00000000000000000002a7c4c1e48d76c5a37902165a270156b7a8d72728a054 height=800000 version=0x341d6000 log2_work=94.318003 tx=868965226 date='2023-07-24T03:17:09Z' progress=0.792864 cache=508.9MiB(3772216txo)\r\n\r\n    >>> (datetime.datetime.fromisoformat('2024-10-16T18:56:56') - datetime.datetime.fromisoformat('2024-10-16T08:14:13')).seconds\r\n    38563\r\n\r\n906e67b95157fd557438c37b3085cf5dec2ae135  This PR\r\n\r\n    2024-10-15T10:39:43Z UpdateTip: new best=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f height=0 version=0x00000001 log2_work=32.000022 tx=1 date='2009-01-03T18:15:05Z' progress=0.000000 cache=0.3MiB(0txo)\r\n    2024-10-15T21:16:02Z UpdateTip: new best=00000000000000000002a7c4c1e48d76c5a37902165a270156b7a8d72728a054 height=800000 version=0x341d6000 log2_work=94.318003 tx=868965226 date='2023-07-24T03:17:09Z' progress=0.793244 cache=508.9MiB(3772216txo)\r\n```\r\n```python\r\n>>> (datetime.datetime.fromisoformat('2024-10-16T18:56:56') - datetime.datetime.fromisoformat('2024-10-16T08:14:13')).seconds\r\n38563\r\n>>> (datetime.datetime.fromisoformat('2024-10-15T21:16:02') - datetime.datetime.fromisoformat('2024-10-15T10:39:43')).seconds\r\n38179\r\n```\r\nIt is faster but only by roughly 1%.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2413262312",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987"
    },
    {
      "event": "labeled",
      "id": 14754861801,
      "node_id": "LE_lADOABII586YFxARzwAAAANvdVLp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14754861801",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-20T17:51:50Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 14754863162,
      "node_id": "LE_lADOABII586YFxARzwAAAANvdVg6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14754863162",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-20T17:52:02Z",
      "label": {
        "name": "Resource usage",
        "color": "981023"
      }
    },
    {
      "event": "commented",
      "id": 2434146916,
      "node_id": "IC_kwDOABII586RFiJk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2434146916",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T03:07:08Z",
      "updated_at": "2024-10-24T03:07:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Given that others have been unable to reproduce the results that led me to open this PR, I am moving to draft until I better understand either what has gone wrong in my measurements or what setups reproduce the result I got.",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2434146916",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987"
    },
    {
      "event": "convert_to_draft",
      "id": 14838424948,
      "node_id": "CTDE_lADOABII586YFxARzwAAAAN0cGV0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14838424948",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-24T03:07:19Z"
    },
    {
      "event": "labeled",
      "id": 16512564889,
      "node_id": "LE_lADOABII586YFxARzwAAAAPYOb6Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16512564889",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-28T13:37:10Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2690670212,
      "node_id": "IC_kwDOABII586gYF6E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2690670212",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-28T13:37:11Z",
      "updated_at": "2025-02-28T13:37:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/31335813395</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2690670212",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987"
    },
    {
      "event": "commented",
      "id": 2690772278,
      "node_id": "IC_kwDOABII586gYe02",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2690772278",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-28T14:23:21Z",
      "updated_at": "2025-02-28T14:23:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "I have noticed that in debug builds the zeroing is a big part of the IBD flame graphs, but in release mode it's almost completely eliminated.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30987#issuecomment-2690772278",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30987"
    }
  ],
  "comments": []
}