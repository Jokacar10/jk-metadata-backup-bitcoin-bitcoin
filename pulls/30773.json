{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773",
    "id": 2046704398,
    "node_id": "PR_kwDOABII5855_jsO",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30773",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30773.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30773.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30773",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30773/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
    "number": 30773,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Remove unsafe uint256S() and test-only uint160S()",
    "user": {
      "login": "stickies-v",
      "id": 69010457,
      "node_id": "MDQ6VXNlcjY5MDEwNDU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stickies-v",
      "html_url": "https://github.com/stickies-v",
      "followers_url": "https://api.github.com/users/stickies-v/followers",
      "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
      "organizations_url": "https://api.github.com/users/stickies-v/orgs",
      "repos_url": "https://api.github.com/users/stickies-v/repos",
      "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/stickies-v/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "_Continuation of #30569._\r\n\r\nSince https://github.com/bitcoin/bitcoin/commit/fad2991ba073de0bd1f12e42bf0fbaca4a265508, `uint256S()` has been [deprecated](https://github.com/bitcoin/bitcoin/pull/30482/commits/fad2991ba073de0bd1f12e42bf0fbaca4a265508#diff-800776e2dda39116e889839f69409571a5d397de048a141da7e4003bc099e3e2R138) because it is less robust than the `base_blob::FromHex()` introduced in https://github.com/bitcoin/bitcoin/pull/30482. Specifically, it tries to recover from length-mismatches, recover from untrimmed whitespace, 0x-prefix and garbage at the end, instead of simply requiring exactly 64 hex-only characters. (see also https://github.com/bitcoin/bitcoin/pull/30532)\r\n\r\nThis PR removes `uint256S()` (and `uint160S()`) completely, with no non-test behaviour change.\r\n\r\nSpecifically, the main changes in this PR are:\r\n- the (minimal) last non-test usage of `uint256S()` in `ParseHashV()` is removed without behaviour change, which can partially be verified by cherry-picking and/or modifying [this test commit](https://github.com/stickies-v/bitcoin/commit/1f2b0fa86db2ed65476b68417aa1bf4c26026a19)).\r\n- the test usage of `uint{160,256}S()` is removed, largely replacing it with `uint{160,256}::FromHex()` where applicable, potentially modifying the test by removing non-hex characters or dropping the test entirely if removing non-hex characters makes it redundant\r\n- the now unused `uint{160,256}S()` functions are removed completely.\r\n- unit test coverage on converting `uint256` <-> `arith_uint256` through `UintToArith256()` and `ArithToUint256()` is beefed up, and `arith_uint256` tests are moved to `arith_uint256_tests.cpp`, removing the `uint256_tests.cpp` dependency on `uint256h`, mirroring how the code is structured.\r\n\r\n_Note:  `uint256::FromUserHex()` exists to more leniently construct uint256 from user input, allowing \"0x\" prefixes and too-short-input, as safer alternative to `uint256S()` where necessary._ ",
    "labels": [
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2024-08-30T15:37:29Z",
    "updated_at": "2025-09-10T11:39:31Z",
    "closed_at": "2024-09-10T19:41:43Z",
    "mergeable_state": "unknown",
    "merged": true,
    "merged_at": "2024-09-10T19:41:43Z",
    "merged_by": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "c66c68345efb0bb3d5613ebac703cde779fa0f01",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "stickies-v:2024-07/rm-uint256s",
      "ref": "2024-07/rm-uint256s",
      "sha": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 431644530,
        "node_id": "R_kgDOGbpfcg",
        "name": "bitcoin",
        "full_name": "stickies-v/bitcoin",
        "owner": {
          "login": "stickies-v",
          "id": 69010457,
          "node_id": "MDQ6VXNlcjY5MDEwNDU3",
          "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stickies-v",
          "html_url": "https://github.com/stickies-v",
          "followers_url": "https://api.github.com/users/stickies-v/followers",
          "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
          "organizations_url": "https://api.github.com/users/stickies-v/orgs",
          "repos_url": "https://api.github.com/users/stickies-v/repos",
          "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/stickies-v/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/stickies-v/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/stickies-v/bitcoin",
        "archive_url": "https://api.github.com/repos/stickies-v/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/stickies-v/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/stickies-v/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/stickies-v/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/stickies-v/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/stickies-v/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/stickies-v/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/stickies-v/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/stickies-v/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/stickies-v/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/stickies-v/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/stickies-v/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/stickies-v/bitcoin/events",
        "forks_url": "https://api.github.com/repos/stickies-v/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/stickies-v/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/stickies-v/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/stickies-v/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/stickies-v/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/stickies-v/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/stickies-v/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/stickies-v/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/stickies-v/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/stickies-v/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/stickies-v/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/stickies-v/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/stickies-v/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/stickies-v/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/stickies-v/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/stickies-v/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:stickies-v/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/stickies-v/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/stickies-v/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/stickies-v/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/stickies-v/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/stickies-v/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/stickies-v/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/stickies-v/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/stickies-v/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/stickies-v/bitcoin/hooks",
        "svn_url": "https://github.com/stickies-v/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 282053,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-09-09T21:32:50Z",
        "created_at": "2021-11-24T22:26:41Z",
        "updated_at": "2024-06-19T14:39:47Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "a5fa90706addb3ebc4325b139cfebcf9d7ac3045",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37766,
        "stargazers_count": 85433,
        "watchers_count": 85433,
        "size": 293475,
        "default_branch": "master",
        "open_issues_count": 769,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-09-10T11:27:54Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-09-10T11:28:23Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 82,
    "deletions": 151,
    "changed_files": 6,
    "commits": 5,
    "review_comments": 61,
    "comments": 7
  },
  "events": [
    {
      "event": "commented",
      "id": 2321660171,
      "node_id": "IC_kwDOABII586KYbkL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2321660171",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-30T15:37:33Z",
      "updated_at": "2024-09-10T19:40:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30773).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [l0rinc](https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2287480459), [hodlinator](https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2288367006), [ryanofsky](https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2293623641) |\n| Concept ACK | [maflcko](https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2280021001) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#issuecomment-2321660171",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30773"
    },
    {
      "event": "reviewed",
      "id": 2273903849,
      "node_id": "PRR_kwDOABII586HiQTp",
      "url": null,
      "actor": null,
      "commit_id": "eb26946d7acb142e913d30cb9b32c79ba2c019f3",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-31T17:52:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2273903849",
      "submitted_at": "2024-08-31T17:52:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14103763995,
      "node_id": "HRFPE_lADOABII586U3cfNzwAAAANIplwb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14103763995",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "572197f5fe976e13019c9984485229a7ab161787",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/572197f5fe976e13019c9984485229a7ab161787",
      "created_at": "2024-09-02T13:33:17Z"
    },
    {
      "event": "commented",
      "id": 2324784988,
      "node_id": "IC_kwDOABII586KkWdc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2324784988",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T13:38:16Z",
      "updated_at": "2024-09-02T13:38:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force-pushed to add commit 73a126f4f59470d839905d0eaaa26f689f7f2ba1 to remove the test-only `arith_uint256S()` function entirely. Since `arith_uint256` does not have any string string constructors, it uses `uint256` constructors, and those are already unit tested. In some cases, a string constructor can be avoid entirely, e.g. by using the `arith_uint256` `uint64_t` constructor.\r\n\r\nAddresses @l0rinc's review comment about [unnecessary tests](https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1739873354) and [unnecessary docstring](https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1739863841).",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#issuecomment-2324784988",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30773"
    },
    {
      "event": "mentioned",
      "id": 14103830067,
      "node_id": "MEE_lADOABII586U3cfNzwAAAANIp14z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14103830067",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T13:38:17Z"
    },
    {
      "event": "subscribed",
      "id": 14103830084,
      "node_id": "SE_lADOABII586U3cfNzwAAAANIp15E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14103830084",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T13:38:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14104631200,
      "node_id": "HRFPE_lADOABII586U3cfNzwAAAANIs5eg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14104631200",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a9d19ae1aa06f14c1892bb4e37c3f023bc61b39b",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/a9d19ae1aa06f14c1892bb4e37c3f023bc61b39b",
      "created_at": "2024-09-02T14:41:37Z"
    },
    {
      "event": "commented",
      "id": 2324906247,
      "node_id": "IC_kwDOABII586Kk0EH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2324906247",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-02T14:41:58Z",
      "updated_at": "2024-09-02T14:41:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "And force-pushed again to rebase on top of #30377 to avoid silent merge conflicts e.g. because of the now lowercase-only `uint256` hex string constructor.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#issuecomment-2324906247",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30773"
    },
    {
      "event": "reviewed",
      "id": 2275917562,
      "node_id": "PRR_kwDOABII586Hp776",
      "url": null,
      "actor": null,
      "commit_id": "a9d19ae1aa06f14c1892bb4e37c3f023bc61b39b",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-02T15:49:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Minor nit suggestions, ACK a9d19ae1aa06f14c1892bb4e37c3f023bc61b39b",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2275917562",
      "submitted_at": "2024-09-02T15:49:40Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
    },
    {
      "event": "reviewed",
      "id": 2276646525,
      "node_id": "PRR_kwDOABII586Hst59",
      "url": null,
      "actor": null,
      "commit_id": "a9d19ae1aa06f14c1892bb4e37c3f023bc61b39b",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-03T08:25:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK a9d19ae1aa06f14c1892bb4e37c3f023bc61b39b\r\n\r\n`uint256S()` be gone! :)\r\n\r\nChanges as a consequence of removal make sense. Good to see less string parsing testing going on in **arith_uint256_tests.cpp** (covered in recently added `From(User)?Hex`-tests). Arithmetic testing that was going on in **uint256_tests.cpp** has also moved into **arith_uint256_tests.cpp** (`operator_with_self`), could move `conversion`-test too (more in specific comment).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2276646525",
      "submitted_at": "2024-09-03T08:25:12Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14113790209,
      "node_id": "HRFPE_lADOABII586U3cfNzwAAAANJP1kB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14113790209",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9ef049db5ea30f60d0b72714c42c74e2d816c820",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/9ef049db5ea30f60d0b72714c42c74e2d816c820",
      "created_at": "2024-09-03T11:37:19Z"
    },
    {
      "event": "mentioned",
      "id": 14113867777,
      "node_id": "MEE_lADOABII586U3cfNzwAAAANJQIgB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14113867777",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T11:43:44Z"
    },
    {
      "event": "subscribed",
      "id": 14113867795,
      "node_id": "SE_lADOABII586U3cfNzwAAAANJQIgT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14113867795",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T11:43:44Z"
    },
    {
      "event": "mentioned",
      "id": 14113867813,
      "node_id": "MEE_lADOABII586U3cfNzwAAAANJQIgl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14113867813",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T11:43:44Z"
    },
    {
      "event": "subscribed",
      "id": 14113867820,
      "node_id": "SE_lADOABII586U3cfNzwAAAANJQIgs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14113867820",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T11:43:44Z"
    },
    {
      "event": "reviewed",
      "id": 2277180999,
      "node_id": "PRR_kwDOABII586HuwZH",
      "url": null,
      "actor": null,
      "commit_id": "9ef049db5ea30f60d0b72714c42c74e2d816c820",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-03T11:44:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force-pushed to address all review comments by @l0rinc and @hodlinator, thanks for the review!\r\nMostly small style nits, and also added 9ef049db5ea30f60d0b72714c42c74e2d816c820 to move uint256_tests/conversion to arith_uint256_tests [since that better reflects how the code is organized](https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1741633513).",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2277180999",
      "submitted_at": "2024-09-03T11:44:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
    },
    {
      "event": "reviewed",
      "id": 2277432402,
      "node_id": "PRR_kwDOABII586HvtxS",
      "url": null,
      "actor": null,
      "commit_id": "9ef049db5ea30f60d0b72714c42c74e2d816c820",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-03T13:22:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK 9ef049db5ea30f60d0b72714c42c74e2d816c820\r\n\r\n`git range-diff master a9d19ae 9ef049d` showed only small expected edits + new commit to move `conversion`-tests.\r\n\r\n`ctest -j <cores> --test-dir build` passed.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2277432402",
      "submitted_at": "2024-09-03T13:22:16Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
    },
    {
      "event": "review_requested",
      "id": 14115250073,
      "node_id": "RRE_lADOABII586U3cfNzwAAAANJVZ-Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14115250073",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T13:22:20Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2326639869,
      "node_id": "IC_kwDOABII586KrbT9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2326639869",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-03T14:14:17Z",
      "updated_at": "2024-09-03T14:14:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "reACK 9ef049db5ea30f60d0b72714c42c74e2d816c820",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#issuecomment-2326639869",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30773"
    },
    {
      "event": "reviewed",
      "id": 2272815052,
      "node_id": "PRR_kwDOABII586HeGfM",
      "url": null,
      "actor": null,
      "commit_id": "9ef049db5ea30f60d0b72714c42c74e2d816c820",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-03T14:54:13Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2272815052",
      "submitted_at": "2024-09-03T14:54:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14128345265,
      "node_id": "HRFPE_lADOABII586U3cfNzwAAAANKHXCx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14128345265",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e32088b471852676c96abf0ec3f70d7c5a29eb7a",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/e32088b471852676c96abf0ec3f70d7c5a29eb7a",
      "created_at": "2024-09-04T10:43:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14128453735,
      "node_id": "HRFPE_lADOABII586U3cfNzwAAAANKHxhn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14128453735",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "da4377dc2ad0f495ebb97722d6cc2a95850363fa",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/da4377dc2ad0f495ebb97722d6cc2a95850363fa",
      "created_at": "2024-09-04T10:50:30Z"
    },
    {
      "event": "commented",
      "id": 2328592993,
      "node_id": "IC_kwDOABII586Ky4Jh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2328592993",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T11:02:21Z",
      "updated_at": "2024-09-04T11:02:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force-pushed to remove behaviour change in commit \"rpc: use uint256::FromHex for ParseHashV\", addressing @maflcko's [concerns](https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1738970588) over behaviour change. I don't think this is necessarily an improvement, but I appreciate that's my subjective view and the (slight) behaviour change was orthogonal the goal of the PR anyway so it seems like the most pragmatic approach to make progress. Thanks for your review!",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#issuecomment-2328592993",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30773"
    },
    {
      "event": "mentioned",
      "id": 14128635119,
      "node_id": "MEE_lADOABII586U3cfNzwAAAANKIdzv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14128635119",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T11:02:22Z"
    },
    {
      "event": "subscribed",
      "id": 14128635132,
      "node_id": "SE_lADOABII586U3cfNzwAAAANKIdz8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14128635132",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T11:02:22Z"
    },
    {
      "event": "reviewed",
      "id": 2280021001,
      "node_id": "PRR_kwDOABII586H5lwJ",
      "url": null,
      "actor": null,
      "commit_id": "da4377dc2ad0f495ebb97722d6cc2a95850363fa",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-04T13:21:33Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.\r\n\r\nI left another question in the second commit. Sorry for the incremental review.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2280021001",
      "submitted_at": "2024-09-04T13:21:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
    },
    {
      "event": "commented",
      "id": 2329122240,
      "node_id": "IC_kwDOABII586K05XA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2329122240",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T13:48:14Z",
      "updated_at": "2024-09-04T13:48:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK da4377dc2ad0f495ebb97722d6cc2a95850363fa\r\n\r\nI didn't mind the previous version either, but maybe this preserves more of what's not strictly related to the PR.\r\nI think it's an improvement as-is, but I will gladly reack if you decide to include the other reviews as well.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#issuecomment-2329122240",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30773"
    },
    {
      "event": "review_requested",
      "id": 14131591682,
      "node_id": "RRE_lADOABII586U3cfNzwAAAANKTvoC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14131591682",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T13:48:19Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 14131591941,
      "node_id": "RRE_lADOABII586U3cfNzwAAAANKTvsF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14131591941",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T13:48:20Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2280261389,
      "node_id": "PRR_kwDOABII586H6gcN",
      "url": null,
      "actor": null,
      "commit_id": "da4377dc2ad0f495ebb97722d6cc2a95850363fa",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-04T13:48:24Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2280261389",
      "submitted_at": "2024-09-04T13:48:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY1MWIyMzc3MjNiODdkYjcwNmNiY2UyOTM5ZDIwZWIxOTMzMzI3OTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f51b237723b87db706cbce2939d20eb193332799",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f51b237723b87db706cbce2939d20eb193332799",
      "tree": {
        "sha": "ac8f858bbace47b3eb64019993ff37a48594bd00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac8f858bbace47b3eb64019993ff37a48594bd00"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ac8f858bbace47b3eb64019993ff37a48594bd00\nparent 0533e652355a68a2c52fb1524a8033bbb5bfa837\nauthor stickies-v <stickies-v@protonmail.com> 1722000228 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1725464395 +0100\n\nrefactor: rpc: use uint256::FromHex for ParseHashV\n\nuint256S() is deprecated for being unsafe, and will be removed\nin a future commit.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmbYf0sACgkQXLHObl5m\np1fo4Q/9FWYW+imN2e55iCOWUYxjaeL1Pi/ieYFaDb7kzKOiwKN7tkdHf/ru4z3N\n4YDdO0dUZ/JQwbiMYkkVxI4JKFcCpro7ja58KtrT1CdY3FfcPLLh44fHnKWQuVpF\n8Ijiq7Pe3xr9hU1moojtW5ZkzjUrRqHNep3n2VMjR9Qr/Y4tM6FTdJuXbVDj2iBx\n+uvbfS+hO4cjCQUqilUsmD8kzD8xvIqd24l2vHqWLbFoitbs61wJbomohRrgswMk\nOlWrKjyxekrHinSiNnT0UJ63/ULJn/6VilCOYuIXe4jr6eaygNDqlspk1ibKY27Q\nexPmksEbuBAzQNhN8zRFhZx8d7zoPua3Rg4lRvjDS4oQIeRvVDrm8EVqd+wfGPDd\nHFa7uk3o0h9Z+28VuXIk8bF3cAw7+qq2ylpo748d9JmzIommGOMcWlZwmCIl3CUB\nhTPU/7LuXlFayk6la4DKlje1J9B/pVUExrtgyV+vW4t6NiAyS43c5bMDd0hmlKlt\nxpJccXj0ajXTyObIyTQGg/6cH65OamF1hxoCYDVnTp04PF5xPNCCituDR5xY/cI8\nNUi+QFlNS/zDpROSzD1Nk4M20nkzPNip/AaQ+C941cCGnv8pqycmPRaFwio2WNe8\nB/oEoCLqYJ6sKzxwDVQrRCs/J0WRVJC7509+EusVvvIimWOkDU8=\n=ZVXX\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0533e652355a68a2c52fb1524a8033bbb5bfa837",
          "sha": "0533e652355a68a2c52fb1524a8033bbb5bfa837",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0533e652355a68a2c52fb1524a8033bbb5bfa837"
        }
      ],
      "message": "refactor: rpc: use uint256::FromHex for ParseHashV\n\nuint256S() is deprecated for being unsafe, and will be removed\nin a future commit.",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-09-04T15:39:55Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-07-26T13:23:48Z"
      },
      "sha": "f51b237723b87db706cbce2939d20eb193332799"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14133758667,
      "node_id": "HRFPE_lADOABII586U3cfNzwAAAANKcArL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14133758667",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b60013ed71b697bab98884aa475fb64ae7736c2e",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/b60013ed71b697bab98884aa475fb64ae7736c2e",
      "created_at": "2024-09-04T15:56:29Z"
    },
    {
      "event": "commented",
      "id": 2329458177,
      "node_id": "IC_kwDOABII586K2LYB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2329458177",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T16:03:20Z",
      "updated_at": "2024-09-04T16:03:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force-pushed to increase `uint256`/`arith_uint256` conversion tests (hopefully) addressing @maflcko's [concern](https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1743729122), (or at the very least just improving test coverage). To avoid changing the same lines multiple times, I've squashed the `conversion` move commit into 6cfa7f4a0361d9c396d1c5bd71849295baf6290d.\r\n\r\nAlso adopted two style nits on [happy-path](https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1743693696) and [limiting variable scope](https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1743824684).",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#issuecomment-2329458177",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30773"
    },
    {
      "event": "mentioned",
      "id": 14133846939,
      "node_id": "MEE_lADOABII586U3cfNzwAAAANKcWOb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14133846939",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T16:03:22Z"
    },
    {
      "event": "subscribed",
      "id": 14133846974,
      "node_id": "SE_lADOABII586U3cfNzwAAAANKcWO-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14133846974",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T16:03:22Z"
    },
    {
      "event": "reviewed",
      "id": 2280694965,
      "node_id": "PRR_kwDOABII586H8KS1",
      "url": null,
      "actor": null,
      "commit_id": "b60013ed71b697bab98884aa475fb64ae7736c2e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-04T16:21:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK b60013ed71b697bab98884aa475fb64ae7736c2e",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2280694965",
      "submitted_at": "2024-09-04T16:21:14Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
    },
    {
      "event": "reviewed",
      "id": 2284131255,
      "node_id": "PRR_kwDOABII586IJRO3",
      "url": null,
      "actor": null,
      "commit_id": "b60013ed71b697bab98884aa475fb64ae7736c2e",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-05T21:47:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK b60013ed71b697bab98884aa475fb64ae7736c2e\r\n\r\n`git range-diff master 9ef049d b60013`\r\n\r\nCollapsed `conversion` test change into one commit.\r\n\r\nNew `ParseHashV` commit is more user-friendly.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2284131255",
      "submitted_at": "2024-09-05T21:47:46Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFkYzAwYWQ3MjhkZDU0MDg0NjcxMzk4ZjhmYTVjMTJiZTkyZDJiYWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adc00ad728dd54084671398f8fa5c12be92d2bab",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/adc00ad728dd54084671398f8fa5c12be92d2bab",
      "tree": {
        "sha": "74ca280186692f6f65428da27dab55cda89853c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74ca280186692f6f65428da27dab55cda89853c8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 74ca280186692f6f65428da27dab55cda89853c8\nparent f51b237723b87db706cbce2939d20eb193332799\nauthor stickies-v <stickies-v@protonmail.com> 1725283167 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1725636978 +0200\n\ntest: remove test-only arith_uint256S\n\nTests that are solely testing constructing from a hex string\nare dropped, others are modified to use a uint256 constructor\nor the arith_uint256 uint64_t constructor.\n\nSince an arith_uint256 can not be constructed from a string\ndirectly, we need to ensure that test coverage on\nUintToArith256(uint256::FromHex()) is not reduced.\nuint256::FromHex() already has good test coverage, but\nthe test coverage on UintToArith256() and ArithToUint256()\nis increased in this commit by upgrading the `conversion`\ntest case.\n\nMoreover, since `uint256.h` does not have any dependencies\non `arith_uint256.h`, the conversion tests are moved to\n`arith_uint256_tests.cpp` so the dependency can be cleaned\nup entirely in a future commit.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmbbIXIACgkQXLHObl5m\np1cwrA//d9ZVqT6gu/UkMib1pgGOjNFlohWSKWI4kewjxqLJ515FgZtgMaNs5gW3\nhdHOY1iNX4YVBDGUZj2ByExuLTszbdgMjDmE/ZT5rGk6VPlwtyKYihjQk3sVLs+O\nUIx4j4IOmRyzzGv9AzLZ/6h7eP60E3ZT7nGLspW041qX9etDoGiA+Q6Y4LchA7lF\n7U5R5FGqrrphpQyEnS+5UbLWUnNWZ2nRkehO5Hzc83pMqDKblXFH70uEOGSPVV8k\nLBdA3t+KgCYy/qjPR3fxrsUiL5HP0umUZ7LBIThqHgDGzrz3IBsYkErp2RPCmqQv\n4NjM59zyN+Jq1CO0nN7+r/KnXawkX37DB2JSJUSQBnALkinl6cgdyW8UImALD4AG\nHrelmwC1YYolDxPA3E/dMAYOnKtNpk+XJtvLhjdVs9S12/QjHkHkjuD9E4LQ1u17\n1tNu9XFtXHiHwZnQNDha1VpUZszLn5FBg2mBGdK4bY9j+eu2lD6gOjrq7ZdX27Fw\n3ZQCF5yc4ePhp4lms3fcDAJneUKPzYMNe4UDsAyTIkGWAhvjFJn6JQrsfJm0NaBh\nZs56Cj9cmSSsERvTJx3X0JwK2belQ998mPdOeP4ieESrakVzHEzKoU1M5bOHzvgr\nYczPVARlbDeypGS7qHyfki3kcrqSMLDya09aOL9uWXiD90P18DI=\n=FS3L\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f51b237723b87db706cbce2939d20eb193332799",
          "sha": "f51b237723b87db706cbce2939d20eb193332799",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f51b237723b87db706cbce2939d20eb193332799"
        }
      ],
      "message": "test: remove test-only arith_uint256S\n\nTests that are solely testing constructing from a hex string\nare dropped, others are modified to use a uint256 constructor\nor the arith_uint256 uint64_t constructor.\n\nSince an arith_uint256 can not be constructed from a string\ndirectly, we need to ensure that test coverage on\nUintToArith256(uint256::FromHex()) is not reduced.\nuint256::FromHex() already has good test coverage, but\nthe test coverage on UintToArith256() and ArithToUint256()\nis increased in this commit by upgrading the `conversion`\ntest case.\n\nMoreover, since `uint256.h` does not have any dependencies\non `arith_uint256.h`, the conversion tests are moved to\n`arith_uint256_tests.cpp` so the dependency can be cleaned\nup entirely in a future commit.",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-09-06T15:36:18Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-09-02T13:19:27Z"
      },
      "sha": "adc00ad728dd54084671398f8fa5c12be92d2bab"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDYyY2M0NjU2ZTJiYjM4ZjgwNDg1YTEzZDc1YjQyYWRkMDlhNmI3MzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62cc4656e2bb38f80485a13d75b42add09a6b731",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/62cc4656e2bb38f80485a13d75b42add09a6b731",
      "tree": {
        "sha": "54aeea77ea1853d71495ad0ed9e8dcc666e78f3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54aeea77ea1853d71495ad0ed9e8dcc666e78f3a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 54aeea77ea1853d71495ad0ed9e8dcc666e78f3a\nparent adc00ad728dd54084671398f8fa5c12be92d2bab\nauthor stickies-v <stickies-v@protonmail.com> 1722338974 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1725636978 +0200\n\ntest: remove test-only uint256S\n\nuint256S was previously deprecated for being unsafe. All non-test\nusage has already been removed in earlier commits.\n\n1. Tests now use uint256::FromHex() or other constructors wherever\npossible without further modification.\n2. Tests that can't use uint256::FromHex() because they use input\nwith non-hex digit characters are\n  a) modified by dropping the non-hex digit characters if that\n     provides useful test coverage.\n  b) dropped if the test without non-hex digit characters does\n     not provide useful test coverage, e.g. because it is now\n     duplicated.\n\nAdditionally, use BOOST_CHECK_EQUAL where relevant on touched lines\nto make error messages more readable.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmbbIXIACgkQXLHObl5m\np1fnxBAAnVky1RNl/ErnEmdnDco42oONup+Dvy+e8VQkgtDuYO8yltXfdR37Oats\nk0Ww1efBJkMPPhEUXAsaBc+KXd6UBwW6ajhBUMBpd+uFSaBkx4kNj45iGo5tqVSg\n4DPuf7l37nyPB4Flw7Dy9YE2qiKbjobWA7ZxOrqxspz5kc2vS2yYKfpeLAumY3yC\ntYXnwwjSLSxSU+x8dOc/PDYI9dUnPPifl29CUVVgpHJ9eredDEuwclyGvnWe51pE\nAEr93HpYtvt8u3+sYzwGpCQdsQVbYccvVsJz94HIcBu57raugkf+GZJTah03VCH1\nr4E/6BNZ/2Zae60Dz7mhAmL+nC4IfcKRKbGeHfpl2kNHKe8wynW/bz9i+x7HC6NV\nzOvb66ybxu7FKocsGajFw7NBmEgBaBkulIV9GOywNqAu4QKdvdZzy43niMNiAmKP\nTceE21emh/lX5Z7CgCGWTCuhNq6RnfyeYKV9pu9str8Ckj8ZsjO3hvmKY+AXdRiz\ngfG2TpFgYSQs0OJnd9NhvMgZ3MQ63XUdk7LFFWoSLNQCau5jGYts7/AWJYB9GeWu\nqHYXltxtXTlcvwbd0k5PIFUD5gIMyvyWVBau+TglMD+zTTfiawRvcH1iwDscwgTB\n8MF2FU6ZgbQXeQR6jlc+zv8bDCdOR8kM4x0AeQ/6LsAE9BOHNDc=\n=qH1c\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adc00ad728dd54084671398f8fa5c12be92d2bab",
          "sha": "adc00ad728dd54084671398f8fa5c12be92d2bab",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/adc00ad728dd54084671398f8fa5c12be92d2bab"
        }
      ],
      "message": "test: remove test-only uint256S\n\nuint256S was previously deprecated for being unsafe. All non-test\nusage has already been removed in earlier commits.\n\n1. Tests now use uint256::FromHex() or other constructors wherever\npossible without further modification.\n2. Tests that can't use uint256::FromHex() because they use input\nwith non-hex digit characters are\n  a) modified by dropping the non-hex digit characters if that\n     provides useful test coverage.\n  b) dropped if the test without non-hex digit characters does\n     not provide useful test coverage, e.g. because it is now\n     duplicated.\n\nAdditionally, use BOOST_CHECK_EQUAL where relevant on touched lines\nto make error messages more readable.",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-09-06T15:36:18Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-07-30T11:29:34Z"
      },
      "sha": "62cc4656e2bb38f80485a13d75b42add09a6b731"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM2Yzk5NGNiMmI5YWY1OGIxYzBlNTU0MjU1ZDFhM2JlNzg1ZThkNTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6c994cb2b9af58b1c0e554255d1a3be785e8d56",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c994cb2b9af58b1c0e554255d1a3be785e8d56",
      "tree": {
        "sha": "ef1f2f528a8ba613cce3d3fb3fb29db6ccf364b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef1f2f528a8ba613cce3d3fb3fb29db6ccf364b0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ef1f2f528a8ba613cce3d3fb3fb29db6ccf364b0\nparent 62cc4656e2bb38f80485a13d75b42add09a6b731\nauthor stickies-v <stickies-v@protonmail.com> 1722526541 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1725636987 +0200\n\ntest: remove test-only uint160S\n\nuint160S is a test-only function, and testing input that\nis not allowed in uint160::FromHex() is superfluous.\n\nTests that can't use uint160::FromHex() because they use input\nwith non-hex digit characters are\na) modified by dropping the non-hex digit characters if that\nprovides useful test coverage.\nb) dropped if the test without non-hex digit characters does\nnot provide useful test coverage, e.g. because it is now\nduplicated.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmbbIXsACgkQXLHObl5m\np1e34w//WVJIfVC6zoB0sCVy106kUdWwWKv4Qq4PeMRy7vpUMUAXm9H+GBQc44Kg\ntylhUbREKMucOQk8p60vTOpbx3sUBrQBrhoCdAY0pezFyJvhcwbhuXgQ3HEXWAn4\np0f2Fv8W7lg0/On+wro7fa3AO6Tfg2sj1BooHmuR9TusCrDVQ8iiVUSWH4TeEbUz\n+o2xHJXlF6jCDmAl2vwhCxzORvCnVCxaUHRUKy0B4oOwluKN4QaUrr1f8iZ0CR9M\nJ2/Z7IF7eJzYzcTZNZseavz2JxwgyXfloYq+XM+yRgx7Cr9fJMdzH46y25JhX1JL\n9X7Nr+z2eW8rhbAW+RMSzRUAvMpqJSy83wa0mKL4TihX8jjO31nXGy50ly7cZLRk\nHYN7gldK5kfU7izacS9Ul4y/GgMQbKO6Zk8AGhcPzJRWLEeSwMxkkZzDSD0+K27i\nGdTmFuim6qqw1xyWCWGFEiZOSwwFKE8BnecZWRFKEbR4cb8n/ltbJR0Oh7mteatn\n41o4pKkh1F6en6er+pThR4w+wjOxjgs+CTc4vImCU7L8zguA41TLXCRuUc7DNUg7\nCpNv2G3Y88YbmjWTPN7I7mGSey9E7Uey86U8Ok4APlPr7PutIPfzLVWQUwMZY9Pr\nIeTA5HeLgDPmvuE5ZTJPWypG8NSqnE+vvEVGbBBt2GOTaxSCnqg=\n=GIO7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62cc4656e2bb38f80485a13d75b42add09a6b731",
          "sha": "62cc4656e2bb38f80485a13d75b42add09a6b731",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/62cc4656e2bb38f80485a13d75b42add09a6b731"
        }
      ],
      "message": "test: remove test-only uint160S\n\nuint160S is a test-only function, and testing input that\nis not allowed in uint160::FromHex() is superfluous.\n\nTests that can't use uint160::FromHex() because they use input\nwith non-hex digit characters are\na) modified by dropping the non-hex digit characters if that\nprovides useful test coverage.\nb) dropped if the test without non-hex digit characters does\nnot provide useful test coverage, e.g. because it is now\nduplicated.",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-09-06T15:36:27Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-01T15:35:41Z"
      },
      "sha": "c6c994cb2b9af58b1c0e554255d1a3be785e8d56"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQzY2Q4M2IwYzdiYTQzNmI4ZmZjODNkOGE2NWU5MzU3MTRkZmZlNzA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "tree": {
        "sha": "f004b8a2be0728c1d1b951e18957f2673ce95b4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f004b8a2be0728c1d1b951e18957f2673ce95b4e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f004b8a2be0728c1d1b951e18957f2673ce95b4e\nparent c6c994cb2b9af58b1c0e554255d1a3be785e8d56\nauthor stickies-v <stickies-v@protonmail.com> 1725027605 +0100\ncommitter stickies-v <stickies-v@protonmail.com> 1725636988 +0200\n\ntest: move uint256_tests/operator_with_self to arith_uint256_tests\n\nmove/formatting-only change.\n\nThese tests do not cover uint256, so move them to the appropriate\ntest suite. Additionally, apply clang-format suggestions.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5g/ggIZt5fccjfOgXLHObl5mp1cFAmbbIXwACgkQXLHObl5m\np1eYiRAAhDYtF88vVhER4+MOIQmK26fxty6NZievVYUkAdwwrBq4eHlGI1cmFSEE\nAnlP9m3G+uzJehFEsh/xV+COmET+p5CrhDCYXw+UUvPGZzuTsRCOeiYzQQ+wrsLA\nJENijaDUFxYo1L9g3r7ecJL4jK+Mpn3YvgRRgeovQGv23NNw/kl4EB1zAhB4ERIE\n1QMTiDyFEwLBIpnmLDNtq0Ko91WowzLRUxN7/oSI5JO8iHB5CVkJMoKDmC4zKhvE\n8SMH6L7yV1RiP4VC2jOLNxI3gtjJMT0eqrvK6dKXs62Zi1yXESWGL+GJFjtPY1eu\nUhiq7KYqOuUhvjMVDNmK7D5XjSp995Df+jFo3oLRmRm44vyANfF7YmlsGSV7cn1v\n11jgHHT0YVKODDjlvjspSXgI8JA04L8h/R0ZgzbhWIlMpgNEvbq50Fh0P2hSqkKn\nqA7btRUrsEzCjFQN8um8W3Sge71lxWWPPQkY+IesESb6yFcu1BU2RoMdawU2uiSS\n5DgIN8tGY5ihjc6OXZ9adKfFUp8nemTfB1huijL03KjG9ZpQlaEZAAilHkfrKqNq\nezMidBPzUMFtryDIRLdm6wni4JCBJQiK2VGOMSPXwhKbuAkkiUKI/UBp/7kCBMz9\no398DLcuRZN9M73XvjEbpETL0YlaFvNTwSYiCjghzvYN1pFNQAc=\n=TeqR\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6c994cb2b9af58b1c0e554255d1a3be785e8d56",
          "sha": "c6c994cb2b9af58b1c0e554255d1a3be785e8d56",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c994cb2b9af58b1c0e554255d1a3be785e8d56"
        }
      ],
      "message": "test: move uint256_tests/operator_with_self to arith_uint256_tests\n\nmove/formatting-only change.\n\nThese tests do not cover uint256, so move them to the appropriate\ntest suite. Additionally, apply clang-format suggestions.",
      "committer": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-09-06T15:36:28Z"
      },
      "author": {
        "name": "stickies-v",
        "email": "stickies-v@protonmail.com",
        "date": "2024-08-30T14:20:05Z"
      },
      "sha": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14164269872,
      "node_id": "HRFPE_lADOABII586U3cfNzwAAAANMQZsw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14164269872",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "commit_url": "https://api.github.com/repos/stickies-v/bitcoin/commits/43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "created_at": "2024-09-06T15:54:12Z"
    },
    {
      "event": "reviewed",
      "id": 2286282737,
      "node_id": "PRR_kwDOABII586IRefx",
      "url": null,
      "actor": null,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-06T15:56:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "Force-pushed to [add back in some previously removed unit tests](https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1745868679) to help make this PR easier to review, and [added an extra conversion test](https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1746191005). Test-only changes, so hopefully pretty straightforward to re-review. Thanks, everyone!",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2286282737",
      "submitted_at": "2024-09-06T15:56:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
    },
    {
      "event": "labeled",
      "id": 14168472656,
      "node_id": "LE_lADOABII586U3cfNzwAAAANMgbxQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14168472656",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-07T05:17:13Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2287480459,
      "node_id": "PRR_kwDOABII586IWC6L",
      "url": null,
      "actor": null,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-07T13:09:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "reACK 43cd83b0c7ba436b8ffc83d8a65e935714dffe70\r\nThanks for your perseverance!\r\n(note: the build failure seems unrealated)",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2287480459",
      "submitted_at": "2024-09-07T12:01:07Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
    },
    {
      "event": "review_requested",
      "id": 14169203157,
      "node_id": "RRE_lADOABII586U3cfNzwAAAANMjOHV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14169203157",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-07T12:01:11Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2288367006,
      "node_id": "PRR_kwDOABII586IZbWe",
      "url": null,
      "actor": null,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-07T20:17:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK 43cd83b0c7ba436b8ffc83d8a65e935714dffe70\r\n\r\n`git range-diff 43cd83b~5 b60013 43cd83b`\r\n\r\n- Added back slightly useless \"Construct from hex string\" section to make the PR more straight-forward to review (and commit history arguably cleaner as a consequence).\r\n- Added half of my suggestion for bringing back testing against integer literals in `conversion` test. :+1:\r\n\r\n(Passed `ctest` locally).\r\n\r\nAgree with l0rinc's nits though (https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1748063177). Happy to re-ACK again if you incorporate them.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2288367006",
      "submitted_at": "2024-09-07T20:17:58Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
    },
    {
      "event": "reviewed",
      "id": 2293623641,
      "node_id": "PRR_kwDOABII586ItetZ",
      "url": null,
      "actor": null,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-09-10T19:40:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 43cd83b0c7ba436b8ffc83d8a65e935714dffe70. Only code change is a small refactoring which looks good. The rest of the PR is all test changes, which I only lightly reviewed, but seem to be positive and do what's described",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#pullrequestreview-2293623641",
      "submitted_at": "2024-09-10T19:40:43Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
    },
    {
      "event": "merged",
      "id": 14204810649,
      "node_id": "ME_lADOABII586U3cfNzwAAAANOrDWZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14204810649",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c66c68345efb0bb3d5613ebac703cde779fa0f01",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c66c68345efb0bb3d5613ebac703cde779fa0f01",
      "created_at": "2024-09-10T19:41:43Z"
    },
    {
      "event": "closed",
      "id": 14204810680,
      "node_id": "CE_lADOABII586U3cfNzwAAAANOrDW4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14204810680",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-10T19:41:43Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 14205306161,
      "node_id": "HRDE_lADOABII586U3cfNzwAAAANOs8Ux",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14205306161",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-10T20:26:57Z"
    },
    {
      "event": "referenced",
      "id": 14270749960,
      "node_id": "REFE_lADOABII586U3cfNzwAAAANSml0I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14270749960",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "69282950aaf39ce140791a9b6def41cbd3ba974f",
      "commit_url": "https://api.github.com/repos/TheCharlatan/rust-bitcoinkernel/commits/69282950aaf39ce140791a9b6def41cbd3ba974f",
      "created_at": "2024-09-16T10:46:09Z"
    },
    {
      "event": "referenced",
      "id": 14270750864,
      "node_id": "REFE_lADOABII586U3cfNzwAAAANSmmCQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14270750864",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "dfe0cd4ec5345db72b56b6e4d59f0a58e2df99df",
      "commit_url": "https://api.github.com/repos/TheCharlatan/rust-bitcoinkernel/commits/dfe0cd4ec5345db72b56b6e4d59f0a58e2df99df",
      "created_at": "2024-09-16T10:46:13Z"
    },
    {
      "event": "locked",
      "id": 19611139408,
      "node_id": "LOE_lADOABII586U3cfNzwAAAASQ6j1Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19611139408",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-10T11:39:31Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738970588",
      "pull_request_review_id": 2272815052,
      "id": 1738970588,
      "node_id": "PRRC_kwDOABII585nppXc",
      "diff_hunk": "@@ -101,12 +101,10 @@ CFeeRate ParseFeeRate(const UniValue& json)\n \n uint256 ParseHashV(const UniValue& v, std::string_view name)\n {\n-    const std::string& strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\n-    return uint256S(strHex);\n+    if (auto rv{uint256::FromHex(v.get_str())}) {\n+        return *rv;\n+    }\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be string of %d hex digits (not '%s')\", name, uint256::size() * 2, v.get_str()));",
      "path": "src/rpc/util.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "eb26946d7acb142e913d30cb9b32c79ba2c019f3",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be string of %d hex digits (not '%s' with len %s)\", name, uint256::size() * 2, v.get_str(), len));\r\n```",
      "created_at": "2024-08-30T15:41:41Z",
      "updated_at": "2024-09-03T14:54:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1738970588",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738970588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1739862015",
      "pull_request_review_id": 2273903849,
      "id": 1739862015,
      "node_id": "PRRC_kwDOABII585ntC__",
      "diff_hunk": "@@ -101,12 +101,10 @@ CFeeRate ParseFeeRate(const UniValue& json)\n \n uint256 ParseHashV(const UniValue& v, std::string_view name)",
      "path": "src/rpc/util.cpp",
      "position": 9,
      "original_position": 2,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "abcdd3898fd6fef1c1f5bad21e40b1997a953bed",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "it seems to me `ParseHashV` doesn't have dedicated unit tests (only fuzz, without validation).\r\nIf you don't think it's overkill, could you please add one before this commit - to make absolutely sure that the two behaviors are the same...\r\n\r\n(Q: what should happen when `v.isStr()` is false?)",
      "created_at": "2024-08-31T17:34:01Z",
      "updated_at": "2024-08-31T17:52:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1739862015",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1739862015"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 103,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1739863841",
      "pull_request_review_id": 2273903849,
      "id": 1739863841,
      "node_id": "PRRC_kwDOABII585ntDch",
      "diff_hunk": "@@ -23,8 +23,8 @@ static inline arith_uint256 arith_uint256V(const std::vector<unsigned char>& vch\n {\n     return UintToArith256(uint256(vch));\n }\n-// Takes a number written in hex (with most significant digits first).\n-static inline arith_uint256 arith_uint256S(std::string_view str) { return UintToArith256(uint256S(str)); }\n+// Construct an arith_uint256 from a 64 hex digits string (with most significant digits first).",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "f7b4ab871dc4c4863a39a481f6757380f68f0b9e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not a big fan of expressing code structure with dead comments - would it be possible to reorganize the code instead so that we don't need the comment? E.g. by giving a more meaningful parameter name such as `std::string_view hex`? The 64 char seems unnecessary here, it's a simple calculation from the return value.",
      "created_at": "2024-08-31T17:36:28Z",
      "updated_at": "2024-08-31T17:52:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1739863841",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1739863841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1739873354",
      "pull_request_review_id": 2273903849,
      "id": 1739873354,
      "node_id": "PRRC_kwDOABII585ntFxK",
      "diff_hunk": "@@ -98,26 +98,23 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n     // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R2L.ToString()) == R2L);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + ZeroL.ToString()) == ZeroL);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + OneL.ToString()) == OneL);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + MaxL.ToString()) == MaxL);\n-    BOOST_CHECK(arith_uint256S(R1L.ToString()) == R1L);\n-    BOOST_CHECK(arith_uint256S(\"   0x\" + R1L.ToString() + \"   \") == R1L);\n-    BOOST_CHECK(arith_uint256S(\"\") == ZeroL);\n-    BOOST_CHECK(arith_uint256S(\"1\") == OneL);\n-    BOOST_CHECK(R1L == arith_uint256S(R1ArrayHex));\n-    BOOST_CHECK(arith_uint256(R1L) == R1L);\n-    BOOST_CHECK((arith_uint256(R1L^R2L)^R2L) == R1L);\n-    BOOST_CHECK(arith_uint256(ZeroL) == ZeroL);\n-    BOOST_CHECK(arith_uint256(OneL) == OneL);\n+    BOOST_CHECK_EQUAL(arith_uint256S(R1L.ToString()), R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "f7b4ab871dc4c4863a39a481f6757380f68f0b9e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "do all of these tests still make sense without the extra `0x` prefix (and whitespace)?\r\nSeems like that's what some of them were testing here basically",
      "created_at": "2024-08-31T17:48:12Z",
      "updated_at": "2024-08-31T17:52:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1739873354",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1739873354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1740791280",
      "pull_request_review_id": 2275437310,
      "id": 1740791280,
      "node_id": "PRRC_kwDOABII585nwl3w",
      "diff_hunk": "@@ -101,12 +101,10 @@ CFeeRate ParseFeeRate(const UniValue& json)\n \n uint256 ParseHashV(const UniValue& v, std::string_view name)",
      "path": "src/rpc/util.cpp",
      "position": 9,
      "original_position": 2,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "abcdd3898fd6fef1c1f5bad21e40b1997a953bed",
      "in_reply_to_id": 1739862015,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure if it makes sense adding it to this branch, because I think the tests should be removed after switching `ParseHashV` to use `uint256::FromHex()` so that would probably create a bit too much unnecessary churn, but here's a commit (to which you can easily add additional inputs) you can cherry-pick that verifies the parity of both functions (_edit: added to PR description)_:\r\n\r\nhttps://github.com/stickies-v/bitcoin/commit/1f2b0fa86db2ed65476b68417aa1bf4c26026a19\r\n\r\n> (Q: what should happen when v.isStr() is false?)\r\n\r\nI don't think this commit involves `v.isStr()`, I presume you mean `v.get_str()`? It appears to me that behaviour is unchanged, and both on master as well as in this PR a `type_error` would be thrown if `v` is not a string type?",
      "created_at": "2024-09-02T11:54:30Z",
      "updated_at": "2024-09-02T13:32:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1740791280",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1740791280"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 103,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1740800983",
      "pull_request_review_id": 2275453623,
      "id": 1740800983,
      "node_id": "PRRC_kwDOABII585nwoPX",
      "diff_hunk": "@@ -23,8 +23,8 @@ static inline arith_uint256 arith_uint256V(const std::vector<unsigned char>& vch\n {\n     return UintToArith256(uint256(vch));\n }\n-// Takes a number written in hex (with most significant digits first).\n-static inline arith_uint256 arith_uint256S(std::string_view str) { return UintToArith256(uint256S(str)); }\n+// Construct an arith_uint256 from a 64 hex digits string (with most significant digits first).",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "f7b4ab871dc4c4863a39a481f6757380f68f0b9e",
      "in_reply_to_id": 1739863841,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I'm not a big fan of expressing code structure with dead comments \r\n\r\nI agree, but I'm not sure this is a dead comment? I don't think `hex` would be a better parameter name, because it's not validated to be a hex string yet, could be anything. The \"64 hex digit\" bit helps developers that want to use this utility function quickly understand how to use it, as does the \"most significant digits first\" bit. \r\n\r\nI'd be okay with not having the string too, but it feels rather arbitrary so I'd rather leave as is (with slight fix).",
      "created_at": "2024-09-02T12:02:19Z",
      "updated_at": "2024-09-02T12:02:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1740800983",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1740800983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1740942391",
      "pull_request_review_id": 2275693332,
      "id": 1740942391,
      "node_id": "PRRC_kwDOABII585nxKw3",
      "diff_hunk": "@@ -98,26 +98,23 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n     // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R2L.ToString()) == R2L);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + ZeroL.ToString()) == ZeroL);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + OneL.ToString()) == OneL);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + MaxL.ToString()) == MaxL);\n-    BOOST_CHECK(arith_uint256S(R1L.ToString()) == R1L);\n-    BOOST_CHECK(arith_uint256S(\"   0x\" + R1L.ToString() + \"   \") == R1L);\n-    BOOST_CHECK(arith_uint256S(\"\") == ZeroL);\n-    BOOST_CHECK(arith_uint256S(\"1\") == OneL);\n-    BOOST_CHECK(R1L == arith_uint256S(R1ArrayHex));\n-    BOOST_CHECK(arith_uint256(R1L) == R1L);\n-    BOOST_CHECK((arith_uint256(R1L^R2L)^R2L) == R1L);\n-    BOOST_CHECK(arith_uint256(ZeroL) == ZeroL);\n-    BOOST_CHECK(arith_uint256(OneL) == OneL);\n+    BOOST_CHECK_EQUAL(arith_uint256S(R1L.ToString()), R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 1,
      "original_position": 29,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "f7b4ab871dc4c4863a39a481f6757380f68f0b9e",
      "in_reply_to_id": 1739873354,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I had the same intuition, but kept them to be safe. Looking at it again, I agree with your view that they can be safely removed, so I've added a new commit 73a126f4f59470d839905d0eaaa26f689f7f2ba1 to do that and clean up the `arith_uint256S()` function entirely. Thanks!",
      "created_at": "2024-09-02T13:39:03Z",
      "updated_at": "2024-09-02T13:39:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1740942391",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1740942391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1740942976",
      "pull_request_review_id": 2275694358,
      "id": 1740942976,
      "node_id": "PRRC_kwDOABII585nxK6A",
      "diff_hunk": "@@ -23,8 +23,8 @@ static inline arith_uint256 arith_uint256V(const std::vector<unsigned char>& vch\n {\n     return UintToArith256(uint256(vch));\n }\n-// Takes a number written in hex (with most significant digits first).\n-static inline arith_uint256 arith_uint256S(std::string_view str) { return UintToArith256(uint256S(str)); }\n+// Construct an arith_uint256 from a 64 hex digits string (with most significant digits first).",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "f7b4ab871dc4c4863a39a481f6757380f68f0b9e",
      "in_reply_to_id": 1739863841,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Resolved by [removing the function altogether](https://github.com/bitcoin/bitcoin/commit/73a126f4f59470d839905d0eaaa26f689f7f2ba1).",
      "created_at": "2024-09-02T13:39:34Z",
      "updated_at": "2024-09-02T13:39:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1740942976",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1740942976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741063319",
      "pull_request_review_id": 2275888717,
      "id": 1741063319,
      "node_id": "PRRC_kwDOABII585nxoSX",
      "diff_hunk": "@@ -101,12 +101,10 @@ CFeeRate ParseFeeRate(const UniValue& json)\n \n uint256 ParseHashV(const UniValue& v, std::string_view name)",
      "path": "src/rpc/util.cpp",
      "position": 9,
      "original_position": 2,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "abcdd3898fd6fef1c1f5bad21e40b1997a953bed",
      "in_reply_to_id": 1739862015,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I presume you mean v.get_str()\r\n\r\nNo, I meant when it doesn't actually store a string, what should be the error.\r\n\r\n> It appears to me that behaviour is unchanged\r\n\r\nYes, it's just that it's a hidden error which would be eliminated if `ParseHashV` accepted a `string_view` instead of a `UniValue`.\r\nI understand if it's outside the scope, just noting that there's another path that we might want to consider when evaluating the correctness of the method.\r\nPulling the method to the parameter would make the type errors slightly more informative and would reduce the `get_str` calls inside `ParseHashV` - possibly opening this method up for other uses where we only have a string instead of a `UniValue`.",
      "created_at": "2024-09-02T15:22:40Z",
      "updated_at": "2024-09-02T15:27:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1741063319",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741063319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 103,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741075923",
      "pull_request_review_id": 2275908296,
      "id": 1741075923,
      "node_id": "PRRC_kwDOABII585nxrXT",
      "diff_hunk": "@@ -101,12 +101,10 @@ CFeeRate ParseFeeRate(const UniValue& json)\n \n uint256 ParseHashV(const UniValue& v, std::string_view name)",
      "path": "src/rpc/util.cpp",
      "position": 9,
      "original_position": 2,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "abcdd3898fd6fef1c1f5bad21e40b1997a953bed",
      "in_reply_to_id": 1739862015,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> No, I meant when it doesn't actually store a string, what should be the error.\r\n\r\nYes, that's what the `v.get_str()` call checks internally, and it throws a `type_error` if so. Have a look at the `UniValue::get_str()` implementation? (Note that user input type validation happens in `RPCHelpMan::HandleRequest()`, but of course this can still happen through internal bugs).\r\n\r\n>  I understand if it's outside the scope\r\n\r\nYeah it's quite orthogonal to this PR, given the number of callsites of `ParseHashV()`, so I'm not going to change that here. I am generally in favour of pushing UniValue user input parsing into stricter types further back to the edges, though.",
      "created_at": "2024-09-02T15:35:43Z",
      "updated_at": "2024-09-02T15:35:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1741075923",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741075923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 103,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741081872",
      "pull_request_review_id": 2275917562,
      "id": 1741081872,
      "node_id": "PRRC_kwDOABII585nxs0Q",
      "diff_hunk": "@@ -97,27 +91,17 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R2L.ToString()) == R2L);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + ZeroL.ToString()) == ZeroL);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + OneL.ToString()) == OneL);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + MaxL.ToString()) == MaxL);\n-    BOOST_CHECK(arith_uint256S(R1L.ToString()) == R1L);\n-    BOOST_CHECK(arith_uint256S(\"   0x\" + R1L.ToString() + \"   \") == R1L);\n-    BOOST_CHECK(arith_uint256S(\"\") == ZeroL);\n-    BOOST_CHECK(arith_uint256S(\"1\") == OneL);\n-    BOOST_CHECK(R1L == arith_uint256S(R1ArrayHex));\n+    // Copy Constructor\n     BOOST_CHECK(arith_uint256(R1L) == R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 43,
      "original_position": 39,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "5621b98fae306627da0ccb880d53efce21b0d208",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "since we've already included `setup_common` which contains `std::ostream& operator<<(std::ostream& os, const arith_uint256& num)` we might as well use `BOOST_CHECK_EQUAL` here:\r\n```diff\r\ndiff --git a/src/test/arith_uint256_tests.cpp b/src/test/arith_uint256_tests.cpp\r\nindex a434a1d401..9a6307c1bd 100644\r\n--- a/src/test/arith_uint256_tests.cpp\r\n+++ b/src/test/arith_uint256_tests.cpp\r\n@@ -64,51 +64,50 @@ static std::string ArrayToString(const unsigned char A[], unsigned int width)\r\n \r\n BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\r\n {\r\n-    BOOST_CHECK(1 == 0+1);\r\n     // constructor arith_uint256(vector<char>):\r\n-    BOOST_CHECK(R1L.ToString() == ArrayToString(R1Array,32));\r\n-    BOOST_CHECK(R2L.ToString() == ArrayToString(R2Array,32));\r\n-    BOOST_CHECK(ZeroL.ToString() == ArrayToString(ZeroArray,32));\r\n-    BOOST_CHECK(OneL.ToString() == ArrayToString(OneArray,32));\r\n-    BOOST_CHECK(MaxL.ToString() == ArrayToString(MaxArray,32));\r\n-    BOOST_CHECK(OneL.ToString() != ArrayToString(ZeroArray,32));\r\n+    BOOST_CHECK_EQUAL(R1L.ToString(), ArrayToString(R1Array, 32));\r\n+    BOOST_CHECK_EQUAL(R2L.ToString(), ArrayToString(R2Array, 32));\r\n+    BOOST_CHECK_EQUAL(ZeroL.ToString(), ArrayToString(ZeroArray, 32));\r\n+    BOOST_CHECK_EQUAL(OneL.ToString(), ArrayToString(OneArray, 32));\r\n+    BOOST_CHECK_EQUAL(MaxL.ToString(), ArrayToString(MaxArray, 32));\r\n+    BOOST_CHECK_NE(OneL.ToString(), ArrayToString(ZeroArray, 32));\r\n \r\n     // == and !=\r\n-    BOOST_CHECK(R1L != R2L);\r\n-    BOOST_CHECK(ZeroL != OneL);\r\n-    BOOST_CHECK(OneL != ZeroL);\r\n-    BOOST_CHECK(MaxL != ZeroL);\r\n-    BOOST_CHECK(~MaxL == ZeroL);\r\n-    BOOST_CHECK( ((R1L ^ R2L) ^ R1L) == R2L);\r\n+    BOOST_CHECK_NE(R1L, R2L);\r\n+    BOOST_CHECK_NE(ZeroL, OneL);\r\n+    BOOST_CHECK_NE(OneL, ZeroL);\r\n+    BOOST_CHECK_NE(MaxL, ZeroL);\r\n+    BOOST_CHECK_EQUAL(~MaxL, ZeroL);\r\n+    BOOST_CHECK_EQUAL((R1L ^ R2L) ^ R1L, R2L);\r\n \r\n     uint64_t Tmp64 = 0xc4dab720d9c7acaaULL;\r\n     for (unsigned int i = 0; i < 256; ++i)\r\n     {\r\n-        BOOST_CHECK(ZeroL != (OneL << i));\r\n-        BOOST_CHECK((OneL << i) != ZeroL);\r\n-        BOOST_CHECK(R1L != (R1L ^ (OneL << i)));\r\n-        BOOST_CHECK(((arith_uint256(Tmp64) ^ (OneL << i) ) != Tmp64 ));\r\n+        BOOST_CHECK_NE(ZeroL, OneL << i);\r\n+        BOOST_CHECK_NE(OneL << i, ZeroL);\r\n+        BOOST_CHECK_NE(R1L, R1L ^ (OneL << i));\r\n+        BOOST_CHECK_NE(arith_uint256(Tmp64) ^ (OneL << i), Tmp64);\r\n     }\r\n-    BOOST_CHECK(ZeroL == (OneL << 256));\r\n+    BOOST_CHECK_EQUAL(ZeroL, OneL << 256);\r\n \r\n     // Copy Constructor\r\n-    BOOST_CHECK(arith_uint256(R1L) == R1L);\r\n-    BOOST_CHECK((arith_uint256(R1L^R2L)^R2L) == R1L);\r\n-    BOOST_CHECK(arith_uint256(ZeroL) == ZeroL);\r\n-    BOOST_CHECK(arith_uint256(OneL) == OneL);\r\n+    BOOST_CHECK_EQUAL(arith_uint256(R1L), R1L);\r\n+    BOOST_CHECK_EQUAL(arith_uint256(R1L ^ R2L) ^ R2L, R1L);\r\n+    BOOST_CHECK_EQUAL(arith_uint256(ZeroL), ZeroL);\r\n+    BOOST_CHECK_EQUAL(arith_uint256(OneL), OneL);\r\n \r\n     // uint64_t constructor\r\n-    BOOST_CHECK_EQUAL((R1L & arith_uint256{0xffffffffffffffff}), arith_uint256{R1LLow64});\r\n+    BOOST_CHECK_EQUAL(R1L & arith_uint256{0xffffffffffffffff}, arith_uint256{R1LLow64});\r\n     BOOST_CHECK_EQUAL(ZeroL, arith_uint256{0});\r\n     BOOST_CHECK_EQUAL(OneL, arith_uint256{1});\r\n     BOOST_CHECK_EQUAL(arith_uint256{0xffffffffffffffff}, arith_uint256{0xffffffffffffffffULL});\r\n \r\n     // Assignment (from base_uint)\r\n-    arith_uint256 tmpL = ~ZeroL; BOOST_CHECK(tmpL == ~ZeroL);\r\n-    tmpL = ~OneL; BOOST_CHECK(tmpL == ~OneL);\r\n-    tmpL = ~R1L; BOOST_CHECK(tmpL == ~R1L);\r\n-    tmpL = ~R2L; BOOST_CHECK(tmpL == ~R2L);\r\n-    tmpL = ~MaxL; BOOST_CHECK(tmpL == ~MaxL);\r\n+    arith_uint256 tmpL = ~ZeroL; BOOST_CHECK_EQUAL(tmpL, ~ZeroL);\r\n+    tmpL = ~OneL; BOOST_CHECK_EQUAL(tmpL, ~OneL);\r\n+    tmpL = ~R1L; BOOST_CHECK_EQUAL(tmpL, ~R1L);\r\n+    tmpL = ~R2L; BOOST_CHECK_EQUAL(tmpL, ~R2L);\r\n+    tmpL = ~MaxL; BOOST_CHECK_EQUAL(tmpL, ~MaxL);\r\n }\r\n \r\n static void shiftArrayRight(unsigned char* to, const unsigned char* from, unsigned int arrayLength, unsigned int bitsToShift)\r\n```\r\n\r\nI understand of course if you think some of these are unrelated, though some of the comments are weird, e.g. `// constructor arith_uint256(vector<char>)` doesn't seem to test any constructors directly.",
      "created_at": "2024-09-02T15:42:04Z",
      "updated_at": "2024-09-02T15:49:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1741081872",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741081872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741088168",
      "pull_request_review_id": 2275917562,
      "id": 1741088168,
      "node_id": "PRRC_kwDOABII585nxuWo",
      "diff_hunk": "@@ -101,12 +101,10 @@ CFeeRate ParseFeeRate(const UniValue& json)\n \n uint256 ParseHashV(const UniValue& v, std::string_view name)",
      "path": "src/rpc/util.cpp",
      "position": 9,
      "original_position": 2,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "abcdd3898fd6fef1c1f5bad21e40b1997a953bed",
      "in_reply_to_id": 1739862015,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Have a look at the UniValue::get_str() implementation\r\n\r\nI already checked all of that, that's why I was asking if we'd rather they throw on the call site. You've already answered that you think it's orthogonal.\r\n\r\n>  I am generally in favour of pushing UniValue user input parsing into stricter types further back to the edges, though.\r\n\r\nYes, that's what I was saying basically - though I needed 2 rounds to understand it myself why this was bothering me.",
      "created_at": "2024-09-02T15:49:02Z",
      "updated_at": "2024-09-02T15:49:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1741088168",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741088168"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 103,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741105267",
      "pull_request_review_id": 2275952621,
      "id": 1741105267,
      "node_id": "PRRC_kwDOABII585nxyhz",
      "diff_hunk": "@@ -97,27 +91,17 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R2L.ToString()) == R2L);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + ZeroL.ToString()) == ZeroL);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + OneL.ToString()) == OneL);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + MaxL.ToString()) == MaxL);\n-    BOOST_CHECK(arith_uint256S(R1L.ToString()) == R1L);\n-    BOOST_CHECK(arith_uint256S(\"   0x\" + R1L.ToString() + \"   \") == R1L);\n-    BOOST_CHECK(arith_uint256S(\"\") == ZeroL);\n-    BOOST_CHECK(arith_uint256S(\"1\") == OneL);\n-    BOOST_CHECK(R1L == arith_uint256S(R1ArrayHex));\n+    // Copy Constructor\n     BOOST_CHECK(arith_uint256(R1L) == R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 43,
      "original_position": 39,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "5621b98fae306627da0ccb880d53efce21b0d208",
      "in_reply_to_id": 1741081872,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not touching any of those lines in this PR so I'd rather keep this PR a bit narrower.\r\n\r\n```diff\r\n-    BOOST_CHECK_EQUAL((R1L & arith_uint256{0xffffffffffffffff}), arith_uint256{R1LLow64});\r\n+    BOOST_CHECK_EQUAL(R1L & arith_uint256{0xffffffffffffffff}, arith_uint256{R1LLow64});\r\n```\r\n\r\nThanks, I'll patch this if I have to force-push.\r\n\r\n(note: you can hide long code blocks with a [`<details>...</details>` tag](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/organizing-information-with-collapsed-sections).)",
      "created_at": "2024-09-02T16:11:06Z",
      "updated_at": "2024-09-02T16:11:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1741105267",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741105267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741116936",
      "pull_request_review_id": 2275970058,
      "id": 1741116936,
      "node_id": "PRRC_kwDOABII585nx1YI",
      "diff_hunk": "@@ -97,27 +91,17 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R2L.ToString()) == R2L);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + ZeroL.ToString()) == ZeroL);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + OneL.ToString()) == OneL);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + MaxL.ToString()) == MaxL);\n-    BOOST_CHECK(arith_uint256S(R1L.ToString()) == R1L);\n-    BOOST_CHECK(arith_uint256S(\"   0x\" + R1L.ToString() + \"   \") == R1L);\n-    BOOST_CHECK(arith_uint256S(\"\") == ZeroL);\n-    BOOST_CHECK(arith_uint256S(\"1\") == OneL);\n-    BOOST_CHECK(R1L == arith_uint256S(R1ArrayHex));\n+    // Copy Constructor\n     BOOST_CHECK(arith_uint256(R1L) == R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 43,
      "original_position": 39,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "5621b98fae306627da0ccb880d53efce21b0d208",
      "in_reply_to_id": 1741081872,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> you can hide long code blocks\r\n\r\nAh, I don't see them anymore, `Refined Github` extension does it automatically. I'll do it next time.",
      "created_at": "2024-09-02T16:30:15Z",
      "updated_at": "2024-09-02T16:30:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1741116936",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741116936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741581342",
      "pull_request_review_id": 2276646525,
      "id": 1741581342,
      "node_id": "PRRC_kwDOABII585nzmwe",
      "diff_hunk": "@@ -571,4 +552,35 @@ BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% cover\n     CHECKBITWISEOPERATOR(R1,~R2,&)\n }\n \n+BOOST_AUTO_TEST_CASE(operator_with_self)\n+{\n+    /* Clang 16 and earlier detects v -= v and v /= v as self-assignments\n+       to 0 and 1 respectively.\n+       See: https://github.com/llvm/llvm-project/issues/42469\n+       and the fix in commit c5302325b2a62d77cf13dd16cd5c19141862fed0 .\n+\n+       This makes some sense for arithmetic classes, but could be considered a bug\n+       elsewhere. Disable the warning here so that the code can be tested, but the\n+       warning should remain on as there will likely always be a better way to\n+       express this.\n+    */\n+",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 1,
      "original_position": 100,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "a9d19ae1aa06f14c1892bb4e37c3f023bc61b39b",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The move of this test to this file and changes to use raw integer literals make total sense.\r\n\r\nmeganit: If you re-touch - Might just remove this empty line as the comment above applies to the preprocessor logic beneath.",
      "created_at": "2024-09-03T07:40:48Z",
      "updated_at": "2024-09-03T08:25:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1741581342",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741581342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 567,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741596200",
      "pull_request_review_id": 2276646525,
      "id": 1741596200,
      "node_id": "PRRC_kwDOABII585nzqYo",
      "diff_hunk": "@@ -92,33 +84,22 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     BOOST_CHECK_NE(MaxL, ZeroL); BOOST_CHECK_NE(MaxS, ZeroS);\n \n     // String Constructor and Copy Constructor\n-    BOOST_CHECK_EQUAL(uint256S(\"0x\"+R1L.ToString()), R1L);\n-    BOOST_CHECK_EQUAL(uint256S(\"0x\"+R2L.ToString()), R2L);\n-    BOOST_CHECK_EQUAL(uint256S(\"0x\"+ZeroL.ToString()), ZeroL);\n-    BOOST_CHECK_EQUAL(uint256S(\"0x\"+OneL.ToString()), OneL);\n-    BOOST_CHECK_EQUAL(uint256S(\"0x\"+MaxL.ToString()), MaxL);\n-    BOOST_CHECK_EQUAL(uint256S(R1L.ToString()), R1L);\n-    BOOST_CHECK_EQUAL(uint256S(\"   0x\"+R1L.ToString()+\"   \"), R1L);\n-    BOOST_CHECK_EQUAL(uint256S(\"   0x\"+R1L.ToString()+\"-trash;%^&   \"), R1L);\n-    BOOST_CHECK_EQUAL(uint256S(\"\\t \\n  \\n \\f\\n\\r\\t\\v\\t   0x\"+R1L.ToString()+\"  \\t \\n  \\n \\f\\n\\r\\t\\v\\t \"), R1L);\n-    BOOST_CHECK_EQUAL(uint256S(\"\"), ZeroL);\n-    BOOST_CHECK_EQUAL(uint256S(\"1\"), OneL);\n-    BOOST_CHECK_EQUAL(R1L, uint256S(R1ArrayHex));\n+    BOOST_CHECK_EQUAL(uint256::FromHex(R1L.ToString()).value(), R1L);\n+    BOOST_CHECK_EQUAL(uint256::FromHex(R2L.ToString()).value(), R2L);\n+    BOOST_CHECK_EQUAL(uint256::FromHex(ZeroL.ToString()).value(), ZeroL);\n+    BOOST_CHECK_EQUAL(uint256::FromHex(OneL.ToString()).value(), OneL);\n+    BOOST_CHECK_EQUAL(uint256::FromHex(MaxL.ToString()).value(), MaxL);\n+    BOOST_CHECK_EQUAL(R1L, uint256::FromHex(R1ArrayHex).value());",
      "path": "src/test/uint256_tests.cpp",
      "position": 1,
      "original_position": 36,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "a9d19ae1aa06f14c1892bb4e37c3f023bc61b39b",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I understand this matches the order before the PR but this specific line should probably have the arguments swapped.\r\n```suggestion\r\n    BOOST_CHECK_EQUAL(uint256::FromHex(R1ArrayHex).value(), R1L);\r\n```",
      "created_at": "2024-09-03T07:52:06Z",
      "updated_at": "2024-09-03T08:25:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1741596200",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741596200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741603274",
      "pull_request_review_id": 2276646525,
      "id": 1741603274,
      "node_id": "PRRC_kwDOABII585nzsHK",
      "diff_hunk": "@@ -92,33 +84,22 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     BOOST_CHECK_NE(MaxL, ZeroL); BOOST_CHECK_NE(MaxS, ZeroS);\n \n     // String Constructor and Copy Constructor\n-    BOOST_CHECK_EQUAL(uint256S(\"0x\"+R1L.ToString()), R1L);\n-    BOOST_CHECK_EQUAL(uint256S(\"0x\"+R2L.ToString()), R2L);\n-    BOOST_CHECK_EQUAL(uint256S(\"0x\"+ZeroL.ToString()), ZeroL);\n-    BOOST_CHECK_EQUAL(uint256S(\"0x\"+OneL.ToString()), OneL);\n-    BOOST_CHECK_EQUAL(uint256S(\"0x\"+MaxL.ToString()), MaxL);\n-    BOOST_CHECK_EQUAL(uint256S(R1L.ToString()), R1L);\n-    BOOST_CHECK_EQUAL(uint256S(\"   0x\"+R1L.ToString()+\"   \"), R1L);\n-    BOOST_CHECK_EQUAL(uint256S(\"   0x\"+R1L.ToString()+\"-trash;%^&   \"), R1L);\n-    BOOST_CHECK_EQUAL(uint256S(\"\\t \\n  \\n \\f\\n\\r\\t\\v\\t   0x\"+R1L.ToString()+\"  \\t \\n  \\n \\f\\n\\r\\t\\v\\t \"), R1L);\n-    BOOST_CHECK_EQUAL(uint256S(\"\"), ZeroL);\n-    BOOST_CHECK_EQUAL(uint256S(\"1\"), OneL);\n-    BOOST_CHECK_EQUAL(R1L, uint256S(R1ArrayHex));\n+    BOOST_CHECK_EQUAL(uint256::FromHex(R1L.ToString()).value(), R1L);\n+    BOOST_CHECK_EQUAL(uint256::FromHex(R2L.ToString()).value(), R2L);\n+    BOOST_CHECK_EQUAL(uint256::FromHex(ZeroL.ToString()).value(), ZeroL);\n+    BOOST_CHECK_EQUAL(uint256::FromHex(OneL.ToString()).value(), OneL);\n+    BOOST_CHECK_EQUAL(uint256::FromHex(MaxL.ToString()).value(), MaxL);\n+    BOOST_CHECK_EQUAL(R1L, uint256::FromHex(R1ArrayHex).value());\n     BOOST_CHECK_EQUAL(uint256(R1L), R1L);\n     BOOST_CHECK_EQUAL(uint256(ZeroL), ZeroL);\n     BOOST_CHECK_EQUAL(uint256(OneL), OneL);\n \n-    BOOST_CHECK_EQUAL(uint160S(\"0x\"+R1S.ToString()), R1S);\n-    BOOST_CHECK_EQUAL(uint160S(\"0x\"+R2S.ToString()), R2S);\n-    BOOST_CHECK_EQUAL(uint160S(\"0x\"+ZeroS.ToString()), ZeroS);\n-    BOOST_CHECK_EQUAL(uint160S(\"0x\"+OneS.ToString()), OneS);\n-    BOOST_CHECK_EQUAL(uint160S(\"0x\"+MaxS.ToString()), MaxS);\n-    BOOST_CHECK_EQUAL(uint160S(R1S.ToString()), R1S);\n-    BOOST_CHECK_EQUAL(uint160S(\"   0x\"+R1S.ToString()+\"   \"), R1S);\n-    BOOST_CHECK_EQUAL(uint160S(\"   0x\"+R1S.ToString()+\"-trash;%^&   \"), R1S);\n-    BOOST_CHECK_EQUAL(uint160S(\" \\t \\n  \\n \\f\\n\\r\\t\\v\\t  0x\"+R1S.ToString()+\"   \\t \\n  \\n \\f\\n\\r\\t\\v\\t\"), R1S);\n-    BOOST_CHECK_EQUAL(uint160S(\"\"), ZeroS);\n-    BOOST_CHECK_EQUAL(R1S, uint160S(R1ArrayHex));\n+    BOOST_CHECK_EQUAL(uint160::FromHex(R1S.ToString()).value(), R1S);\n+    BOOST_CHECK_EQUAL(uint160::FromHex(R2S.ToString()).value(), R2S);\n+    BOOST_CHECK_EQUAL(uint160::FromHex(ZeroS.ToString()).value(), ZeroS);\n+    BOOST_CHECK_EQUAL(uint160::FromHex(OneS.ToString()).value(), OneS);\n+    BOOST_CHECK_EQUAL(uint160::FromHex(MaxS.ToString()).value(), MaxS);\n+    BOOST_CHECK_EQUAL(uint160::FromHex(R1ArrayHex + 24).value(), R1S); // we want the last 40 of 64 chars so skip the first 24",
      "path": "src/test/uint256_tests.cpp",
      "position": 1,
      "original_position": 57,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "a9d19ae1aa06f14c1892bb4e37c3f023bc61b39b",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Clarify code instead of adding comment?\r\n```suggestion\r\n    BOOST_CHECK_EQUAL(uint160::FromHex(std::string_view{R1ArrayHex + 24, 40}).value(), R1S);\r\n```",
      "created_at": "2024-09-03T07:57:07Z",
      "updated_at": "2024-09-03T08:25:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1741603274",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741603274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741633513",
      "pull_request_review_id": 2276646525,
      "id": 1741633513,
      "node_id": "PRRC_kwDOABII585nzzfp",
      "diff_hunk": "@@ -274,72 +255,12 @@ BOOST_AUTO_TEST_CASE( conversion )\n     BOOST_CHECK_EQUAL(UintToArith256(OneL), 1);\n     BOOST_CHECK_EQUAL(ArithToUint256(0), ZeroL);\n     BOOST_CHECK_EQUAL(ArithToUint256(1), OneL);\n-    BOOST_CHECK_EQUAL(arith_uint256(UintToArith256(uint256S(R1L.GetHex()))), UintToArith256(R1L));\n-    BOOST_CHECK_EQUAL(arith_uint256(UintToArith256(uint256S(R2L.GetHex()))), UintToArith256(R2L));\n+    BOOST_CHECK_EQUAL(arith_uint256(UintToArith256(uint256::FromHex(R1L.GetHex()).value())), UintToArith256(R1L));\n+    BOOST_CHECK_EQUAL(arith_uint256(UintToArith256(uint256::FromHex(R2L.GetHex()).value())), UintToArith256(R2L));",
      "path": "src/test/uint256_tests.cpp",
      "position": 1,
      "original_position": 68,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "a9d19ae1aa06f14c1892bb4e37c3f023bc61b39b",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The whole `conversion`-test arguably belongs in the **arith_uint256_tests.cpp** file, which would allow complete removal of `#include <arith_uint256.h>` from this file. That would mirror the code under test, as `uint256` does not depend on `arith_uint256` but the reverse is true.",
      "created_at": "2024-09-03T08:17:46Z",
      "updated_at": "2024-09-03T08:25:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1741633513",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741633513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": 258,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741905568",
      "pull_request_review_id": 2277180999,
      "id": 1741905568,
      "node_id": "PRRC_kwDOABII585n016g",
      "diff_hunk": "@@ -97,27 +91,17 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R2L.ToString()) == R2L);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + ZeroL.ToString()) == ZeroL);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + OneL.ToString()) == OneL);\n-    BOOST_CHECK(arith_uint256S(\"0x\" + MaxL.ToString()) == MaxL);\n-    BOOST_CHECK(arith_uint256S(R1L.ToString()) == R1L);\n-    BOOST_CHECK(arith_uint256S(\"   0x\" + R1L.ToString() + \"   \") == R1L);\n-    BOOST_CHECK(arith_uint256S(\"\") == ZeroL);\n-    BOOST_CHECK(arith_uint256S(\"1\") == OneL);\n-    BOOST_CHECK(R1L == arith_uint256S(R1ArrayHex));\n+    // Copy Constructor\n     BOOST_CHECK(arith_uint256(R1L) == R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 43,
      "original_position": 39,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "5621b98fae306627da0ccb880d53efce21b0d208",
      "in_reply_to_id": 1741081872,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Thanks, I'll patch this if I have to force-push.\r\n\r\nDone!",
      "created_at": "2024-09-03T11:38:30Z",
      "updated_at": "2024-09-03T11:44:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1741905568",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741905568"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741908187",
      "pull_request_review_id": 2277180999,
      "id": 1741908187,
      "node_id": "PRRC_kwDOABII585n02jb",
      "diff_hunk": "@@ -92,33 +84,22 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     BOOST_CHECK_NE(MaxL, ZeroL); BOOST_CHECK_NE(MaxS, ZeroS);\n \n     // String Constructor and Copy Constructor\n-    BOOST_CHECK_EQUAL(uint256S(\"0x\"+R1L.ToString()), R1L);\n-    BOOST_CHECK_EQUAL(uint256S(\"0x\"+R2L.ToString()), R2L);\n-    BOOST_CHECK_EQUAL(uint256S(\"0x\"+ZeroL.ToString()), ZeroL);\n-    BOOST_CHECK_EQUAL(uint256S(\"0x\"+OneL.ToString()), OneL);\n-    BOOST_CHECK_EQUAL(uint256S(\"0x\"+MaxL.ToString()), MaxL);\n-    BOOST_CHECK_EQUAL(uint256S(R1L.ToString()), R1L);\n-    BOOST_CHECK_EQUAL(uint256S(\"   0x\"+R1L.ToString()+\"   \"), R1L);\n-    BOOST_CHECK_EQUAL(uint256S(\"   0x\"+R1L.ToString()+\"-trash;%^&   \"), R1L);\n-    BOOST_CHECK_EQUAL(uint256S(\"\\t \\n  \\n \\f\\n\\r\\t\\v\\t   0x\"+R1L.ToString()+\"  \\t \\n  \\n \\f\\n\\r\\t\\v\\t \"), R1L);\n-    BOOST_CHECK_EQUAL(uint256S(\"\"), ZeroL);\n-    BOOST_CHECK_EQUAL(uint256S(\"1\"), OneL);\n-    BOOST_CHECK_EQUAL(R1L, uint256S(R1ArrayHex));\n+    BOOST_CHECK_EQUAL(uint256::FromHex(R1L.ToString()).value(), R1L);\n+    BOOST_CHECK_EQUAL(uint256::FromHex(R2L.ToString()).value(), R2L);\n+    BOOST_CHECK_EQUAL(uint256::FromHex(ZeroL.ToString()).value(), ZeroL);\n+    BOOST_CHECK_EQUAL(uint256::FromHex(OneL.ToString()).value(), OneL);\n+    BOOST_CHECK_EQUAL(uint256::FromHex(MaxL.ToString()).value(), MaxL);\n+    BOOST_CHECK_EQUAL(R1L, uint256::FromHex(R1ArrayHex).value());\n     BOOST_CHECK_EQUAL(uint256(R1L), R1L);\n     BOOST_CHECK_EQUAL(uint256(ZeroL), ZeroL);\n     BOOST_CHECK_EQUAL(uint256(OneL), OneL);\n \n-    BOOST_CHECK_EQUAL(uint160S(\"0x\"+R1S.ToString()), R1S);\n-    BOOST_CHECK_EQUAL(uint160S(\"0x\"+R2S.ToString()), R2S);\n-    BOOST_CHECK_EQUAL(uint160S(\"0x\"+ZeroS.ToString()), ZeroS);\n-    BOOST_CHECK_EQUAL(uint160S(\"0x\"+OneS.ToString()), OneS);\n-    BOOST_CHECK_EQUAL(uint160S(\"0x\"+MaxS.ToString()), MaxS);\n-    BOOST_CHECK_EQUAL(uint160S(R1S.ToString()), R1S);\n-    BOOST_CHECK_EQUAL(uint160S(\"   0x\"+R1S.ToString()+\"   \"), R1S);\n-    BOOST_CHECK_EQUAL(uint160S(\"   0x\"+R1S.ToString()+\"-trash;%^&   \"), R1S);\n-    BOOST_CHECK_EQUAL(uint160S(\" \\t \\n  \\n \\f\\n\\r\\t\\v\\t  0x\"+R1S.ToString()+\"   \\t \\n  \\n \\f\\n\\r\\t\\v\\t\"), R1S);\n-    BOOST_CHECK_EQUAL(uint160S(\"\"), ZeroS);\n-    BOOST_CHECK_EQUAL(R1S, uint160S(R1ArrayHex));\n+    BOOST_CHECK_EQUAL(uint160::FromHex(R1S.ToString()).value(), R1S);\n+    BOOST_CHECK_EQUAL(uint160::FromHex(R2S.ToString()).value(), R2S);\n+    BOOST_CHECK_EQUAL(uint160::FromHex(ZeroS.ToString()).value(), ZeroS);\n+    BOOST_CHECK_EQUAL(uint160::FromHex(OneS.ToString()).value(), OneS);\n+    BOOST_CHECK_EQUAL(uint160::FromHex(MaxS.ToString()).value(), MaxS);\n+    BOOST_CHECK_EQUAL(uint160::FromHex(R1ArrayHex + 24).value(), R1S); // we want the last 40 of 64 chars so skip the first 24",
      "path": "src/test/uint256_tests.cpp",
      "position": 1,
      "original_position": 57,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "a9d19ae1aa06f14c1892bb4e37c3f023bc61b39b",
      "in_reply_to_id": 1741603274,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nice, didn't quite love the docstring and this is much clearer, thanks.",
      "created_at": "2024-09-03T11:40:39Z",
      "updated_at": "2024-09-03T11:44:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1741908187",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741908187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741909541",
      "pull_request_review_id": 2277180999,
      "id": 1741909541,
      "node_id": "PRRC_kwDOABII585n024l",
      "diff_hunk": "@@ -274,72 +255,12 @@ BOOST_AUTO_TEST_CASE( conversion )\n     BOOST_CHECK_EQUAL(UintToArith256(OneL), 1);\n     BOOST_CHECK_EQUAL(ArithToUint256(0), ZeroL);\n     BOOST_CHECK_EQUAL(ArithToUint256(1), OneL);\n-    BOOST_CHECK_EQUAL(arith_uint256(UintToArith256(uint256S(R1L.GetHex()))), UintToArith256(R1L));\n-    BOOST_CHECK_EQUAL(arith_uint256(UintToArith256(uint256S(R2L.GetHex()))), UintToArith256(R2L));\n+    BOOST_CHECK_EQUAL(arith_uint256(UintToArith256(uint256::FromHex(R1L.GetHex()).value())), UintToArith256(R1L));\n+    BOOST_CHECK_EQUAL(arith_uint256(UintToArith256(uint256::FromHex(R2L.GetHex()).value())), UintToArith256(R2L));",
      "path": "src/test/uint256_tests.cpp",
      "position": 1,
      "original_position": 68,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "a9d19ae1aa06f14c1892bb4e37c3f023bc61b39b",
      "in_reply_to_id": 1741633513,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I was considering moving it but then thought it was quite arbitrary, but you're right - tests mirroring how code is structured is good, so I've added a commit to move the `conversion` tests. Thanks!",
      "created_at": "2024-09-03T11:41:42Z",
      "updated_at": "2024-09-03T11:44:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1741909541",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1741909541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": 258,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1742206994",
      "pull_request_review_id": 2272815052,
      "id": 1742206994,
      "node_id": "PRRC_kwDOABII585n1_gS",
      "diff_hunk": "@@ -101,12 +101,10 @@ CFeeRate ParseFeeRate(const UniValue& json)\n \n uint256 ParseHashV(const UniValue& v, std::string_view name)\n {\n-    const std::string& strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\n-    return uint256S(strHex);\n+    if (auto rv{uint256::FromHex(v.get_str())}) {\n+        return *rv;\n+    }\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be string of %d hex digits (not '%s')\", name, uint256::size() * 2, v.get_str()));",
      "path": "src/rpc/util.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "eb26946d7acb142e913d30cb9b32c79ba2c019f3",
      "in_reply_to_id": 1738970588,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Any reason to omit the length from the error message when it was previously present?",
      "created_at": "2024-09-03T14:47:32Z",
      "updated_at": "2024-09-03T14:54:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1742206994",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1742206994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1742221623",
      "pull_request_review_id": 2277708354,
      "id": 1742221623,
      "node_id": "PRRC_kwDOABII585n2DE3",
      "diff_hunk": "@@ -101,12 +101,10 @@ CFeeRate ParseFeeRate(const UniValue& json)\n \n uint256 ParseHashV(const UniValue& v, std::string_view name)\n {\n-    const std::string& strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\n-    return uint256S(strHex);\n+    if (auto rv{uint256::FromHex(v.get_str())}) {\n+        return *rv;\n+    }\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be string of %d hex digits (not '%s')\", name, uint256::size() * 2, v.get_str()));",
      "path": "src/rpc/util.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "eb26946d7acb142e913d30cb9b32c79ba2c019f3",
      "in_reply_to_id": 1738970588,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we're already displaying the value itself, isn't that enough?",
      "created_at": "2024-09-03T14:56:35Z",
      "updated_at": "2024-09-03T14:56:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1742221623",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1742221623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1742232560",
      "pull_request_review_id": 2277726837,
      "id": 1742232560,
      "node_id": "PRRC_kwDOABII585n2Fvw",
      "diff_hunk": "@@ -101,12 +101,10 @@ CFeeRate ParseFeeRate(const UniValue& json)\n \n uint256 ParseHashV(const UniValue& v, std::string_view name)\n {\n-    const std::string& strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\n-    return uint256S(strHex);\n+    if (auto rv{uint256::FromHex(v.get_str())}) {\n+        return *rv;\n+    }\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be string of %d hex digits (not '%s')\", name, uint256::size() * 2, v.get_str()));",
      "path": "src/rpc/util.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "eb26946d7acb142e913d30cb9b32c79ba2c019f3",
      "in_reply_to_id": 1738970588,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Previously we disambiguated between length errors and other errors. Since that's not longer true, I think not including the length in the error is the most elegant approach, especially since we're already showing the invalid user input as @l0rinc says. Adding the length feels like an arbitrary and not very useful addition to me.",
      "created_at": "2024-09-03T15:03:37Z",
      "updated_at": "2024-09-03T15:16:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1742232560",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1742232560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1742381310",
      "pull_request_review_id": 2277977225,
      "id": 1742381310,
      "node_id": "PRRC_kwDOABII585n2qD-",
      "diff_hunk": "@@ -101,12 +101,10 @@ CFeeRate ParseFeeRate(const UniValue& json)\n \n uint256 ParseHashV(const UniValue& v, std::string_view name)\n {\n-    const std::string& strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\n-    return uint256S(strHex);\n+    if (auto rv{uint256::FromHex(v.get_str())}) {\n+        return *rv;\n+    }\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be string of %d hex digits (not '%s')\", name, uint256::size() * 2, v.get_str()));",
      "path": "src/rpc/util.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "eb26946d7acb142e913d30cb9b32c79ba2c019f3",
      "in_reply_to_id": 1738970588,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I am mostly thinking about a user running into a copy-paste error, where they delete or add a character from a 64-length string. Returning them back the string won't be useful for them to spot the error, as they likely can already see their input. However telling them that they accidentally added or removed a character may be useful and saves them from manually counting the characters, or write a program to count for them.\r\n\r\n",
      "created_at": "2024-09-03T16:47:48Z",
      "updated_at": "2024-09-03T16:47:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1742381310",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1742381310"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743476276",
      "pull_request_review_id": 2279651061,
      "id": 1743476276,
      "node_id": "PRRC_kwDOABII585n61Y0",
      "diff_hunk": "@@ -101,12 +101,10 @@ CFeeRate ParseFeeRate(const UniValue& json)\n \n uint256 ParseHashV(const UniValue& v, std::string_view name)\n {\n-    const std::string& strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\n-    return uint256S(strHex);\n+    if (auto rv{uint256::FromHex(v.get_str())}) {\n+        return *rv;\n+    }\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be string of %d hex digits (not '%s')\", name, uint256::size() * 2, v.get_str()));",
      "path": "src/rpc/util.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "eb26946d7acb142e913d30cb9b32c79ba2c019f3",
      "in_reply_to_id": 1738970588,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For reference, the len reporting (and error handling) was added after https://github.com/bitcoin/bitcoin/issues/9040#issuecomment-257161620.\r\n\r\nAlso, you added len reporting in a similar place recently in https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717324499, so I fail to see why there it is \"helpful\" while here it would be not.\r\n\r\nI am happy to review and ACK either version, but I think the length can be useful and may be better to not remove from the error string.",
      "created_at": "2024-09-04T10:22:26Z",
      "updated_at": "2024-09-04T10:22:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1743476276",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743476276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743536308",
      "pull_request_review_id": 2279751372,
      "id": 1743536308,
      "node_id": "PRRC_kwDOABII585n7EC0",
      "diff_hunk": "@@ -101,12 +101,10 @@ CFeeRate ParseFeeRate(const UniValue& json)\n \n uint256 ParseHashV(const UniValue& v, std::string_view name)\n {\n-    const std::string& strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\n-    return uint256S(strHex);\n+    if (auto rv{uint256::FromHex(v.get_str())}) {\n+        return *rv;\n+    }\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be string of %d hex digits (not '%s')\", name, uint256::size() * 2, v.get_str()));",
      "path": "src/rpc/util.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "eb26946d7acb142e913d30cb9b32c79ba2c019f3",
      "in_reply_to_id": 1738970588,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Also, you added len reporting in a similar place recently in https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717324499,\r\n\r\nI don't quite think this is similar. My suggestion in https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717324499 was to use less code to have more accurate and helpful error reporting, triggered only when that particular requirement is breached. In this PR, we're talking about adding more code to provide context that may not be relevant (and thus make the message less useful) because the message is not specific to the error, and it is already easily resolved by the user since the necessary context (i.e. the input value) is provided (which seems to not be the case in #9040 which you linked)?\r\n\r\nIt seems we have different views on the benefit of the behaviour change. Since the behaviour change is orthogonal to the goal of this PR to remove `uint256S()` (I just included it as a little cleanup), I've reverted it, making the commit a refactor commit, reducing the LoC diff.",
      "created_at": "2024-09-04T10:55:19Z",
      "updated_at": "2024-09-04T10:55:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1743536308",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743536308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743693696",
      "pull_request_review_id": 2280021001,
      "id": 1743693696,
      "node_id": "PRRC_kwDOABII585n7qeA",
      "diff_hunk": "@@ -102,11 +103,12 @@ CFeeRate ParseFeeRate(const UniValue& json)\n uint256 ParseHashV(const UniValue& v, std::string_view name)\n {\n     const std::string& strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\n-    return uint256S(strHex);\n+    const auto expected_len{uint256::size() * 2};\n+    if (expected_len != strHex.length()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, expected_len, strHex.length(), strHex));\n+    }\n+    if (auto rv{uint256::FromHex(strHex)}) return *rv;",
      "path": "src/rpc/util.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "95b3aca0eb3fc49cd99b8de028a676bb04e2157f",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "style nit in 95b3aca0eb3fc49cd99b8de028a676bb04e2157f: Could have the happy-case early-return in the second line of the function, like in a prior version of this pull request.",
      "created_at": "2024-09-04T12:30:04Z",
      "updated_at": "2024-09-04T13:21:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1743693696",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743693696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743729122",
      "pull_request_review_id": 2280021001,
      "id": 1743729122,
      "node_id": "PRRC_kwDOABII585n7zHi",
      "diff_hunk": "@@ -97,27 +91,17 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 24,
      "original_position": 28,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "948bb07715f9ef1d90b91dfbea4f487f755498f5",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "question in 948bb07715f9ef1d90b91dfbea4f487f755498f5: Is there a reason why the tests are dropped? I read the commit message and I  understand that the comment says \"String constructors\", but I think it meant to say `UintToArith256 testing from a string`, which is not a test-only function.\r\n\r\nThis is my fault, because I forgot to update the comment in commit facf629ce8ff1d1f6d254dde4e89b5018f8df60e.\r\n\r\nI also understand that there is a `BOOST_AUTO_TEST_CASE(conversion)` test. However, I think it only checks that a round-trip is a no-op and not the construction from string to uint256 and then `UintToArith256`.\r\n\r\nI think it would be easier to review if the tests were kept, or if the commit message said where the equivalent `UintToArith256` tests are happening.\r\n\r\nMy preference would be to just keep the tests, even if they are theoretically redundant.\r\n\r\nPersonally I just find it hard to review, because seemingly equivalent code is doing the reverse:\r\n\r\n* uint256 from a string_view and span are reversed, see https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1735551373\r\n* the `GetHex` member method is the reverse of the `HexStr` helper\r\n* base_uint::CompareTo and base_blob::Compare are also different\r\n* ...\r\n\r\nSo keeping the tests makes it trivial to review and ensures that no coverage is lost accidentally.",
      "created_at": "2024-09-04T12:50:31Z",
      "updated_at": "2024-09-04T13:21:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1743729122",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743729122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743786908",
      "pull_request_review_id": 2280197408,
      "id": 1743786908,
      "node_id": "PRRC_kwDOABII585n8BOc",
      "diff_hunk": "@@ -101,12 +101,10 @@ CFeeRate ParseFeeRate(const UniValue& json)\n \n uint256 ParseHashV(const UniValue& v, std::string_view name)\n {\n-    const std::string& strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\n-    return uint256S(strHex);\n+    if (auto rv{uint256::FromHex(v.get_str())}) {\n+        return *rv;\n+    }\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be string of %d hex digits (not '%s')\", name, uint256::size() * 2, v.get_str()));",
      "path": "src/rpc/util.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "eb26946d7acb142e913d30cb9b32c79ba2c019f3",
      "in_reply_to_id": 1738970588,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry for misunderstanding, but I think an error message of\r\n\r\n`\"txid must be string of 64 hex digits (not '1d999634f709c98f242f2e553bf0fdac7deb6f972c44c8c1b4d576d564acc7f')\"` is unclear whether the error is that there are non-hex digits or whether there are missing or extraneous characters. And it is not trivial to see from looking at it.\r\n\r\nA proposed error message of `\"txid must be string of 64 hex digits (not '1d999634f709c98f242f2e553bf0fdac7deb6f972c44c8c1b4d576d564acc7f' of len $num)\"` whether the length was wrong or the hex-property.\r\n\r\nBut maybe I am missing something, so anything seems fine here if other reviewers disagree.\r\n\r\n",
      "created_at": "2024-09-04T13:21:50Z",
      "updated_at": "2024-09-04T13:21:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1743786908",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743786908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743805522",
      "pull_request_review_id": 2280229430,
      "id": 1743805522,
      "node_id": "PRRC_kwDOABII585n8FxS",
      "diff_hunk": "@@ -101,12 +101,10 @@ CFeeRate ParseFeeRate(const UniValue& json)\n \n uint256 ParseHashV(const UniValue& v, std::string_view name)\n {\n-    const std::string& strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\n-    return uint256S(strHex);\n+    if (auto rv{uint256::FromHex(v.get_str())}) {\n+        return *rv;\n+    }\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be string of %d hex digits (not '%s')\", name, uint256::size() * 2, v.get_str()));",
      "path": "src/rpc/util.cpp",
      "position": 1,
      "original_position": 13,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "eb26946d7acb142e913d30cb9b32c79ba2c019f3",
      "in_reply_to_id": 1738970588,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I tend to agree that the length is superfluous (we're usually not *that* user friendly with our error messages) and in case of error the user would likely copy-paste again which would likely solve the error.\r\nI'm fine with both, just don't revert anything @stickies-v :)",
      "created_at": "2024-09-04T13:30:40Z",
      "updated_at": "2024-09-04T13:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1743805522",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743805522"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743810469",
      "pull_request_review_id": 2280237696,
      "id": 1743810469,
      "node_id": "PRRC_kwDOABII585n8G-l",
      "diff_hunk": "@@ -97,27 +91,17 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 24,
      "original_position": 28,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "948bb07715f9ef1d90b91dfbea4f487f755498f5",
      "in_reply_to_id": 1743729122,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Some of these were reverted since it seemed to us that it's testing prefixes and whitespaces primarily, see https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1740942391",
      "created_at": "2024-09-04T13:33:02Z",
      "updated_at": "2024-09-04T13:33:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1743810469",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743810469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743817035",
      "pull_request_review_id": 2280248540,
      "id": 1743817035,
      "node_id": "PRRC_kwDOABII585n8IlL",
      "diff_hunk": "@@ -97,27 +91,17 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 24,
      "original_position": 28,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "948bb07715f9ef1d90b91dfbea4f487f755498f5",
      "in_reply_to_id": 1743729122,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I agree the prefix and whitespace testing is useless and the prefix and whitespace can simply be removed in the test cases, but it is not trivially clear to me that the `UintToArith256` tests can be removed.",
      "created_at": "2024-09-04T13:36:12Z",
      "updated_at": "2024-09-04T13:36:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1743817035",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743817035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743824670",
      "pull_request_review_id": 2280261373,
      "id": 1743824670,
      "node_id": "PRRC_kwDOABII585n8Kce",
      "diff_hunk": "@@ -102,11 +103,12 @@ CFeeRate ParseFeeRate(const UniValue& json)\n uint256 ParseHashV(const UniValue& v, std::string_view name)\n {\n     const std::string& strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\n-    return uint256S(strHex);\n+    const auto expected_len{uint256::size() * 2};\n+    if (expected_len != strHex.length()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, expected_len, strHex.length(), strHex));\n+    }\n+    if (auto rv{uint256::FromHex(strHex)}) return *rv;",
      "path": "src/rpc/util.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "95b3aca0eb3fc49cd99b8de028a676bb04e2157f",
      "in_reply_to_id": 1743693696,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah yes that would be better, will update this in next force-push, thanks!",
      "created_at": "2024-09-04T13:39:54Z",
      "updated_at": "2024-09-04T13:39:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1743824670",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743824670"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743824684",
      "pull_request_review_id": 2280261389,
      "id": 1743824684,
      "node_id": "PRRC_kwDOABII585n8Kcs",
      "diff_hunk": "@@ -102,11 +103,12 @@ CFeeRate ParseFeeRate(const UniValue& json)\n uint256 ParseHashV(const UniValue& v, std::string_view name)\n {\n     const std::string& strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\n-    return uint256S(strHex);\n+    const auto expected_len{uint256::size() * 2};\n+    if (expected_len != strHex.length()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, expected_len, strHex.length(), strHex));\n+    }",
      "path": "src/rpc/util.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "da4377dc2ad0f495ebb97722d6cc2a95850363fa",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit1: consider narrowing the scope of expected:\r\nNit2: usually we compare the actual against the expected (switched the order):\r\n```suggestion\r\n    if (auto expected_len{uint256::size() * 2}; strHex.length() != expected_len) {\r\n        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, expected_len, strHex.length(), strHex));\r\n    }\r\n```\r\n\r\nNo strong feelings either way, feel free to ignore if you don't like it",
      "created_at": "2024-09-04T13:39:55Z",
      "updated_at": "2024-09-04T13:48:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1743824684",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743824684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": 107,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743832221",
      "pull_request_review_id": 2280261389,
      "id": 1743832221,
      "node_id": "PRRC_kwDOABII585n8MSd",
      "diff_hunk": "@@ -102,11 +103,12 @@ CFeeRate ParseFeeRate(const UniValue& json)\n uint256 ParseHashV(const UniValue& v, std::string_view name)\n {\n     const std::string& strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\n-    return uint256S(strHex);\n+    const auto expected_len{uint256::size() * 2};\n+    if (expected_len != strHex.length()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, expected_len, strHex.length(), strHex));\n+    }\n+    if (auto rv{uint256::FromHex(strHex)}) return *rv;",
      "path": "src/rpc/util.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "95b3aca0eb3fc49cd99b8de028a676bb04e2157f",
      "in_reply_to_id": 1743693696,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You mean something like:\r\n```C++\r\nuint256 ParseHashV(const UniValue& v, std::string_view name)\r\n{\r\n    const std::string& strHex(v.get_str());\r\n    if (auto rv{uint256::FromHex(strHex)}){\r\n        return *rv;\r\n    } else if (auto expected_len{uint256::size() * 2}; strHex.length() != expected_len) {\r\n        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, expected_len, strHex.length(), strHex));\r\n    } else {\r\n        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\r\n    }\r\n}\r\n```\r\n?",
      "created_at": "2024-09-04T13:43:30Z",
      "updated_at": "2024-09-04T13:48:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1743832221",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743832221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743835345",
      "pull_request_review_id": 2280261389,
      "id": 1743835345,
      "node_id": "PRRC_kwDOABII585n8NDR",
      "diff_hunk": "@@ -97,27 +91,17 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 24,
      "original_position": 28,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "948bb07715f9ef1d90b91dfbea4f487f755498f5",
      "in_reply_to_id": 1743729122,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> is not trivially clear to me that the UintToArith256 tests can be removed\r\n\r\n+1 for restoring them in that case",
      "created_at": "2024-09-04T13:45:03Z",
      "updated_at": "2024-09-04T13:48:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1743835345",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1743835345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744056376",
      "pull_request_review_id": 2280649581,
      "id": 1744056376,
      "node_id": "PRRC_kwDOABII585n9DA4",
      "diff_hunk": "@@ -97,27 +91,17 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 24,
      "original_position": 28,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "948bb07715f9ef1d90b91dfbea4f487f755498f5",
      "in_reply_to_id": 1743729122,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm definitely happy to put the existing tests back in if it makes review easier, but I want to make sure I understand your concern, so let me try to summarize it:\r\n\r\nPrior to https://github.com/bitcoin/bitcoin/commit/facf629ce8ff1d1f6d254dde4e89b5018f8df60e, to construct a `arith_uint256` from a hex string, one would use the `arith_uint256` string constructor, and as such we had tests covering that constructor. Since https://github.com/bitcoin/bitcoin/commit/facf629ce8ff1d1f6d254dde4e89b5018f8df60e that constructor is removed, and now the de facto approach to construct a `arith_uint256` from a hex string is to first construct a `uint256` from a hex string, and then convert it with `UintToArith256()`. So, rather than removing the string construction unit tests entirely, you kept them by testing this new \"roundabout\" approach instead, since that's how these functions are used in practice.\r\n\r\nIs it fair to summarize that your concern is that even though the tests I remove here are theoretically not necessary since we should have equivalent unit test coverage on the 2 underlying functions (`uint256::FromHex()` and `UintToArith256()`), you'd rather keep them because ensuring that the unit test coverage is indeed equivalent is burdensome and makes this PR harder to review?\r\n\r\nIf my summary is correct, and it seems the main concern is about `UintToArith256()` test coverage (and not so much `uint256::FromHex()` coverage, I think my latest force-push should address your concerns by vastly expanding (and at the same time simplifying) the `conversion` tests in 6cfa7f4a0361d9c396d1c5bd71849295baf6290d? ",
      "created_at": "2024-09-04T15:59:13Z",
      "updated_at": "2024-09-04T15:59:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1744056376",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744056376"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744062744",
      "pull_request_review_id": 2280659906,
      "id": 1744062744,
      "node_id": "PRRC_kwDOABII585n9EkY",
      "diff_hunk": "@@ -102,11 +103,12 @@ CFeeRate ParseFeeRate(const UniValue& json)\n uint256 ParseHashV(const UniValue& v, std::string_view name)\n {\n     const std::string& strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\n-    return uint256S(strHex);\n+    const auto expected_len{uint256::size() * 2};\n+    if (expected_len != strHex.length()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, expected_len, strHex.length(), strHex));\n+    }\n+    if (auto rv{uint256::FromHex(strHex)}) return *rv;",
      "path": "src/rpc/util.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "95b3aca0eb3fc49cd99b8de028a676bb04e2157f",
      "in_reply_to_id": 1743693696,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-09-04T16:03:43Z",
      "updated_at": "2024-09-04T16:03:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1744062744",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744062744"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744063063",
      "pull_request_review_id": 2280660432,
      "id": 1744063063,
      "node_id": "PRRC_kwDOABII585n9EpX",
      "diff_hunk": "@@ -102,11 +103,12 @@ CFeeRate ParseFeeRate(const UniValue& json)\n uint256 ParseHashV(const UniValue& v, std::string_view name)\n {\n     const std::string& strHex(v.get_str());\n-    if (64 != strHex.length())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, 64, strHex.length(), strHex));\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be hexadecimal string (not '%s')\", name, strHex));\n-    return uint256S(strHex);\n+    const auto expected_len{uint256::size() * 2};\n+    if (expected_len != strHex.length()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", name, expected_len, strHex.length(), strHex));\n+    }",
      "path": "src/rpc/util.cpp",
      "position": 1,
      "original_position": 20,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "da4377dc2ad0f495ebb97722d6cc2a95850363fa",
      "in_reply_to_id": 1743824684,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Adopted both suggestions, thanks!",
      "created_at": "2024-09-04T16:03:58Z",
      "updated_at": "2024-09-04T16:03:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1744063063",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744063063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": 107,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744081326",
      "pull_request_review_id": 2280694965,
      "id": 1744081326,
      "node_id": "PRRC_kwDOABII585n9JGu",
      "diff_hunk": "@@ -571,4 +552,50 @@ BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% cover\n     CHECKBITWISEOPERATOR(R1,~R2,&)\n }\n \n+BOOST_AUTO_TEST_CASE(conversion)",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 92,
      "original_position": 88,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "b60013ed71b697bab98884aa475fb64ae7736c2e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "so these are basically roundtrip tests now, right?\r\nThese are very valuable (could even be a fuzz test now), but could we add back some of the hardcoded ones to make sure they're not just self-referentially correct (i.e. circular reasoning):\r\n```C++\r\n    BOOST_CHECK_EQUAL(ArithToUint256(ZeroL), uint256::ZERO);\r\n    BOOST_CHECK_EQUAL(ArithToUint256(OneL), uint256::ONE);\r\n    BOOST_CHECK_EQUAL(UintToArith256(uint256::ZERO), ZeroL);\r\n    BOOST_CHECK_EQUAL(UintToArith256(uint256::ONE), OneL);\r\n```",
      "created_at": "2024-09-04T16:18:05Z",
      "updated_at": "2024-09-04T16:24:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1744081326",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744081326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 564,
      "original_line": 564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744104279",
      "pull_request_review_id": 2280735179,
      "id": 1744104279,
      "node_id": "PRRC_kwDOABII585n9OtX",
      "diff_hunk": "@@ -571,4 +552,50 @@ BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% cover\n     CHECKBITWISEOPERATOR(R1,~R2,&)\n }\n \n+BOOST_AUTO_TEST_CASE(conversion)",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 92,
      "original_position": 88,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "b60013ed71b697bab98884aa475fb64ae7736c2e",
      "in_reply_to_id": 1744081326,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> so these are basically roundtrip tests now, right?\r\n\r\nI think `BOOST_CHECK_EQUAL(UintToArith256(ArithToUint256(arith)), arith);` is the only roundtrip?\r\n\r\n> but could we add back some of the hardcoded ones to make sure they're not just self-referentially correct (i.e. circular reasoning):\r\n\r\nIsn't that covered here? https://github.com/bitcoin/bitcoin/pull/30773/files#diff-d06d0fcd312512f190cc0d05450dd55973c60aeb8d57ed2d705e7beaa383f386R565-R568",
      "created_at": "2024-09-04T16:35:10Z",
      "updated_at": "2024-09-04T16:35:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1744104279",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744104279"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 564,
      "original_line": 564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744187608",
      "pull_request_review_id": 2280871985,
      "id": 1744187608,
      "node_id": "PRRC_kwDOABII585n9jDY",
      "diff_hunk": "@@ -571,4 +552,50 @@ BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% cover\n     CHECKBITWISEOPERATOR(R1,~R2,&)\n }\n \n+BOOST_AUTO_TEST_CASE(conversion)",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 92,
      "original_position": 88,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "b60013ed71b697bab98884aa475fb64ae7736c2e",
      "in_reply_to_id": 1744081326,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not exactly, this looks more like a trampoline than simple hard-coded examples for just `ArithToUint256` and `UintToArith256`. Both sides depend on the same parameter, which seems circular to me-at least from a black-box perspective. However, I’m fine with this if you think it’s sufficient.",
      "created_at": "2024-09-04T17:38:59Z",
      "updated_at": "2024-09-04T17:39:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1744187608",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744187608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 564,
      "original_line": 564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744646596",
      "pull_request_review_id": 2281627603,
      "id": 1744646596,
      "node_id": "PRRC_kwDOABII585n_THE",
      "diff_hunk": "@@ -571,4 +552,50 @@ BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% cover\n     CHECKBITWISEOPERATOR(R1,~R2,&)\n }\n \n+BOOST_AUTO_TEST_CASE(conversion)",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 92,
      "original_position": 88,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "b60013ed71b697bab98884aa475fb64ae7736c2e",
      "in_reply_to_id": 1744081326,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm sorry, I just don't see how those hardcoded tests are any different from the ones I linked. `ZeroL` is the same as `arith_uint256{0}`, and `uint256::ZERO` is the same as `uint256{0}`. Besides these aliases being irrelevant for a conversion test, their equivalence is tested in other unit tests already. What am I missing?",
      "created_at": "2024-09-05T00:24:26Z",
      "updated_at": "2024-09-05T00:24:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1744646596",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744646596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 564,
      "original_line": 564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744966102",
      "pull_request_review_id": 2282109178,
      "id": 1744966102,
      "node_id": "PRRC_kwDOABII585oAhHW",
      "diff_hunk": "@@ -97,27 +91,17 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 24,
      "original_position": 28,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "948bb07715f9ef1d90b91dfbea4f487f755498f5",
      "in_reply_to_id": 1743729122,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Is it fair to summarize that your concern is that even though the tests I remove here are theoretically not necessary since we should have equivalent unit test coverage on the 2 underlying functions (`uint256::FromHex()` and `UintToArith256()`), you'd rather keep them because ensuring that the unit test coverage is indeed equivalent is burdensome and makes this PR harder to review?\r\n\r\nYes. At least I had difficulty seeing that the test coverage does not decrease, and the tests run so fast that in the case where they are redundant, no one should notice.\r\n\r\nI'd say it is mostly about review. I like this pull request, but I don't want to spend the majority of the review time here on unit test refactoring, where it is unclear what the clear benefit will be now. Also, if the unit tests are changed soon again, maybe the more involved changes can be postponed?",
      "created_at": "2024-09-05T07:39:00Z",
      "updated_at": "2024-09-05T07:52:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1744966102",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1744966102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745515725",
      "pull_request_review_id": 2283018991,
      "id": 1745515725,
      "node_id": "PRRC_kwDOABII585oCnTN",
      "diff_hunk": "@@ -97,27 +91,17 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 24,
      "original_position": 28,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "948bb07715f9ef1d90b91dfbea4f487f755498f5",
      "in_reply_to_id": 1743729122,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> and the tests run so fast that in the case where they are redundant, no one should notice.\r\n\r\nAbsolutely, the cleanup is to avoid having tests that have unclear purpose, making them easier to maintain going forward. Performance is not the goal here.\r\n\r\nI think it's impossible for this PR to not have significant changes to the unit tests, so I feel like since the review is happening anyway the test improvements I've introduced here make sense and add little overhead?\r\n\r\nThat said, I'm unsure if you're waiting for me to revert things or if you're happy with the current approach, so just to make it explicit could you please clarify if you'd prefer:\r\n1) the `conversion` test changes to be reverted\r\n2) the \"string constructor\" tests to be re-added\r\n3) moving the `conversion` and `operator_with_self` to `arith_uint256_tests.cpp` to be reverted (not explicitly discussed, but I'm inferring from your message that this might be a concern)",
      "created_at": "2024-09-05T13:12:42Z",
      "updated_at": "2024-09-05T13:12:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1745515725",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745515725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745557271",
      "pull_request_review_id": 2283090302,
      "id": 1745557271,
      "node_id": "PRRC_kwDOABII585oCxcX",
      "diff_hunk": "@@ -571,4 +552,50 @@ BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% cover\n     CHECKBITWISEOPERATOR(R1,~R2,&)\n }\n \n+BOOST_AUTO_TEST_CASE(conversion)",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 92,
      "original_position": 88,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "b60013ed71b697bab98884aa475fb64ae7736c2e",
      "in_reply_to_id": 1744081326,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You already know at the implementation, that's why it seems the same.\r\nThe test would also pass for a simple re-cast roundtrip:\r\n```C++\r\nauto ArithToUint256_mock(const arith_uint256 &a) { return *reinterpret_cast<const uint256*>(&a); }\r\nauto UintToArith256_mock(const uint256 &a) { return *reinterpret_cast<const arith_uint256*>(&a); }\r\nBOOST_AUTO_TEST_CASE(conversion)\r\n{\r\n    for (const arith_uint256& arith : {ZeroL, OneL, R1L, R2L}) {\r\n        const auto u256{uint256::FromHex(arith.GetHex()).value()};\r\n        BOOST_CHECK_EQUAL(UintToArith256_mock(ArithToUint256_mock(arith)), arith);\r\n        BOOST_CHECK_EQUAL(UintToArith256_mock(u256), arith);\r\n        BOOST_CHECK_EQUAL(u256, ArithToUint256_mock(arith));\r\n        BOOST_CHECK_EQUAL(ArithToUint256_mock(arith).GetHex(), UintToArith256_mock(u256).GetHex());\r\n    }\r\n\r\n    for (const uint8_t num : {0, 1, 0xff}) {\r\n        BOOST_CHECK_EQUAL(UintToArith256_mock(uint256{num}), arith_uint256{num});\r\n        BOOST_CHECK_EQUAL(uint256{num}, ArithToUint256_mock(arith_uint256{num}));\r\n    }\r\n}\r\n```\r\n\r\nThat's why I though we should cover it with hard-coded examples which cannot cheat by passing the parameter around.\r\n(note, the previous hard-coded ones also pass for the above `_mock` methods, we should find better ones to obviate why the mocks are incorrect)",
      "created_at": "2024-09-05T13:36:34Z",
      "updated_at": "2024-09-05T13:39:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1745557271",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745557271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 564,
      "original_line": 564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745564600",
      "pull_request_review_id": 2283102666,
      "id": 1745564600,
      "node_id": "PRRC_kwDOABII585oCzO4",
      "diff_hunk": "@@ -97,27 +91,17 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 24,
      "original_position": 28,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "948bb07715f9ef1d90b91dfbea4f487f755498f5",
      "in_reply_to_id": 1743729122,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">  so I feel like since the review is happening anyway the test improvements I've introduced here make sense and add little overhead?\r\n\r\nAgree, let's leave the campground cleaner than we found it.",
      "created_at": "2024-09-05T13:40:51Z",
      "updated_at": "2024-09-05T13:40:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1745564600",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745564600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745612258",
      "pull_request_review_id": 2283180007,
      "id": 1745612258,
      "node_id": "PRRC_kwDOABII585oC-3i",
      "diff_hunk": "@@ -571,4 +552,50 @@ BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% cover\n     CHECKBITWISEOPERATOR(R1,~R2,&)\n }\n \n+BOOST_AUTO_TEST_CASE(conversion)",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 92,
      "original_position": 88,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "b60013ed71b697bab98884aa475fb64ae7736c2e",
      "in_reply_to_id": 1744081326,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> You already know at the implementation\r\n\r\nAt which points are these test relying on implementation?\r\n\r\nThanks for providing an example. If you have a diff that shows where the \"hardcoded\" tests catch something that \"my\" tests don't, that would really help. I struggle to see how `BOOST_CHECK_EQUAL(ArithToUint256(ZeroL), uint256::ZERO);` is any different from `BOOST_CHECK_EQUAL(ArithToUint256(arith_uint256{0}), uint256{0});` (or how that substitution is relying on implementation details, which you seem to be hinting at).",
      "created_at": "2024-09-05T14:06:41Z",
      "updated_at": "2024-09-05T14:06:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1745612258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745612258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 564,
      "original_line": 564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745868679",
      "pull_request_review_id": 2283601383,
      "id": 1745868679,
      "node_id": "PRRC_kwDOABII585oD9eH",
      "diff_hunk": "@@ -97,27 +91,17 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 24,
      "original_position": 28,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "948bb07715f9ef1d90b91dfbea4f487f755498f5",
      "in_reply_to_id": 1743729122,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> the \"string constructor\" tests to be re-added\r\n\r\nThat'd be my preference for now. Even if the tests are redundant, it seems cleaner to keep them for now to make review trivial (and maybe for symmetry with the uint256 tests).\r\n\r\nThere are many more obvious redundant and useless tests, like `BOOST_CHECK(1 == 0+1);` in this test case, so a lot more could be changed, but maybe removing tests can be done in a follow-up, or not at all.\r\n\r\nBut none of this is a blocker, so fully up to you. Feel free to close this thread.",
      "created_at": "2024-09-05T16:45:20Z",
      "updated_at": "2024-09-05T16:45:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1745868679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1745868679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746095482",
      "pull_request_review_id": 2283976479,
      "id": 1746095482,
      "node_id": "PRRC_kwDOABII585oE016",
      "diff_hunk": "@@ -571,4 +552,50 @@ BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% cover\n     CHECKBITWISEOPERATOR(R1,~R2,&)\n }\n \n+BOOST_AUTO_TEST_CASE(conversion)",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 92,
      "original_position": 88,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "b60013ed71b697bab98884aa475fb64ae7736c2e",
      "in_reply_to_id": 1744081326,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> The test would also pass for a simple re-cast roundtrip:\r\n\r\nI'm a bit confused by the example `_mock` functions. I think reinterpret casting a `std::array<uint8_t, 32>` <-> `uint32_t[8]` can actually be a (unreliable and unsafe but depending on memory alignment sometimes correct) way of implementing the conversion functions, since both types are 256 contiguous bits of uint data? So depending on your platform, I think this passing the tests doesn't really provide much information?\r\n\r\nSorry if I'm being dim, I'm really trying to understand your concern.",
      "created_at": "2024-09-05T20:03:10Z",
      "updated_at": "2024-09-05T20:03:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1746095482",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746095482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 564,
      "original_line": 564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746138999",
      "pull_request_review_id": 2284047992,
      "id": 1746138999,
      "node_id": "PRRC_kwDOABII585oE_d3",
      "diff_hunk": "@@ -571,4 +552,50 @@ BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% cover\n     CHECKBITWISEOPERATOR(R1,~R2,&)\n }\n \n+BOOST_AUTO_TEST_CASE(conversion)",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 92,
      "original_position": 88,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "b60013ed71b697bab98884aa475fb64ae7736c2e",
      "in_reply_to_id": 1744081326,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Sorry if I'm being dim, I'm really trying to understand your concern.\r\n\r\nI can see that and I appreciate it.\r\n\r\n> I think BOOST_CHECK_EQUAL(UintToArith256(ArithToUint256(arith)), arith); is the only roundtrip?\r\n\r\nAren't these roundtrip as well because of `GetHex`/`FromHex`?\r\n```C++\r\nconst auto u256{uint256::FromHex(arith.GetHex()).value()};\r\nBOOST_CHECK_EQUAL(UintToArith256(u256), arith);\r\nBOOST_CHECK_EQUAL(u256, ArithToUint256(arith));\r\nBOOST_CHECK_EQUAL(ArithToUint256(arith).GetHex(), UintToArith256(u256).GetHex());\r\n```\r\n\r\n> I think this passing the tests doesn't really provide much information?\r\n\r\nIt's not trivial to find a counter example here which would still pass - but that's exactly my concern, that's it's too complicated, that if e.g. `GetHex` would accidentally zero out the internal state, many of these would pass, but comparing against a constant value is harder to trick, since only one side can change (easier to grasp than nested methods and parameters and states).\r\n\r\nE.g. imagine having a trim method, and we're asserting that when it doesn't start with a space, the length is the same as the original (`BOOST_CHECK_EQUAL(Trim(orig).size(), orig.size());`). Would you trust this `Trim` method without having a concrete example like `BOOST_CHECK_EQUAL(Trim(\"abc\"), \"abc\");` and `BOOST_CHECK_EQUAL(Trim(\" abc \"), \"abc\");`, etc?\r\n\r\nIn fuzz testing the above ones are fine, since we're checking invariants (i.e. constant properties) of the method (e.g. that a trimmed method's size can never be greater than the original), but in unit testing we usually provide simple examples that serve as documentation as well.\r\n\r\nSo all in all, I think the above examples are very good property-based tests, but I'm missing simple unit tests that can document the behavior of the method in a trivial way (i.e. when they fail I want to pinpoint the reason quickly).\r\n\r\nBut I've already ACK-ed this, it's not a blocker, if this is still doesn't make sense, please mark it as resolved, it's not that important :)",
      "created_at": "2024-09-05T20:46:53Z",
      "updated_at": "2024-09-05T20:46:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1746138999",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746138999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 564,
      "original_line": 564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746191005",
      "pull_request_review_id": 2284131255,
      "id": 1746191005,
      "node_id": "PRRC_kwDOABII585oFMKd",
      "diff_hunk": "@@ -264,22 +264,6 @@ BOOST_AUTO_TEST_CASE(methods) // GetHex SetHexDeprecated FromHex begin() end() s\n     ss.clear();\n }\n \n-BOOST_AUTO_TEST_CASE( conversion )\n-{\n-    BOOST_CHECK_EQUAL(ArithToUint256(UintToArith256(ZeroL)), ZeroL);\n-    BOOST_CHECK_EQUAL(ArithToUint256(UintToArith256(OneL)), OneL);\n-    BOOST_CHECK_EQUAL(ArithToUint256(UintToArith256(R1L)), R1L);\n-    BOOST_CHECK_EQUAL(ArithToUint256(UintToArith256(R2L)), R2L);\n-    BOOST_CHECK_EQUAL(UintToArith256(ZeroL), 0);\n-    BOOST_CHECK_EQUAL(UintToArith256(OneL), 1);",
      "path": "src/test/uint256_tests.cpp",
      "position": 80,
      "original_position": 11,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "6cfa7f4a0361d9c396d1c5bd71849295baf6290d",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: The old `conversion` test compared against integer literals here. The `methods` test in *arith_uint256_tests.cpp* compares against `0`, so this is covered in part.\r\n\r\nStill, what do you think about adding something like:\r\n```diff\r\ndiff --git a/src/test/arith_uint256_tests.cpp b/src/test/arith_uint256_tests.cpp\r\nindex f596951dac..d437b6a54b 100644\r\n--- a/src/test/arith_uint256_tests.cpp\r\n+++ b/src/test/arith_uint256_tests.cpp\r\n@@ -565,6 +565,8 @@ BOOST_AUTO_TEST_CASE(conversion)\r\n     for (uint8_t num : {0, 1, 0xff}) {\r\n         BOOST_CHECK_EQUAL(UintToArith256(uint256{num}), arith_uint256{num});\r\n         BOOST_CHECK_EQUAL(uint256{num}, ArithToUint256(arith_uint256{num}));\r\n+        BOOST_CHECK_EQUAL(UintToArith256(uint256{num}), num);\r\n+        BOOST_CHECK_EQUAL(arith_uint256{num}, num);\r\n     }\r\n }\r\n```",
      "created_at": "2024-09-05T21:44:22Z",
      "updated_at": "2024-09-05T21:47:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1746191005",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1746191005"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": 273,
      "original_start_line": 273,
      "start_side": "LEFT",
      "line": 274,
      "original_line": 274,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747133662",
      "pull_request_review_id": 2286282737,
      "id": 1747133662,
      "node_id": "PRRC_kwDOABII585oIyTe",
      "diff_hunk": "@@ -264,22 +264,6 @@ BOOST_AUTO_TEST_CASE(methods) // GetHex SetHexDeprecated FromHex begin() end() s\n     ss.clear();\n }\n \n-BOOST_AUTO_TEST_CASE( conversion )\n-{\n-    BOOST_CHECK_EQUAL(ArithToUint256(UintToArith256(ZeroL)), ZeroL);\n-    BOOST_CHECK_EQUAL(ArithToUint256(UintToArith256(OneL)), OneL);\n-    BOOST_CHECK_EQUAL(ArithToUint256(UintToArith256(R1L)), R1L);\n-    BOOST_CHECK_EQUAL(ArithToUint256(UintToArith256(R2L)), R2L);\n-    BOOST_CHECK_EQUAL(UintToArith256(ZeroL), 0);\n-    BOOST_CHECK_EQUAL(UintToArith256(OneL), 1);",
      "path": "src/test/uint256_tests.cpp",
      "position": 80,
      "original_position": 11,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "6cfa7f4a0361d9c396d1c5bd71849295baf6290d",
      "in_reply_to_id": 1746191005,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think `BOOST_CHECK_EQUAL(arith_uint256{num}, num);` is a `conversion` test, so I'm going to leave that out here, but I like the `BOOST_CHECK_EQUAL(UintToArith256(uint256{num}), num);` suggestion, thanks!",
      "created_at": "2024-09-06T13:31:56Z",
      "updated_at": "2024-09-06T15:56:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1747133662",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747133662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": 273,
      "original_start_line": 273,
      "start_side": "LEFT",
      "line": 274,
      "original_line": 274,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747332332",
      "pull_request_review_id": 2286282737,
      "id": 1747332332,
      "node_id": "PRRC_kwDOABII585oJizs",
      "diff_hunk": "@@ -97,27 +91,17 @@ BOOST_AUTO_TEST_CASE( basics ) // constructors, equality, inequality\n     }\n     BOOST_CHECK(ZeroL == (OneL << 256));\n \n-    // String Constructor and Copy Constructor\n-    BOOST_CHECK(arith_uint256S(\"0x\" + R1L.ToString()) == R1L);",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 24,
      "original_position": 28,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "948bb07715f9ef1d90b91dfbea4f487f755498f5",
      "in_reply_to_id": 1743729122,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Okay, I've re-added the \"string constructor\" tests. I think they can be removed later, but that's obviously not critical either. Thanks for explaining your concerns.",
      "created_at": "2024-09-06T15:39:34Z",
      "updated_at": "2024-09-06T15:56:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1747332332",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747332332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747350282",
      "pull_request_review_id": 2286282737,
      "id": 1747350282,
      "node_id": "PRRC_kwDOABII585oJnMK",
      "diff_hunk": "@@ -571,4 +552,50 @@ BOOST_AUTO_TEST_CASE( getmaxcoverage ) // some more tests just to get 100% cover\n     CHECKBITWISEOPERATOR(R1,~R2,&)\n }\n \n+BOOST_AUTO_TEST_CASE(conversion)",
      "path": "src/test/arith_uint256_tests.cpp",
      "position": 92,
      "original_position": 88,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "b60013ed71b697bab98884aa475fb64ae7736c2e",
      "in_reply_to_id": 1744081326,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> but I'm missing simple unit tests that can document the behavior of the method in a trivial way\r\n\r\nIf we assume that `GetHex()` is a complete representation of each class' internal state, then feel like it's reasonable (even if suboptimal) to rely on using that method do assess the correctness of the conversion function, if `GetHex()` is well unit tested. Also note that we have tests that don't rely on `GetHex()` / `FromHex()` at all, i.e.:\r\n\r\n```\r\n    for (uint8_t num : {0, 1, 0xff}) {\r\n        BOOST_CHECK_EQUAL(UintToArith256(uint256{num}), arith_uint256{num});\r\n        BOOST_CHECK_EQUAL(uint256{num}, ArithToUint256(arith_uint256{num}));\r\n        BOOST_CHECK_EQUAL(UintToArith256(uint256{num}), num);\r\n    }\r\n```\r\n\r\nThat said, I think we both agree that having trivial checks that rely as little as possible on other functions is good. I think the `for (uint8_t num : {0, 1, 0xff}) {` tests are a good example of that, but they could be expanded by constructing more `uint256`'s from hardcoded arrays. I think my confusion arose from the fact that we already _are_ doing such \"hardcoded\" conversion tests (for `{0, 1, 0xff}`), but this could be improved upon by adding more `uint256`s that are larger than 0xff?\r\n\r\nWhile I don't object to that, I think it's not really necessary to this PR, so since it's not blocking for you I think it makes sense to leave it at this.",
      "created_at": "2024-09-06T15:52:05Z",
      "updated_at": "2024-09-06T15:56:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1747350282",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1747350282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 564,
      "original_line": 564,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1748063177",
      "pull_request_review_id": 2287480459,
      "id": 1748063177,
      "node_id": "PRRC_kwDOABII585oMVPJ",
      "diff_hunk": "@@ -140,7 +140,7 @@ FUZZ_TARGET(integer, .init = initialize_integer)\n \n     const arith_uint256 au256 = UintToArith256(u256);\n     assert(ArithToUint256(au256) == u256);\n-    assert(uint256S(au256.GetHex()) == u256);\n+    assert(uint256::FromHex(au256.GetHex()).value() == u256);",
      "path": "src/test/fuzz/integer.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit1: you might as well delete the empty `(void)au256.GetHex();` a few lines below\r\nnit2: `value()` is redundant here (i.e. `assert(uint256::FromHex(au256.GetHex()) == u256);` suffices) since `std::optional` has an `==`:\r\n```C++\r\noperator==(const optional<_Tp>& __x, const _Up& __v)\r\n{\r\n    return static_cast<bool>(__x) ? *__x == __v : false;\r\n}\r\n```",
      "created_at": "2024-09-07T11:59:57Z",
      "updated_at": "2024-09-07T20:19:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1748063177",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1748063177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 143,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749974868",
      "pull_request_review_id": 2289462924,
      "id": 1749974868,
      "node_id": "PRRC_kwDOABII585oTn9U",
      "diff_hunk": "@@ -140,7 +140,7 @@ FUZZ_TARGET(integer, .init = initialize_integer)\n \n     const arith_uint256 au256 = UintToArith256(u256);\n     assert(ArithToUint256(au256) == u256);\n-    assert(uint256S(au256.GetHex()) == u256);\n+    assert(uint256::FromHex(au256.GetHex()).value() == u256);",
      "path": "src/test/fuzz/integer.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "in_reply_to_id": 1748063177,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> nit1: you might as well delete the empty `(void)au256.GetHex();` a few lines below\r\n\r\nI'm not sure if that would be an improvement, though. I think having a dedicated test on each method is nice and consistent, so I think even though it's redundant keeping both calls seems sensible to me to e.g. avoid accidentally removing coverage when `uint256::FromHex()` is removed?\r\n\r\n> nit2: `value()` is redundant here\r\n\r\nah right, thanks, will update if I have to force-push.",
      "created_at": "2024-09-09T10:06:51Z",
      "updated_at": "2024-09-09T10:06:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1749974868",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749974868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 143,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750074771",
      "pull_request_review_id": 2289617752,
      "id": 1750074771,
      "node_id": "PRRC_kwDOABII585oUAWT",
      "diff_hunk": "@@ -140,7 +140,7 @@ FUZZ_TARGET(integer, .init = initialize_integer)\n \n     const arith_uint256 au256 = UintToArith256(u256);\n     assert(ArithToUint256(au256) == u256);\n-    assert(uint256S(au256.GetHex()) == u256);\n+    assert(uint256::FromHex(au256.GetHex()).value() == u256);",
      "path": "src/test/fuzz/integer.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "original_commit_id": "43cd83b0c7ba436b8ffc83d8a65e935714dffe70",
      "in_reply_to_id": 1748063177,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> having a dedicated test on each method is nice and consistent\r\n\r\nBut it's not validating anything (except for severe exceptions), it's just an empty call to increase line coverage (i.e. kinda' fake confidence boost).\r\nBut in your case even the return value is validated, so there's no point in leaving the empty one.",
      "created_at": "2024-09-09T11:23:09Z",
      "updated_at": "2024-09-09T11:23:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30773#discussion_r1750074771",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1750074771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30773"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 143,
      "original_line": 143,
      "side": "RIGHT"
    }
  ]
}