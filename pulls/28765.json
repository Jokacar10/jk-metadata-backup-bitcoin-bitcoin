{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765",
    "id": 1582308767,
    "node_id": "PR_kwDOABII585eUB2f",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/28765",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/28765.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/28765.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
    "number": 28765,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "p2p: Fill reconciliation sets (Erlay)",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Keep track of per-peer reconciliation sets containing transactions to be exchanged efficiently. The remaining transactions are announced via usual flooding.\r\n\r\nErlay Project Tracking: #28646",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      }
    ],
    "created_at": "2023-11-01T09:06:40Z",
    "updated_at": "2025-05-16T06:07:53Z",
    "closed_at": "2024-05-16T14:15:04Z",
    "mergeable_state": "unknown",
    "merged": false,
    "merge_commit_sha": "6e9a691f004258ca57ace04db233508f503d1463",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "naumenkogs:2023-11-erlay2.1",
      "ref": "2023-11-erlay2.1",
      "sha": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 115054139,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTUwNTQxMzk=",
        "name": "bitcoin",
        "full_name": "naumenkogs/bitcoin",
        "owner": {
          "login": "naumenkogs",
          "id": 7975071,
          "node_id": "MDQ6VXNlcjc5NzUwNzE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/naumenkogs",
          "html_url": "https://github.com/naumenkogs",
          "followers_url": "https://api.github.com/users/naumenkogs/followers",
          "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
          "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
          "repos_url": "https://api.github.com/users/naumenkogs/repos",
          "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/naumenkogs/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/naumenkogs/bitcoin",
        "archive_url": "https://api.github.com/repos/naumenkogs/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/naumenkogs/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/naumenkogs/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/naumenkogs/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/naumenkogs/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/naumenkogs/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/naumenkogs/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/naumenkogs/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/naumenkogs/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/naumenkogs/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/naumenkogs/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/naumenkogs/bitcoin/events",
        "forks_url": "https://api.github.com/repos/naumenkogs/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/naumenkogs/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/naumenkogs/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/naumenkogs/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/naumenkogs/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/naumenkogs/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/naumenkogs/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/naumenkogs/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/naumenkogs/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/naumenkogs/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/naumenkogs/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/naumenkogs/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/naumenkogs/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/naumenkogs/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/naumenkogs/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/naumenkogs/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:naumenkogs/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/naumenkogs/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/naumenkogs/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/naumenkogs/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/naumenkogs/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/naumenkogs/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/naumenkogs/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/naumenkogs/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/naumenkogs/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/naumenkogs/bitcoin/hooks",
        "svn_url": "https://github.com/naumenkogs/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 259199,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-02-07T15:22:30Z",
        "created_at": "2017-12-21T22:52:17Z",
        "updated_at": "2021-03-02T13:21:27Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "5c6d900a27076aee95b046c1a7352e832215e88d",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37224,
        "stargazers_count": 83600,
        "watchers_count": 83600,
        "size": 281975,
        "default_branch": "master",
        "open_issues_count": 732,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-15T15:58:39Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-05-16T06:23:52Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 511,
    "deletions": 27,
    "changed_files": 6,
    "commits": 6,
    "review_comments": 110,
    "comments": 16
  },
  "events": [
    {
      "event": "commented",
      "id": 1788632672,
      "node_id": "IC_kwDOABII585qnF5g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1788632672",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-01T09:06:43Z",
      "updated_at": "2024-05-01T07:07:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28765).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [brunoerg](https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1790706698) |\n| Stale ACK | [sr-gi](https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1845736014), [mzumsande](https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1778050698) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1788632672",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "labeled",
      "id": 10830034195,
      "node_id": "LE_lADOABII5851igl8zwAAAAKFhTUT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10830034195",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-01T09:06:45Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "reviewed",
      "id": 1709034021,
      "node_id": "PRR_kwDOABII585l3col",
      "url": null,
      "actor": null,
      "commit_id": "b07029a67c800c679214a28f935fa221b44e7ead",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1709034021",
      "submitted_at": "2023-11-01T20:45:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10840843324,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKGKiQ8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10840843324",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3d69f45e50f59ab34a23d83806e6304deedc25c8",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/3d69f45e50f59ab34a23d83806e6304deedc25c8",
      "created_at": "2023-11-02T08:33:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10840863289,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKGKnI5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10840863289",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "983f8c6e305fd9707c109c2a92637825262b9b09",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/983f8c6e305fd9707c109c2a92637825262b9b09",
      "created_at": "2023-11-02T08:35:30Z"
    },
    {
      "event": "commented",
      "id": 1790706698,
      "node_id": "IC_kwDOABII585qvAQK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1790706698",
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-02T13:16:30Z",
      "updated_at": "2023-11-02T13:16:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1790706698",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "reviewed",
      "id": 1710245379,
      "node_id": "PRR_kwDOABII585l8EYD",
      "url": null,
      "actor": null,
      "commit_id": "983f8c6e305fd9707c109c2a92637825262b9b09",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1710245379",
      "submitted_at": "2023-11-02T13:28:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "reviewed",
      "id": 1710413774,
      "node_id": "PRR_kwDOABII585l8tfO",
      "url": null,
      "actor": null,
      "commit_id": "983f8c6e305fd9707c109c2a92637825262b9b09",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1710413774",
      "submitted_at": "2023-11-02T14:16:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10883187929,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKIsETZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10883187929",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0e460a09b8bfd99d7a4dcd91fc8191cc9ca348bc",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/0e460a09b8bfd99d7a4dcd91fc8191cc9ca348bc",
      "created_at": "2023-11-07T08:02:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10883206094,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKIsIvO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10883206094",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2af4d12410aebce6b806a101d797357a49d6852b",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/2af4d12410aebce6b806a101d797357a49d6852b",
      "created_at": "2023-11-07T08:04:09Z"
    },
    {
      "event": "reviewed",
      "id": 1726306685,
      "node_id": "PRR_kwDOABII585m5Vl9",
      "url": null,
      "actor": null,
      "commit_id": "2af4d12410aebce6b806a101d797357a49d6852b",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1726306685",
      "submitted_at": "2023-11-12T18:54:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10966030175,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKNoFdf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10966030175",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4d43c7ddf508ac0eefa4641720376cc78c8f6d53",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/4d43c7ddf508ac0eefa4641720376cc78c8f6d53",
      "created_at": "2023-11-15T11:04:54Z"
    },
    {
      "event": "labeled",
      "id": 10966715213,
      "node_id": "LE_lADOABII5851igl8zwAAAAKNqstN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10966715213",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-15T12:17:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1814283859,
      "node_id": "IC_kwDOABII585sI8ZT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1814283859",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-16T11:43:01Z",
      "updated_at": "2023-11-16T11:43:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "```\r\nnode/txreconciliation.cpp:173 AddToSet: Assertion `recon_state.m_local_set.insert(wtxid).second' failed.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1814283859",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10993149093,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKPPiSl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10993149093",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "created_at": "2023-11-17T11:37:53Z"
    },
    {
      "event": "reviewed",
      "id": 1742493305,
      "node_id": "PRR_kwDOABII585n3FZ5",
      "url": null,
      "actor": null,
      "commit_id": "6977a5a156db691758779093c7e7b19039331e3a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1742493305",
      "submitted_at": "2023-11-21T16:39:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "reviewed",
      "id": 1742389495,
      "node_id": "PRR_kwDOABII585n2sD3",
      "url": null,
      "actor": null,
      "commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1742389495",
      "submitted_at": "2023-11-21T18:33:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "reviewed",
      "id": 1742817892,
      "node_id": "PRR_kwDOABII585n4Upk",
      "url": null,
      "actor": null,
      "commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1742817892",
      "submitted_at": "2023-11-21T18:37:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "reviewed",
      "id": 1737983905,
      "node_id": "PRR_kwDOABII585nl4eh",
      "url": null,
      "actor": null,
      "commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1737983905",
      "submitted_at": "2023-11-21T21:51:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11046633130,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKSbj6q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11046633130",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "94e6ea6fb8d81ccadb3bafbbf40596c7937e1e32",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/94e6ea6fb8d81ccadb3bafbbf40596c7937e1e32",
      "created_at": "2023-11-23T11:42:46Z"
    },
    {
      "event": "unlabeled",
      "id": 11047281468,
      "node_id": "UNLE_lADOABII5851igl8zwAAAAKSeCM8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11047281468",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-23T12:44:52Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11054186608,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKS4YBw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11054186608",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e5018f28b9055836d2f3891865a532a3ebb0b7ca",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/e5018f28b9055836d2f3891865a532a3ebb0b7ca",
      "created_at": "2023-11-24T08:52:26Z"
    },
    {
      "event": "commented",
      "id": 1825334360,
      "node_id": "IC_kwDOABII585szGRY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1825334360",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-24T08:53:58Z",
      "updated_at": "2023-11-24T08:53:58Z",
      "author_association": "MEMBER",
      "body": "Addressed the comments, mostly refactoring. Some conversations pending above. The code is good for review.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1825334360",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11119263860,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKWwoB0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11119263860",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0a59a3f63a5211ff7866c24861f6d9730fd156b7",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/0a59a3f63a5211ff7866c24861f6d9730fd156b7",
      "created_at": "2023-12-01T08:41:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11136141533,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKXxAjd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11136141533",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f895ae4b7aa7263acba1adb3886c47a36f40b024",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/f895ae4b7aa7263acba1adb3886c47a36f40b024",
      "created_at": "2023-12-04T09:13:28Z"
    },
    {
      "event": "commented",
      "id": 1838126153,
      "node_id": "IC_kwDOABII585tj5RJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1838126153",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-04T09:13:29Z",
      "updated_at": "2023-12-04T09:13:29Z",
      "author_association": "MEMBER",
      "body": "Addressed all comments. Ready for review.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1838126153",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "reviewed",
      "id": 1762709866,
      "node_id": "PRR_kwDOABII585pENFq",
      "url": null,
      "actor": null,
      "commit_id": "f895ae4b7aa7263acba1adb3886c47a36f40b024",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK [f895ae4](https://github.com/bitcoin/bitcoin/pull/28765/commits/f895ae4b7aa7263acba1adb3886c47a36f40b024)",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1762709866",
      "submitted_at": "2023-12-04T15:20:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "review_requested",
      "id": 11140665553,
      "node_id": "RRE_lADOABII5851igl8zwAAAAKYCRDR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11140665553",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-04T15:20:45Z",
      "requested_reviewer": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 11140665698,
      "node_id": "RRE_lADOABII5851igl8zwAAAAKYCRFi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11140665698",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-04T15:20:45Z",
      "requested_reviewer": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11149663585,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKYkl1h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11149663585",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3a062b2bdc6dc787b967947872f55131522cd2ac",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/3a062b2bdc6dc787b967947872f55131522cd2ac",
      "created_at": "2023-12-05T08:22:54Z"
    },
    {
      "event": "commented",
      "id": 1840243574,
      "node_id": "IC_kwDOABII585tr-N2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1840243574",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-05T08:23:46Z",
      "updated_at": "2023-12-05T08:23:46Z",
      "author_association": "MEMBER",
      "body": "@sr-gi implemented your suggestion and moved the last commit to the front, so that these legacy field don't distract reviewers.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1840243574",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "mentioned",
      "id": 11149675131,
      "node_id": "MEE_lADOABII5851igl8zwAAAAKYkop7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11149675131",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-05T08:23:47Z"
    },
    {
      "event": "subscribed",
      "id": 11149675161,
      "node_id": "SE_lADOABII5851igl8zwAAAAKYkoqZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11149675161",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-05T08:23:47Z"
    },
    {
      "event": "commented",
      "id": 1841206307,
      "node_id": "IC_kwDOABII585tvpQj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1841206307",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-05T16:49:08Z",
      "updated_at": "2023-12-05T16:49:08Z",
      "author_association": "MEMBER",
      "body": "re-ACK [3a062b2](https://github.com/bitcoin/bitcoin/pull/28765/commits/3a062b2bdc6dc787b967947872f55131522cd2ac) the diff is mainly moving the removal of TODOs between commits.\r\n\r\nI've noticed that the co-authorship of 3a062b2bdc6dc787b967947872f55131522cd2ac was dropped, which may have been unintended.\r\n\r\nAlso, looks like this is failing CI, but it may be unrelated.",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1841206307",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "reviewed",
      "id": 1765676669,
      "node_id": "PRR_kwDOABII585pPhZ9",
      "url": null,
      "actor": null,
      "commit_id": "3a062b2bdc6dc787b967947872f55131522cd2ac",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1765676669",
      "submitted_at": "2023-12-05T17:06:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJlZjY5ZmJiZTMzYTc2ZmY2MzRlMmNlNDZhZjIxZmY2ODdkNDg4N2M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ef69fbbe33a76ff634e2ce46af21ff687d4887c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2ef69fbbe33a76ff634e2ce46af21ff687d4887c",
      "tree": {
        "sha": "f1477854605050f250f22ca0d9fc98ac892c8b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1477854605050f250f22ca0d9fc98ac892c8b9b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e862bceb1705e6d8c1b738301ed10ae1b4413bfd",
          "sha": "e862bceb1705e6d8c1b738301ed10ae1b4413bfd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e862bceb1705e6d8c1b738301ed10ae1b4413bfd"
        }
      ],
      "message": "refactor: remove legacy comments\n\nThese comments became irrelevant in one of the previous code changes.\nThey simply don't make sense anymore.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2023-12-06T10:25:55Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2023-12-05T08:20:48Z"
      },
      "sha": "2ef69fbbe33a76ff634e2ce46af21ff687d4887c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11166307573,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKZkFT1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11166307573",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "dca7990c3b8b8ecb963c068b4a8a215e0c2b3cd0",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/dca7990c3b8b8ecb963c068b4a8a215e0c2b3cd0",
      "created_at": "2023-12-06T10:26:12Z"
    },
    {
      "event": "commented",
      "id": 1842597688,
      "node_id": "IC_kwDOABII585t0884",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1842597688",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-06T10:26:57Z",
      "updated_at": "2023-12-06T10:26:57Z",
      "author_association": "MEMBER",
      "body": "@sr-gi fixed the co-authorship. Thank you for patience :)\r\n\r\ntook @maflcko suggestion on deterministic tests.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1842597688",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "mentioned",
      "id": 11166316294,
      "node_id": "MEE_lADOABII5851igl8zwAAAAKZkHcG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11166316294",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-06T10:26:57Z"
    },
    {
      "event": "subscribed",
      "id": 11166316324,
      "node_id": "SE_lADOABII5851igl8zwAAAAKZkHck",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11166316324",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-06T10:26:57Z"
    },
    {
      "event": "mentioned",
      "id": 11166316351,
      "node_id": "MEE_lADOABII5851igl8zwAAAAKZkHc_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11166316351",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-06T10:26:57Z"
    },
    {
      "event": "subscribed",
      "id": 11166316370,
      "node_id": "SE_lADOABII5851igl8zwAAAAKZkHdS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11166316370",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-06T10:26:57Z"
    },
    {
      "event": "reviewed",
      "id": 1767980730,
      "node_id": "PRR_kwDOABII585pYT66",
      "url": null,
      "actor": null,
      "commit_id": "dca7990c3b8b8ecb963c068b4a8a215e0c2b3cd0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "tACK [dca7990](https://github.com/bitcoin/bitcoin/pull/28765/commits/dca7990c3b8b8ecb963c068b4a8a215e0c2b3cd0)",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1767980730",
      "submitted_at": "2023-12-06T15:57:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "reviewed",
      "id": 1767986165,
      "node_id": "PRR_kwDOABII585pYVP1",
      "url": null,
      "actor": null,
      "commit_id": "dca7990c3b8b8ecb963c068b4a8a215e0c2b3cd0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1767986165",
      "submitted_at": "2023-12-06T15:59:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11178738396,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKaTgLc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11178738396",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "created_at": "2023-12-07T08:41:46Z"
    },
    {
      "event": "commented",
      "id": 1844906757,
      "node_id": "IC_kwDOABII585t9wsF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1844906757",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-07T08:42:29Z",
      "updated_at": "2023-12-07T08:42:29Z",
      "author_association": "MEMBER",
      "body": "Took a minor suggestion from @sr-gi, fixed clang-formatting, fixed code distribution between the two last commits.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1844906757",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "mentioned",
      "id": 11178750505,
      "node_id": "MEE_lADOABII5851igl8zwAAAAKaTjIp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11178750505",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-07T08:42:29Z"
    },
    {
      "event": "subscribed",
      "id": 11178750536,
      "node_id": "SE_lADOABII5851igl8zwAAAAKaTjJI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11178750536",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-07T08:42:29Z"
    },
    {
      "event": "commented",
      "id": 1845736014,
      "node_id": "IC_kwDOABII585uA7JO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1845736014",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-07T17:08:16Z",
      "updated_at": "2023-12-07T17:08:16Z",
      "author_association": "MEMBER",
      "body": "re-ACK [f56ec8a](https://github.com/bitcoin/bitcoin/pull/28765/commits/f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9)",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1845736014",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "reviewed",
      "id": 1778050698,
      "node_id": "PRR_kwDOABII585p-uaK",
      "url": null,
      "actor": null,
      "commit_id": "f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code Review ACK f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9\r\n\r\nOne thing I'm unsure about is how the way we call `ShouldFanoutTo()` multiple times for each transaction might affect performance. \r\nIf we have 120 reconciling peers, and get a dump of `MAX_SET_SIZE=3000` transactions, I think we'd call this function `360000` times within a short timeframe. I wonder how long that would take, maybe we could add a benchmark for this? (could be done a follow-up)",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1778050698",
      "submitted_at": "2023-12-12T18:21:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "commented",
      "id": 1853445405,
      "node_id": "IC_kwDOABII585ueVUd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1853445405",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-13T08:11:24Z",
      "updated_at": "2023-12-13T08:11:24Z",
      "author_association": "MEMBER",
      "body": "@mzumsande Previously I also felt it's unfortunate, but never found a good way to fix it. Now I think perhaps we should compute `GetFanoutTargets` once for every transaction, and then memorize it in a `std::map<Wtxid, list_of_peers>` inside the TxReconciliation module. We can cap the map at 1000 in a FIFO-fashion. Worst case we drop a relevant transaction and then have to recompute it (that's current behaviour default case). Memory should be ok too: `1000 txs * 120 peers * 0.1 ratio = 12,000 entries of NodeId`. What do you think?",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1853445405",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "mentioned",
      "id": 11232582064,
      "node_id": "MEE_lADOABII5851igl8zwAAAAKdg5mw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11232582064",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-13T08:11:25Z"
    },
    {
      "event": "subscribed",
      "id": 11232582082,
      "node_id": "SE_lADOABII5851igl8zwAAAAKdg5nC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11232582082",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-13T08:11:25Z"
    },
    {
      "event": "commented",
      "id": 1854630701,
      "node_id": "IC_kwDOABII585ui2st",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1854630701",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-13T20:08:20Z",
      "updated_at": "2023-12-13T20:08:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "> What do you think?\r\n\r\nTo get an estimate about performance, I wrote a simple benchmark, see https://github.com/mzumsande/bitcoin/commit/22f98d6f54042b3e8ee41889ceb362f6355e4fa0. On my computer (neither particularly fast nor slow) I get `~1000op/s` per wtxid to call `ShouldFanoutTo()` for all 120 peers, so a batch of 3000 txs should take ~3s time in `ShouldFanoutTo`. \r\nSo I think that caching could make sense.\r\n\r\nI wonder if there is there a good way to restrict this map to wtxids that are still in some peer's inv queue and remove them afterwards, or would the map just always fill up?",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1854630701",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "reviewed",
      "id": 1780420519,
      "node_id": "PRR_kwDOABII585qHw-n",
      "url": null,
      "actor": null,
      "commit_id": "f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Not a full review; mostly performance improvement suggestions as I saw there was a suggestion to cache things. Before considering that, it may be worth benchmarking if that's still relevant with these review comments addressed.\r\n\r\nSee https://github.com/sipa/bitcoin/commits/pr28765 for a commit incorporating these changes (excluding caching). Feel free to use whatever part of it. I assume you'd at least want to rename `GetFanoutTargets` if its return value becomes a `bool` like here, but I haven't included that to minimize changes.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1780420519",
      "submitted_at": "2023-12-13T20:54:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11245480554,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKeSGpq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11245480554",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f322e3cf8828320be0b4e16f4b18c417d68b2890",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/f322e3cf8828320be0b4e16f4b18c417d68b2890",
      "created_at": "2023-12-14T09:12:59Z"
    },
    {
      "event": "commented",
      "id": 1855476801,
      "node_id": "IC_kwDOABII585umFRB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1855476801",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T09:23:09Z",
      "updated_at": "2023-12-14T09:23:09Z",
      "author_association": "MEMBER",
      "body": "Before @sipa optimization:\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|        1,401,785.00 |              713.38 |    1.6% |      0.02 | `ShouldFanoutTo`\r\n```\r\n\r\nAfter:\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|          369,620.50 |            2,705.48 |    1.4% |      0.01 | `ShouldFanoutTo`\r\n```\r\n\r\n4x improvement, I think batching is still worth implementing. I will suggest code changes shortly.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1855476801",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "mentioned",
      "id": 11245591412,
      "node_id": "MEE_lADOABII5851igl8zwAAAAKeSht0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11245591412",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T09:23:09Z"
    },
    {
      "event": "subscribed",
      "id": 11245591427,
      "node_id": "SE_lADOABII5851igl8zwAAAAKeShuD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11245591427",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T09:23:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11299576283,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKhgdnb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11299576283",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f8bd73a313978ecb18ad22e164648ef9bb242765",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/f8bd73a313978ecb18ad22e164648ef9bb242765",
      "created_at": "2023-12-20T08:52:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11299610079,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKhgl3f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11299610079",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "985b5970a75528c2fb68e1d56abef3b7f37f1ea5",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/985b5970a75528c2fb68e1d56abef3b7f37f1ea5",
      "created_at": "2023-12-20T08:55:44Z"
    },
    {
      "event": "commented",
      "id": 1864100266,
      "node_id": "IC_kwDOABII585vG-mq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1864100266",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-20T09:02:16Z",
      "updated_at": "2023-12-20T09:02:16Z",
      "author_association": "MEMBER",
      "body": "Finally submitted the optimized code.\r\nI also [tried caching](https://github.com/naumenkogs/bitcoin/commit/ae19891dfb588daefcda475a860464587f0480dc), but the speed went _down_ 10x (either map or unordered_map). Perhaps @sipa @mzumsande have interest in looking what could be the issue.",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1864100266",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "mentioned",
      "id": 11299685168,
      "node_id": "MEE_lADOABII5851igl8zwAAAAKhg4Mw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11299685168",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-20T09:02:16Z"
    },
    {
      "event": "subscribed",
      "id": 11299685199,
      "node_id": "SE_lADOABII5851igl8zwAAAAKhg4NP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11299685199",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-20T09:02:16Z"
    },
    {
      "event": "mentioned",
      "id": 11299685224,
      "node_id": "MEE_lADOABII5851igl8zwAAAAKhg4No",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11299685224",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-20T09:02:16Z"
    },
    {
      "event": "subscribed",
      "id": 11299685239,
      "node_id": "SE_lADOABII5851igl8zwAAAAKhg4N3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11299685239",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-20T09:02:16Z"
    },
    {
      "event": "reviewed",
      "id": 1809692459,
      "node_id": "PRR_kwDOABII585r3bcr",
      "url": null,
      "actor": null,
      "commit_id": "985b5970a75528c2fb68e1d56abef3b7f37f1ea5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "> Finally submitted the optimized code.\r\n\r\nDid you perhaps push the wrong branch? You upvoted several of sipa's suggestions but they don't seem to be addressed in the current code.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1809692459",
      "submitted_at": "2024-01-08T17:43:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11426657555,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKpFPUT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11426657555",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9e8e618f453305f41e27e724fe435769e24cc1d0",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/9e8e618f453305f41e27e724fe435769e24cc1d0",
      "created_at": "2024-01-09T08:04:32Z"
    },
    {
      "event": "commented",
      "id": 1882620655,
      "node_id": "IC_kwDOABII585wNoLv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1882620655",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T08:37:46Z",
      "updated_at": "2024-01-09T08:37:46Z",
      "author_association": "MEMBER",
      "body": "@mzumsande you're right i lost between branches, sorry.\r\n\r\nApparently caching gives another 12x boost, assuming it works correctly :)\r\n\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|           35,617.11 |           28,076.40 |    1.9% |      0.01 | `ShouldFanoutTo`\r\n```",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-1882620655",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "mentioned",
      "id": 11427017938,
      "node_id": "MEE_lADOABII5851igl8zwAAAAKpGnTS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11427017938",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T08:37:46Z"
    },
    {
      "event": "subscribed",
      "id": 11427017953,
      "node_id": "SE_lADOABII5851igl8zwAAAAKpGnTh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11427017953",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T08:37:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11427096540,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKpG6fc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11427096540",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c7c6bcc5c6ba7b5590470d2029fbc27321b35c8d",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/c7c6bcc5c6ba7b5590470d2029fbc27321b35c8d",
      "created_at": "2024-01-09T08:44:54Z"
    },
    {
      "event": "reviewed",
      "id": 1811832956,
      "node_id": "PRR_kwDOABII585r_mB8",
      "url": null,
      "actor": null,
      "commit_id": "c7c6bcc5c6ba7b5590470d2029fbc27321b35c8d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Some additional comments after the recent optimizations + caching ",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1811832956",
      "submitted_at": "2024-01-09T19:42:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11440026596,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKp4PPk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11440026596",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b54d8ec9ff524fb0986db78b22fe8d7c6277eb99",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/b54d8ec9ff524fb0986db78b22fe8d7c6277eb99",
      "created_at": "2024-01-10T08:30:31Z"
    },
    {
      "event": "reviewed",
      "id": 1813233994,
      "node_id": "PRR_kwDOABII585sE8FK",
      "url": null,
      "actor": null,
      "commit_id": "b54d8ec9ff524fb0986db78b22fe8d7c6277eb99",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1813233994",
      "submitted_at": "2024-01-10T15:21:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "labeled",
      "id": 11464332460,
      "node_id": "LE_lADOABII5851igl8zwAAAAKrU9Ss",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11464332460",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T04:16:12Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11536275804,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKvnZlc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11536275804",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7f12d4f2b48c491c8ed7e2c7499c33ff31b76052",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/7f12d4f2b48c491c8ed7e2c7499c33ff31b76052",
      "created_at": "2024-01-19T11:21:22Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJlOGVmMzhkMjljMWIwZThiNjA4NTM2ZWM3ZDRmZjYyMTJlYzhlODM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be8ef38d29c1b0e8b608536ec7d4ff6212ec8e83",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/be8ef38d29c1b0e8b608536ec7d4ff6212ec8e83",
      "tree": {
        "sha": "c8333269b88ce3f668267a5c0dfac21fe69f8666",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8333269b88ce3f668267a5c0dfac21fe69f8666"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ef69fbbe33a76ff634e2ce46af21ff687d4887c",
          "sha": "2ef69fbbe33a76ff634e2ce46af21ff687d4887c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2ef69fbbe33a76ff634e2ce46af21ff687d4887c"
        }
      ],
      "message": "p2p: Functions to add/remove wtxids to tx reconciliation sets\n\nThey will be used later on.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2024-01-19T11:28:35Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2022-10-08T06:25:01Z"
      },
      "sha": "be8ef38d29c1b0e8b608536ec7d4ff6212ec8e83"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11536381251,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKvnzVD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11536381251",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4d81becf248291e999476710f3ecb1aa7fadd046",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/4d81becf248291e999476710f3ecb1aa7fadd046",
      "created_at": "2024-01-19T11:30:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11554141893,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAAKwrjbF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11554141893",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "82126d3ca527e5c06606a50ee8d8baf792193ef4",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/82126d3ca527e5c06606a50ee8d8baf792193ef4",
      "created_at": "2024-01-22T09:40:36Z"
    },
    {
      "event": "unlabeled",
      "id": 11554763808,
      "node_id": "UNLE_lADOABII5851igl8zwAAAAKwt7Qg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11554763808",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T10:31:28Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1891766080,
      "node_id": "PRR_kwDOABII585wwg9A",
      "url": null,
      "actor": null,
      "commit_id": "82126d3ca527e5c06606a50ee8d8baf792193ef4",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1891766080",
      "submitted_at": "2024-02-20T23:56:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "reviewed",
      "id": 1894054084,
      "node_id": "PRR_kwDOABII585w5PjE",
      "url": null,
      "actor": null,
      "commit_id": "82126d3ca527e5c06606a50ee8d8baf792193ef4",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1894054084",
      "submitted_at": "2024-02-21T17:57:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNhZDZmMGEzNzQ5NWMyMTdkMDEzMDE3ZDU3NDRiMWJlZjhmNjRkMDM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cad6f0a37495c217d013017d5744b1bef8f64d03",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cad6f0a37495c217d013017d5744b1bef8f64d03",
      "tree": {
        "sha": "1f8ad47bb0d89e92dba543af8fffbbe4f67cb787",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f8ad47bb0d89e92dba543af8fffbbe4f67cb787"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be8ef38d29c1b0e8b608536ec7d4ff6212ec8e83",
          "sha": "be8ef38d29c1b0e8b608536ec7d4ff6212ec8e83",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/be8ef38d29c1b0e8b608536ec7d4ff6212ec8e83"
        }
      ],
      "message": "p2p: Add transactions to reconciliation sets\n\nTransactions eligible for reconciliation are added to the\nreconciliation sets. For the remaining txs, low-fanout is used.\n\nCo-authored-by: Martin Zumsande <mzumsande@gmail.com>\nCo-authored-by: Pieter Wuille <pieter.wuille@gmail.com>",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2024-02-22T07:19:08Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2023-12-05T08:11:33Z"
      },
      "sha": "cad6f0a37495c217d013017d5744b1bef8f64d03"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11886937119,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAALEhEQf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11886937119",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b3db2bcd011c70292079f1f95c72e744678d2299",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/b3db2bcd011c70292079f1f95c72e744678d2299",
      "created_at": "2024-02-22T07:20:52Z"
    },
    {
      "event": "reviewed",
      "id": 1896793349,
      "node_id": "PRR_kwDOABII585xDsUF",
      "url": null,
      "actor": null,
      "commit_id": "b3db2bcd011c70292079f1f95c72e744678d2299",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1896793349",
      "submitted_at": "2024-02-22T19:38:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "reviewed",
      "id": 1899172885,
      "node_id": "PRR_kwDOABII585xMxQV",
      "url": null,
      "actor": null,
      "commit_id": "b3db2bcd011c70292079f1f95c72e744678d2299",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "Reviewed up to `be8ef38d29`, still reading back txrelayism issue on announcement-related bandwidth / latency and responsibilities trade-off for the choice of current constants.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1899172885",
      "submitted_at": "2024-02-24T02:35:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "reviewed",
      "id": 1900853776,
      "node_id": "PRR_kwDOABII585xTLoQ",
      "url": null,
      "actor": null,
      "commit_id": "17ae36c0f60b976c237bdb522059c31cf113c773",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1900853776",
      "submitted_at": "2024-02-26T13:18:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg3ZTBlYzBiNGM5ZmUyZjc0NTUyNTUzNjUwZWE3OWRjYmM2N2Q5MTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87e0ec0b4c9fe2f74552553650ea79dcbc67d918",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/87e0ec0b4c9fe2f74552553650ea79dcbc67d918",
      "tree": {
        "sha": "d764c486fd66ce8ebda55c7fe5174707116366fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d764c486fd66ce8ebda55c7fe5174707116366fd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cad6f0a37495c217d013017d5744b1bef8f64d03",
          "sha": "cad6f0a37495c217d013017d5744b1bef8f64d03",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cad6f0a37495c217d013017d5744b1bef8f64d03"
        }
      ],
      "message": "add bench for ShouldFanoutTo",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2024-02-27T10:04:19Z"
      },
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2023-12-13T19:53:03Z"
      },
      "sha": "87e0ec0b4c9fe2f74552553650ea79dcbc67d918"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA3ZjNhZDRkOTQxYmQxMTUyZjE3YTdjMjRmZWIwZmQxNWM0YjFmZTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07f3ad4d941bd1152f17a7c24feb0fd15c4b1fe9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/07f3ad4d941bd1152f17a7c24feb0fd15c4b1fe9",
      "tree": {
        "sha": "e05fff261948006c133ad067f755811670f76b67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e05fff261948006c133ad067f755811670f76b67"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87e0ec0b4c9fe2f74552553650ea79dcbc67d918",
          "sha": "87e0ec0b4c9fe2f74552553650ea79dcbc67d918",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/87e0ec0b4c9fe2f74552553650ea79dcbc67d918"
        }
      ],
      "message": "p2p: Cache fanout candidates to optimize txreconciliation",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2024-02-27T10:04:20Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2023-12-20T08:53:28Z"
      },
      "sha": "07f3ad4d941bd1152f17a7c24feb0fd15c4b1fe9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGExNGRmZDljODczZDFlMTk2MjUyYzc3YWQ3YThiMzJiZDIxYjZmNmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "tree": {
        "sha": "6593facf727c929fb9906597da882a6adfc496f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6593facf727c929fb9906597da882a6adfc496f9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07f3ad4d941bd1152f17a7c24feb0fd15c4b1fe9",
          "sha": "07f3ad4d941bd1152f17a7c24feb0fd15c4b1fe9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/07f3ad4d941bd1152f17a7c24feb0fd15c4b1fe9"
        }
      ],
      "message": "p2p: Cache inbound reconciling peers count\n\nIt helps to avoid recomputing every time we consider\na transaction for fanout/reconciliation.",
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2024-02-27T10:04:35Z"
      },
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2024-01-17T09:28:02Z"
      },
      "sha": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11933853765,
      "node_id": "HRFPE_lADOABII5851igl8zwAAAALHUChF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11933853765",
      "actor": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "commit_url": "https://api.github.com/repos/naumenkogs/bitcoin/commits/a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "created_at": "2024-02-27T10:05:09Z"
    },
    {
      "event": "reviewed",
      "id": 1904815825,
      "node_id": "PRR_kwDOABII585xiS7R",
      "url": null,
      "actor": null,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1904815825",
      "submitted_at": "2024-02-27T21:12:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "reviewed",
      "id": 1909842426,
      "node_id": "PRR_kwDOABII585x1eH6",
      "url": null,
      "actor": null,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1909842426",
      "submitted_at": "2024-02-29T20:46:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "reviewed",
      "id": 1909866954,
      "node_id": "PRR_kwDOABII585x1kHK",
      "url": null,
      "actor": null,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1909866954",
      "submitted_at": "2024-02-29T21:01:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "reviewed",
      "id": 1911873457,
      "node_id": "PRR_kwDOABII585x9N-x",
      "url": null,
      "actor": null,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1911873457",
      "submitted_at": "2024-03-01T19:33:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "reviewed",
      "id": 1923513359,
      "node_id": "PRR_kwDOABII585ypnwP",
      "url": null,
      "actor": null,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1923513359",
      "submitted_at": "2024-03-07T20:53:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "reviewed",
      "id": 1953029553,
      "node_id": "PRR_kwDOABII5850aN2x",
      "url": null,
      "actor": null,
      "commit_id": "be8ef38d29c1b0e8b608536ec7d4ff6212ec8e83",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1953029553",
      "submitted_at": "2024-03-21T17:58:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "reviewed",
      "id": 1953049614,
      "node_id": "PRR_kwDOABII5850aSwO",
      "url": null,
      "actor": null,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#pullrequestreview-1953049614",
      "submitted_at": "2024-03-21T18:08:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
    },
    {
      "event": "commented",
      "id": 2115368489,
      "node_id": "IC_kwDOABII585-FfYp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115368489",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-16T14:15:04Z",
      "updated_at": "2024-05-16T14:15:04Z",
      "author_association": "MEMBER",
      "body": "Superseded by #30116",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#issuecomment-2115368489",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28765"
    },
    {
      "event": "closed",
      "id": 12834655350,
      "node_id": "CE_lADOABII5851igl8zwAAAAL9AUx2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12834655350",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-16T14:15:04Z"
    },
    {
      "event": "locked",
      "id": 17683189955,
      "node_id": "LOE_lADOABII5851igl8zwAAAAQeABDD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17683189955",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-16T06:07:53Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379299664",
      "pull_request_review_id": 1709034021,
      "id": 1379299664,
      "node_id": "PRRC_kwDOABII585SNnFQ",
      "diff_hunk": "@@ -5752,9 +5759,12 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         }\n \n         if (auto tx_relay = peer->GetTxRelay(); tx_relay != nullptr) {\n+                // Lock way before it's used to maintain lock ordering.",
      "path": "src/net_processing.cpp",
      "position": 60,
      "original_position": 32,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b07029a67c800c679214a28f935fa221b44e7ead",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could you explain a bit more why this is necessary, what is the lock order that would get violated if we did the locking later (just here, not necessarily in the comment)?",
      "created_at": "2023-11-01T20:27:58Z",
      "updated_at": "2023-11-01T21:45:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379299664",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379299664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5762,
      "original_line": 5762,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306577",
      "pull_request_review_id": 1709034021,
      "id": 1379306577,
      "node_id": "PRRC_kwDOABII585SNoxR",
      "diff_hunk": "@@ -81,4 +81,76 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    TxReconciliationTracker tracker(1);\n+    NodeId peer_id0 = 0;\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                            /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.\n+    for (int i = 1; i < 31; ++i) {\n+        tracker.PreRegisterPeer(i);\n+        BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+\n+    }\n+\n+    // Relay to a fraction of registered inbound peers.\n+    for (int j = 0; j < 100; ++j) {\n+        size_t total_fanouted = 0;\n+        auto wtxid = GetRandHash();\n+        for (int i = 1; i < 31; ++i) {\n+            total_fanouted += tracker.ShouldFanoutTo(wtxid, hasher, i,\n+                                               /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0);\n+        }\n+        BOOST_CHECK_EQUAL(total_fanouted, 3);\n+    }\n+\n+    // // Don't relay if there is sufficient non-reconciling peers",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b07029a67c800c679214a28f935fa221b44e7ead",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: remove one `//`",
      "created_at": "2023-11-01T20:35:43Z",
      "updated_at": "2023-11-01T20:45:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379306577",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306928",
      "pull_request_review_id": 1709034021,
      "id": 1379306928,
      "node_id": "PRRC_kwDOABII585SNo2w",
      "diff_hunk": "@@ -193,6 +210,104 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b07029a67c800c679214a28f935fa221b44e7ead",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I wonder if this algorithm (which took me a while to fully understand) could be simpler. \r\nE.g., if we used a sorted container for `best_peers` instead of a vector, inserted all of the peers, and then finally return the first `targets` elements of that container, I think we could do without the `try_fanout_candidate` lambda.\r\nOr would that be incorrect / less performant?\r\n\r\nI'm thinking of something like the following (just to show idea, I didn't test it):\r\n\r\n    struct ComparePairs {\r\n        bool operator()(const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) const {\r\n            return left.first > right.first;\r\n        }\r\n    };\r\n    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\r\n                                         bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\r\n    {\r\n        // The algorithm works as follows. We iterate through the peers (of a given direction)\r\n        // hashing them with the given wtxid, and sort them by this hash.\r\n        // We then consider top `limit` peers to be low-fanout flood targets.\r\n        // The randomness should be seeded with wtxid to return consistent results for every call.\r\n\r\n        double integer_part;\r\n        double fractional_peer = std::modf(limit, &integer_part);\r\n        const bool drop_peer_if_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);\r\n        const size_t targets = drop_peer_if_extra ? size_t(integer_part): size_t(integer_part) + 1;\r\n\r\n        std::set<std::pair<uint64_t, NodeId>, ComparePairs> best_peers;\r\n\r\n        for (auto indexed_state : m_states) {\r\n            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\r\n            if (cur_state && cur_state->m_we_initiate == we_initiate) {\r\n                uint64_t hash_key = deterministic_randomizer_with_wtxid.Write(cur_state->m_k0).Finalize();\r\n                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\r\n            }\r\n        }\r\n\r\n        std::vector<NodeId> result;\r\n        auto it = best_peers.begin();\r\n        for (size_t i = 0; i < targets && it != best_peers.end(); ++i, ++it) {\r\n            result.push_back(it->second);\r\n        }\r\n        return result;\r\n    }",
      "created_at": "2023-11-01T20:36:07Z",
      "updated_at": "2023-11-01T20:45:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379306928",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379306928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379309905",
      "pull_request_review_id": 1709034021,
      "id": 1379309905,
      "node_id": "PRRC_kwDOABII585SNplR",
      "diff_hunk": "@@ -193,6 +210,104 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                         bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // To handle fractional values, we add one peer optimistically and then probabilistically\n+        // drop it later.\n+        double integer_part;\n+        double fractional_peer = std::modf(limit, &integer_part);\n+        const size_t targets = size_t(integer_part) + 1;\n+        const bool drop_peer_if_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b07029a67c800c679214a28f935fa221b44e7ead",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do we have to first add and then (maybe) drop a peer here (instead of determining how many peers we want at the beginning, and then getting as many peers as we can up the desired number).",
      "created_at": "2023-11-01T20:39:46Z",
      "updated_at": "2023-11-01T20:45:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379309905",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379309905"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379312851",
      "pull_request_review_id": 1709034021,
      "id": 1379312851,
      "node_id": "PRRC_kwDOABII585SNqTT",
      "diff_hunk": "@@ -81,4 +81,76 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    TxReconciliationTracker tracker(1);\n+    NodeId peer_id0 = 0;\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                            /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": 157,
      "original_position": 46,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b07029a67c800c679214a28f935fa221b44e7ead",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "10% of 30 is integer, so maybe also add an example with a fraction. If we run it  often enough, we could probably assert that two values for `total_fanouted` are possible.",
      "created_at": "2023-11-01T20:43:10Z",
      "updated_at": "2023-11-01T20:46:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379312851",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379312851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 192,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379313360",
      "pull_request_review_id": 1709034021,
      "id": 1379313360,
      "node_id": "PRRC_kwDOABII585SNqbQ",
      "diff_hunk": "@@ -81,4 +81,76 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    TxReconciliationTracker tracker(1);\n+    NodeId peer_id0 = 0;\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                            /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.\n+    for (int i = 1; i < 31; ++i) {\n+        tracker.PreRegisterPeer(i);\n+        BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(i, /*is_peer_inbound=*/true, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b07029a67c800c679214a28f935fa221b44e7ead",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: remove empty line",
      "created_at": "2023-11-01T20:43:47Z",
      "updated_at": "2023-11-01T20:45:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379313360",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379313360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379714659",
      "pull_request_review_id": 1709638838,
      "id": 1379714659,
      "node_id": "PRRC_kwDOABII585SPMZj",
      "diff_hunk": "@@ -5752,9 +5759,12 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         }\n \n         if (auto tx_relay = peer->GetTxRelay(); tx_relay != nullptr) {\n+                // Lock way before it's used to maintain lock ordering.",
      "path": "src/net_processing.cpp",
      "position": 60,
      "original_position": 32,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b07029a67c800c679214a28f935fa221b44e7ead",
      "in_reply_to_id": 1379299664,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I tried a whole bunch of combinations. Say, you move the `LOCK(m_peer_mutex);` to L5831, where `m_peer_map` is used.\r\n\r\nThen you get something [like this](https://cirrus-ci.com/task/6561881997967360?logs=ci#L3228) in Cirrus (not exactly!).\r\n\r\n```\r\n node0 2023-08-17T12:01:53.647510Z [msghand] [sync.cpp:97] [potential_deadlock_detected] POTENTIAL DEADLOCK DETECTED \r\n node0 2023-08-17T12:01:53.647516Z [msghand] [sync.cpp:98] [potential_deadlock_detected] Previous lock order was: \r\n node0 2023-08-17T12:01:53.647523Z [msghand] [sync.cpp:107] [potential_deadlock_detected]  'NetEventsInterface::g_msgproc_mutex' in net.cpp:2095 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647531Z [msghand] [sync.cpp:107] [potential_deadlock_detected]  'cs_main' in net_processing.cpp:5473 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647574Z [msghand] [sync.cpp:107] [potential_deadlock_detected]  (2) 'm_peer_mutex' in net_processing.cpp:5686 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647581Z [msghand] [sync.cpp:107] [potential_deadlock_detected]  'tx_relay->m_tx_inventory_mutex' in net_processing.cpp:5688 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647587Z [msghand] [sync.cpp:107] [potential_deadlock_detected]  'tx_relay->m_bloom_filter_mutex' in net_processing.cpp:5768 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647593Z [msghand] [sync.cpp:107] [potential_deadlock_detected]  (1) 'm_mempool.cs' in net_processing.cpp:5850 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647598Z [msghand] [sync.cpp:111] [potential_deadlock_detected] Current lock order is: \r\n node0 2023-08-17T12:01:53.647604Z [msghand] [sync.cpp:122] [potential_deadlock_detected]  'NetEventsInterface::g_msgproc_mutex' in net.cpp:2095 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647610Z [msghand] [sync.cpp:122] [potential_deadlock_detected]  'm_chainstate_mutex' in validation.cpp:3102 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647616Z [msghand] [sync.cpp:122] [potential_deadlock_detected]  'cs_main' in validation.cpp:3124 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647622Z [msghand] [sync.cpp:122] [potential_deadlock_detected]  (1) 'MempoolMutex()' in validation.cpp:3126 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647627Z [msghand] [sync.cpp:122] [potential_deadlock_detected]  'cs_main' in net_processing.cpp:2013 (in thread 'msghand') \r\n node0 2023-08-17T12:01:53.647633Z [msghand] [sync.cpp:122] [potential_deadlock_detected]  (2) 'm_peer_mutex' in net_processing.cpp:1593 (in thread 'msghand') \r\n```\r\n\r\nFrom this log you see that `m_peer_mutex` should go before `m_mempool.cs`. I admit it might be not the 100% optimal placement, feels NP-hard to me :) Do you know how to approach this better?",
      "created_at": "2023-11-02T07:58:03Z",
      "updated_at": "2023-11-02T07:58:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379714659",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379714659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5762,
      "original_line": 5762,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379723181",
      "pull_request_review_id": 1709653011,
      "id": 1379723181,
      "node_id": "PRRC_kwDOABII585SPOet",
      "diff_hunk": "@@ -193,6 +210,104 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b07029a67c800c679214a28f935fa221b44e7ead",
      "in_reply_to_id": 1379306928,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is certainly better. For no good reason, i just chose to follow a pattern we use elsewhere and never reconsidered it. I will take this code.",
      "created_at": "2023-11-02T08:06:46Z",
      "updated_at": "2023-11-02T08:06:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379723181",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379723181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379749369",
      "pull_request_review_id": 1709693742,
      "id": 1379749369,
      "node_id": "PRRC_kwDOABII585SPU35",
      "diff_hunk": "@@ -81,4 +81,76 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    TxReconciliationTracker tracker(1);\n+    NodeId peer_id0 = 0;\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                            /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": 157,
      "original_position": 46,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b07029a67c800c679214a28f935fa221b44e7ead",
      "in_reply_to_id": 1379312851,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm always not sure what to do with these kinds of probabilistic scenarios... Say you run 1000 experiments, and get 1000/0, so the assert fails. Is 1,000,000 sufficient in that case? Or how do you think this should be asserted otherwise.",
      "created_at": "2023-11-02T08:32:01Z",
      "updated_at": "2023-11-02T08:32:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1379749369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1379749369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 192,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1380105208",
      "pull_request_review_id": 1710245379,
      "id": 1380105208,
      "node_id": "PRRC_kwDOABII585SQrv4",
      "diff_hunk": "@@ -5841,7 +5873,35 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                         }\n                         if (tx_relay->m_bloom_filter && !tx_relay->m_bloom_filter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                         // Send\n-                        vInv.push_back(inv);\n+                        bool fanout = true;\n+                        const auto wtxid = txinfo.tx->GetWitnessHash();\n+                        if (reconciles_txs) {\n+                            auto txiter = m_mempool.GetIter(txinfo.tx->GetHash());\n+                            if (txiter) {\n+                                if ((*txiter)->GetCountWithDescendants() > 1) {\n+                                    // If a transaction has in-mempool children, always fanout it.\n+                                    // Until package relay is implemented, this is needed to avoid\n+                                    // breaking parent+child relay expectations in some cases.\n+                                    //\n+                                    // Potentially reconciling parent+child would mean that for every\n+                                    // child we need to to check if any of the parents is currently\n+                                    // reconciled so that the child isn't fanouted ahead. But then\n+                                    // it gets tricky when reconciliation sets are full: a) the child\n+                                    // can't just be added; b) removing parents from reconciliation\n+                                    // sets for this one child is not good either.\n+                                    fanout = true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 91,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "983f8c6e305fd9707c109c2a92637825262b9b09",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 983f8c6e305fd9707c109c2a92637825262b9b09: Since `fanout` is already initialized `true`, couldn't we simplify it?\r\n\r\n```diff\r\n@@ -5878,19 +5878,17 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\r\n                         if (reconciles_txs) {\r\n                             auto txiter = m_mempool.GetIter(txinfo.tx->GetHash());\r\n                             if (txiter) {\r\n-                                if ((*txiter)->GetCountWithDescendants() > 1) {\r\n-                                    // If a transaction has in-mempool children, always fanout it.\r\n-                                    // Until package relay is implemented, this is needed to avoid\r\n-                                    // breaking parent+child relay expectations in some cases.\r\n-                                    //\r\n-                                    // Potentially reconciling parent+child would mean that for every\r\n-                                    // child we need to to check if any of the parents is currently\r\n-                                    // reconciled so that the child isn't fanouted ahead. But then\r\n-                                    // it gets tricky when reconciliation sets are full: a) the child\r\n-                                    // can't just be added; b) removing parents from reconciliation\r\n-                                    // sets for this one child is not good either.\r\n-                                    fanout = true;\r\n-                                } else {\r\n+                                // If a transaction has in-mempool children, always fanout it.\r\n+                                // Until package relay is implemented, this is needed to avoid\r\n+                                // breaking parent+child relay expectations in some cases.\r\n+                                //\r\n+                                // Potentially reconciling parent+child would mean that for every\r\n+                                // child we need to to check if any of the parents is currently\r\n+                                // reconciled so that the child isn't fanouted ahead. But then\r\n+                                // it gets tricky when reconciliation sets are full: a) the child\r\n+                                // can't just be added; b) removing parents from reconciliation\r\n+                                // sets for this one child is not good either.\r\n+                                if ((*txiter)->GetCountWithDescendants() <= 1) {\r\n                                     auto fanout_randomizer = m_connman.GetDeterministicRandomizer(RANDOMIZER_ID_FANOUTTARGET);\r\n                                     fanout = m_txreconciliat\r\nion->ShouldFanoutTo(wtxid, fanout_randomizer, pto->GetId(),\r\n                                                             \r\n                    inbounds_nonrcncl_tx_relay, outbounds_non\r\nrcncl_tx_relay);\r\n```",
      "created_at": "2023-11-02T13:28:33Z",
      "updated_at": "2023-11-02T13:28:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1380105208",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1380105208"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5892,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1380216381",
      "pull_request_review_id": 1710413774,
      "id": 1380216381,
      "node_id": "PRRC_kwDOABII585SRG49",
      "diff_hunk": "@@ -5814,6 +5824,28 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n                     unsigned int nRelayedTransactions = 0;\n+\n+                    size_t inbounds_nonrcncl_tx_relay = 0, outbounds_nonrcncl_tx_relay = 0;\n+                    if (m_txreconciliation) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "983f8c6e305fd9707c109c2a92637825262b9b09",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 983f8c6e305fd9707c109c2a92637825262b9b09: Correct me if I'm wrong, but we're going use `inbounds_nonrcncl_tx_relay` and `outbounds_nonrcncl_tx_relay` only whether `reconciles_txs` is true, couldn't we only fill them if so?:\r\n```suggestion\r\n                    if (reconciles_txs) {\r\n```",
      "created_at": "2023-11-02T14:16:01Z",
      "updated_at": "2023-11-02T14:16:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1380216381",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1380216381"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5829,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1390462533",
      "pull_request_review_id": 1726306685,
      "id": 1390462533,
      "node_id": "PRRC_kwDOABII585S4MZF",
      "diff_hunk": "@@ -81,4 +81,75 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": 114,
      "original_position": 4,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "2af4d12410aebce6b806a101d797357a49d6852b",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think a test can be added to exercise `AddToSet` and the check of the boundary `MAX_SET_SIZE` value.",
      "created_at": "2023-11-12T18:51:21Z",
      "updated_at": "2023-11-12T18:54:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1390462533",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1390462533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 149,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1390462790",
      "pull_request_review_id": 1726306685,
      "id": 1390462790,
      "node_id": "PRRC_kwDOABII585S4MdG",
      "diff_hunk": "@@ -125,6 +133,43 @@ class TxReconciliationTracker::Impl\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return false;\n+        auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+\n+        // Check if reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+        // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+        // We don't care about a laggy peer (1) because we probably can't help them even if we fanout transactions.\n+        // However, exploiting (2) should not prevent us from relaying certain transactions.\n+        //\n+        // Transactions which don't make it to the set due to the limit are announced via fan-out.\n+        if (recon_state.m_local_set.size() >= MAX_SET_SIZE) return false;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "7c4f8d9956efb7c239665ce6a66eae65ecfd5215",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think can be `>` only. Generally sounds maximum in net_processing is understood as strictly superior, e.g `MAX_INV_SZ` usage.",
      "created_at": "2023-11-12T18:53:48Z",
      "updated_at": "2023-11-12T18:54:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1390462790",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1390462790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1394020665",
      "pull_request_review_id": 1731754235,
      "id": 1394020665,
      "node_id": "PRRC_kwDOABII585TFxE5",
      "diff_hunk": "@@ -125,6 +133,43 @@ class TxReconciliationTracker::Impl\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return false;\n+        auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+\n+        // Check if reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+        // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+        // We don't care about a laggy peer (1) because we probably can't help them even if we fanout transactions.\n+        // However, exploiting (2) should not prevent us from relaying certain transactions.\n+        //\n+        // Transactions which don't make it to the set due to the limit are announced via fan-out.\n+        if (recon_state.m_local_set.size() >= MAX_SET_SIZE) return false;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "7c4f8d9956efb7c239665ce6a66eae65ecfd5215",
      "in_reply_to_id": 1390462790,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This happens before the addition. Your suggestion would mean that the size could be 3001, which is not desired.",
      "created_at": "2023-11-15T10:50:38Z",
      "updated_at": "2023-11-15T10:50:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1394020665",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1394020665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1397919287",
      "pull_request_review_id": 1737983905,
      "id": 1397919287,
      "node_id": "PRRC_kwDOABII585TUo43",
      "diff_hunk": "@@ -74,6 +74,22 @@ class TxReconciliationTracker\n     ReconciliationRegisterResult RegisterPeer(NodeId peer_id, bool is_peer_inbound,\n                                               uint32_t peer_recon_version, uint64_t remote_salt);\n \n+    /**\n+     * Step 1. Add a new transaction we want to announce to the peer to the local reconciliation set\n+     * of the peer, so that it will be reconciled later, unless the set limit is reached.\n+     * Returns whether it was added.\n+     */",
      "path": "src/node/txreconciliation.h",
      "position": 17,
      "original_position": 8,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "6977a5a156db691758779093c7e7b19039331e3a",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Given the docs on `{Pre}RegisterPeer` and the last paragraph on `TryRemovingFromSet`, shouldn't this also advise the caller to make sure the peer is registered?",
      "created_at": "2023-11-17T21:47:02Z",
      "updated_at": "2023-11-21T21:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1397919287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1397919287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399472433",
      "pull_request_review_id": 1737983905,
      "id": 1399472433,
      "node_id": "PRRC_kwDOABII585TakEx",
      "diff_hunk": "@@ -125,6 +150,43 @@ class TxReconciliationTracker::Impl\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return false;\n+        auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+\n+        // Check if reconciliation set is not at capacity for two reasons:",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: *the* reconciliation set",
      "created_at": "2023-11-20T16:39:31Z",
      "updated_at": "2023-11-21T21:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1399472433",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399472433"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399659166",
      "pull_request_review_id": 1737983905,
      "id": 1399659166,
      "node_id": "PRRC_kwDOABII585TbRqe",
      "diff_hunk": "@@ -125,6 +150,43 @@ class TxReconciliationTracker::Impl\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return false;\n+        auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+\n+        // Check if reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+        // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+        // We don't care about a laggy peer (1) because we probably can't help them even if we fanout transactions.\n+        // However, exploiting (2) should not prevent us from relaying certain transactions.\n+        //\n+        // Transactions which don't make it to the set due to the limit are announced via fan-out.\n+        if (recon_state.m_local_set.size() >= MAX_SET_SIZE) return false;\n+\n+        Assume(recon_state.m_local_set.insert(wtxid).second);\n+        LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Added %s to the reconciliation set for peer=%d. \" /* Continued */\n+                                                                    \"Now the set contains %i transactions.\\n\",\n+                      wtxid.ToString(), peer_id, recon_state.m_local_set.size());\n+        return true;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this is a bit counter-intuitive. If the transaction to be added is already in the set, we will treat this as if it was added when that is actually not the case. \r\n\r\nI guess the reasoning is that there should be no way of adding the same transaction more than once, so `false` is being used to signal failures. However, this seems like a way to potentially shoot ourselves in the foot.\r\n\r\nIf we want to keep the logic as is, I'd suggest that we at least mention this in the functions docs, given it currently reads: \r\n\r\n```\r\n[...]\r\n* Returns whether it was added.\r\n```",
      "created_at": "2023-11-20T19:34:47Z",
      "updated_at": "2023-11-21T21:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1399659166",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399659166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": 173,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399699565",
      "pull_request_review_id": 1737983905,
      "id": 1399699565,
      "node_id": "PRRC_kwDOABII585Tbbht",
      "diff_hunk": "@@ -77,6 +85,11 @@ class TxReconciliationTracker::Impl\n private:\n     mutable Mutex m_txreconciliation_mutex;\n \n+    /**\n+     * ReconciliationTracker-wide randomness to choose fanout targets for a given txid.\n+     */\n+    const SaltedTxidHasher m_txid_hasher;\n+",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is this being used?",
      "created_at": "2023-11-20T20:13:05Z",
      "updated_at": "2023-11-21T21:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1399699565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399699565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": 88,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399703593",
      "pull_request_review_id": 1737983905,
      "id": 1399703593,
      "node_id": "PRRC_kwDOABII585Tbcgp",
      "diff_hunk": "@@ -197,6 +210,86 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integer_part;\n+        double fractional_peer = std::modf(limit, &integer_part);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm guessing this is supposed to be **integral**\\_part and fractional\\_**part** (?)\r\n\r\nsource: https://en.cppreference.com/w/cpp/numeric/math/modf",
      "created_at": "2023-11-20T20:17:46Z",
      "updated_at": "2023-11-21T21:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1399703593",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399703593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": 222,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399709981",
      "pull_request_review_id": 1737983905,
      "id": 1399709981,
      "node_id": "PRRC_kwDOABII585TbeEd",
      "diff_hunk": "@@ -197,6 +210,86 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integer_part;\n+        double fractional_peer = std::modf(limit, &integer_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);\n+        const size_t targets = add_extra ? size_t(integer_part): size_t(integer_part) + 1;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Shouldn't this need to be the other way around?\r\n\r\nMaybe I'm confused by the name of the variables, but it seems like if `add_extra` is true, then you should do `x+1`",
      "created_at": "2023-11-20T20:22:40Z",
      "updated_at": "2023-11-21T21:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1399709981",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399709981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 226,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399729409",
      "pull_request_review_id": 1737983905,
      "id": 1399729409,
      "node_id": "PRRC_kwDOABII585Tbi0B",
      "diff_hunk": "",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The TODOs for the pubic fields referring to `m_we_initiate` and `m_k0` should be fixable at this point, given they are both used by `GetFanoutTargets`, shouldn't they?",
      "created_at": "2023-11-20T20:44:40Z",
      "updated_at": "2023-11-21T21:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1399729409",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399729409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399750369",
      "pull_request_review_id": 1737983905,
      "id": 1399750369,
      "node_id": "PRRC_kwDOABII585Tbn7h",
      "diff_hunk": "@@ -197,6 +210,86 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integer_part;\n+        double fractional_peer = std::modf(limit, &integer_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);\n+        const size_t targets = add_extra ? size_t(integer_part): size_t(integer_part) + 1;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1399709981,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: also, `tagets_size` may be a better name, in lieu of `limit` which is already being used, given this does not really refer to the `targets` themselves, but to the size of the returned `targets` collection",
      "created_at": "2023-11-20T21:10:28Z",
      "updated_at": "2023-11-21T21:51:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1399750369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399750369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 226,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399769486",
      "pull_request_review_id": 1737983905,
      "id": 1399769486,
      "node_id": "PRRC_kwDOABII585TbsmO",
      "diff_hunk": "@@ -197,6 +210,86 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integer_part;\n+        double fractional_peer = std::modf(limit, &integer_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);\n+        const size_t targets = add_extra ? size_t(integer_part): size_t(integer_part) + 1;\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);\n+\n+        for (auto indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = deterministic_randomizer_with_wtxid.Write(cur_state->m_k0).Finalize();\n+                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\n+            }\n+        }\n+\n+        std::vector<NodeId> result;\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets && it != best_peers.end(); ++i, ++it) {\n+            result.push_back(it->second);\n+        }\n+        return result;\n+    }\n+\n+    bool ShouldFanoutTo(const uint256& wtxid, CSipHasher deterministic_randomizer, NodeId peer_id,\n+                        size_t inbounds_nonrcncl_tx_relay, size_t outbounds_nonrcncl_tx_relay)\n+                        const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return true;\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        deterministic_randomizer.Write(wtxid.GetUint64(0));\n+        const auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double destinations;\n+        if (recon_state.m_we_initiate) {\n+            destinations = OUTBOUND_FANOUT_DESTINATIONS - outbounds_nonrcncl_tx_relay;\n+        } else {\n+            const size_t inbound_rcncl_peers = std::count_if(m_states.begin(), m_states.end(),\n+                                                        [](std::pair<NodeId, std::variant<uint64_t, TxReconciliationState>> indexed_state) {\n+                                                            const auto* cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+                                                            if (cur_state) return !cur_state->m_we_initiate;\n+                                                            return false;\n+                                                        });\n+\n+            // Since we use the fraction for inbound peers, we first need to compute the total\n+            // number of inbound targets.\n+            const double inbound_targets = (inbounds_nonrcncl_tx_relay + inbound_rcncl_peers) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+            destinations = inbound_targets - inbounds_nonrcncl_tx_relay;\n+        }\n+\n+        if (destinations < 0.01) {",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Where does this value come from? If we are going to use an arbitrary number, shouldn't we at least make it constant and add some reasoning? ",
      "created_at": "2023-11-20T21:33:50Z",
      "updated_at": "2023-11-21T21:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1399769486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399769486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399810614",
      "pull_request_review_id": 1737983905,
      "id": 1399810614,
      "node_id": "PRRC_kwDOABII585Tb2o2",
      "diff_hunk": "@@ -197,6 +210,86 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integer_part;\n+        double fractional_peer = std::modf(limit, &integer_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);\n+        const size_t targets = add_extra ? size_t(integer_part): size_t(integer_part) + 1;\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);\n+\n+        for (auto indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = deterministic_randomizer_with_wtxid.Write(cur_state->m_k0).Finalize();\n+                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\n+            }\n+        }\n+\n+        std::vector<NodeId> result;\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets && it != best_peers.end(); ++i, ++it) {\n+            result.push_back(it->second);\n+        }\n+        return result;\n+    }\n+\n+    bool ShouldFanoutTo(const uint256& wtxid, CSipHasher deterministic_randomizer, NodeId peer_id,\n+                        size_t inbounds_nonrcncl_tx_relay, size_t outbounds_nonrcncl_tx_relay)\n+                        const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return true;\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        deterministic_randomizer.Write(wtxid.GetUint64(0));",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Shouldn't we move this a bit down the method given it may not even be used if we return early? (such as is the destinations are too small)",
      "created_at": "2023-11-20T22:07:24Z",
      "updated_at": "2023-11-21T21:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1399810614",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1399810614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400824727",
      "pull_request_review_id": 1742389495,
      "id": 1400824727,
      "node_id": "PRRC_kwDOABII585TfuOX",
      "diff_hunk": "@@ -5752,9 +5759,12 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         }\n \n         if (auto tx_relay = peer->GetTxRelay(); tx_relay != nullptr) {\n+                // Lock way before it's used to maintain lock ordering.",
      "path": "src/net_processing.cpp",
      "position": 60,
      "original_position": 32,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b07029a67c800c679214a28f935fa221b44e7ead",
      "in_reply_to_id": 1379299664,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "no, I don't know a better approach, but thanks for the explanation!",
      "created_at": "2023-11-21T16:02:07Z",
      "updated_at": "2023-11-21T18:33:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1400824727",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400824727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5762,
      "original_line": 5762,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400838979",
      "pull_request_review_id": 1737983905,
      "id": 1400838979,
      "node_id": "PRRC_kwDOABII585TfxtD",
      "diff_hunk": "@@ -5751,9 +5758,12 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         }\n \n         if (auto tx_relay = peer->GetTxRelay(); tx_relay != nullptr) {\n+                // Lock way before it's used to maintain lock ordering.\n+                LOCK2(m_mempool.cs, m_peer_mutex);\n                 LOCK(tx_relay->m_tx_inventory_mutex);\n                 // Check whether periodic sends should happen\n                 bool fSendTrickle = pto->HasPermission(NetPermissionFlags::NoBan);\n+                const bool reconciles_txs = m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Isn't `reconciles_txs` only used within `fSendTrickle == true`? Wouldn't it be worth moving it to that context?",
      "created_at": "2023-11-21T16:11:52Z",
      "updated_at": "2023-11-21T21:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1400838979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400838979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5766,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400876966",
      "pull_request_review_id": 1742493305,
      "id": 1400876966,
      "node_id": "PRRC_kwDOABII585Tf6-m",
      "diff_hunk": "@@ -74,6 +74,22 @@ class TxReconciliationTracker\n     ReconciliationRegisterResult RegisterPeer(NodeId peer_id, bool is_peer_inbound,\n                                               uint32_t peer_recon_version, uint64_t remote_salt);\n \n+    /**\n+     * Step 1. Add a new transaction we want to announce to the peer to the local reconciliation set\n+     * of the peer, so that it will be reconciled later, unless the set limit is reached.\n+     * Returns whether it was added.\n+     */\n+    bool AddToSet(NodeId peer_id, const uint256& wtxid);",
      "path": "src/node/txreconciliation.h",
      "position": null,
      "original_position": 9,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "6977a5a156db691758779093c7e7b19039331e3a",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could this use the `Wtxid` type?",
      "created_at": "2023-11-21T16:39:52Z",
      "updated_at": "2023-11-21T16:39:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1400876966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1400876966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1401009634",
      "pull_request_review_id": 1742389495,
      "id": 1401009634,
      "node_id": "PRRC_kwDOABII585TgbXi",
      "diff_hunk": "@@ -125,6 +137,43 @@ class TxReconciliationTracker::Impl\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return false;\n+        auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+\n+        // Check if reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+        // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+        // We don't care about a laggy peer (1) because we probably can't help them even if we fanout transactions.\n+        // However, exploiting (2) should not prevent us from relaying certain transactions.\n+        //\n+        // Transactions which don't make it to the set due to the limit are announced via fan-out.\n+        if (recon_state.m_local_set.size() >= MAX_SET_SIZE) return false;\n+\n+        Assume(recon_state.m_local_set.insert(wtxid).second);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "6977a5a156db691758779093c7e7b19039331e3a",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The test fails in debug mode because this assume conflicts with the test saying \"Adding a duplicate transaction should not happen, but it does happen, nothing should break.\".",
      "created_at": "2023-11-21T18:32:58Z",
      "updated_at": "2023-11-21T18:33:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1401009634",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1401009634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1401014445",
      "pull_request_review_id": 1742817892,
      "id": 1401014445,
      "node_id": "PRRC_kwDOABII585Tgcit",
      "diff_hunk": "@@ -5845,7 +5877,33 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                         }\n                         if (tx_relay->m_bloom_filter && !tx_relay->m_bloom_filter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                         // Send\n-                        vInv.push_back(inv);\n+                        bool fanout = true;\n+                        const auto wtxid = txinfo.tx->GetWitnessHash();\n+                        if (reconciles_txs) {\n+                            auto txiter = m_mempool.GetIter(txinfo.tx->GetHash());\n+                            if (txiter) {\n+                                // If a transaction has in-mempool children, always fanout it.\n+                                // Until package relay is implemented, this is needed to avoid\n+                                // breaking parent+child relay expectations in some cases.\n+                                //\n+                                // Potentially reconciling parent+child would mean that for every\n+                                // child we need to to check if any of the parents is currently\n+                                // reconciled so that the child isn't fanouted ahead. But then",
      "path": "src/net_processing.cpp",
      "position": 111,
      "original_position": 86,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Although this reduced it, I think the situation where the child is fanouted ahead could still happen if we receive the parent first, add it to the recon set, and only after that receive the child and decide to fanout it.\r\nNot sure if that is a problem though.",
      "created_at": "2023-11-21T18:37:33Z",
      "updated_at": "2023-11-21T18:37:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1401014445",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1401014445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5892,
      "original_line": 5892,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1401081104",
      "pull_request_review_id": 1737983905,
      "id": 1401081104,
      "node_id": "PRRC_kwDOABII585Tgs0Q",
      "diff_hunk": "@@ -134,14 +196,100 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n     {\n-        AssertLockNotHeld(m_txreconciliation_mutex);\n-        LOCK(m_txreconciliation_mutex);\n+        AssertLockHeld(m_txreconciliation_mutex);\n         auto recon_state = m_states.find(peer_id);\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    bool IsPeerRegisteredExternal(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        return IsPeerRegistered(peer_id);\n+    }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integer_part;\n+        double fractional_peer = std::modf(limit, &integer_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);\n+        const size_t targets = add_extra ? size_t(integer_part): size_t(integer_part) + 1;\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);\n+\n+        for (auto indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = deterministic_randomizer_with_wtxid.Write(cur_state->m_k0).Finalize();\n+                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\n+            }\n+        }\n+\n+        std::vector<NodeId> result;\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets && it != best_peers.end(); ++i, ++it) {\n+            result.push_back(it->second);\n+        }\n+        return result;\n+    }\n+\n+    bool ShouldFanoutTo(const uint256& wtxid, CSipHasher deterministic_randomizer, NodeId peer_id,\n+                        size_t inbounds_nonrcncl_tx_relay, size_t outbounds_nonrcncl_tx_relay)\n+                        const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return true;\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        deterministic_randomizer.Write(wtxid.GetUint64(0));\n+        const auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double destinations;\n+        if (recon_state.m_we_initiate) {\n+            destinations = OUTBOUND_FANOUT_DESTINATIONS - outbounds_nonrcncl_tx_relay;\n+        } else {\n+            const size_t inbound_rcncl_peers = std::count_if(m_states.begin(), m_states.end(),\n+                                                        [](std::pair<NodeId, std::variant<uint64_t, TxReconciliationState>> indexed_state) {\n+                                                            const auto* cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+                                                            if (cur_state) return !cur_state->m_we_initiate;\n+                                                            return false;\n+                                                        });\n+\n+            // Since we use the fraction for inbound peers, we first need to compute the total\n+            // number of inbound targets.\n+            const double inbound_targets = (inbounds_nonrcncl_tx_relay + inbound_rcncl_peers) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+            destinations = inbound_targets - inbounds_nonrcncl_tx_relay;\n+        }\n+\n+        if (destinations < 0.01) {\n+            return false;\n+        }\n+\n+        auto fanout_candidates = GetFanoutTargets(deterministic_randomizer, recon_state.m_we_initiate, destinations);\n+        return std::count(fanout_candidates.begin(), fanout_candidates.end(), peer_id);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 199,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I wonder why are we using `std::count` here when we will find, at most, a single instance of `peer_id` within `fanout_candidates`. Wouldn't `std::find` be a better option?\r\n\r\nOn the same line, it may even be worth making `GetFanoutTargets` return a set instead of a vector, given we are sure that the elements of the collection won't be repeated ",
      "created_at": "2023-11-21T19:38:41Z",
      "updated_at": "2023-11-21T21:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1401081104",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1401081104"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 291,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1401091147",
      "pull_request_review_id": 1737983905,
      "id": 1401091147,
      "node_id": "PRRC_kwDOABII585TgvRL",
      "diff_hunk": "@@ -134,14 +196,100 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n     {\n-        AssertLockNotHeld(m_txreconciliation_mutex);\n-        LOCK(m_txreconciliation_mutex);\n+        AssertLockHeld(m_txreconciliation_mutex);\n         auto recon_state = m_states.find(peer_id);\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    bool IsPeerRegisteredExternal(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        return IsPeerRegistered(peer_id);\n+    }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.",
      "path": "src/node/txreconciliation.cpp",
      "position": 209,
      "original_position": 128,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is the assumption that we will never call this method more than once for the same `wtxid`? I wonder because it feels like the results may be deterministic based on the ordering of the `m_states`, which may not be persistent if a peer changes (?)",
      "created_at": "2023-11-21T19:48:01Z",
      "updated_at": "2023-11-21T21:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1401091147",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1401091147"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": 267,
      "original_start_line": 217,
      "start_side": "RIGHT",
      "line": 270,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1401116371",
      "pull_request_review_id": 1737983905,
      "id": 1401116371,
      "node_id": "PRRC_kwDOABII585Tg1bT",
      "diff_hunk": "@@ -197,6 +210,86 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integer_part;\n+        double fractional_peer = std::modf(limit, &integer_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);\n+        const size_t targets = add_extra ? size_t(integer_part): size_t(integer_part) + 1;\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);\n+\n+        for (auto indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = deterministic_randomizer_with_wtxid.Write(cur_state->m_k0).Finalize();\n+                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\n+            }\n+        }\n+\n+        std::vector<NodeId> result;\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets && it != best_peers.end(); ++i, ++it) {\n+            result.push_back(it->second);\n+        }\n+        return result;\n+    }\n+\n+    bool ShouldFanoutTo(const uint256& wtxid, CSipHasher deterministic_randomizer, NodeId peer_id,\n+                        size_t inbounds_nonrcncl_tx_relay, size_t outbounds_nonrcncl_tx_relay)\n+                        const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return true;\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        deterministic_randomizer.Write(wtxid.GetUint64(0));",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1399810614,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Either that, or seed it outside the method so you don't even need to pass the `wtxid` in, is writing to the randomizer is cheap enough.",
      "created_at": "2023-11-21T20:11:28Z",
      "updated_at": "2023-11-21T21:51:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1401116371",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1401116371"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1401146680",
      "pull_request_review_id": 1737983905,
      "id": 1401146680,
      "node_id": "PRRC_kwDOABII585Tg804",
      "diff_hunk": "@@ -5845,7 +5877,33 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                         }\n                         if (tx_relay->m_bloom_filter && !tx_relay->m_bloom_filter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                         // Send\n-                        vInv.push_back(inv);\n+                        bool fanout = true;\n+                        const auto wtxid = txinfo.tx->GetWitnessHash();\n+                        if (reconciles_txs) {\n+                            auto txiter = m_mempool.GetIter(txinfo.tx->GetHash());\n+                            if (txiter) {\n+                                // If a transaction has in-mempool children, always fanout it.\n+                                // Until package relay is implemented, this is needed to avoid\n+                                // breaking parent+child relay expectations in some cases.\n+                                //\n+                                // Potentially reconciling parent+child would mean that for every\n+                                // child we need to to check if any of the parents is currently\n+                                // reconciled so that the child isn't fanouted ahead. But then\n+                                // it gets tricky when reconciliation sets are full: a) the child\n+                                // can't just be added; b) removing parents from reconciliation\n+                                // sets for this one child is not good either.",
      "path": "src/net_processing.cpp",
      "position": 114,
      "original_position": 89,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you give more context regarding this?",
      "created_at": "2023-11-21T20:39:28Z",
      "updated_at": "2023-11-21T21:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1401146680",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1401146680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": 5894,
      "original_start_line": 5893,
      "start_side": "RIGHT",
      "line": 5895,
      "original_line": 5895,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1402993598",
      "pull_request_review_id": 1745827471,
      "id": 1402993598,
      "node_id": "PRRC_kwDOABII585Tn_u-",
      "diff_hunk": "@@ -125,6 +137,43 @@ class TxReconciliationTracker::Impl\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return false;\n+        auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+\n+        // Check if reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+        // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+        // We don't care about a laggy peer (1) because we probably can't help them even if we fanout transactions.\n+        // However, exploiting (2) should not prevent us from relaying certain transactions.\n+        //\n+        // Transactions which don't make it to the set due to the limit are announced via fan-out.\n+        if (recon_state.m_local_set.size() >= MAX_SET_SIZE) return false;\n+\n+        Assume(recon_state.m_local_set.insert(wtxid).second);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "6977a5a156db691758779093c7e7b19039331e3a",
      "in_reply_to_id": 1401009634,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm going to drop this test, unless you know a way how to handle this better.",
      "created_at": "2023-11-23T07:32:26Z",
      "updated_at": "2023-11-23T07:32:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1402993598",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1402993598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403006667",
      "pull_request_review_id": 1745848167,
      "id": 1403006667,
      "node_id": "PRRC_kwDOABII585ToC7L",
      "diff_hunk": "@@ -5845,7 +5877,33 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                         }\n                         if (tx_relay->m_bloom_filter && !tx_relay->m_bloom_filter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                         // Send\n-                        vInv.push_back(inv);\n+                        bool fanout = true;\n+                        const auto wtxid = txinfo.tx->GetWitnessHash();\n+                        if (reconciles_txs) {\n+                            auto txiter = m_mempool.GetIter(txinfo.tx->GetHash());\n+                            if (txiter) {\n+                                // If a transaction has in-mempool children, always fanout it.\n+                                // Until package relay is implemented, this is needed to avoid\n+                                // breaking parent+child relay expectations in some cases.\n+                                //\n+                                // Potentially reconciling parent+child would mean that for every\n+                                // child we need to to check if any of the parents is currently\n+                                // reconciled so that the child isn't fanouted ahead. But then",
      "path": "src/net_processing.cpp",
      "position": 111,
      "original_position": 86,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1401014445,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You're right.\r\n\r\nMy fear with this is unexpected behavior for tx sender: e.g., you craft a \"package\" thinking parent always goes ahead, but then child gets ahead (potentially with the attacker's help) and dropped on the floor due to some policy. Something along this, but maybe I'm making it up.\r\nAre these concerns at least semi-valid? @glozow\r\n\r\nI can add \"see whether a parent is in the set already\" check, when looking at a child, if we think it's worth it.",
      "created_at": "2023-11-23T07:49:12Z",
      "updated_at": "2023-11-23T07:49:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1403006667",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403006667"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5892,
      "original_line": 5892,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403013326",
      "pull_request_review_id": 1745858364,
      "id": 1403013326,
      "node_id": "PRRC_kwDOABII585ToEjO",
      "diff_hunk": "@@ -74,6 +74,22 @@ class TxReconciliationTracker\n     ReconciliationRegisterResult RegisterPeer(NodeId peer_id, bool is_peer_inbound,\n                                               uint32_t peer_recon_version, uint64_t remote_salt);\n \n+    /**\n+     * Step 1. Add a new transaction we want to announce to the peer to the local reconciliation set\n+     * of the peer, so that it will be reconciled later, unless the set limit is reached.\n+     * Returns whether it was added.\n+     */",
      "path": "src/node/txreconciliation.h",
      "position": 17,
      "original_position": 8,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "6977a5a156db691758779093c7e7b19039331e3a",
      "in_reply_to_id": 1397919287,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think i'd rather drop it from `TryRemovingFromSet`. It's not that strong anymore anyway, doesn't help much and pretty obvious i think. Let me know if you think differently.",
      "created_at": "2023-11-23T07:57:24Z",
      "updated_at": "2023-11-23T07:57:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1403013326",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403013326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403014150",
      "pull_request_review_id": 1745859712,
      "id": 1403014150,
      "node_id": "PRRC_kwDOABII585ToEwG",
      "diff_hunk": "@@ -125,6 +150,43 @@ class TxReconciliationTracker::Impl\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return false;\n+        auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+\n+        // Check if reconciliation set is not at capacity for two reasons:",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1399472433,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "took this, but generally i think we have these mistakes all over the code and it's fine :)",
      "created_at": "2023-11-23T07:58:26Z",
      "updated_at": "2023-11-23T07:58:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1403014150",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403014150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403018216",
      "pull_request_review_id": 1745866672,
      "id": 1403018216,
      "node_id": "PRRC_kwDOABII585ToFvo",
      "diff_hunk": "@@ -125,6 +150,43 @@ class TxReconciliationTracker::Impl\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return false;\n+        auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+\n+        // Check if reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+        // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+        // We don't care about a laggy peer (1) because we probably can't help them even if we fanout transactions.\n+        // However, exploiting (2) should not prevent us from relaying certain transactions.\n+        //\n+        // Transactions which don't make it to the set due to the limit are announced via fan-out.\n+        if (recon_state.m_local_set.size() >= MAX_SET_SIZE) return false;\n+\n+        Assume(recon_state.m_local_set.insert(wtxid).second);\n+        LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Added %s to the reconciliation set for peer=%d. \" /* Continued */\n+                                                                    \"Now the set contains %i transactions.\\n\",\n+                      wtxid.ToString(), peer_id, recon_state.m_local_set.size());\n+        return true;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1399659166,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You're right, i shall think how to make it better.",
      "created_at": "2023-11-23T08:03:46Z",
      "updated_at": "2023-11-23T08:03:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1403018216",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403018216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": 173,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403018671",
      "pull_request_review_id": 1745867492,
      "id": 1403018671,
      "node_id": "PRRC_kwDOABII585ToF2v",
      "diff_hunk": "@@ -77,6 +85,11 @@ class TxReconciliationTracker::Impl\n private:\n     mutable Mutex m_txreconciliation_mutex;\n \n+    /**\n+     * ReconciliationTracker-wide randomness to choose fanout targets for a given txid.\n+     */\n+    const SaltedTxidHasher m_txid_hasher;\n+",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1399699565,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "no, it's legacy i guess. wondering why the compiler haven't found it.",
      "created_at": "2023-11-23T08:04:24Z",
      "updated_at": "2023-11-23T08:04:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1403018671",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403018671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": 88,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403019080",
      "pull_request_review_id": 1745868104,
      "id": 1403019080,
      "node_id": "PRRC_kwDOABII585ToF9I",
      "diff_hunk": "@@ -77,6 +85,11 @@ class TxReconciliationTracker::Impl\n private:\n     mutable Mutex m_txreconciliation_mutex;\n \n+    /**\n+     * ReconciliationTracker-wide randomness to choose fanout targets for a given txid.\n+     */\n+    const SaltedTxidHasher m_txid_hasher;\n+",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1399699565,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "i think it's from the latter commits. can be dropped here.",
      "created_at": "2023-11-23T08:04:52Z",
      "updated_at": "2023-11-23T08:04:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1403019080",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403019080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": 88,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403197577",
      "pull_request_review_id": 1746162764,
      "id": 1403197577,
      "node_id": "PRRC_kwDOABII585ToxiJ",
      "diff_hunk": "@@ -197,6 +210,86 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integer_part;\n+        double fractional_peer = std::modf(limit, &integer_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);\n+        const size_t targets = add_extra ? size_t(integer_part): size_t(integer_part) + 1;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1399709981,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "flipped the `<` and flipped the ternary conditions. The behavior remains the same. Indeed, it was double-upside-down before.",
      "created_at": "2023-11-23T10:36:46Z",
      "updated_at": "2023-11-23T10:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1403197577",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403197577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 226,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403205396",
      "pull_request_review_id": 1746175005,
      "id": 1403205396,
      "node_id": "PRRC_kwDOABII585TozcU",
      "diff_hunk": "",
      "path": "src/node/txreconciliation.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1399729409,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this stuff remained from the legacy code where its use was encapsulated.... just deleting the comments.",
      "created_at": "2023-11-23T10:44:06Z",
      "updated_at": "2023-11-23T10:44:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1403205396",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403205396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403207296",
      "pull_request_review_id": 1746178118,
      "id": 1403207296,
      "node_id": "PRRC_kwDOABII585Toz6A",
      "diff_hunk": "@@ -197,6 +210,86 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integer_part;\n+        double fractional_peer = std::modf(limit, &integer_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);\n+        const size_t targets = add_extra ? size_t(integer_part): size_t(integer_part) + 1;\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);\n+\n+        for (auto indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = deterministic_randomizer_with_wtxid.Write(cur_state->m_k0).Finalize();\n+                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\n+            }\n+        }\n+\n+        std::vector<NodeId> result;\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets && it != best_peers.end(); ++i, ++it) {\n+            result.push_back(it->second);\n+        }\n+        return result;\n+    }\n+\n+    bool ShouldFanoutTo(const uint256& wtxid, CSipHasher deterministic_randomizer, NodeId peer_id,\n+                        size_t inbounds_nonrcncl_tx_relay, size_t outbounds_nonrcncl_tx_relay)\n+                        const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return true;\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        deterministic_randomizer.Write(wtxid.GetUint64(0));\n+        const auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double destinations;\n+        if (recon_state.m_we_initiate) {\n+            destinations = OUTBOUND_FANOUT_DESTINATIONS - outbounds_nonrcncl_tx_relay;\n+        } else {\n+            const size_t inbound_rcncl_peers = std::count_if(m_states.begin(), m_states.end(),\n+                                                        [](std::pair<NodeId, std::variant<uint64_t, TxReconciliationState>> indexed_state) {\n+                                                            const auto* cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+                                                            if (cur_state) return !cur_state->m_we_initiate;\n+                                                            return false;\n+                                                        });\n+\n+            // Since we use the fraction for inbound peers, we first need to compute the total\n+            // number of inbound targets.\n+            const double inbound_targets = (inbounds_nonrcncl_tx_relay + inbound_rcncl_peers) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+            destinations = inbound_targets - inbounds_nonrcncl_tx_relay;\n+        }\n+\n+        if (destinations < 0.01) {",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1399769486,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "eh, it's just a workaround to handle almost-0-fractional-value C++ thing i guess. Might as well be 0.0001 or 0.000000001. Not sure how to make it beautiful.",
      "created_at": "2023-11-23T10:45:57Z",
      "updated_at": "2023-11-23T10:45:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1403207296",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403207296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403216806",
      "pull_request_review_id": 1746193064,
      "id": 1403216806,
      "node_id": "PRRC_kwDOABII585To2Om",
      "diff_hunk": "@@ -5751,9 +5758,12 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         }\n \n         if (auto tx_relay = peer->GetTxRelay(); tx_relay != nullptr) {\n+                // Lock way before it's used to maintain lock ordering.\n+                LOCK2(m_mempool.cs, m_peer_mutex);\n                 LOCK(tx_relay->m_tx_inventory_mutex);\n                 // Check whether periodic sends should happen\n                 bool fSendTrickle = pto->HasPermission(NetPermissionFlags::NoBan);\n+                const bool reconciles_txs = m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1400838979,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "it will have to be moved in the following PR, but yeah, I'll stick to your suggestion in this one.",
      "created_at": "2023-11-23T10:54:46Z",
      "updated_at": "2023-11-23T10:54:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1403216806",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403216806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5766,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403256259",
      "pull_request_review_id": 1746254164,
      "id": 1403256259,
      "node_id": "PRRC_kwDOABII585To_3D",
      "diff_hunk": "@@ -134,14 +196,100 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n     {\n-        AssertLockNotHeld(m_txreconciliation_mutex);\n-        LOCK(m_txreconciliation_mutex);\n+        AssertLockHeld(m_txreconciliation_mutex);\n         auto recon_state = m_states.find(peer_id);\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    bool IsPeerRegisteredExternal(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        return IsPeerRegistered(peer_id);\n+    }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.",
      "path": "src/node/txreconciliation.cpp",
      "position": 209,
      "original_position": 128,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1401091147,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We call this for every peer. So there might be, say, 8 calls for the same `wtxid`. The risk of changing `m_states` i thought is acceptable, it's a rare event (outbound peers) and hard to exploit in a meaningful way.  But I'm open to more analysis.",
      "created_at": "2023-11-23T11:32:52Z",
      "updated_at": "2023-11-23T11:32:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1403256259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403256259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": 267,
      "original_start_line": 217,
      "start_side": "RIGHT",
      "line": 270,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403265334",
      "pull_request_review_id": 1746268353,
      "id": 1403265334,
      "node_id": "PRRC_kwDOABII585TpCE2",
      "diff_hunk": "@@ -5845,7 +5877,33 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                         }\n                         if (tx_relay->m_bloom_filter && !tx_relay->m_bloom_filter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                         // Send\n-                        vInv.push_back(inv);\n+                        bool fanout = true;\n+                        const auto wtxid = txinfo.tx->GetWitnessHash();\n+                        if (reconciles_txs) {\n+                            auto txiter = m_mempool.GetIter(txinfo.tx->GetHash());\n+                            if (txiter) {\n+                                // If a transaction has in-mempool children, always fanout it.\n+                                // Until package relay is implemented, this is needed to avoid\n+                                // breaking parent+child relay expectations in some cases.\n+                                //\n+                                // Potentially reconciling parent+child would mean that for every\n+                                // child we need to to check if any of the parents is currently\n+                                // reconciled so that the child isn't fanouted ahead. But then\n+                                // it gets tricky when reconciliation sets are full: a) the child\n+                                // can't just be added; b) removing parents from reconciliation\n+                                // sets for this one child is not good either.",
      "path": "src/net_processing.cpp",
      "position": 114,
      "original_position": 89,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1401146680,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, what exactly?\r\n\r\nhere I talk about an alternative way to implement this.\r\nSay, we want to add a child to the set, because the parent is already there, and we don't want child ahead of parent. But the set is full. We can't ignore the limit — that's (a). (b) means that we could fanout child+parent in this case, but this `remove parent from set` operation is harder to reason about. Should we then remove parents of a parent too?\r\n\r\nMaybe I overthink this issue.",
      "created_at": "2023-11-23T11:42:22Z",
      "updated_at": "2023-11-23T11:42:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1403265334",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1403265334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": 5894,
      "original_start_line": 5893,
      "start_side": "RIGHT",
      "line": 5895,
      "original_line": 5895,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404092298",
      "pull_request_review_id": 1747541696,
      "id": 1404092298,
      "node_id": "PRRC_kwDOABII585TsL-K",
      "diff_hunk": "@@ -125,6 +150,43 @@ class TxReconciliationTracker::Impl\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n+    bool AddToSet(NodeId peer_id, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return false;\n+        auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+\n+        // Check if reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+        // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+        // We don't care about a laggy peer (1) because we probably can't help them even if we fanout transactions.\n+        // However, exploiting (2) should not prevent us from relaying certain transactions.\n+        //\n+        // Transactions which don't make it to the set due to the limit are announced via fan-out.\n+        if (recon_state.m_local_set.size() >= MAX_SET_SIZE) return false;\n+\n+        Assume(recon_state.m_local_set.insert(wtxid).second);\n+        LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Added %s to the reconciliation set for peer=%d. \" /* Continued */\n+                                                                    \"Now the set contains %i transactions.\\n\",\n+                      wtxid.ToString(), peer_id, recon_state.m_local_set.size());\n+        return true;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 84,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1399659166,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Improved the documentation around it a bit.",
      "created_at": "2023-11-24T08:53:16Z",
      "updated_at": "2023-11-24T08:53:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1404092298",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1404092298"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": 173,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406343895",
      "pull_request_review_id": 1750735506,
      "id": 1406343895,
      "node_id": "PRRC_kwDOABII585T0xrX",
      "diff_hunk": "@@ -197,6 +210,86 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integer_part;\n+        double fractional_peer = std::modf(limit, &integer_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);\n+        const size_t targets = add_extra ? size_t(integer_part): size_t(integer_part) + 1;\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);\n+\n+        for (auto indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = deterministic_randomizer_with_wtxid.Write(cur_state->m_k0).Finalize();\n+                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\n+            }\n+        }\n+\n+        std::vector<NodeId> result;\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets && it != best_peers.end(); ++i, ++it) {\n+            result.push_back(it->second);\n+        }\n+        return result;\n+    }\n+\n+    bool ShouldFanoutTo(const uint256& wtxid, CSipHasher deterministic_randomizer, NodeId peer_id,\n+                        size_t inbounds_nonrcncl_tx_relay, size_t outbounds_nonrcncl_tx_relay)\n+                        const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return true;\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        deterministic_randomizer.Write(wtxid.GetUint64(0));\n+        const auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double destinations;\n+        if (recon_state.m_we_initiate) {\n+            destinations = OUTBOUND_FANOUT_DESTINATIONS - outbounds_nonrcncl_tx_relay;\n+        } else {\n+            const size_t inbound_rcncl_peers = std::count_if(m_states.begin(), m_states.end(),\n+                                                        [](std::pair<NodeId, std::variant<uint64_t, TxReconciliationState>> indexed_state) {\n+                                                            const auto* cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+                                                            if (cur_state) return !cur_state->m_we_initiate;\n+                                                            return false;\n+                                                        });\n+\n+            // Since we use the fraction for inbound peers, we first need to compute the total\n+            // number of inbound targets.\n+            const double inbound_targets = (inbounds_nonrcncl_tx_relay + inbound_rcncl_peers) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+            destinations = inbound_targets - inbounds_nonrcncl_tx_relay;\n+        }\n+\n+        if (destinations < 0.01) {",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1399769486,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Right, got you. I guess we can also ask this the other way around to see if there is a cleaner workaround. In what case is `destinations` smaller than 1 but we still want to pass it to `GetFanoutTargets`?",
      "created_at": "2023-11-27T15:33:31Z",
      "updated_at": "2023-11-27T15:33:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1406343895",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406343895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406355079",
      "pull_request_review_id": 1750748050,
      "id": 1406355079,
      "node_id": "PRRC_kwDOABII585T00aH",
      "diff_hunk": "@@ -5845,7 +5877,33 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                         }\n                         if (tx_relay->m_bloom_filter && !tx_relay->m_bloom_filter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                         // Send\n-                        vInv.push_back(inv);\n+                        bool fanout = true;\n+                        const auto wtxid = txinfo.tx->GetWitnessHash();\n+                        if (reconciles_txs) {\n+                            auto txiter = m_mempool.GetIter(txinfo.tx->GetHash());\n+                            if (txiter) {\n+                                // If a transaction has in-mempool children, always fanout it.\n+                                // Until package relay is implemented, this is needed to avoid\n+                                // breaking parent+child relay expectations in some cases.\n+                                //\n+                                // Potentially reconciling parent+child would mean that for every\n+                                // child we need to to check if any of the parents is currently\n+                                // reconciled so that the child isn't fanouted ahead. But then\n+                                // it gets tricky when reconciliation sets are full: a) the child\n+                                // can't just be added; b) removing parents from reconciliation\n+                                // sets for this one child is not good either.",
      "path": "src/net_processing.cpp",
      "position": 114,
      "original_position": 89,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1401146680,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I was referring to b). So this is trying to prevent a situation in which, potentially, the whole set is a cluster and once we are full, a new transaction belonging to the cluster is tried to be added, triggering a cascade removal and making us waste resources?",
      "created_at": "2023-11-27T15:39:22Z",
      "updated_at": "2023-11-27T15:39:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1406355079",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1406355079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": 5894,
      "original_start_line": 5893,
      "start_side": "RIGHT",
      "line": 5895,
      "original_line": 5895,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1411316794",
      "pull_request_review_id": 1758534171,
      "id": 1411316794,
      "node_id": "PRRC_kwDOABII585UHvw6",
      "diff_hunk": "@@ -134,14 +196,100 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n     {\n-        AssertLockNotHeld(m_txreconciliation_mutex);\n-        LOCK(m_txreconciliation_mutex);\n+        AssertLockHeld(m_txreconciliation_mutex);\n         auto recon_state = m_states.find(peer_id);\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    bool IsPeerRegisteredExternal(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        return IsPeerRegistered(peer_id);\n+    }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.",
      "path": "src/node/txreconciliation.cpp",
      "position": 209,
      "original_position": 128,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1401091147,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why not just make a copy of the seeded randomizer instead of accumulating to it all the changes from `m_states`? That way you ensure that a change in the ordering is not going to, potentially, produce a completely different order of the whole `best_peers` set. In this case, the worst that could happen would be that the newly added peer jumps places, and becomes one of the selected/not selected peers, instead of a complete rearrange of the collection",
      "created_at": "2023-11-30T21:58:29Z",
      "updated_at": "2023-11-30T21:58:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1411316794",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1411316794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": 267,
      "original_start_line": 217,
      "start_side": "RIGHT",
      "line": 270,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1411756962",
      "pull_request_review_id": 1759247791,
      "id": 1411756962,
      "node_id": "PRRC_kwDOABII585UJbOi",
      "diff_hunk": "@@ -197,6 +210,86 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integer_part;\n+        double fractional_peer = std::modf(limit, &integer_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);\n+        const size_t targets = add_extra ? size_t(integer_part): size_t(integer_part) + 1;\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);\n+\n+        for (auto indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = deterministic_randomizer_with_wtxid.Write(cur_state->m_k0).Finalize();\n+                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\n+            }\n+        }\n+\n+        std::vector<NodeId> result;\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets && it != best_peers.end(); ++i, ++it) {\n+            result.push_back(it->second);\n+        }\n+        return result;\n+    }\n+\n+    bool ShouldFanoutTo(const uint256& wtxid, CSipHasher deterministic_randomizer, NodeId peer_id,\n+                        size_t inbounds_nonrcncl_tx_relay, size_t outbounds_nonrcncl_tx_relay)\n+                        const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return true;\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        deterministic_randomizer.Write(wtxid.GetUint64(0));\n+        const auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double destinations;\n+        if (recon_state.m_we_initiate) {\n+            destinations = OUTBOUND_FANOUT_DESTINATIONS - outbounds_nonrcncl_tx_relay;\n+        } else {\n+            const size_t inbound_rcncl_peers = std::count_if(m_states.begin(), m_states.end(),\n+                                                        [](std::pair<NodeId, std::variant<uint64_t, TxReconciliationState>> indexed_state) {\n+                                                            const auto* cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+                                                            if (cur_state) return !cur_state->m_we_initiate;\n+                                                            return false;\n+                                                        });\n+\n+            // Since we use the fraction for inbound peers, we first need to compute the total\n+            // number of inbound targets.\n+            const double inbound_targets = (inbounds_nonrcncl_tx_relay + inbound_rcncl_peers) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+            destinations = inbound_targets - inbounds_nonrcncl_tx_relay;\n+        }\n+\n+        if (destinations < 0.01) {",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1399769486,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Say we have 5 inbound Erlay peers and 0 inbound legacy peers.\r\n`inbound_targets = (5+0) * 0.1 = 0.5`\r\n`destinations = 0.5 - 0 = 0.5`\r\n\r\nIt just means that we will take 1 inbound peer for fanout with a 50% chance.\r\n\r\nI guess it will work just fine if i drop the `0.01` (1% or less chance) check. It's kinda unfortunate we have to do the compute if chance is that small. Fine with me either way, let me know what you think.",
      "created_at": "2023-12-01T08:17:47Z",
      "updated_at": "2023-12-01T08:17:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1411756962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1411756962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1411776086",
      "pull_request_review_id": 1759276774,
      "id": 1411776086,
      "node_id": "PRRC_kwDOABII585UJf5W",
      "diff_hunk": "@@ -134,14 +196,100 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n     {\n-        AssertLockNotHeld(m_txreconciliation_mutex);\n-        LOCK(m_txreconciliation_mutex);\n+        AssertLockHeld(m_txreconciliation_mutex);\n         auto recon_state = m_states.find(peer_id);\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    bool IsPeerRegisteredExternal(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        return IsPeerRegistered(peer_id);\n+    }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.",
      "path": "src/node/txreconciliation.cpp",
      "position": 209,
      "original_position": 128,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1401091147,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2023-12-01T08:35:52Z",
      "updated_at": "2023-12-01T08:35:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1411776086",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1411776086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": 267,
      "original_start_line": 217,
      "start_side": "RIGHT",
      "line": 270,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1411780306",
      "pull_request_review_id": 1759283425,
      "id": 1411780306,
      "node_id": "PRRC_kwDOABII585UJg7S",
      "diff_hunk": "@@ -5845,7 +5877,33 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                         }\n                         if (tx_relay->m_bloom_filter && !tx_relay->m_bloom_filter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                         // Send\n-                        vInv.push_back(inv);\n+                        bool fanout = true;\n+                        const auto wtxid = txinfo.tx->GetWitnessHash();\n+                        if (reconciles_txs) {\n+                            auto txiter = m_mempool.GetIter(txinfo.tx->GetHash());\n+                            if (txiter) {\n+                                // If a transaction has in-mempool children, always fanout it.\n+                                // Until package relay is implemented, this is needed to avoid\n+                                // breaking parent+child relay expectations in some cases.\n+                                //\n+                                // Potentially reconciling parent+child would mean that for every\n+                                // child we need to to check if any of the parents is currently\n+                                // reconciled so that the child isn't fanouted ahead. But then\n+                                // it gets tricky when reconciliation sets are full: a) the child\n+                                // can't just be added; b) removing parents from reconciliation\n+                                // sets for this one child is not good either.",
      "path": "src/net_processing.cpp",
      "position": 114,
      "original_position": 89,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1401146680,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes. My primary concern is the complexity though. Cascade removal is more difficult to reason about. I just thought it was not worth it.",
      "created_at": "2023-12-01T08:40:27Z",
      "updated_at": "2023-12-01T08:40:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1411780306",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1411780306"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": 5894,
      "original_start_line": 5893,
      "start_side": "RIGHT",
      "line": 5895,
      "original_line": 5895,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1412243707",
      "pull_request_review_id": 1760033220,
      "id": 1412243707,
      "node_id": "PRRC_kwDOABII585ULSD7",
      "diff_hunk": "@@ -197,6 +210,86 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::vector<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                        bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integer_part;\n+        double fractional_peer = std::modf(limit, &integer_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() > fractional_peer * double(UINT64_MAX);\n+        const size_t targets = add_extra ? size_t(integer_part): size_t(integer_part) + 1;\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);\n+\n+        for (auto indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = deterministic_randomizer_with_wtxid.Write(cur_state->m_k0).Finalize();\n+                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\n+            }\n+        }\n+\n+        std::vector<NodeId> result;\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets && it != best_peers.end(); ++i, ++it) {\n+            result.push_back(it->second);\n+        }\n+        return result;\n+    }\n+\n+    bool ShouldFanoutTo(const uint256& wtxid, CSipHasher deterministic_randomizer, NodeId peer_id,\n+                        size_t inbounds_nonrcncl_tx_relay, size_t outbounds_nonrcncl_tx_relay)\n+                        const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return true;\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        deterministic_randomizer.Write(wtxid.GetUint64(0));\n+        const auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double destinations;\n+        if (recon_state.m_we_initiate) {\n+            destinations = OUTBOUND_FANOUT_DESTINATIONS - outbounds_nonrcncl_tx_relay;\n+        } else {\n+            const size_t inbound_rcncl_peers = std::count_if(m_states.begin(), m_states.end(),\n+                                                        [](std::pair<NodeId, std::variant<uint64_t, TxReconciliationState>> indexed_state) {\n+                                                            const auto* cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+                                                            if (cur_state) return !cur_state->m_we_initiate;\n+                                                            return false;\n+                                                        });\n+\n+            // Since we use the fraction for inbound peers, we first need to compute the total\n+            // number of inbound targets.\n+            const double inbound_targets = (inbounds_nonrcncl_tx_relay + inbound_rcncl_peers) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+            destinations = inbound_targets - inbounds_nonrcncl_tx_relay;\n+        }\n+\n+        if (destinations < 0.01) {",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1399769486,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just adding a comment with some context, saying that for chances lower than 1% it may not be worth the computation may be fine. It just struck me as weird where that value came from.",
      "created_at": "2023-12-01T15:24:11Z",
      "updated_at": "2023-12-01T15:24:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1412243707",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1412243707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1412244443",
      "pull_request_review_id": 1760034404,
      "id": 1412244443,
      "node_id": "PRRC_kwDOABII585ULSPb",
      "diff_hunk": "@@ -5845,7 +5877,33 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                         }\n                         if (tx_relay->m_bloom_filter && !tx_relay->m_bloom_filter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                         // Send\n-                        vInv.push_back(inv);\n+                        bool fanout = true;\n+                        const auto wtxid = txinfo.tx->GetWitnessHash();\n+                        if (reconciles_txs) {\n+                            auto txiter = m_mempool.GetIter(txinfo.tx->GetHash());\n+                            if (txiter) {\n+                                // If a transaction has in-mempool children, always fanout it.\n+                                // Until package relay is implemented, this is needed to avoid\n+                                // breaking parent+child relay expectations in some cases.\n+                                //\n+                                // Potentially reconciling parent+child would mean that for every\n+                                // child we need to to check if any of the parents is currently\n+                                // reconciled so that the child isn't fanouted ahead. But then\n+                                // it gets tricky when reconciliation sets are full: a) the child\n+                                // can't just be added; b) removing parents from reconciliation\n+                                // sets for this one child is not good either.",
      "path": "src/net_processing.cpp",
      "position": 114,
      "original_position": 89,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1401146680,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fair",
      "created_at": "2023-12-01T15:24:53Z",
      "updated_at": "2023-12-01T15:24:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1412244443",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1412244443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": 5894,
      "original_start_line": 5893,
      "start_side": "RIGHT",
      "line": 5895,
      "original_line": 5895,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414062310",
      "pull_request_review_id": 1762709866,
      "id": 1414062310,
      "node_id": "PRRC_kwDOABII585USODm",
      "diff_hunk": "@@ -51,9 +59,6 @@ class TxReconciliationState\n     bool m_we_initiate;\n \n     /**\n-     * TODO: These fields are public to ignore -Wunused-private-field. Make private once used in\n-     * the following commits.\n-     *",
      "path": "src/node/txreconciliation.cpp",
      "position": 49,
      "original_position": 29,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "150aad376413922983b172e0e503047c93c4d05b",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: if you have created a refactor commit to deal with removing the TODOs, it may be worth moving that change there.\r\n\r\nNot sure if you're planning to squash it or not. Feel free to disregard.",
      "created_at": "2023-12-04T15:20:36Z",
      "updated_at": "2023-12-04T15:20:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1414062310",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414062310"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": 50,
      "original_start_line": 54,
      "start_side": "LEFT",
      "line": 52,
      "original_line": 52,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1416006054",
      "pull_request_review_id": 1765676669,
      "id": 1416006054,
      "node_id": "PRRC_kwDOABII585UZomm",
      "diff_hunk": "@@ -134,5 +134,75 @@ BOOST_AUTO_TEST_CASE(TryRemovingFromSetTest)\n     BOOST_REQUIRE(!tracker.TryRemovingFromSet(peer_id0, wtxid));\n }\n \n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    TxReconciliationTracker tracker(1);\n+    NodeId peer_id0 = 0;\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "3a062b2bdc6dc787b967947872f55131522cd2ac",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems better to use a deterministic fast random context in tests, so that failures, if they happen, are deterministic?",
      "created_at": "2023-12-05T17:06:38Z",
      "updated_at": "2023-12-05T17:06:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1416006054",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1416006054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1417583518",
      "pull_request_review_id": 1767986165,
      "id": 1417583518,
      "node_id": "PRRC_kwDOABII585Ufpue",
      "diff_hunk": "@@ -84,6 +98,12 @@ class TxReconciliationTracker\n      * Check if a peer is registered to reconcile transactions with us.\n      */\n     bool IsPeerRegistered(NodeId peer_id) const;\n+\n+    /**\n+     * Returns whether the peer is chosen as a low-fanout destination for a given tx.\n+     */\n+    bool ShouldFanoutTo(const uint256& wtxid, CSipHasher deterministic_randomizer, NodeId peer_id,",
      "path": "src/node/txreconciliation.h",
      "position": null,
      "original_position": 29,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "dca7990c3b8b8ecb963c068b4a8a215e0c2b3cd0",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ups, I forgot to add this.\r\n\r\nnit: Shouldn't this also be `Wtxid&` for consistency with the rest of the interface?\r\n\r\nThis is non-blocking, but I realized when reviewing the last changes to the tests",
      "created_at": "2023-12-06T15:59:15Z",
      "updated_at": "2023-12-06T15:59:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1417583518",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1417583518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1418548663",
      "pull_request_review_id": 1769464844,
      "id": 1418548663,
      "node_id": "PRRC_kwDOABII585UjVW3",
      "diff_hunk": "@@ -84,6 +98,12 @@ class TxReconciliationTracker\n      * Check if a peer is registered to reconcile transactions with us.\n      */\n     bool IsPeerRegistered(NodeId peer_id) const;\n+\n+    /**\n+     * Returns whether the peer is chosen as a low-fanout destination for a given tx.\n+     */\n+    bool ShouldFanoutTo(const uint256& wtxid, CSipHasher deterministic_randomizer, NodeId peer_id,",
      "path": "src/node/txreconciliation.h",
      "position": null,
      "original_position": 29,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "dca7990c3b8b8ecb963c068b4a8a215e0c2b3cd0",
      "in_reply_to_id": 1417583518,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "as long as you reack a new version it's fine, since no other acks are pending yet :)",
      "created_at": "2023-12-07T08:20:07Z",
      "updated_at": "2023-12-07T08:20:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1418548663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1418548663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424331514",
      "pull_request_review_id": 1778050698,
      "id": 1424331514,
      "node_id": "PRRC_kwDOABII585U5ZL6",
      "diff_hunk": "@@ -195,6 +203,89 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::set<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                      bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integral_part;\n+        double fractional_part = std::modf(limit, &integral_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() < fractional_part * double(UINT64_MAX);\n+        const size_t targets_size = add_extra ? size_t(integral_part) + 1 : size_t(integral_part);\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);\n+\n+        for (auto indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer_with_wtxid).Write(cur_state->m_k0).Finalize();\n+                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\n+            }\n+        }\n+\n+        std::set<NodeId> result;\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n+            result.insert(it->second);\n+        }\n+        return result;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, CSipHasher deterministic_randomizer, NodeId peer_id,",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think that `deterministic_randomizer` could be passed by reference",
      "created_at": "2023-12-12T17:14:51Z",
      "updated_at": "2023-12-12T18:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1424331514",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424331514"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 243,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424980831",
      "pull_request_review_id": 1779045693,
      "id": 1424980831,
      "node_id": "PRRC_kwDOABII585U73tf",
      "diff_hunk": "@@ -195,6 +203,89 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::set<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                      bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integral_part;\n+        double fractional_part = std::modf(limit, &integral_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() < fractional_part * double(UINT64_MAX);\n+        const size_t targets_size = add_extra ? size_t(integral_part) + 1 : size_t(integral_part);\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);\n+\n+        for (auto indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer_with_wtxid).Write(cur_state->m_k0).Finalize();\n+                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\n+            }\n+        }\n+\n+        std::set<NodeId> result;\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n+            result.insert(it->second);\n+        }\n+        return result;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, CSipHasher deterministic_randomizer, NodeId peer_id,",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "in_reply_to_id": 1424331514,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will fix if i end up retouching it :)",
      "created_at": "2023-12-13T08:04:28Z",
      "updated_at": "2023-12-13T08:04:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1424980831",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424980831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 243,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425842632",
      "pull_request_review_id": 1780420519,
      "id": 1425842632,
      "node_id": "PRRC_kwDOABII585U_KHI",
      "diff_hunk": "@@ -134,14 +189,103 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n     {\n-        AssertLockNotHeld(m_txreconciliation_mutex);\n-        LOCK(m_txreconciliation_mutex);\n+        AssertLockHeld(m_txreconciliation_mutex);\n         auto recon_state = m_states.find(peer_id);\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    bool IsPeerRegisteredExternal(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        return IsPeerRegistered(peer_id);\n+    }\n+\n+    std::set<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 131,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The `deterministic_randomizer_with_wtxid` variable could be `const CSipHasher&` here (to make it clear that this object is only ever used as a starting point for (independent) hashes).",
      "created_at": "2023-12-13T20:18:23Z",
      "updated_at": "2023-12-13T20:54:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1425842632",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425842632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425845551",
      "pull_request_review_id": 1780420519,
      "id": 1425845551,
      "node_id": "PRRC_kwDOABII585U_K0v",
      "diff_hunk": "@@ -134,14 +189,103 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n     {\n-        AssertLockNotHeld(m_txreconciliation_mutex);\n-        LOCK(m_txreconciliation_mutex);\n+        AssertLockHeld(m_txreconciliation_mutex);\n         auto recon_state = m_states.find(peer_id);\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    bool IsPeerRegisteredExternal(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        return IsPeerRegistered(peer_id);\n+    }\n+\n+    std::set<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                      bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integral_part;\n+        double fractional_part = std::modf(limit, &integral_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() < fractional_part * double(UINT64_MAX);\n+        const size_t targets_size = add_extra ? size_t(integral_part) + 1 : size_t(integral_part);\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 149,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I believe it would be significantly faster to make this an `std::vector<std::pair<uint64_t, NodeId>>`, `.reserve()` it once, fill it up like in the loop below, and then `std::sort` it in-place using `cmp_by_key`. This has far better memory locality, less allocation overhead, and ought to have the same asymptotic complexity (O(n log n)).",
      "created_at": "2023-12-13T20:21:32Z",
      "updated_at": "2023-12-13T20:54:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1425845551",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425845551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425854190",
      "pull_request_review_id": 1780420519,
      "id": 1425854190,
      "node_id": "PRRC_kwDOABII585U_M7u",
      "diff_hunk": "@@ -134,14 +189,103 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n     {\n-        AssertLockNotHeld(m_txreconciliation_mutex);\n-        LOCK(m_txreconciliation_mutex);\n+        AssertLockHeld(m_txreconciliation_mutex);\n         auto recon_state = m_states.find(peer_id);\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    bool IsPeerRegisteredExternal(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        return IsPeerRegistered(peer_id);\n+    }\n+\n+    std::set<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                      bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integral_part;\n+        double fractional_part = std::modf(limit, &integral_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() < fractional_part * double(UINT64_MAX);\n+        const size_t targets_size = add_extra ? size_t(integral_part) + 1 : size_t(integral_part);\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);\n+\n+        for (auto indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer_with_wtxid).Write(cur_state->m_k0).Finalize();\n+                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\n+            }\n+        }\n+\n+        std::set<NodeId> result;\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n+            result.insert(it->second);\n+        }\n+        return result;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, CSipHasher deterministic_randomizer, NodeId peer_id,\n+                        size_t inbounds_nonrcncl_tx_relay, size_t outbounds_nonrcncl_tx_relay)\n+        const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return true;\n+        const auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double destinations;\n+        if (recon_state.m_we_initiate) {\n+            destinations = OUTBOUND_FANOUT_DESTINATIONS - outbounds_nonrcncl_tx_relay;\n+        } else {\n+            const size_t inbound_rcncl_peers = std::count_if(m_states.begin(), m_states.end(),\n+                                                             [](std::pair<NodeId, std::variant<uint64_t, TxReconciliationState>> indexed_state) {\n+                                                                 const auto* cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+                                                                 if (cur_state) return !cur_state->m_we_initiate;\n+                                                                 return false;\n+                                                             });\n+\n+            // Since we use the fraction for inbound peers, we first need to compute the total\n+            // number of inbound targets.\n+            const double inbound_targets = (inbounds_nonrcncl_tx_relay + inbound_rcncl_peers) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+            destinations = inbound_targets - inbounds_nonrcncl_tx_relay;\n+        }\n+\n+        // Pure optimization to avoid going through the peers when the odds of picking one are\n+        // too low.\n+        if (destinations < 0.001) {\n+            return false;\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        auto fanout_candidates = GetFanoutTargets(deterministic_randomizer, recon_state.m_we_initiate, destinations);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Constructing the full set of fanout candidates any time you want to consider relaying anything to any node has O(n^2 log n) scaling (you'll call `GetFanoutTargets` O(n) times, and each does O(n log n) work going over all nodes), I believe.\r\n\r\nThat may or may not matter, but I'd consider at least one of these variants:\r\n* Cache the `GetFanoutTargets` result per transaction as discussed elsewhere in this PR, making it O(n log n) only.\r\n* Instead of computing an `std::set<NodeId>` in `GetFanoutTargets` (which at least involves an allocation per result), pass the `peer_id` to `GetFanoutTargets`, which can then just return a boolean (see if the `peer_id` appears in the first `target_size` elements of `best_peers` after sorting). This doesn't change the asymptotic behavior, but means there is just one allocation per `ShouldFanoutTo`.",
      "created_at": "2023-12-13T20:31:09Z",
      "updated_at": "2023-12-13T20:54:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1425854190",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425854190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425856345",
      "pull_request_review_id": 1780420519,
      "id": 1425856345,
      "node_id": "PRRC_kwDOABII585U_NdZ",
      "diff_hunk": "@@ -195,6 +203,89 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    std::set<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                      bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integral_part;\n+        double fractional_part = std::modf(limit, &integral_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() < fractional_part * double(UINT64_MAX);\n+        const size_t targets_size = add_extra ? size_t(integral_part) + 1 : size_t(integral_part);\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);\n+\n+        for (auto indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer_with_wtxid).Write(cur_state->m_k0).Finalize();\n+                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\n+            }\n+        }\n+\n+        std::set<NodeId> result;\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n+            result.insert(it->second);\n+        }\n+        return result;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, CSipHasher deterministic_randomizer, NodeId peer_id,",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "in_reply_to_id": 1424331514,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I believe the appropriate type in this case is `CSipHasher&& deterministic_randomizer`. This avoids a copy, allows the local variable inside `ShouldFanoutTo` to be modified, and the caller is constructing a fresh `CSipHasher` anyway.",
      "created_at": "2023-12-13T20:33:37Z",
      "updated_at": "2023-12-13T20:54:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1425856345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425856345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 243,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425857575",
      "pull_request_review_id": 1780420519,
      "id": 1425857575,
      "node_id": "PRRC_kwDOABII585U_Nwn",
      "diff_hunk": "@@ -134,14 +189,103 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n     {\n-        AssertLockNotHeld(m_txreconciliation_mutex);\n-        LOCK(m_txreconciliation_mutex);\n+        AssertLockHeld(m_txreconciliation_mutex);\n         auto recon_state = m_states.find(peer_id);\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    bool IsPeerRegisteredExternal(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        return IsPeerRegistered(peer_id);\n+    }\n+\n+    std::set<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                      bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integral_part;\n+        double fractional_part = std::modf(limit, &integral_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() < fractional_part * double(UINT64_MAX);\n+        const size_t targets_size = add_extra ? size_t(integral_part) + 1 : size_t(integral_part);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 143,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: `const size_t targets_size = integral_part + add_extra`.",
      "created_at": "2023-12-13T20:34:54Z",
      "updated_at": "2023-12-13T20:54:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1425857575",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425857575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425862263",
      "pull_request_review_id": 1780420519,
      "id": 1425862263,
      "node_id": "PRRC_kwDOABII585U_O53",
      "diff_hunk": "@@ -134,14 +189,103 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n     {\n-        AssertLockNotHeld(m_txreconciliation_mutex);\n-        LOCK(m_txreconciliation_mutex);\n+        AssertLockHeld(m_txreconciliation_mutex);\n         auto recon_state = m_states.find(peer_id);\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    bool IsPeerRegisteredExternal(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        return IsPeerRegistered(peer_id);\n+    }\n+\n+    std::set<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                      bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integral_part;\n+        double fractional_part = std::modf(limit, &integral_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() < fractional_part * double(UINT64_MAX);\n+        const size_t targets_size = add_extra ? size_t(integral_part) + 1 : size_t(integral_part);\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);\n+\n+        for (auto indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer_with_wtxid).Write(cur_state->m_k0).Finalize();\n+                best_peers.insert(std::make_pair(hash_key, indexed_state.first));\n+            }\n+        }\n+\n+        std::set<NodeId> result;\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n+            result.insert(it->second);\n+        }\n+        return result;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, CSipHasher deterministic_randomizer, NodeId peer_id,\n+                        size_t inbounds_nonrcncl_tx_relay, size_t outbounds_nonrcncl_tx_relay)\n+        const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return true;\n+        const auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double destinations;\n+        if (recon_state.m_we_initiate) {\n+            destinations = OUTBOUND_FANOUT_DESTINATIONS - outbounds_nonrcncl_tx_relay;\n+        } else {\n+            const size_t inbound_rcncl_peers = std::count_if(m_states.begin(), m_states.end(),\n+                                                             [](std::pair<NodeId, std::variant<uint64_t, TxReconciliationState>> indexed_state) {",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 188,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Pass `indexed_state` by reference. This is creating a copy of the entire `TxReconciliationState` for every element in `m_states`.\r\n\r\n`[](const auto& indexed_state) { ... }` works.",
      "created_at": "2023-12-13T20:40:36Z",
      "updated_at": "2023-12-13T20:54:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1425862263",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425862263"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425865073",
      "pull_request_review_id": 1780420519,
      "id": 1425865073,
      "node_id": "PRRC_kwDOABII585U_Plx",
      "diff_hunk": "@@ -134,14 +189,103 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n     {\n-        AssertLockNotHeld(m_txreconciliation_mutex);\n-        LOCK(m_txreconciliation_mutex);\n+        AssertLockHeld(m_txreconciliation_mutex);\n         auto recon_state = m_states.find(peer_id);\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    bool IsPeerRegisteredExternal(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        return IsPeerRegistered(peer_id);\n+    }\n+\n+    std::set<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                      bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integral_part;\n+        double fractional_part = std::modf(limit, &integral_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() < fractional_part * double(UINT64_MAX);\n+        const size_t targets_size = add_extra ? size_t(integral_part) + 1 : size_t(integral_part);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 143,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "An alternative which may be slightly faster (unsure, depends on how fast `std::modf` is):\r\n\r\n`const size_t targets_size = ((deterministic_randomizer_with_wtxid.Finalize() & 0xFFFFFFFF) + uint64_t(limit * 0x100000000)) >> 32;`\r\n\r\nIt has lower precision, but I suspect 32 bits is more than sufficient here.",
      "created_at": "2023-12-13T20:43:50Z",
      "updated_at": "2023-12-13T20:54:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1425865073",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425865073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425866501",
      "pull_request_review_id": 1780420519,
      "id": 1425866501,
      "node_id": "PRRC_kwDOABII585U_P8F",
      "diff_hunk": "@@ -134,14 +189,103 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n     {\n-        AssertLockNotHeld(m_txreconciliation_mutex);\n-        LOCK(m_txreconciliation_mutex);\n+        AssertLockHeld(m_txreconciliation_mutex);\n         auto recon_state = m_states.find(peer_id);\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    bool IsPeerRegisteredExternal(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        return IsPeerRegistered(peer_id);\n+    }\n+\n+    std::set<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                      bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integral_part;\n+        double fractional_part = std::modf(limit, &integral_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() < fractional_part * double(UINT64_MAX);\n+        const size_t targets_size = add_extra ? size_t(integral_part) + 1 : size_t(integral_part);\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);\n+\n+        for (auto indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer_with_wtxid).Write(cur_state->m_k0).Finalize();\n+                best_peers.insert(std::make_pair(hash_key, indexed_state.first));",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 155,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`best_peers.emplace(hash_key, indexed_state.first);` (avoids a temporary `std::pair` object in the caller).\r\n\r\n(it'd become `best_peers.emplace_back(hash_key indexed_state.first);` if `best_peers` is converted to a vector as suggested above.",
      "created_at": "2023-12-13T20:45:33Z",
      "updated_at": "2023-12-13T20:54:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1425866501",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425866501"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425866970",
      "pull_request_review_id": 1780420519,
      "id": 1425866970,
      "node_id": "PRRC_kwDOABII585U_QDa",
      "diff_hunk": "@@ -134,14 +189,103 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n     {\n-        AssertLockNotHeld(m_txreconciliation_mutex);\n-        LOCK(m_txreconciliation_mutex);\n+        AssertLockHeld(m_txreconciliation_mutex);\n         auto recon_state = m_states.find(peer_id);\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    bool IsPeerRegisteredExternal(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        return IsPeerRegistered(peer_id);\n+    }\n+\n+    std::set<NodeId> GetFanoutTargets(CSipHasher& deterministic_randomizer_with_wtxid,\n+                                      bool we_initiate, double limit) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        double integral_part;\n+        double fractional_part = std::modf(limit, &integral_part);\n+        // Handle fractional value.\n+        const bool add_extra = deterministic_randomizer_with_wtxid.Finalize() < fractional_part * double(UINT64_MAX);\n+        const size_t targets_size = add_extra ? size_t(integral_part) + 1 : size_t(integral_part);\n+\n+        auto cmp_by_key = [](const std::pair<uint64_t, NodeId>& left, const std::pair<uint64_t, NodeId>& right) {\n+            return left.first > right.first;\n+        };\n+\n+        std::set<std::pair<uint64_t, NodeId>, decltype(cmp_by_key)> best_peers(cmp_by_key);\n+\n+        for (auto indexed_state : m_states) {",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 151,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Use `const auto& indexed_state : m_states)` here; you're making a copy of the entire `TxReconciliationState` for every iteration as written here.",
      "created_at": "2023-12-13T20:46:07Z",
      "updated_at": "2023-12-13T20:54:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1425866970",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425866970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425870404",
      "pull_request_review_id": 1780420519,
      "id": 1425870404,
      "node_id": "PRRC_kwDOABII585U_Q5E",
      "diff_hunk": "@@ -5818,6 +5827,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n                     unsigned int nRelayedTransactions = 0;\n+\n+                    size_t inbounds_nonrcncl_tx_relay = 0, outbounds_nonrcncl_tx_relay = 0;\n+                    const bool reconciles_txs = m_txreconciliation && m_txreconciliation->IsPeerRegistered(pto->GetId());\n+                    if (reconciles_txs) {\n+                        for (auto [cur_peer_id, cur_peer] : m_peer_map) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "f56ec8a3b086b0f2f8a0fbde861447e40ffbc3d9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Use `const auto& [cur_peer_id, cur_peer] : m_peer_map` here. You're making a copy of the `PeerRef` object for every iteration here (which isn't the end of the world, it's just a shared pointer, but copying those does involve an atomic memory operation).",
      "created_at": "2023-12-13T20:50:09Z",
      "updated_at": "2023-12-13T20:54:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1425870404",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425870404"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5834,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446503850",
      "pull_request_review_id": 1811832956,
      "id": 1446503850,
      "node_id": "PRRC_kwDOABII585WN-Wq",
      "diff_hunk": "@@ -76,6 +90,19 @@ class TxReconciliationTracker::Impl\n      */\n     std::unordered_map<NodeId, std::variant<uint64_t, TxReconciliationState>> m_states GUARDED_BY(m_txreconciliation_mutex);\n \n+    /*\n+     * A least-recently-added cache tracking which peers we should fanout a transaction to.\n+     *\n+     * Since the time between cache accesses is on the order of seconds, returning an outdated\n+     * set of peers is not a concern (especially since we fanout to outbound peers, which should\n+     * be hard to manipulate).\n+     *\n+     * No need to use LRU (bump transaction order upon access) because in most cases\n+     * transactions are processed almost-sequentially.\n+     */\n+    std::deque<Wtxid> tx_fanout_targes_cache_order;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "c7c6bcc5c6ba7b5590470d2029fbc27321b35c8d",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `targes` -> `targets`",
      "created_at": "2024-01-09T19:19:07Z",
      "updated_at": "2024-01-09T19:42:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1446503850",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446503850"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446517082",
      "pull_request_review_id": 1811832956,
      "id": 1446517082,
      "node_id": "PRRC_kwDOABII585WOBla",
      "diff_hunk": "@@ -134,14 +202,119 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n     {\n-        AssertLockNotHeld(m_txreconciliation_mutex);\n-        LOCK(m_txreconciliation_mutex);\n+        AssertLockHeld(m_txreconciliation_mutex);\n         auto recon_state = m_states.find(peer_id);\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    bool IsPeerRegisteredExternal(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        return IsPeerRegistered(peer_id);\n+    }\n+\n+    bool IsFanoutTarget(CSipHasher&& deterministic_randomizer,\n+                        bool we_initiate, double limit,\n+                        NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        auto fanout_candidates = tx_fanout_targets_cache_data.find(wtxid);\n+        if (fanout_candidates != tx_fanout_targets_cache_data.end()) {\n+            return fanout_candidates->second.find(peer_id) != fanout_candidates->second.end();\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // The integral part of `limit` is accounted in the higher 32 bits of the second element.\n+        // The fractional part of `limit` is stored in the lower 32 bits, and then we check\n+        // whether adding a random lower 32-bit value (first element) would end up modifying\n+        // the higher bits.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(limit * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(cur_state->m_k0).Finalize();\n+                best_peers.emplace_back(hash_key, indexed_state.first);\n+            }\n+        }\n+\n+        static constexpr auto cmp_by_key = [](const auto& left, const auto& right) {\n+            return left.first > right.first;\n+        };\n+        std::sort(best_peers.begin(), best_peers.end(), cmp_by_key);\n+\n+        std::set<NodeId> new_fanout_candidates;\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n+            new_fanout_candidates.insert(it->second);\n+        }\n+\n+        tx_fanout_targets_cache_data.emplace(wtxid, new_fanout_candidates);\n+        // Replace the oldest cache item with this new one.\n+        if (tx_fanout_targes_cache_order.size () == 3000) {",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 199,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "c7c6bcc5c6ba7b5590470d2029fbc27321b35c8d",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I'd be nice to define this as a constant",
      "created_at": "2024-01-09T19:34:12Z",
      "updated_at": "2024-01-09T19:42:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1446517082",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446517082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 268,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446518794",
      "pull_request_review_id": 1811832956,
      "id": 1446518794,
      "node_id": "PRRC_kwDOABII585WOCAK",
      "diff_hunk": "@@ -134,14 +202,119 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n     {\n-        AssertLockNotHeld(m_txreconciliation_mutex);\n-        LOCK(m_txreconciliation_mutex);\n+        AssertLockHeld(m_txreconciliation_mutex);\n         auto recon_state = m_states.find(peer_id);\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    bool IsPeerRegisteredExternal(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        return IsPeerRegistered(peer_id);\n+    }\n+\n+    bool IsFanoutTarget(CSipHasher&& deterministic_randomizer,\n+                        bool we_initiate, double limit,\n+                        NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        auto fanout_candidates = tx_fanout_targets_cache_data.find(wtxid);\n+        if (fanout_candidates != tx_fanout_targets_cache_data.end()) {\n+            return fanout_candidates->second.find(peer_id) != fanout_candidates->second.end();\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // The integral part of `limit` is accounted in the higher 32 bits of the second element.\n+        // The fractional part of `limit` is stored in the lower 32 bits, and then we check\n+        // whether adding a random lower 32-bit value (first element) would end up modifying\n+        // the higher bits.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(limit * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(cur_state->m_k0).Finalize();\n+                best_peers.emplace_back(hash_key, indexed_state.first);\n+            }\n+        }\n+\n+        static constexpr auto cmp_by_key = [](const auto& left, const auto& right) {\n+            return left.first > right.first;\n+        };\n+        std::sort(best_peers.begin(), best_peers.end(), cmp_by_key);\n+\n+        std::set<NodeId> new_fanout_candidates;\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n+            new_fanout_candidates.insert(it->second);\n+        }\n+\n+        tx_fanout_targets_cache_data.emplace(wtxid, new_fanout_candidates);\n+        // Replace the oldest cache item with this new one.\n+        if (tx_fanout_targes_cache_order.size () == 3000) {\n+            auto expired_tx = tx_fanout_targes_cache_order.front();\n+            tx_fanout_targets_cache_data.erase(expired_tx);\n+            tx_fanout_targes_cache_order.pop_front();\n+            tx_fanout_targes_cache_order.push_back(wtxid);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 203,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "c7c6bcc5c6ba7b5590470d2029fbc27321b35c8d",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think this is right(?), this logic is never triggered.\r\n\r\nYou are checking whether the size of `tx_fanout_targes_cache_order` is over the limit, but you are only adding elements to the queue within that same `if` context, meaning that the queue is always empty.",
      "created_at": "2024-01-09T19:36:15Z",
      "updated_at": "2024-01-09T19:42:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1446518794",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446518794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": 268,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 272,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447390077",
      "pull_request_review_id": 1813233994,
      "id": 1447390077,
      "node_id": "PRRC_kwDOABII585WRWt9",
      "diff_hunk": "@@ -128,14 +128,20 @@ class TxReconciliationTracker::Impl\n         }\n     }\n \n-    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool IsPeerRegistered(NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "1d06576d748d76f8dfa3f983307a110e9aad6a7a",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"refactor: Add a pre-mutexed version of IsPeerRegistered\":\r\n\r\nI'd prefer to swap the names (= have an external `IsPeerRegistered`, and an internal `IsPeerRegisteredInternal`), as external callers ought to only care about the external one. Also is it possible to make the internal one `private`?\r\n\r\n",
      "created_at": "2024-01-10T13:31:51Z",
      "updated_at": "2024-01-10T15:21:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1447390077",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447390077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447401962",
      "pull_request_review_id": 1813233994,
      "id": 1447401962,
      "node_id": "PRRC_kwDOABII585WRZnq",
      "diff_hunk": "@@ -48,6 +52,14 @@ class TxReconciliationState\n      */\n     uint64_t m_k0, m_k1;\n \n+    /**\n+     * Store all wtxids which we would announce to the peer (policy checks passed, etc.)\n+     * in this set instead of announcing them right away. When reconciliation time comes, we will\n+     * compute a compressed representation of this set (\"sketch\") and use it to efficiently\n+     * reconcile this set with a set on the peer's side.\n+     */\n+    std::set<Wtxid> m_local_set;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 23,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "64cae4514b065cd5db3dd48eebcdf7509694e4d1",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If this set may contain up to 3000 (=`MAX_SET_SIZE`) elements, it may be worth using an `std::unordered_set` instead (with something like `SaltedTxidHasher` as hasher).",
      "created_at": "2024-01-10T13:42:20Z",
      "updated_at": "2024-01-10T15:21:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1447401962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447401962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447502258",
      "pull_request_review_id": 1813233994,
      "id": 1447502258,
      "node_id": "PRRC_kwDOABII585WRyGy",
      "diff_hunk": "@@ -195,6 +203,89 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    bool IsFanoutTarget(const CSipHasher& deterministic_randomizer_with_wtxid,\n+                        bool we_initiate, double limit,\n+                        NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // The integral part of `limit` is accounted in the higher 32 bits of the second element.\n+        // The fractional part of `limit` is stored in the lower 32 bits, and then we check\n+        // whether adding a random lower 32-bit value (first element) would end up modifying\n+        // the higher bits.\n+        const size_t targets_size = ((deterministic_randomizer_with_wtxid.Finalize() & 0xFFFFFFFF) + uint64_t(limit * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer_with_wtxid).Write(cur_state->m_k0).Finalize();\n+                best_peers.emplace_back(hash_key, indexed_state.first);\n+            }\n+        }\n+\n+        static constexpr auto cmp_by_key = [](const auto& left, const auto& right) {\n+            return left.first > right.first;\n+        };\n+        std::sort(best_peers.begin(), best_peers.end(), cmp_by_key);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "baaf390c758fbe173c4b440c8c26048b58f63b9c",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"p2p: Add transactions to reconciliation sets\"\r\n\r\nIt doesn't actually matter whether we pick the lowest-`hash_key` entries or highest-`hash_key` entries to fanout to, I think? If so, can just use `std::sort(best_peers.begin(), best_peers.end());`, and drop the `cmp_by_key`.\r\n\r\nAlso, since you only care about the top `targets_size` results, I believe using `std::partial_sort` *may* be faster (but benchmark it).",
      "created_at": "2024-01-10T14:58:16Z",
      "updated_at": "2024-01-10T15:21:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1447502258",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447502258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447504347",
      "pull_request_review_id": 1813233994,
      "id": 1447504347,
      "node_id": "PRRC_kwDOABII585WRynb",
      "diff_hunk": "@@ -195,6 +203,89 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    bool IsFanoutTarget(const CSipHasher& deterministic_randomizer_with_wtxid,\n+                        bool we_initiate, double limit,\n+                        NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // The integral part of `limit` is accounted in the higher 32 bits of the second element.\n+        // The fractional part of `limit` is stored in the lower 32 bits, and then we check\n+        // whether adding a random lower 32-bit value (first element) would end up modifying\n+        // the higher bits.\n+        const size_t targets_size = ((deterministic_randomizer_with_wtxid.Finalize() & 0xFFFFFFFF) + uint64_t(limit * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer_with_wtxid).Write(cur_state->m_k0).Finalize();\n+                best_peers.emplace_back(hash_key, indexed_state.first);\n+            }\n+        }\n+\n+        static constexpr auto cmp_by_key = [](const auto& left, const auto& right) {\n+            return left.first > right.first;\n+        };\n+        std::sort(best_peers.begin(), best_peers.end(), cmp_by_key);\n+\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n+            if (it->second == peer_id) return true;\n+        }\n+        return false;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, CSipHasher&& deterministic_randomizer, NodeId peer_id,\n+                        size_t inbounds_nonrcncl_tx_relay, size_t outbounds_nonrcncl_tx_relay)\n+        const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return true;",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "baaf390c758fbe173c4b440c8c26048b58f63b9c",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"p2p: Add transactions to reconciliation set\"\r\n\r\nWould it make sense to have an (internal) helper function instead of `IsPeerRegistered`, that instead of returning a `bool` returns a `TxReconciliationState*` (`nullptr` if not found)? That would avoid locking/finding twice. I suspect it'd be usable in other places too.",
      "created_at": "2024-01-10T14:59:46Z",
      "updated_at": "2024-01-10T18:54:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1447504347",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447504347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 251,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447509119",
      "pull_request_review_id": 1813233994,
      "id": 1447509119,
      "node_id": "PRRC_kwDOABII585WRzx_",
      "diff_hunk": "@@ -195,6 +203,89 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    bool IsFanoutTarget(const CSipHasher& deterministic_randomizer_with_wtxid,\n+                        bool we_initiate, double limit,\n+                        NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // The integral part of `limit` is accounted in the higher 32 bits of the second element.\n+        // The fractional part of `limit` is stored in the lower 32 bits, and then we check\n+        // whether adding a random lower 32-bit value (first element) would end up modifying\n+        // the higher bits.\n+        const size_t targets_size = ((deterministic_randomizer_with_wtxid.Finalize() & 0xFFFFFFFF) + uint64_t(limit * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer_with_wtxid).Write(cur_state->m_k0).Finalize();\n+                best_peers.emplace_back(hash_key, indexed_state.first);\n+            }\n+        }\n+\n+        static constexpr auto cmp_by_key = [](const auto& left, const auto& right) {\n+            return left.first > right.first;\n+        };\n+        std::sort(best_peers.begin(), best_peers.end(), cmp_by_key);\n+\n+        auto it = best_peers.begin();\n+        for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n+            if (it->second == peer_id) return true;\n+        }\n+        return false;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, CSipHasher&& deterministic_randomizer, NodeId peer_id,\n+                        size_t inbounds_nonrcncl_tx_relay, size_t outbounds_nonrcncl_tx_relay)\n+        const EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        if (!IsPeerRegistered(peer_id)) return true;\n+        const auto& recon_state = std::get<TxReconciliationState>(m_states.find(peer_id)->second);\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double destinations;\n+        if (recon_state.m_we_initiate) {\n+            destinations = OUTBOUND_FANOUT_DESTINATIONS - outbounds_nonrcncl_tx_relay;\n+        } else {\n+            const size_t inbound_rcncl_peers = std::count_if(m_states.begin(), m_states.end(),",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "baaf390c758fbe173c4b440c8c26048b58f63b9c",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"p2p: Add transactions to reconciliation set\"\r\n\r\nThis value could be cached inside `TxReconciliationTracker::Impl` I think, and updated on registering/deregister, to avoid recomputating it every time?",
      "created_at": "2024-01-10T15:02:53Z",
      "updated_at": "2024-01-10T15:21:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1447509119",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447509119"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 265,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447514047",
      "pull_request_review_id": 1813233994,
      "id": 1447514047,
      "node_id": "PRRC_kwDOABII585WR0-_",
      "diff_hunk": "@@ -81,4 +81,76 @@ BOOST_AUTO_TEST_CASE(IsPeerRegisteredTest)\n     BOOST_CHECK(!tracker.IsPeerRegistered(peer_id0));\n }\n \n+BOOST_AUTO_TEST_CASE(ShouldFanoutToTest)\n+{\n+    TxReconciliationTracker tracker(1);\n+    NodeId peer_id0 = 0;\n+    CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n+\n+    // If peer is not registered for reconciliation, it should be always chosen for flooding.\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    tracker.PreRegisterPeer(peer_id0);\n+    BOOST_REQUIRE(!tracker.IsPeerRegistered(peer_id0));\n+    // Same after pre-registering.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Once the peer is registered, it should be selected for flooding of some transactions.\n+    // Since there is only one reconciling peer, it will be selected for all transactions.\n+    BOOST_REQUIRE_EQUAL(tracker.RegisterPeer(peer_id0, /*is_peer_inbound=*/false, 1, 1), ReconciliationRegisterResult::SUCCESS);\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Don't select a fanout target if it was already fanouted sufficiently.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(!tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                            /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/1));\n+    }\n+\n+    tracker.ForgetPeer(peer_id0);\n+    // A forgotten (reconciliation-wise) peer should be always selected for fanout again.\n+    for (int i = 0; i < 100; ++i) {\n+        BOOST_CHECK(tracker.ShouldFanoutTo(GetRandHash(), hasher, peer_id0,\n+                                           /*inbounds_nonrcncl_tx_relay=*/0, /*outbounds_nonrcncl_tx_relay=*/0));\n+    }\n+\n+    // Now for inbound connections.",
      "path": "src/test/txreconciliation_tests.cpp",
      "position": 157,
      "original_position": 46,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b07029a67c800c679214a28f935fa221b44e7ead",
      "in_reply_to_id": 1379312851,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"p2p: Add transactions to reconciliation set\"\r\n\r\nYou could pick a fixed seed and wtxid for which you assert that with say 35 peers 3 are picked, and another seed/wtxid for which you assert that with 35 peers 4 are picked. That would at least show that the fractional probability code isn't just rounding down.",
      "created_at": "2024-01-10T15:06:39Z",
      "updated_at": "2024-01-10T15:21:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1447514047",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447514047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 192,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447521744",
      "pull_request_review_id": 1813233994,
      "id": 1447521744,
      "node_id": "PRRC_kwDOABII585WR23Q",
      "diff_hunk": "@@ -90,6 +94,19 @@ class TxReconciliationTracker::Impl\n      */\n     std::unordered_map<NodeId, std::variant<uint64_t, TxReconciliationState>> m_states GUARDED_BY(m_txreconciliation_mutex);\n \n+    /*\n+     * A least-recently-added cache tracking which peers we should fanout a transaction to.\n+     *\n+     * Since the time between cache accesses is on the order of seconds, returning an outdated\n+     * set of peers is not a concern (especially since we fanout to outbound peers, which should\n+     * be hard to manipulate).\n+     *\n+     * No need to use LRU (bump transaction order upon access) because in most cases\n+     * transactions are processed almost-sequentially.\n+     */\n+    std::deque<Wtxid> tx_fanout_targets_cache_order;\n+    std::map<Wtxid, std::set<NodeId>> tx_fanout_targets_cache_data GUARDED_BY(m_txreconciliation_mutex);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b54d8ec9ff524fb0986db78b22fe8d7c6277eb99",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"Cache fanout candidates to optimize txreconciliation\"\r\n\r\nSince the cache entry `std::set<NodeId>` don't change until being replaced entirely, I believe it would be more efficient to use a `std::vector<NodeId>`, with the nodeids in sorted order. You can then use `std::binary_search` to query in that vector.\r\n\r\nIt'd be more efficient as `std::vector` has much better memory locality than `std::set`, and fewer indirections.\r\n\r\nIf you do this, can also just reuse the `best_peers` vector, and shrink it to `target_size` (but make sure to call `shrink_to_fit`, as otherwise the memory for the remainder won't be released.",
      "created_at": "2024-01-10T15:12:25Z",
      "updated_at": "2024-01-10T15:21:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1447521744",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447521744"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447531912",
      "pull_request_review_id": 1813233994,
      "id": 1447531912,
      "node_id": "PRRC_kwDOABII585WR5WI",
      "diff_hunk": "@@ -235,16 +261,27 @@ class TxReconciliationTracker::Impl\n         };\n         std::sort(best_peers.begin(), best_peers.end(), cmp_by_key);\n \n+        std::set<NodeId> new_fanout_candidates;\n         auto it = best_peers.begin();\n         for (size_t i = 0; i < targets_size && it != best_peers.end(); ++i, ++it) {\n-            if (it->second == peer_id) return true;\n+            new_fanout_candidates.insert(it->second);\n         }\n-        return false;\n+\n+        tx_fanout_targets_cache_data.emplace(wtxid, new_fanout_candidates);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 83,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b54d8ec9ff524fb0986db78b22fe8d7c6277eb99",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"Cache fanout candidates to optimize txreconciliation\"\r\n\r\nUse `std::move` around `new_fanout_candidates` (or `best_peers` if you take my earlier suggestion to use a vector), to avoid a copy. If so, lookup the `peer_id` in it before moving, so you can return that value.",
      "created_at": "2024-01-10T15:19:51Z",
      "updated_at": "2024-01-10T18:53:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1447531912",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1447531912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450168792",
      "pull_request_review_id": 1817828695,
      "id": 1450168792,
      "node_id": "PRRC_kwDOABII585Wb9HY",
      "diff_hunk": "@@ -195,6 +203,89 @@ class TxReconciliationTracker::Impl\n         LOCK(m_txreconciliation_mutex);\n         return IsPeerRegistered(peer_id);\n     }\n+\n+    bool IsFanoutTarget(const CSipHasher& deterministic_randomizer_with_wtxid,\n+                        bool we_initiate, double limit,\n+                        NodeId peer_id) const EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // The integral part of `limit` is accounted in the higher 32 bits of the second element.\n+        // The fractional part of `limit` is stored in the lower 32 bits, and then we check\n+        // whether adding a random lower 32-bit value (first element) would end up modifying\n+        // the higher bits.\n+        const size_t targets_size = ((deterministic_randomizer_with_wtxid.Finalize() & 0xFFFFFFFF) + uint64_t(limit * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer_with_wtxid).Write(cur_state->m_k0).Finalize();\n+                best_peers.emplace_back(hash_key, indexed_state.first);\n+            }\n+        }\n+\n+        static constexpr auto cmp_by_key = [](const auto& left, const auto& right) {\n+            return left.first > right.first;\n+        };\n+        std::sort(best_peers.begin(), best_peers.end(), cmp_by_key);",
      "path": "src/node/txreconciliation.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "baaf390c758fbe173c4b440c8c26048b58f63b9c",
      "in_reply_to_id": 1447502258,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`ShouldFanoutTo` looks fitting for benchmarking, and `partial_sort` had no effect.\r\nI took the former suggestion of course.",
      "created_at": "2024-01-12T10:01:19Z",
      "updated_at": "2024-01-12T10:01:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1450168792",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1450168792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496674625",
      "pull_request_review_id": 1891766080,
      "id": 1496674625,
      "node_id": "PRRC_kwDOABII585ZNXFB",
      "diff_hunk": "@@ -5818,6 +5828,29 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // No reason to drain out at many times the network's capacity,\n                     // especially since we have many peers and some will draw much shorter delays.\n                     unsigned int nRelayedTransactions = 0;\n+\n+                    size_t inbounds_nonrcncl_tx_relay = 0, outbounds_nonrcncl_tx_relay = 0;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "82126d3ca527e5c06606a50ee8d8baf792193ef4",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "for code readability, such variables could be renamed `inbounds_flooding_tx_relay` / `outbounds_flooding_tx_relay`, which is matching the low-fanout flooding strategy used for them.",
      "created_at": "2024-02-20T23:23:24Z",
      "updated_at": "2024-02-20T23:56:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1496674625",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496674625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5832,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496683339",
      "pull_request_review_id": 1891766080,
      "id": 1496683339,
      "node_id": "PRRC_kwDOABII585ZNZNL",
      "diff_hunk": "@@ -5845,7 +5878,32 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                         }\n                         if (tx_relay->m_bloom_filter && !tx_relay->m_bloom_filter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                         // Send\n-                        vInv.push_back(inv);\n+                        bool fanout = true;\n+                        const auto wtxid = txinfo.tx->GetWitnessHash();\n+                        if (reconciles_txs) {\n+                            auto txiter = m_mempool.GetIter(txinfo.tx->GetHash());\n+                            if (txiter) {\n+                                // If a transaction has in-mempool children, always fanout it.\n+                                // Until package relay is implemented, this is needed to avoid\n+                                // breaking parent+child relay expectations in some cases.\n+                                //\n+                                // Potentially reconciling parent+child would mean that for every\n+                                // child we need to check if any of the parents is currently\n+                                // reconciled so that the child isn't fanouted ahead. But then\n+                                // it gets tricky when reconciliation sets are full: a) the child\n+                                // can't just be added; b) removing parents from reconciliation\n+                                // sets for this one child is not good either.\n+                                if ((*txiter)->GetCountWithDescendants() <= 1) {\n+                                    fanout = m_txreconciliation->ShouldFanoutTo(wtxid, pto->GetId(),",
      "path": "src/net_processing.cpp",
      "position": 116,
      "original_position": 116,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "82126d3ca527e5c06606a50ee8d8baf792193ef4",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "can add a `LogPrint(BCLog::NET, “Non-signaling reconciliation inbound peers flooding %d Outbound peers flooding %d for debug”);` for debug purpose and observation",
      "created_at": "2024-02-20T23:36:45Z",
      "updated_at": "2024-02-20T23:56:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1496683339",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496683339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5897,
      "original_line": 5897,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496695880",
      "pull_request_review_id": 1891766080,
      "id": 1496695880,
      "node_id": "PRRC_kwDOABII585ZNcRI",
      "diff_hunk": "@@ -5845,7 +5877,33 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                         }\n                         if (tx_relay->m_bloom_filter && !tx_relay->m_bloom_filter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                         // Send\n-                        vInv.push_back(inv);\n+                        bool fanout = true;\n+                        const auto wtxid = txinfo.tx->GetWitnessHash();\n+                        if (reconciles_txs) {\n+                            auto txiter = m_mempool.GetIter(txinfo.tx->GetHash());\n+                            if (txiter) {\n+                                // If a transaction has in-mempool children, always fanout it.\n+                                // Until package relay is implemented, this is needed to avoid\n+                                // breaking parent+child relay expectations in some cases.\n+                                //\n+                                // Potentially reconciling parent+child would mean that for every\n+                                // child we need to to check if any of the parents is currently\n+                                // reconciled so that the child isn't fanouted ahead. But then",
      "path": "src/net_processing.cpp",
      "position": 111,
      "original_position": 86,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "50dc9bf21688afbf8404d4737636f0f8f742e6ed",
      "in_reply_to_id": 1401014445,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I confirm with current implemented bip331 approach there is currently a `MAX_ORPHAN_TOTAL_SIZE` limit.\r\nYou can always get a non-standard parent (e.g an under-dust output) and yet the child be policy valid.\r\nThere is currently no sanitization of policy equivalence among a set of parent within `ancpkginfo`.\r\nIn the future, you could have reconciliation at the `pkgtxns`-level or at package announcement (`ancpkginfo`).\r\nIdeally both, though that something that can be seen once erlay or bip331 are deployed.\r\n\r\nAssuming there is no substantial timely delay between the parent being reconciliated and the child being fanout to the peer which would allow an overflow of `MAX_ORPHAN_TOTAL_SIZE`, I don’t think it’s altering the package acceptance of the receiving peer.\r\n\r\nAssuming no exploitable timers, one can still make the simulation to quantity the “child drift” risk for a distribution of parent / child being reconciliated / fanout on the average time discrepancies between those 2 tx announcement strategy. Ideally in the future, we would move to sender-initiated package, which would remove this concern from my understanding. However, this is already a post-bip331 future, we’re talking about.\r\n",
      "created_at": "2024-02-20T23:56:42Z",
      "updated_at": "2024-02-20T23:56:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1496695880",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1496695880"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5892,
      "original_line": 5892,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1498025796",
      "pull_request_review_id": 1894054084,
      "id": 1498025796,
      "node_id": "PRRC_kwDOABII585ZSg9E",
      "diff_hunk": "@@ -142,9 +250,104 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double limit) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        auto fanout_candidates = m_tx_fanout_targets_cache_data.find(wtxid);\n+        if (fanout_candidates != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(fanout_candidates->second.begin(), fanout_candidates->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // The integral part of `limit` is accounted in the higher 32 bits of the second element.\n+        // The fractional part of `limit` is stored in the lower 32 bits, and then we check\n+        // whether adding a random lower 32-bit value (first element) would end up modifying\n+        // the higher bits.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(limit * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(cur_state->m_k0).Finalize();\n+                best_peers.emplace_back(hash_key, indexed_state.first);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                 [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_nonrcncl_tx_relay, size_t outbounds_nonrcncl_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double destinations;\n+        if (peer_state->m_we_initiate) {\n+            destinations = OUTBOUND_FANOUT_DESTINATIONS - outbounds_nonrcncl_tx_relay;\n+        } else {\n+            // Since we use the fraction for inbound peers, we first need to compute the total\n+            // number of inbound targets.\n+            const double inbound_targets = (inbounds_nonrcncl_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+            destinations = inbound_targets - inbounds_nonrcncl_tx_relay;\n+        }\n+\n+        // Pure optimization to avoid going through the peers when the odds of picking one are\n+        // too low.\n+        if (destinations < 0.001) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 281,
      "original_position": 281,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "82126d3ca527e5c06606a50ee8d8baf792193ef4",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "can be constified same than `OUTBOUND_FANOUT_DESTINATIONS` and `INBOUND_FANOUT_DESTINATIONS_FRACTION` as explanation for this value is tight to them",
      "created_at": "2024-02-21T17:56:23Z",
      "updated_at": "2024-02-21T17:57:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1498025796",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1498025796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 342,
      "original_line": 342,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1498754677",
      "pull_request_review_id": 1895074163,
      "id": 1498754677,
      "node_id": "PRRC_kwDOABII585ZVS51",
      "diff_hunk": "@@ -142,9 +250,104 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double limit) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        auto fanout_candidates = m_tx_fanout_targets_cache_data.find(wtxid);\n+        if (fanout_candidates != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(fanout_candidates->second.begin(), fanout_candidates->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // The integral part of `limit` is accounted in the higher 32 bits of the second element.\n+        // The fractional part of `limit` is stored in the lower 32 bits, and then we check\n+        // whether adding a random lower 32-bit value (first element) would end up modifying\n+        // the higher bits.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(limit * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(cur_state->m_k0).Finalize();\n+                best_peers.emplace_back(hash_key, indexed_state.first);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                 [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_nonrcncl_tx_relay, size_t outbounds_nonrcncl_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double destinations;\n+        if (peer_state->m_we_initiate) {\n+            destinations = OUTBOUND_FANOUT_DESTINATIONS - outbounds_nonrcncl_tx_relay;\n+        } else {\n+            // Since we use the fraction for inbound peers, we first need to compute the total\n+            // number of inbound targets.\n+            const double inbound_targets = (inbounds_nonrcncl_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+            destinations = inbound_targets - inbounds_nonrcncl_tx_relay;\n+        }\n+\n+        // Pure optimization to avoid going through the peers when the odds of picking one are\n+        // too low.\n+        if (destinations < 0.001) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 281,
      "original_position": 281,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "82126d3ca527e5c06606a50ee8d8baf792193ef4",
      "in_reply_to_id": 1498025796,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not really related. Change these constants in any way, and the `0.001` value won't be affected.",
      "created_at": "2024-02-22T07:09:38Z",
      "updated_at": "2024-02-22T07:09:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1498754677",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1498754677"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 342,
      "original_line": 342,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499802603",
      "pull_request_review_id": 1896771509,
      "id": 1499802603,
      "node_id": "PRRC_kwDOABII585ZZSvr",
      "diff_hunk": "@@ -142,9 +250,104 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double limit) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        auto fanout_candidates = m_tx_fanout_targets_cache_data.find(wtxid);\n+        if (fanout_candidates != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(fanout_candidates->second.begin(), fanout_candidates->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // The integral part of `limit` is accounted in the higher 32 bits of the second element.\n+        // The fractional part of `limit` is stored in the lower 32 bits, and then we check\n+        // whether adding a random lower 32-bit value (first element) would end up modifying\n+        // the higher bits.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(limit * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(cur_state->m_k0).Finalize();\n+                best_peers.emplace_back(hash_key, indexed_state.first);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                 [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();\n+        }\n+        m_tx_fanout_targets_cache_data.emplace(wtxid, std::move(new_fanout_candidates));\n+        m_tx_fanout_targets_cache_order.push_back(wtxid);\n+\n+        return found;\n+    }\n+\n+    bool ShouldFanoutTo(const Wtxid& wtxid, NodeId peer_id,\n+                        size_t inbounds_nonrcncl_tx_relay, size_t outbounds_nonrcncl_tx_relay)\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    {\n+        AssertLockNotHeld(m_txreconciliation_mutex);\n+        LOCK(m_txreconciliation_mutex);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return true;\n+        // We decide whether a particular peer is a low-fanout flood target differently\n+        // based on its connection direction:\n+        // - for outbounds we have a fixed number of flood destinations;\n+        // - for inbounds we use a fraction of all inbound peers supporting tx relay.\n+        //\n+        // We first decide how many reconciling peers of a given direction we want to flood to,\n+        // and then generate a list of peers of that size for a given transaction. We then see\n+        // whether the given peer falls into this list.\n+        double destinations;\n+        if (peer_state->m_we_initiate) {\n+            destinations = OUTBOUND_FANOUT_DESTINATIONS - outbounds_nonrcncl_tx_relay;\n+        } else {\n+            // Since we use the fraction for inbound peers, we first need to compute the total\n+            // number of inbound targets.\n+            const double inbound_targets = (inbounds_nonrcncl_tx_relay + m_inbounds_count) * INBOUND_FANOUT_DESTINATIONS_FRACTION;\n+            destinations = inbound_targets - inbounds_nonrcncl_tx_relay;\n+        }\n+\n+        // Pure optimization to avoid going through the peers when the odds of picking one are\n+        // too low.\n+        if (destinations < 0.001) {",
      "path": "src/node/txreconciliation.cpp",
      "position": 281,
      "original_position": 281,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "82126d3ca527e5c06606a50ee8d8baf792193ef4",
      "in_reply_to_id": 1498025796,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "okay will read back the txrelayism issue on const selection.",
      "created_at": "2024-02-22T19:24:18Z",
      "updated_at": "2024-02-22T19:24:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1499802603",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499802603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 342,
      "original_line": 342,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499825828",
      "pull_request_review_id": 1896793349,
      "id": 1499825828,
      "node_id": "PRRC_kwDOABII585ZZYak",
      "diff_hunk": "@@ -142,9 +250,104 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double limit) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        auto fanout_candidates = m_tx_fanout_targets_cache_data.find(wtxid);\n+        if (fanout_candidates != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(fanout_candidates->second.begin(), fanout_candidates->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // The integral part of `limit` is accounted in the higher 32 bits of the second element.\n+        // The fractional part of `limit` is stored in the lower 32 bits, and then we check\n+        // whether adding a random lower 32-bit value (first element) would end up modifying\n+        // the higher bits.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(limit * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(cur_state->m_k0).Finalize();\n+                best_peers.emplace_back(hash_key, indexed_state.first);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),\n+                 [&new_fanout_candidates](auto& keyed_peer) { new_fanout_candidates.push_back(keyed_peer.second); });\n+\n+        // Sort by NodeId.\n+        std::sort(new_fanout_candidates.begin(), new_fanout_candidates.end());\n+        bool found = std::binary_search(new_fanout_candidates.begin(), new_fanout_candidates.end(), peer_id);\n+\n+        // If the cache is full, make room for the new entry.\n+        if (m_tx_fanout_targets_cache_order.size() == FANOUT_TARGETS_PER_TX_CACHE_SIZE) {\n+            auto expired_tx = m_tx_fanout_targets_cache_order.front();\n+            m_tx_fanout_targets_cache_data.erase(expired_tx);\n+            m_tx_fanout_targets_cache_order.pop_front();",
      "path": "src/node/txreconciliation.cpp",
      "position": 245,
      "original_position": 245,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b3db2bcd011c70292079f1f95c72e744678d2299",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In the eventuality of an influx of inbound transactions, faster than we can flush out them to low-fanout flooding peers, my understanding of dropping the upfront wtxid candidate, we would keep propagating this transaction only according to tx-relay policy and connection state of other peers (not this `NodeId` anymore).\r\n\r\nI understand we’re fanning out only to outbound peers (`m_tx_fanout_targets_cache_data` doc), though here it’s more a dependency on the perfomance capabilities of the full-node itself (i.e how fast you process `vInv(MSG_WTX`) and how fast you-reannounce them to downstream peers if valid). To interferes with a transaction propagation, assuming a non-listening node, an attacker would have to be puppet or compromise all our low-fanout outbound peers, I think ? Obviously more outbound peers would make things better on this front, which should be allowed by Erlay tx-relay bandwidth savings.",
      "created_at": "2024-02-22T19:37:19Z",
      "updated_at": "2024-02-22T19:39:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1499825828",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1499825828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 306,
      "original_line": 306,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501318816",
      "pull_request_review_id": 1899172885,
      "id": 1501318816,
      "node_id": "PRRC_kwDOABII585ZfE6g",
      "diff_hunk": "@@ -47,13 +61,18 @@ class TxReconciliationState\n     bool m_we_initiate;\n \n     /**\n-     * TODO: These fields are public to ignore -Wunused-private-field. Make private once used in\n-     * the following commits.\n-     *\n      * These values are used to salt short IDs, which is necessary for transaction reconciliations.\n      */\n     uint64_t m_k0, m_k1;\n \n+    /**\n+     * Store all wtxids which we would announce to the peer (policy checks passed, etc.)",
      "path": "src/node/txreconciliation.cpp",
      "position": 55,
      "original_position": 55,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b3db2bcd011c70292079f1f95c72e744678d2299",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In terms of peers-side policy check (i.e `m_fee_filter_received`), this policy limit is at the tx-relay link level and this is unilaterally initiated by the peer. As such I think there is no guarantee that between time point A we add a `Wtxid` in `m_local_set` and time point B we reconciliate, we have not received a new bip133 message, updating the `m_fee_filter_received`. I believe we can retro-actively stale stored `Wtxid` and as such a bandwidth performance leak, under situations of sudden network mempool spikes.\r\n\r\nI don’t think there is that much a tx-announcement strategy (either flooding or reconciliation) can do it in itself, unless assuming some extensions to bip133 messages to commit on a feerate-level duration. As such, I think any improvement is out of scope for this PR.",
      "created_at": "2024-02-24T02:08:42Z",
      "updated_at": "2024-02-24T02:35:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1501318816",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501318816"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 69,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501322675",
      "pull_request_review_id": 1899172885,
      "id": 1501322675,
      "node_id": "PRRC_kwDOABII585ZfF2z",
      "diff_hunk": "@@ -121,19 +171,77 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));\n+\n+        if (is_peer_inbound && m_inbounds_count < std::numeric_limits<size_t>::max()) {\n+            ++m_inbounds_count;\n+        }\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n-    void ForgetPeer(NodeId peer_id) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n         AssertLockNotHeld(m_txreconciliation_mutex);\n         LOCK(m_txreconciliation_mutex);\n-        if (m_states.erase(peer_id)) {\n-            LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Forget txreconciliation state of peer=%d\\n\", peer_id);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Check if the reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or",
      "path": "src/node/txreconciliation.cpp",
      "position": 137,
      "original_position": 137,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "b3db2bcd011c70292079f1f95c72e744678d2299",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think “(1)” can be extended a bit more e.g “Memory DoS issue for a laggy peer are bounded by `DEFAULT_MAX_PEER_CONNECTIONS` and reconciliation state is clean up with `FinalizeNode`\".",
      "created_at": "2024-02-24T02:33:49Z",
      "updated_at": "2024-02-24T02:35:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1501322675",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1501322675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 197,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502598818",
      "pull_request_review_id": 1900853776,
      "id": 1502598818,
      "node_id": "PRRC_kwDOABII585Zj9ai",
      "diff_hunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <net.h>\n+#include <node/txreconciliation.h>\n+\n+\n+/* Benchmarks */\n+\n+static void ShouldFanoutTo(benchmark::Bench& bench)\n+{\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+    CSipHasher hasher(frc.rand64(), frc.rand64());\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    // Register 120 inbound peers\n+    int num_peers{120};\n+    for (NodeId peer = 0; peer < num_peers; peer++) {\n+        tracker.PreRegisterPeer(peer);\n+        tracker.RegisterPeer(peer, /*is_peer_inbound=*/true, 1, 1);\n+    }\n+    FastRandomContext rc{/*fDeterministic=*/true};\n+\n+    // The target function uses caching, so we want to mimic tx repetitions\n+    // of the real-world behavior.\n+    std::vector<Wtxid> txs;\n+    for (size_t i = 0; i < 1000; i++) {\n+        txs.push_back(Wtxid::FromUint256(rc.rand256()));\n+    }\n+\n+    bench.run([&] {\n+        size_t rand_i = rand() % txs.size();",
      "path": "src/bench/txreconciliation.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "17ae36c0f60b976c237bdb522059c31cf113c773",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 17ae36c0f60b976c237bdb522059c31cf113c773: Is there any reason to define `rand_i` into `bench.run`? Couldn't we have it out of it? Notice that without it, the bench is 70% faster.",
      "created_at": "2024-02-26T13:18:15Z",
      "updated_at": "2024-02-26T13:48:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1502598818",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1502598818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503966435",
      "pull_request_review_id": 1903064980,
      "id": 1503966435,
      "node_id": "PRRC_kwDOABII585ZpLTj",
      "diff_hunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <net.h>\n+#include <node/txreconciliation.h>\n+\n+\n+/* Benchmarks */\n+\n+static void ShouldFanoutTo(benchmark::Bench& bench)\n+{\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+    CSipHasher hasher(frc.rand64(), frc.rand64());\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    // Register 120 inbound peers\n+    int num_peers{120};\n+    for (NodeId peer = 0; peer < num_peers; peer++) {\n+        tracker.PreRegisterPeer(peer);\n+        tracker.RegisterPeer(peer, /*is_peer_inbound=*/true, 1, 1);\n+    }\n+    FastRandomContext rc{/*fDeterministic=*/true};\n+\n+    // The target function uses caching, so we want to mimic tx repetitions\n+    // of the real-world behavior.\n+    std::vector<Wtxid> txs;\n+    for (size_t i = 0; i < 1000; i++) {\n+        txs.push_back(Wtxid::FromUint256(rc.rand256()));\n+    }\n+\n+    bench.run([&] {\n+        size_t rand_i = rand() % txs.size();",
      "path": "src/bench/txreconciliation.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "17ae36c0f60b976c237bdb522059c31cf113c773",
      "in_reply_to_id": 1502598818,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm dropping it.\r\nDo you understand why this simple op as var assignment eats so much perf? :)",
      "created_at": "2024-02-27T10:03:50Z",
      "updated_at": "2024-02-27T10:03:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1503966435",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1503966435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504039991",
      "pull_request_review_id": 1903185791,
      "id": 1504039991,
      "node_id": "PRRC_kwDOABII585ZpdQ3",
      "diff_hunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2020-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bench/bench.h>\n+\n+#include <net.h>\n+#include <node/txreconciliation.h>\n+\n+\n+/* Benchmarks */\n+\n+static void ShouldFanoutTo(benchmark::Bench& bench)\n+{\n+    FastRandomContext frc{/*fDeterministic=*/true};\n+    CSipHasher hasher(frc.rand64(), frc.rand64());\n+    TxReconciliationTracker tracker(TXRECONCILIATION_VERSION, hasher);\n+    // Register 120 inbound peers\n+    int num_peers{120};\n+    for (NodeId peer = 0; peer < num_peers; peer++) {\n+        tracker.PreRegisterPeer(peer);\n+        tracker.RegisterPeer(peer, /*is_peer_inbound=*/true, 1, 1);\n+    }\n+    FastRandomContext rc{/*fDeterministic=*/true};\n+\n+    // The target function uses caching, so we want to mimic tx repetitions\n+    // of the real-world behavior.\n+    std::vector<Wtxid> txs;\n+    for (size_t i = 0; i < 1000; i++) {\n+        txs.push_back(Wtxid::FromUint256(rc.rand256()));\n+    }\n+\n+    bench.run([&] {\n+        size_t rand_i = rand() % txs.size();",
      "path": "src/bench/txreconciliation.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "17ae36c0f60b976c237bdb522059c31cf113c773",
      "in_reply_to_id": 1502598818,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Do you understand why this simple op as var assignment eats so much perf? :)\r\n\r\nI don't think `std::rand()` has any quality or performance documentations, so it is free to do whatever it wants",
      "created_at": "2024-02-27T10:57:13Z",
      "updated_at": "2024-02-27T10:57:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1504039991",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504039991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504998267",
      "pull_request_review_id": 1904815825,
      "id": 1504998267,
      "node_id": "PRRC_kwDOABII585ZtHN7",
      "diff_hunk": "@@ -5845,7 +5878,32 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                         }\n                         if (tx_relay->m_bloom_filter && !tx_relay->m_bloom_filter->IsRelevantAndUpdate(*txinfo.tx)) continue;\n                         // Send\n-                        vInv.push_back(inv);\n+                        bool fanout = true;\n+                        const auto wtxid = txinfo.tx->GetWitnessHash();\n+                        if (reconciles_txs) {\n+                            auto txiter = m_mempool.GetIter(txinfo.tx->GetHash());\n+                            if (txiter) {\n+                                // If a transaction has in-mempool children, always fanout it.\n+                                // Until package relay is implemented, this is needed to avoid\n+                                // breaking parent+child relay expectations in some cases.\n+                                //\n+                                // Potentially reconciling parent+child would mean that for every\n+                                // child we need to check if any of the parents is currently\n+                                // reconciled so that the child isn't fanouted ahead. But then\n+                                // it gets tricky when reconciliation sets are full: a) the child\n+                                // can't just be added; b) removing parents from reconciliation\n+                                // sets for this one child is not good either.\n+                                if ((*txiter)->GetCountWithDescendants() <= 1) {",
      "path": "src/net_processing.cpp",
      "position": 115,
      "original_position": 115,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "One follow-up improvement, all the descendants in `GetCountWithDescendants()` could be marked with `parent_fanout=true`, that way we guarantee more stringently that all the members of a chain of transactions are tx-announcement relayed through the same strategy (either erlay or low-fanout flooding). I’ll check if there is test coverage here.",
      "created_at": "2024-02-27T21:12:13Z",
      "updated_at": "2024-02-27T21:12:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1504998267",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1504998267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5896,
      "original_line": 5896,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1508172289",
      "pull_request_review_id": 1909842426,
      "id": 1508172289,
      "node_id": "PRRC_kwDOABII585Z5OIB",
      "diff_hunk": "@@ -175,6 +175,8 @@ static constexpr double MAX_ADDR_RATE_PER_SECOND{0.1};\n static constexpr size_t MAX_ADDR_PROCESSING_TOKEN_BUCKET{MAX_ADDR_TO_SEND};\n /** The compactblocks version we support. See BIP 152. */\n static constexpr uint64_t CMPCTBLOCKS_VERSION{2};\n+/** Used to determine whether to use low-fanout flooding (or reconciliation) for a tx relay event. */\n+static const uint64_t RANDOMIZER_ID_FANOUTTARGET = 0xbac89af818407b6aULL; // SHA256(\"fanouttarget\")[0:8]",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`constexpr`?",
      "created_at": "2024-02-29T20:46:36Z",
      "updated_at": "2024-02-29T20:46:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1508172289",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1508172289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 179,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1508173354",
      "pull_request_review_id": 1909843672,
      "id": 1508173354,
      "node_id": "PRRC_kwDOABII585Z5OYq",
      "diff_hunk": "@@ -175,6 +175,8 @@ static constexpr double MAX_ADDR_RATE_PER_SECOND{0.1};\n static constexpr size_t MAX_ADDR_PROCESSING_TOKEN_BUCKET{MAX_ADDR_TO_SEND};\n /** The compactblocks version we support. See BIP 152. */\n static constexpr uint64_t CMPCTBLOCKS_VERSION{2};\n+/** Used to determine whether to use low-fanout flooding (or reconciliation) for a tx relay event. */\n+static const uint64_t RANDOMIZER_ID_FANOUTTARGET = 0xbac89af818407b6aULL; // SHA256(\"fanouttarget\")[0:8]",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "in_reply_to_id": 1508172289,
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`FANOUTTARGET` -> `FANOUT_TARGET`?",
      "created_at": "2024-02-29T20:47:27Z",
      "updated_at": "2024-02-29T20:47:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1508173354",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1508173354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 179,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1508189664",
      "pull_request_review_id": 1909866954,
      "id": 1508189664,
      "node_id": "PRRC_kwDOABII585Z5SXg",
      "diff_hunk": "@@ -142,9 +250,104 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double limit) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        auto fanout_candidates = m_tx_fanout_targets_cache_data.find(wtxid);\n+        if (fanout_candidates != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(fanout_candidates->second.begin(), fanout_candidates->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // The integral part of `limit` is accounted in the higher 32 bits of the second element.\n+        // The fractional part of `limit` is stored in the lower 32 bits, and then we check\n+        // whether adding a random lower 32-bit value (first element) would end up modifying\n+        // the higher bits.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(limit * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(cur_state->m_k0).Finalize();\n+                best_peers.emplace_back(hash_key, indexed_state.first);\n+            }\n+        }\n+\n+        // Sort by the assigned key.\n+        std::sort(best_peers.begin(), best_peers.end());\n+        best_peers.resize(targets_size);\n+\n+        std::vector<NodeId> new_fanout_candidates;\n+        new_fanout_candidates.reserve(targets_size);\n+        for_each(best_peers.begin(), best_peers.end(),",
      "path": "src/node/txreconciliation.cpp",
      "position": 234,
      "original_position": 234,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`std::for_each`?",
      "created_at": "2024-02-29T21:01:43Z",
      "updated_at": "2024-02-29T21:01:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1508189664",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1508189664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 295,
      "original_line": 295,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1509447879",
      "pull_request_review_id": 1911873457,
      "id": 1509447879,
      "node_id": "PRRC_kwDOABII585Z-FjH",
      "diff_hunk": "@@ -142,9 +250,104 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double limit) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        auto fanout_candidates = m_tx_fanout_targets_cache_data.find(wtxid);\n+        if (fanout_candidates != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(fanout_candidates->second.begin(), fanout_candidates->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());",
      "path": "src/node/txreconciliation.cpp",
      "position": 204,
      "original_position": 204,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Looking on `CSipHasher`, given it’s a pseudo-random hash function, verified it’s well-initialized from two hidden random 64-bit seeds in `src/init.cpp` (`L1239`). Then we add a `CSipHasher` instance provided by `CConman` at `TxReconciliationTracker` initialization in `src/net_processing.cpp`. This respect the SipHash’s PRF’s requirement to initialize it with a random 128-bit key. I still wonder if in the future `TxReconciliationTracker` shouldn’t get it’s own random seed (i.e use `GetRand()`, it promises fast entropy generation) to isolate tx-announcement from the rest of network connection management.",
      "created_at": "2024-03-01T19:30:44Z",
      "updated_at": "2024-03-01T19:33:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1509447879",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1509447879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 265,
      "original_line": 265,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1509450208",
      "pull_request_review_id": 1911873457,
      "id": 1509450208,
      "node_id": "PRRC_kwDOABII585Z-GHg",
      "diff_hunk": "@@ -142,9 +250,104 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double limit) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)",
      "path": "src/node/txreconciliation.cpp",
      "position": 194,
      "original_position": 194,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This variable name can be called `destination` rather than `limit` to be consistent with `ShouldFanoutTo` and denotates more clearly it’s the sample space boundary.",
      "created_at": "2024-03-01T19:33:28Z",
      "updated_at": "2024-03-01T19:33:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1509450208",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1509450208"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 255,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1516808629",
      "pull_request_review_id": 1923513359,
      "id": 1516808629,
      "node_id": "PRRC_kwDOABII585aaKm1",
      "diff_hunk": "@@ -142,9 +250,104 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double limit) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        auto fanout_candidates = m_tx_fanout_targets_cache_data.find(wtxid);\n+        if (fanout_candidates != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(fanout_candidates->second.begin(), fanout_candidates->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // The integral part of `limit` is accounted in the higher 32 bits of the second element.\n+        // The fractional part of `limit` is stored in the lower 32 bits, and then we check\n+        // whether adding a random lower 32-bit value (first element) would end up modifying\n+        // the higher bits.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(limit * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(cur_state->m_k0).Finalize();",
      "path": "src/node/txreconciliation.cpp",
      "position": 223,
      "original_position": 223,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the comment L66 in `src/node/txreconciliation.cpp` can be updated to reflect the usage of `m_k0` as a siphash input string for low-fanout flood peers selection. Not only used in `ComputeShortID`.",
      "created_at": "2024-03-07T20:53:10Z",
      "updated_at": "2024-03-07T20:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1516808629",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1516808629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 284,
      "original_line": 284,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1534389520",
      "pull_request_review_id": 1953029553,
      "id": 1534389520,
      "node_id": "PRRC_kwDOABII585bdO0Q",
      "diff_hunk": "@@ -70,6 +84,16 @@ class TxReconciliationTracker::Impl\n      */\n     std::unordered_map<NodeId, std::variant<uint64_t, TxReconciliationState>> m_states GUARDED_BY(m_txreconciliation_mutex);\n \n+    TxReconciliationState* GetRegisteredPeerState(NodeId peer_id) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        AssertLockHeld(m_txreconciliation_mutex);\n+        auto salt_or_state = m_states.find(peer_id);\n+        if (salt_or_state == m_states.end()) return nullptr;\n+\n+        auto* state = std::get_if<TxReconciliationState>(&salt_or_state->second);",
      "path": "src/node/txreconciliation.cpp",
      "position": 96,
      "original_position": 45,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "be8ef38d29c1b0e8b608536ec7d4ff6212ec8e83",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: you could return it directly.",
      "created_at": "2024-03-21T17:58:23Z",
      "updated_at": "2024-03-21T17:58:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1534389520",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1534389520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1534405289",
      "pull_request_review_id": 1953049614,
      "id": 1534405289,
      "node_id": "PRRC_kwDOABII585bdSqp",
      "diff_hunk": "@@ -121,19 +171,77 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));\n+\n+        if (is_peer_inbound && m_inbounds_count < std::numeric_limits<size_t>::max()) {\n+            ++m_inbounds_count;\n+        }\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n-    void ForgetPeer(NodeId peer_id) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n         AssertLockNotHeld(m_txreconciliation_mutex);\n         LOCK(m_txreconciliation_mutex);\n-        if (m_states.erase(peer_id)) {\n-            LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Forget txreconciliation state of peer=%d\\n\", peer_id);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Check if the reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+        // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+        // We don't care about a laggy peer (1) because we probably can't help them even if we fanout transactions.",
      "path": "src/node/txreconciliation.cpp",
      "position": 139,
      "original_position": 139,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What does \"laggy peer\" mean?",
      "created_at": "2024-03-21T18:08:29Z",
      "updated_at": "2024-03-21T18:08:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1534405289",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1534405289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 199,
      "original_line": 199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600564410",
      "pull_request_review_id": 2056265756,
      "id": 1600564410,
      "node_id": "PRRC_kwDOABII585fZqy6",
      "diff_hunk": "@@ -121,19 +171,77 @@ class TxReconciliationTracker::Impl\n                       peer_id, is_peer_inbound);\n \n         const uint256 full_salt{ComputeSalt(local_salt, remote_salt)};\n-        recon_state->second = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));\n+\n+        auto new_state = TxReconciliationState(!is_peer_inbound, full_salt.GetUint64(0), full_salt.GetUint64(1));;\n+        m_states.erase(recon_state);\n+        m_states.emplace(peer_id, std::move(new_state));\n+\n+        if (is_peer_inbound && m_inbounds_count < std::numeric_limits<size_t>::max()) {\n+            ++m_inbounds_count;\n+        }\n         return ReconciliationRegisterResult::SUCCESS;\n     }\n \n-    void ForgetPeer(NodeId peer_id) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n+    bool AddToSet(NodeId peer_id, const Wtxid& wtxid) EXCLUSIVE_LOCKS_REQUIRED(!m_txreconciliation_mutex)\n     {\n         AssertLockNotHeld(m_txreconciliation_mutex);\n         LOCK(m_txreconciliation_mutex);\n-        if (m_states.erase(peer_id)) {\n-            LogPrintLevel(BCLog::TXRECONCILIATION, BCLog::Level::Debug, \"Forget txreconciliation state of peer=%d\\n\", peer_id);\n+        auto peer_state = GetRegisteredPeerState(peer_id);\n+        if (!peer_state) return false;\n+\n+        // Check if the reconciliation set is not at capacity for two reasons:\n+        // - limit sizes of reconciliation sets and short id mappings;\n+        // - limit CPU use for sketch computations.\n+        //\n+        // Since we reconcile frequently, reaching capacity either means:\n+        // (1) a peer for some reason does not request reconciliations from us for a long while, or\n+        // (2) really a lot of valid fee-paying transactions were dumped on us at once.\n+        // We don't care about a laggy peer (1) because we probably can't help them even if we fanout transactions.",
      "path": "src/node/txreconciliation.cpp",
      "position": 139,
      "original_position": 139,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "in_reply_to_id": 1534405289,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm guessing \"a peer for some reason does not request reconciliations from us for a long while\", hence why it references (1)",
      "created_at": "2024-05-14T19:46:27Z",
      "updated_at": "2024-05-14T19:46:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1600564410",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600564410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 199,
      "original_line": 199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600586129",
      "pull_request_review_id": 2056323111,
      "id": 1600586129,
      "node_id": "PRRC_kwDOABII585fZwGR",
      "diff_hunk": "@@ -142,9 +250,104 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double limit) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        auto fanout_candidates = m_tx_fanout_targets_cache_data.find(wtxid);\n+        if (fanout_candidates != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(fanout_candidates->second.begin(), fanout_candidates->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());",
      "path": "src/node/txreconciliation.cpp",
      "position": 204,
      "original_position": 204,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "in_reply_to_id": 1509447879,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This seems to be consistent with how a deterministic randomizer is seeded in many other places in the codebase. What is your rationale for making it different here?",
      "created_at": "2024-05-14T20:08:26Z",
      "updated_at": "2024-05-14T20:08:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1600586129",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600586129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 265,
      "original_line": 265,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1602118753",
      "pull_request_review_id": 2058794300,
      "id": 1602118753,
      "node_id": "PRRC_kwDOABII585ffmRh",
      "diff_hunk": "@@ -142,9 +250,104 @@ class TxReconciliationTracker::Impl\n         return (recon_state != m_states.end() &&\n                 std::holds_alternative<TxReconciliationState>(recon_state->second));\n     }\n+\n+    // Not const because of caching.\n+    bool IsFanoutTarget(const Wtxid& wtxid, NodeId peer_id, bool we_initiate, double limit) EXCLUSIVE_LOCKS_REQUIRED(m_txreconciliation_mutex)\n+    {\n+        auto fanout_candidates = m_tx_fanout_targets_cache_data.find(wtxid);\n+        if (fanout_candidates != m_tx_fanout_targets_cache_data.end()) {\n+            return std::binary_search(fanout_candidates->second.begin(), fanout_candidates->second.end(), peer_id);\n+        }\n+\n+        // We use the pre-determined randomness to give a consistent result per transaction,\n+        // thus making sure that no transaction gets \"unlucky\" if every per-peer roll fails.\n+        CSipHasher deterministic_randomizer{m_deterministic_randomizer};\n+        deterministic_randomizer.Write(wtxid.ToUint256());\n+\n+        // The algorithm works as follows. We iterate through the peers (of a given direction)\n+        // hashing them with the given wtxid, and sort them by this hash.\n+        // We then consider top `limit` peers to be low-fanout flood targets.\n+        // The randomness should be seeded with wtxid to return consistent results for every call.\n+\n+        // The integral part of `limit` is accounted in the higher 32 bits of the second element.\n+        // The fractional part of `limit` is stored in the lower 32 bits, and then we check\n+        // whether adding a random lower 32-bit value (first element) would end up modifying\n+        // the higher bits.\n+        const size_t targets_size = ((deterministic_randomizer.Finalize() & 0xFFFFFFFF) + uint64_t(limit * 0x100000000)) >> 32;\n+\n+        std::vector<std::pair<uint64_t, NodeId>> best_peers;\n+        best_peers.reserve(m_states.size());\n+\n+        for (const auto& indexed_state : m_states) {\n+            const auto cur_state = std::get_if<TxReconciliationState>(&indexed_state.second);\n+            if (cur_state && cur_state->m_we_initiate == we_initiate) {\n+                uint64_t hash_key = CSipHasher(deterministic_randomizer).Write(cur_state->m_k0).Finalize();",
      "path": "src/node/txreconciliation.cpp",
      "position": 223,
      "original_position": 223,
      "commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "original_commit_id": "a14dfd9c873d1e196252c77ad7a8b32bd21b6f6d",
      "in_reply_to_id": 1516808629,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this can actually be seeded with anything, it doesn't have to be `m_k0`. IMO it'd better not be, to not repurpose something that is meant for something completely different ",
      "created_at": "2024-05-15T19:01:19Z",
      "updated_at": "2024-05-15T19:01:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28765#discussion_r1602118753",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1602118753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28765"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 284,
      "original_line": 284,
      "side": "RIGHT"
    }
  ]
}