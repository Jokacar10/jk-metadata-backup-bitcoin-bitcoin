{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244",
    "id": 2168019750,
    "node_id": "PR_kwDOABII586BOVsm",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31244",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31244.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31244.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
    "number": 31244,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "descriptors: MuSig2",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Implements parsing of BIP 390 `musig()` descriptors.\r\n\r\nSplit from #29675",
    "labels": [
      {
        "id": 1482182044,
        "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
        "name": "Descriptors",
        "description": "",
        "color": "e9f76c",
        "default": false
      }
    ],
    "created_at": "2024-11-07T18:10:02Z",
    "updated_at": "2025-06-11T17:58:26Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "39e4dbea2162fae65dbd17ade26a2a3e7cf1dc63",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "achow101:musig2-desc",
      "ref": "musig2-desc",
      "sha": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 11,
        "stargazers_count": 42,
        "watchers_count": 42,
        "size": 296495,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-06-10T22:06:31Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2025-05-11T17:20:16Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "ae024137bda9fe189f4e7ccf26dbaffd44cbbeb6",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37349,
        "stargazers_count": 84090,
        "watchers_count": 84090,
        "size": 283624,
        "default_branch": "master",
        "open_issues_count": 749,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-06-11T15:56:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-06-11T17:47:23Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 687,
    "deletions": 41,
    "changed_files": 13,
    "commits": 11,
    "review_comments": 112,
    "comments": 13
  },
  "events": [
    {
      "event": "commented",
      "id": 2462913654,
      "node_id": "IC_kwDOABII586SzRR2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2462913654",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T18:10:05Z",
      "updated_at": "2025-06-04T21:31:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31244.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [theStack](https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2796051128), [w0xlt](https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2808489885), [Sjors](https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2846300829) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#bitcoin-core/gui/872](https://github.com/bitcoin-core/gui/pull/872) (Menu action to export a watchonly wallet by achow101)\n* [#32489](https://github.com/bitcoin/bitcoin/pull/32489) (wallet: Add `exportwatchonlywallet` RPC to export a watchonly version of a wallet by achow101)\n* [#32471](https://github.com/bitcoin/bitcoin/pull/32471) (wallet/rpc: fix listdescriptors RPC fails to return descriptors with private key information when wallet contains descriptors missing any key by Eunovo)\n* [#32332](https://github.com/bitcoin/bitcoin/pull/32332) (refactor: Update `XOnlyPubKey::GetKeyIDs()` to return a pair of pubkeys by w0xlt)\n* [#30243](https://github.com/bitcoin/bitcoin/pull/30243) (descriptors: taproot partial descriptors by Eunovo)\n* [#29675](https://github.com/bitcoin/bitcoin/pull/29675) (wallet: Be able to receive and spend inputs involving MuSig2 aggregate keys by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2462913654",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "labeled",
      "id": 15188785099,
      "node_id": "LE_lADOABII586ddsd2zwAAAAOJUnfL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15188785099",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T18:10:09Z",
      "label": {
        "name": "Descriptors",
        "color": "e9f76c"
      }
    },
    {
      "event": "commented",
      "id": 2500865562,
      "node_id": "IC_kwDOABII586VEC4a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2500865562",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T13:54:14Z",
      "updated_at": "2024-11-26T13:55:27Z",
      "author_association": "MEMBER",
      "body": "Can you add an example to `doc/descriptors.md`?\r\n\r\nDid you mean [BIP390](https://github.com/bitcoin/bips/blob/master/bip-0390.mediawiki) in the description?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2500865562",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "commented",
      "id": 2527475671,
      "node_id": "IC_kwDOABII586WpjfX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2527475671",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-09T10:06:44Z",
      "updated_at": "2024-12-09T10:06:44Z",
      "author_association": "MEMBER",
      "body": "```\r\n$ echo \"cGsobXVzaWcoZGR9dXVlLzAwLylrKA==\" | base64 --decode > mocked_descriptor_parse_1.crash\r\n$ FUZZ=mocked_descriptor_parse fuzz mocked_descriptor_parse_1.crash\r\nscript/descriptor.cpp:1838 ParsePubkey: Assertion `Func(\"musig\", expr)' failed.\r\n\r\n$ echo \"dHIobXVzaWcoICAgICB0dXVzKG9sZGVwayhnZylnZ2dnZmdnKTwseigoKCgoKCgoKCgoKCgoKCgoKCgoKHN0KQ==\" | base64 --decode > mocked_descriptor_parse_2.crash\r\n$ FUZZ=mocked_descriptor_parse fuzz mocked_descriptor_parse_2.crash\r\nscript/descriptor.cpp:1833 ParsePubkey: Assertion `split.size() <= 2' failed.\r\n```",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2527475671",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15591503410,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAOhU3Yy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15591503410",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7be277c4b8948fb5105b26e8aa12d0add43b14d4",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/7be277c4b8948fb5105b26e8aa12d0add43b14d4",
      "created_at": "2024-12-09T22:34:28Z"
    },
    {
      "event": "commented",
      "id": 2529679956,
      "node_id": "IC_kwDOABII586Wx9pU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2529679956",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-09T22:34:39Z",
      "updated_at": "2024-12-09T22:34:39Z",
      "author_association": "MEMBER",
      "body": "Fixed the fuzz crashes and added those descriptors to the unit tests.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2529679956",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "commented",
      "id": 2531046640,
      "node_id": "IC_kwDOABII586W3LTw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2531046640",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-10T09:51:04Z",
      "updated_at": "2024-12-10T09:51:04Z",
      "author_association": "MEMBER",
      "body": "```\r\n$ echo \"dHIobXVzaWcoJTIyLzMzMmgpSigoKChhZGRyKEJjdXUp\" | base64 --decode > mocked_descriptor_parse_3.crash\r\n$ FUZZ=mocked_descriptor_parse fuzz mocked_descriptor_parse_3.crash\r\nscript/descriptor.cpp:632 GetPubKey: Assertion `pubkey.has_value()' failed.\r\n```",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2531046640",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "commented",
      "id": 2531119817,
      "node_id": "IC_kwDOABII586W3dLJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2531119817",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-10T10:19:12Z",
      "updated_at": "2024-12-10T10:19:12Z",
      "author_association": "MEMBER",
      "body": "```\r\n$ echo \"dHIobXVzaWcoKS8wMDAwMTEp\" | base64 --decode > descriptor_parse_1.crash\r\n$ FUZZ=descriptor_parse fuzz descriptor_parse_1.crash\r\n[libsecp256k1] illegal argument: pubkeys != NULL\r\n```",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2531119817",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15604446841,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAOiGPZ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15604446841",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9a0397e08b7f1b451a311d32a45970d27fd9fff9",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/9a0397e08b7f1b451a311d32a45970d27fd9fff9",
      "created_at": "2024-12-10T17:16:15Z"
    },
    {
      "event": "commented",
      "id": 2532329132,
      "node_id": "IC_kwDOABII586W8Eas",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2532329132",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-10T17:16:22Z",
      "updated_at": "2024-12-10T17:16:22Z",
      "author_association": "MEMBER",
      "body": "Fixed those crashes too.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2532329132",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "commented",
      "id": 2532707235,
      "node_id": "IC_kwDOABII586W9guj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2532707235",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-10T19:41:25Z",
      "updated_at": "2024-12-10T19:41:25Z",
      "author_association": "MEMBER",
      "body": "```\r\n$ echo \"dHIobXVzaWcoJWU5LzwwOzAwMDAwMzU7MDYwOzM7MDY+KS82Nik=\" | base64 --decode > mocked_descriptor_parse_4.crash\r\n$ FUZZ=mocked_descriptor_parse fuzz mocked_descriptor_parse_4.crash\r\nfuzz: script/descriptor.cpp:1942: std::vector<std::unique_ptr<PubkeyProvider>> (anonymous namespace)::ParsePubkey(uint32_t &, const Span<const char> &, ParseScriptContext, FlatSigningProvider &, std::string &): Assertion `pub.size() == 1' failed.\r\n```",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2532707235",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15786092305,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAOs7KcR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15786092305",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "65824b5d32e286dc7474b89759753558958e2f2f",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/65824b5d32e286dc7474b89759753558958e2f2f",
      "created_at": "2024-12-30T17:45:57Z"
    },
    {
      "event": "commented",
      "id": 2565857130,
      "node_id": "IC_kwDOABII586Y799q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2565857130",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-30T19:46:48Z",
      "updated_at": "2024-12-30T19:46:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/34992034826</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2565857130",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "labeled",
      "id": 15786679140,
      "node_id": "LE_lADOABII586ddsd2zwAAAAOs9Ztk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15786679140",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-30T19:46:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15803626328,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAOt-DNY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15803626328",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "02f50cc2ea685324f50ca99835b548c067589ef2",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/02f50cc2ea685324f50ca99835b548c067589ef2",
      "created_at": "2025-01-03T01:20:52Z"
    },
    {
      "event": "unlabeled",
      "id": 15803820786,
      "node_id": "UNLE_lADOABII586ddsd2zwAAAAOt-yry",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15803820786",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-03T02:22:59Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15830479775,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAOvkfOf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15830479775",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7c65e9663a0932ce11da584619d500f080fc02aa",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/7c65e9663a0932ce11da584619d500f080fc02aa",
      "created_at": "2025-01-06T20:13:49Z"
    },
    {
      "event": "labeled",
      "id": 16013447937,
      "node_id": "LE_lADOABII586ddsd2zwAAAAO6edMB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16013447937",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T12:17:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16021037735,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAO67aKn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16021037735",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "efe85f891e625634e489e47ae2f84b851caa1785",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/efe85f891e625634e489e47ae2f84b851caa1785",
      "created_at": "2025-01-21T22:37:41Z"
    },
    {
      "event": "unlabeled",
      "id": 16021266985,
      "node_id": "UNLE_lADOABII586ddsd2zwAAAAO68SIp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16021266985",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T23:08:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 16899806372,
      "node_id": "LE_lADOABII586ddsd2zwAAAAPvTpSk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16899806372",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T10:16:54Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17214144236,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQCCv7s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17214144236",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "09d109d39b22256b4978e2c9300538f4bb0267b9",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/09d109d39b22256b4978e2c9300538f4bb0267b9",
      "created_at": "2025-04-10T21:43:55Z"
    },
    {
      "event": "labeled",
      "id": 17214382693,
      "node_id": "LE_lADOABII586ddsd2zwAAAAQCDqJl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17214382693",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-10T22:07:36Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2795270555,
      "node_id": "IC_kwDOABII586mnHGb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2795270555",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-10T22:07:37Z",
      "updated_at": "2025-04-10T22:07:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/40357481289</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2795270555",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17214764455,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQCFHWn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17214764455",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2e5756cc48ac1299c769e5e4428837a31eeaf630",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/2e5756cc48ac1299c769e5e4428837a31eeaf630",
      "created_at": "2025-04-10T22:35:36Z"
    },
    {
      "event": "unlabeled",
      "id": 17214951572,
      "node_id": "UNLE_lADOABII586ddsd2zwAAAAQCF1CU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17214951572",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-10T22:53:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17255472845,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQEgZ7N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17255472845",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "de468fc93a6748b8fa7d4271c5e4937ac29dd582",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/de468fc93a6748b8fa7d4271c5e4937ac29dd582",
      "created_at": "2025-04-14T20:33:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17255475124,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQEgae0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17255475124",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b5fd6067537ee1498bd3cd4fc04b24ab55c03c87",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/b5fd6067537ee1498bd3cd4fc04b24ab55c03c87",
      "created_at": "2025-04-14T20:33:52Z"
    },
    {
      "event": "unlabeled",
      "id": 17257149321,
      "node_id": "UNLE_lADOABII586ddsd2zwAAAAQEmzOJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17257149321",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-14T22:51:20Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 17342608495,
      "node_id": "LE_lADOABII586ddsd2zwAAAAQJszRv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17342608495",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T19:34:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17343811633,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQJxZAx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17343811633",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e7c67ec86dcb24f78b642f8dc1917a7e3cf2e780",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/e7c67ec86dcb24f78b642f8dc1917a7e3cf2e780",
      "created_at": "2025-04-21T21:36:29Z"
    },
    {
      "event": "ready_for_review",
      "id": 17343819027,
      "node_id": "RFRE_lADOABII586ddsd2zwAAAAQJxa0T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17343819027",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T21:37:26Z"
    },
    {
      "event": "commented",
      "id": 2819555645,
      "node_id": "IC_kwDOABII586oDwE9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2819555645",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T21:37:38Z",
      "updated_at": "2025-04-21T21:37:38Z",
      "author_association": "MEMBER",
      "body": "All dependencies have been merged, ready for review.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2819555645",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "unlabeled",
      "id": 17343963102,
      "node_id": "UNLE_lADOABII586ddsd2zwAAAAQJx9_e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17343963102",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T21:53:47Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2796051128,
      "node_id": "PRR_kwDOABII586mqFq4",
      "url": null,
      "actor": null,
      "commit_id": "e7c67ec86dcb24f78b642f8dc1917a7e3cf2e780",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nSeems like the commit message for 2e6dcdbc8055660a2e20ba81b62b7d26ae0ccb05 (\"Add MuSig2 Keyagg Cache class and functions\") is out-of-sync, as there is no such class added and also the mentioned `MuSig2KeyAggCacheImpl` doesn't exist.\r\n\r\nFor the newly introduced parameters of the `Const` and `Split` functions (commits fe02d7cb237c00de6abe1776b3101342ffddf757 and 4a1eeee27a64c4be7293740f8fff839879b88d86), it would be nice to have unit test coverage, but this can be also done in a follow-up.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2796051128",
      "submitted_at": "2025-04-26T14:39:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "reviewed",
      "id": 2808489885,
      "node_id": "PRR_kwDOABII586nZied",
      "url": null,
      "actor": null,
      "commit_id": "e7c67ec86dcb24f78b642f8dc1917a7e3cf2e780",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2808489885",
      "submitted_at": "2025-04-30T21:26:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17563773885,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQW4eu9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17563773885",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "created_at": "2025-05-07T21:33:16Z"
    },
    {
      "event": "commented",
      "id": 2860444988,
      "node_id": "IC_kwDOABII586qfu08",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2860444988",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-07T21:34:01Z",
      "updated_at": "2025-05-07T21:34:01Z",
      "author_association": "MEMBER",
      "body": "> Seems like the commit message for [2e6dcdb](https://github.com/bitcoin/bitcoin/commit/2e6dcdbc8055660a2e20ba81b62b7d26ae0ccb05) (\"Add MuSig2 Keyagg Cache class and functions\") is out-of-sync, as there is no such class added and also the mentioned `MuSig2KeyAggCacheImpl` doesn't exist.\r\n\r\nUpdated the commit message.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2860444988",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "reviewed",
      "id": 2843677281,
      "node_id": "PRR_kwDOABII586pfxJh",
      "url": null,
      "actor": null,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2843677281",
      "submitted_at": "2025-05-15T18:40:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "reviewed",
      "id": 2846300829,
      "node_id": "PRR_kwDOABII586ppxqd",
      "url": null,
      "actor": null,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nReviewed up to 6b634754d2783ffe16570ad37dbcf9251a7efc24, mostly happy.\r\n\r\nI didn't thoroughly check that all test vectors from BIP390 are in the test, but did check a few.\r\n\r\n> Can you add an example to `doc/descriptors.md`?\r\n\r\nThis still seems useful (and this document should probably link back to the bip numbers, but that's orthogonal).\r\n\r\nManual testing hint for other reviewers: you can use the `deriveaddresses` RPC with some of the test vectors. Just use `00000000` as the checksum, it will tell you the right one, and then call it gain to see an address. Pass that address into `validateaddress` and compare the `scriptPubKey` to the one in the bip. ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2846300829",
      "submitted_at": "2025-05-16T13:58:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17693367571,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQem10T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17693367571",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4ec378418b3dcb5c912fbbcabdb6e7242a0378d1",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/4ec378418b3dcb5c912fbbcabdb6e7242a0378d1",
      "created_at": "2025-05-16T19:08:22Z"
    },
    {
      "event": "reviewed",
      "id": 2851595777,
      "node_id": "PRR_kwDOABII586p9-YB",
      "url": null,
      "actor": null,
      "commit_id": "4ec378418b3dcb5c912fbbcabdb6e7242a0378d1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2851595777",
      "submitted_at": "2025-05-19T18:05:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17739650964,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQhXZeU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17739650964",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "08d8a59597db34bcddcc1ec5fda98b0b14803170",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/08d8a59597db34bcddcc1ec5fda98b0b14803170",
      "created_at": "2025-05-20T18:23:36Z"
    },
    {
      "event": "reviewed",
      "id": 2857019010,
      "node_id": "PRR_kwDOABII586qSqaC",
      "url": null,
      "actor": null,
      "commit_id": "08d8a59597db34bcddcc1ec5fda98b0b14803170",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2857019010",
      "submitted_at": "2025-05-21T09:37:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVmZTRjNjY0NjJlNjE0OWMyZWQzY2UyNDIyNGE3YTdiMzI4YTJjZmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fe4c66462e6149c2ed3ce24224a7a7b328a2cfa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5fe4c66462e6149c2ed3ce24224a7a7b328a2cfa",
      "tree": {
        "sha": "8f04c87ccd4c97fc9a4ae59475bf51f82f6172db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f04c87ccd4c97fc9a4ae59475bf51f82f6172db"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87ec923d3a7af7b30613174b41c6fb11671df466",
          "sha": "87ec923d3a7af7b30613174b41c6fb11671df466",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/87ec923d3a7af7b30613174b41c6fb11671df466"
        }
      ],
      "message": "XOnlyPubKey: Add GetCPubKeys\n\nWe need to retrieve the even and odd compressed pubkeys for xonly\npubkeys, so add a function to do that. Also reuse it in GetKeyIDs.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-05-21T17:44:26Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-29T22:32:02Z"
      },
      "sha": "5fe4c66462e6149c2ed3ce24224a7a7b328a2cfa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRiMTM1ZjgwZDAzYzkyZmI1MjJkMWRjZmQ3ZDY5N2FhMGE0YWY2MjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b135f80d03c92fb522d1dcfd7d697aa0a4af626",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4b135f80d03c92fb522d1dcfd7d697aa0a4af626",
      "tree": {
        "sha": "13f1243295ddc116f7fcb8c2113e312d32e16c3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13f1243295ddc116f7fcb8c2113e312d32e16c3c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fe4c66462e6149c2ed3ce24224a7a7b328a2cfa",
          "sha": "5fe4c66462e6149c2ed3ce24224a7a7b328a2cfa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5fe4c66462e6149c2ed3ce24224a7a7b328a2cfa"
        }
      ],
      "message": "script/parsing: Allow Const to not skip the found constant",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-05-21T17:44:26Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-15T22:08:47Z"
      },
      "sha": "4b135f80d03c92fb522d1dcfd7d697aa0a4af626"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI4OWE5MzcyMjVlZDIxNzU1NmIzOGUwMDBlZTVkMWJmMGI1OTUyYWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b89a937225ed217556b38e000ee5d1bf0b5952aa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b89a937225ed217556b38e000ee5d1bf0b5952aa",
      "tree": {
        "sha": "8275d75a9ed024f0c40454cba7939f364596e91f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8275d75a9ed024f0c40454cba7939f364596e91f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b135f80d03c92fb522d1dcfd7d697aa0a4af626",
          "sha": "4b135f80d03c92fb522d1dcfd7d697aa0a4af626",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4b135f80d03c92fb522d1dcfd7d697aa0a4af626"
        }
      ],
      "message": "util/string: Allow Split to include the separator\n\nWhen splitting a string, sometimes the separator needs to be included.\nSplit will now optionally include the separator at the end of the left\nside of the splits, i.e. it appears at the end of the splits, except\nfor the last one.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-05-21T17:44:27Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-04-14T20:31:31Z"
      },
      "sha": "b89a937225ed217556b38e000ee5d1bf0b5952aa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgxZmUwNWQ2NWY2YmUxZTM0ZmZiY2EwZjBhNTM1NGEzMTE5OTM4MWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81fe05d65f6be1e34ffbca0f0a5354a31199381f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/81fe05d65f6be1e34ffbca0f0a5354a31199381f",
      "tree": {
        "sha": "2fa08e22c6e9462dcfdb36758547a2b9b80ac9f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fa08e22c6e9462dcfdb36758547a2b9b80ac9f7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b89a937225ed217556b38e000ee5d1bf0b5952aa",
          "sha": "b89a937225ed217556b38e000ee5d1bf0b5952aa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b89a937225ed217556b38e000ee5d1bf0b5952aa"
        }
      ],
      "message": "descriptors: Add PubkeyProvider::IsBIP32()",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-05-21T17:44:27Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-15T22:09:22Z"
      },
      "sha": "81fe05d65f6be1e34ffbca0f0a5354a31199381f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZjMWU4YjYzYjZhNmQ5ZGRhNGVlYTkyOTkzNTFlZGY1ODIyMDU5NDc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc1e8b63b6a6d9dda4eea9299351edf582205947",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fc1e8b63b6a6d9dda4eea9299351edf582205947",
      "tree": {
        "sha": "f6c14919d325fdb23e4284a9242d1a0bf1903861",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6c14919d325fdb23e4284a9242d1a0bf1903861"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81fe05d65f6be1e34ffbca0f0a5354a31199381f",
          "sha": "81fe05d65f6be1e34ffbca0f0a5354a31199381f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/81fe05d65f6be1e34ffbca0f0a5354a31199381f"
        }
      ],
      "message": "build: Enable secp256k1 musig module",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-05-21T17:44:27Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-11-05T20:09:55Z"
      },
      "sha": "fc1e8b63b6a6d9dda4eea9299351edf582205947"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI5YzQwOTZiZWIwZGU4OTg1MmNjY2YxNjU3YWUyN2MwMzUzZjE4ZTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9c4096beb0de89852cccf1657ae27c0353f18e3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b9c4096beb0de89852cccf1657ae27c0353f18e3",
      "tree": {
        "sha": "19bf82ae40061ba58ff2fb73d41bd7d2c5d4f0fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19bf82ae40061ba58ff2fb73d41bd7d2c5d4f0fb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc1e8b63b6a6d9dda4eea9299351edf582205947",
          "sha": "fc1e8b63b6a6d9dda4eea9299351edf582205947",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fc1e8b63b6a6d9dda4eea9299351edf582205947"
        }
      ],
      "message": "sign: Add GetAggregateParticipantPubkeys to SigningProvider",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-05-21T17:44:27Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-22T21:43:26Z"
      },
      "sha": "b9c4096beb0de89852cccf1657ae27c0353f18e3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE4YWE3NzUyMzA0ZDg0YjAyYTUzOWEzNGZlMjY5NjEyMTRlNDRhYTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18aa7752304d84b02a539a34fe26961214e44aa2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/18aa7752304d84b02a539a34fe26961214e44aa2",
      "tree": {
        "sha": "e7c70320959f52d3519b9e1d999302c93ea623a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7c70320959f52d3519b9e1d999302c93ea623a4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9c4096beb0de89852cccf1657ae27c0353f18e3",
          "sha": "b9c4096beb0de89852cccf1657ae27c0353f18e3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b9c4096beb0de89852cccf1657ae27c0353f18e3"
        }
      ],
      "message": "Add MuSig2 Keyagg Cache helper functions\n\nsecp256k1 provides us secp256k1_musig_keyagg_cache objects which we are\nused as part of session info and to get the aggregate pubkey. These\nhelper functions help us convert to/from the secp256k1 C objects into\nthe Bitcoin Core C++ objects.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-05-21T17:44:46Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-22T20:18:28Z"
      },
      "sha": "18aa7752304d84b02a539a34fe26961214e44aa2"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17758565914,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQifjYa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17758565914",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "78dc6f4bfe8ebaca93bba3b4b235e68714e86d93",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/78dc6f4bfe8ebaca93bba3b4b235e68714e86d93",
      "created_at": "2025-05-21T17:55:29Z"
    },
    {
      "event": "labeled",
      "id": 17762158176,
      "node_id": "LE_lADOABII586ddsd2zwAAAAQitQZg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17762158176",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T23:02:27Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2860429843,
      "node_id": "PRR_kwDOABII586qfrIT",
      "url": null,
      "actor": null,
      "commit_id": "78dc6f4bfe8ebaca93bba3b4b235e68714e86d93",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Some more questions about the `MuSigPubkeyProvider` introduced in 35db4f2dcfc3435e10935581ffa447ffe219cc1e.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2860429843",
      "submitted_at": "2025-05-22T10:08:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "unlabeled",
      "id": 17784386944,
      "node_id": "UNLE_lADOABII586ddsd2zwAAAAQkCDWA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17784386944",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-23T06:49:53Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2864248620,
      "node_id": "PRR_kwDOABII586quPcs",
      "url": null,
      "actor": null,
      "commit_id": "78dc6f4bfe8ebaca93bba3b4b235e68714e86d93",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2864248620",
      "submitted_at": "2025-05-23T13:21:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17794605878,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQkpCM2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17794605878",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1d1aec1a2bd40132f1f72432dd5c0f82f8b880d3",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/1d1aec1a2bd40132f1f72432dd5c0f82f8b880d3",
      "created_at": "2025-05-23T18:25:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17795235768,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQkrb-4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17795235768",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "db69e69bb3182a63582bfe52ba011126e2c1efe9",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/db69e69bb3182a63582bfe52ba011126e2c1efe9",
      "created_at": "2025-05-23T19:19:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17818272860,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQmDURc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17818272860",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e1475cbd0d477cd8e04348e839dbc3dff1374a44",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/e1475cbd0d477cd8e04348e839dbc3dff1374a44",
      "created_at": "2025-05-26T18:28:46Z"
    },
    {
      "event": "reviewed",
      "id": 2870961667,
      "node_id": "PRR_kwDOABII586rH2YD",
      "url": null,
      "actor": null,
      "commit_id": "e1475cbd0d477cd8e04348e839dbc3dff1374a44",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2870961667",
      "submitted_at": "2025-05-27T12:54:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "reviewed",
      "id": 2871820534,
      "node_id": "PRR_kwDOABII586rLID2",
      "url": null,
      "actor": null,
      "commit_id": "e1475cbd0d477cd8e04348e839dbc3dff1374a44",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed thoroughly up to ff7476ec32f4dbee07bf04169e741e2aea5a9ab7, looks good to me (with one refactoring suggestion below). Still need to go again through the parsing code as there is a lot going on with all the conditions on what is allowed and what not w.r.t. derivations.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2871820534",
      "submitted_at": "2025-05-27T17:26:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17835746212,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQnF-Ok",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17835746212",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c30c29746184d970ff4c5fec4f44ec2347985ff4",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/c30c29746184d970ff4c5fec4f44ec2347985ff4",
      "created_at": "2025-05-27T18:13:27Z"
    },
    {
      "event": "reviewed",
      "id": 2885837240,
      "node_id": "PRR_kwDOABII586sAmG4",
      "url": null,
      "actor": null,
      "commit_id": "c30c29746184d970ff4c5fec4f44ec2347985ff4",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "According to BIP 390 [_\"Repeated participant public keys are not allowed.\"_](https://github.com/bitcoin/bips/blob/72af87fc72999e3f0a26a06e6e0a7f3134236337/bip-0390.mediawiki?plain=1#L36), but it seems there is currently no check preventing that? Example test case that passes but shouldn't (IIUC): https://github.com/theStack/bitcoin/commit/f260c7ec06e8bbb7148877a9a9b7e96707c41fa1",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2885837240",
      "submitted_at": "2025-06-01T17:00:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17942314842,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQtcf9a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17942314842",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "afcd397bc791d047508adb9d151d21384d7b49e3",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/afcd397bc791d047508adb9d151d21384d7b49e3",
      "created_at": "2025-06-02T20:13:02Z"
    },
    {
      "event": "commented",
      "id": 2932328786,
      "node_id": "IC_kwDOABII586ux8lS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2932328786",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T20:13:15Z",
      "updated_at": "2025-06-02T20:13:15Z",
      "author_association": "MEMBER",
      "body": "> According to BIP 390 [_\"Repeated participant public keys are not allowed.\"_](https://github.com/bitcoin/bips/blob/72af87fc72999e3f0a26a06e6e0a7f3134236337/bip-0390.mediawiki?plain=1#L36), but it seems there is currently no check preventing that? Example test case that passes but shouldn't (IIUC): [theStack@f260c7e](https://github.com/theStack/bitcoin/commit/f260c7ec06e8bbb7148877a9a9b7e96707c41fa1)\r\n\r\nGood catch. Fixed and added a test.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2932328786",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "reviewed",
      "id": 2892172589,
      "node_id": "PRR_kwDOABII586sYw0t",
      "url": null,
      "actor": null,
      "commit_id": "afcd397bc791d047508adb9d151d21384d7b49e3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2892172589",
      "submitted_at": "2025-06-03T13:27:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17968043059,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQu-pQz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17968043059",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "981b2abd79e3a7a4701c9d8794057b5523acb177",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/981b2abd79e3a7a4701c9d8794057b5523acb177",
      "created_at": "2025-06-03T21:14:20Z"
    },
    {
      "event": "reviewed",
      "id": 2896780371,
      "node_id": "PRR_kwDOABII586sqVxT",
      "url": null,
      "actor": null,
      "commit_id": "981b2abd79e3a7a4701c9d8794057b5523acb177",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Partial code review 981b2abd79e3a7a4701c9d8794057b5523acb177\r\nI just started and am still reviewing.",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2896780371",
      "submitted_at": "2025-06-04T14:30:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17989722041,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQwRV-5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17989722041",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "96af090b97e4a42e729202004b94f76d19faeac2",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/96af090b97e4a42e729202004b94f76d19faeac2",
      "created_at": "2025-06-04T21:31:32Z"
    },
    {
      "event": "reviewed",
      "id": 2900761388,
      "node_id": "PRR_kwDOABII586s5hss",
      "url": null,
      "actor": null,
      "commit_id": "96af090b97e4a42e729202004b94f76d19faeac2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2900761388",
      "submitted_at": "2025-06-05T18:53:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVhNmJkNzI5OTNiY2NkNTFhNmMwOGM0YjdkMmM5NmRkN2MyNTYwMDU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a6bd72993bccd51a6c08c4b7d2c96dd7c256005",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5a6bd72993bccd51a6c08c4b7d2c96dd7c256005",
      "tree": {
        "sha": "aea8564306d1b6045a883841686e22048a06ada4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aea8564306d1b6045a883841686e22048a06ada4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18aa7752304d84b02a539a34fe26961214e44aa2",
          "sha": "18aa7752304d84b02a539a34fe26961214e44aa2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/18aa7752304d84b02a539a34fe26961214e44aa2"
        }
      ],
      "message": "descriptor: Add MuSigPubkeyProvider",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-06-05T19:12:26Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-15T22:10:08Z"
      },
      "sha": "5a6bd72993bccd51a6c08c4b7d2c96dd7c256005"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU0YTNjM2M0ZjJlYzY5ZWIwZDlmNWE2YTk0MTJhZmQ0ZjlmZGNmMzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54a3c3c4f2ec69eb0d9f5a6a9412afd4f9fdcf39",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/54a3c3c4f2ec69eb0d9f5a6a9412afd4f9fdcf39",
      "tree": {
        "sha": "5feb1bdb12ebe7c3955450e6753dd6308ecd8400",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5feb1bdb12ebe7c3955450e6753dd6308ecd8400"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a6bd72993bccd51a6c08c4b7d2c96dd7c256005",
          "sha": "5a6bd72993bccd51a6c08c4b7d2c96dd7c256005",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5a6bd72993bccd51a6c08c4b7d2c96dd7c256005"
        }
      ],
      "message": "descriptor: Parse musig() key expressions",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-06-05T19:12:26Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-15T22:10:25Z"
      },
      "sha": "54a3c3c4f2ec69eb0d9f5a6a9412afd4f9fdcf39"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdjOWRhMTZjY2FjODRlOWYwYTUzOGU0MzkyN2E4N2I4YWJiOWEwODQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c9da16ccac84e9f0a538e43927a87b8abb9a084",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7c9da16ccac84e9f0a538e43927a87b8abb9a084",
      "tree": {
        "sha": "83429895b16b64992a949bc8e8ea815a1545748c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83429895b16b64992a949bc8e8ea815a1545748c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54a3c3c4f2ec69eb0d9f5a6a9412afd4f9fdcf39",
          "sha": "54a3c3c4f2ec69eb0d9f5a6a9412afd4f9fdcf39",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/54a3c3c4f2ec69eb0d9f5a6a9412afd4f9fdcf39"
        }
      ],
      "message": "tests: Test musig() parsing",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-06-05T19:12:26Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-15T22:48:19Z"
      },
      "sha": "7c9da16ccac84e9f0a538e43927a87b8abb9a084"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFmMjdmZmJjZTM0ZTNiNmNmMDdlYWI4MmFhMjQwYjU0ODJjYzZmODc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "tree": {
        "sha": "edb844890335f4a22b8646e651f24133f08d6720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edb844890335f4a22b8646e651f24133f08d6720"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c9da16ccac84e9f0a538e43927a87b8abb9a084",
          "sha": "7c9da16ccac84e9f0a538e43927a87b8abb9a084",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7c9da16ccac84e9f0a538e43927a87b8abb9a084"
        }
      ],
      "message": "doc: Add musig() example",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-06-05T19:12:26Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-05-16T19:08:09Z"
      },
      "sha": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18008147534,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQxXoZO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18008147534",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "created_at": "2025-06-05T19:13:03Z"
    },
    {
      "event": "reviewed",
      "id": 2915252677,
      "node_id": "PRR_kwDOABII586twznF",
      "url": null,
      "actor": null,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2915252677",
      "submitted_at": "2025-06-10T23:26:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "reviewed",
      "id": 2915269775,
      "node_id": "PRR_kwDOABII586tw3yP",
      "url": null,
      "actor": null,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Perhaps the description of the commits `script/parsing: Allow Const to not skip the found constant ` (https://github.com/bitcoin/bitcoin/pull/31244/commits/4b135f80d03c92fb522d1dcfd7d697aa0a4af626) and  `util/string: Allow Split to include the separator` (https://github.com/bitcoin/bitcoin/pull/31244/commits/b89a937225ed217556b38e000ee5d1bf0b5952aa) could explain why these changes are necessary for the musig2 descriptor.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2915269775",
      "submitted_at": "2025-06-10T23:43:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "reviewed",
      "id": 2915284020,
      "node_id": "PRR_kwDOABII586tw7Q0",
      "url": null,
      "actor": null,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2915284020",
      "submitted_at": "2025-06-10T23:58:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "reviewed",
      "id": 2915292347,
      "node_id": "PRR_kwDOABII586tw9S7",
      "url": null,
      "actor": null,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2915292347",
      "submitted_at": "2025-06-11T00:06:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061332697",
      "pull_request_review_id": 2796051128,
      "id": 2061332697,
      "node_id": "PRRC_kwDOABII58563XDZ",
      "diff_hunk": "@@ -82,13 +87,21 @@ bool FlatSigningProvider::GetTaprootBuilder(const XOnlyPubKey& output_key, Tapro\n     return LookupHelper(tr_trees, output_key, builder);\n }\n \n+std::vector<CPubKey> FlatSigningProvider::GetAggregateParticipantPubkeys(const CPubKey& pubkey) const\n+{\n+    const auto& it = aggregate_pubkeys.find(pubkey);\n+    if (it == aggregate_pubkeys.end()) return {};\n+    return it->second;",
      "path": "src/script/signingprovider.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "7da3e7bdd050d864a7b46fabb285aefa29ce61fc",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: could use `LookupHelper` here (for slightly better readability imho)\r\n```suggestion\r\n    std::vector<CPubKey> participant_pubkeys;\r\n    LookupHelper(aggregate_pubkeys, pubkey, participant_pubkeys);\r\n    return participant_pubkeys;\r\n```",
      "created_at": "2025-04-26T14:20:43Z",
      "updated_at": "2025-04-26T14:39:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2061332697",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061332697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 92,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061338625",
      "pull_request_review_id": 2796051128,
      "id": 2061338625,
      "node_id": "PRRC_kwDOABII58563YgB",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <vector>",
      "path": "src/musig.h",
      "position": 11,
      "original_position": 10,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "2e6dcdbc8055660a2e20ba81b62b7d26ae0ccb05",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: should also include ` <optional>`, since it's used for the return types below\r\n```suggestion\r\n#include <optional>\r\n#include <vector>\r\n```",
      "created_at": "2025-04-26T14:27:24Z",
      "updated_at": "2025-04-26T14:39:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2061338625",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061338625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061339360",
      "pull_request_review_id": 2796051128,
      "id": 2061339360,
      "node_id": "PRRC_kwDOABII58563Yrg",
      "diff_hunk": "@@ -580,6 +581,219 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        for (const auto& pubkey : m_participants) {\n+            if (pubkey->IsRange()) return true;\n+        }\n+        return false;",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "b70531cac94aa125116093c28c65f4c203dca772",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: could turn this into a one-liner by using `std::any_of`",
      "created_at": "2025-04-26T14:29:41Z",
      "updated_at": "2025-04-26T14:39:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2061339360",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061339360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 600,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 603,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061339636",
      "pull_request_review_id": 2796051128,
      "id": 2061339636,
      "node_id": "PRRC_kwDOABII58563Yv0",
      "diff_hunk": "@@ -580,6 +581,219 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        for (const auto& pubkey : m_participants) {\n+            if (pubkey->IsRange()) return true;\n+        }\n+        return false;\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        if (!any_privkeys) out.clear();\n+        return any_privkeys;\n+    }\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const override\n+    {\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (!pubkey->ToNormalizedString(arg, tmp)) {\n+                return false;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return true;\n+    }\n+\n+    void GetPrivKey(int pos, const SigningProvider& arg, FlatSigningProvider& out) const override\n+    {\n+        // Get the private keys for all participants\n+        // If there is participant derivation, it will be done.\n+        // If there is not, then the participant privkeys will be included directly\n+        for (const auto& prov : m_participants) {\n+            prov->GetPrivKey(pos, arg, out);\n+        }\n+    }\n+    std::optional<CPubKey> GetRootPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+    std::optional<CExtPubKey> GetRootExtPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+    std::unique_ptr<PubkeyProvider> Clone() const override\n+    {\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers;\n+        providers.reserve(m_participants.size());\n+        for (const std::unique_ptr<PubkeyProvider>& p : m_participants) {\n+            providers.emplace_back(p->Clone());\n+        }\n+        return std::make_unique<MuSigPubkeyProvider>(m_expr_index, std::move(providers), m_path, m_derive);\n+    }\n+    bool IsBIP32() const override\n+    {\n+        // musig() can only be a BIP 32 key if all participants are bip32 too\n+        bool all_bip32 = true;\n+        for (const auto& pk : m_participants) {\n+            all_bip32 &= pk->IsBIP32();\n+        }\n+        return all_bip32;",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 221,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "b70531cac94aa125116093c28c65f4c203dca772",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: could turn this into a one-liner by using `std::all_of`",
      "created_at": "2025-04-26T14:30:30Z",
      "updated_at": "2025-04-26T14:39:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2061339636",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061339636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 789,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 793,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526779",
      "pull_request_review_id": 2823263223,
      "id": 2078526779,
      "node_id": "PRRC_kwDOABII58574807",
      "diff_hunk": "@@ -82,13 +87,21 @@ bool FlatSigningProvider::GetTaprootBuilder(const XOnlyPubKey& output_key, Tapro\n     return LookupHelper(tr_trees, output_key, builder);\n }\n \n+std::vector<CPubKey> FlatSigningProvider::GetAggregateParticipantPubkeys(const CPubKey& pubkey) const\n+{\n+    const auto& it = aggregate_pubkeys.find(pubkey);\n+    if (it == aggregate_pubkeys.end()) return {};\n+    return it->second;",
      "path": "src/script/signingprovider.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "7da3e7bdd050d864a7b46fabb285aefa29ce61fc",
      "in_reply_to_id": 2061332697,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-05-07T21:33:32Z",
      "updated_at": "2025-05-07T21:33:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2078526779",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526779"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 92,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526898",
      "pull_request_review_id": 2823263381,
      "id": 2078526898,
      "node_id": "PRRC_kwDOABII5857482y",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <vector>",
      "path": "src/musig.h",
      "position": 11,
      "original_position": 10,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "2e6dcdbc8055660a2e20ba81b62b7d26ae0ccb05",
      "in_reply_to_id": 2061338625,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-05-07T21:33:40Z",
      "updated_at": "2025-05-07T21:33:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2078526898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526958",
      "pull_request_review_id": 2823263492,
      "id": 2078526958,
      "node_id": "PRRC_kwDOABII5857483u",
      "diff_hunk": "@@ -580,6 +581,219 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        for (const auto& pubkey : m_participants) {\n+            if (pubkey->IsRange()) return true;\n+        }\n+        return false;",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "b70531cac94aa125116093c28c65f4c203dca772",
      "in_reply_to_id": 2061339360,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-05-07T21:33:44Z",
      "updated_at": "2025-05-07T21:33:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2078526958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 600,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 603,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526998",
      "pull_request_review_id": 2823263567,
      "id": 2078526998,
      "node_id": "PRRC_kwDOABII5857484W",
      "diff_hunk": "@@ -580,6 +581,219 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        for (const auto& pubkey : m_participants) {\n+            if (pubkey->IsRange()) return true;\n+        }\n+        return false;\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        if (!any_privkeys) out.clear();\n+        return any_privkeys;\n+    }\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const override\n+    {\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (!pubkey->ToNormalizedString(arg, tmp)) {\n+                return false;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return true;\n+    }\n+\n+    void GetPrivKey(int pos, const SigningProvider& arg, FlatSigningProvider& out) const override\n+    {\n+        // Get the private keys for all participants\n+        // If there is participant derivation, it will be done.\n+        // If there is not, then the participant privkeys will be included directly\n+        for (const auto& prov : m_participants) {\n+            prov->GetPrivKey(pos, arg, out);\n+        }\n+    }\n+    std::optional<CPubKey> GetRootPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+    std::optional<CExtPubKey> GetRootExtPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+    std::unique_ptr<PubkeyProvider> Clone() const override\n+    {\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers;\n+        providers.reserve(m_participants.size());\n+        for (const std::unique_ptr<PubkeyProvider>& p : m_participants) {\n+            providers.emplace_back(p->Clone());\n+        }\n+        return std::make_unique<MuSigPubkeyProvider>(m_expr_index, std::move(providers), m_path, m_derive);\n+    }\n+    bool IsBIP32() const override\n+    {\n+        // musig() can only be a BIP 32 key if all participants are bip32 too\n+        bool all_bip32 = true;\n+        for (const auto& pk : m_participants) {\n+            all_bip32 &= pk->IsBIP32();\n+        }\n+        return all_bip32;",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 221,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "b70531cac94aa125116093c28c65f4c203dca772",
      "in_reply_to_id": 2061339636,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-05-07T21:33:47Z",
      "updated_at": "2025-05-07T21:33:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2078526998",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 789,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 793,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091162026",
      "pull_request_review_id": 2843677281,
      "id": 2091162026,
      "node_id": "PRRC_kwDOABII5858pJmq",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 71,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: could add a comment where this constant is coming from (https://github.com/bitcoin/bips/blob/master/bip-0328.mediawiki#cite_note-1)",
      "created_at": "2025-05-15T13:21:16Z",
      "updated_at": "2025-05-15T18:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2091162026",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091162026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 643,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091770520",
      "pull_request_review_id": 2843677281,
      "id": 2091770520,
      "node_id": "PRRC_kwDOABII5858reKY",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <optional>\n+#include <vector>\n+\n+struct secp256k1_musig_keyagg_cache;\n+\n+bool GetMuSig2KeyAggCache(const std::vector<CPubKey>& pubkeys, secp256k1_musig_keyagg_cache& keyagg_cache);\n+std::optional<CPubKey> GetCPubKeyFromMuSig2KeyAggCache(secp256k1_musig_keyagg_cache& cache);",
      "path": "src/musig.h",
      "position": null,
      "original_position": 16,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "895f0c5ca9a12df843f2f7faff37c948046654ea",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "note for other reviewers that might wonder: these two functions and the involved `secp256k1_musig_keyagg_cache` instance are not publicly used within this PR yet, but they will be in #29675 (or any other future PRs that get split up from that one)",
      "created_at": "2025-05-15T18:40:36Z",
      "updated_at": "2025-05-15T18:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2091770520",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091770520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092839369",
      "pull_request_review_id": 2846300829,
      "id": 2092839369,
      "node_id": "PRRC_kwDOABII5858vjHJ",
      "diff_hunk": "@@ -286,6 +286,7 @@ class XOnlyPubKey\n      * This is needed for key lookups since keys are indexed by CKeyID.\n      */\n     std::vector<CKeyID> GetKeyIDs() const;\n+    std::vector<CPubKey> GetCPubKeys() const;",
      "path": "src/pubkey.h",
      "position": 10,
      "original_position": 4,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "225b3adbf53e4dfde32a1f798cde30cc41998e3c",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 225b3adbf53e4dfde32a1f798cde30cc41998e3c \"XOnlyPubKey: Add GetCPubKeys\": maybe document:\r\n\r\n```cpp\r\n// Return both a version prefixed with 0x02, and one with 0x03.\r\n```\r\n\r\nThe comment inside `GetKeyIDs` could also be moved to the header.",
      "created_at": "2025-05-16T11:05:08Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2092839369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092839369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 292,
      "original_line": 292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092871907",
      "pull_request_review_id": 2846300829,
      "id": 2092871907,
      "node_id": "PRRC_kwDOABII5858vrDj",
      "diff_hunk": "@@ -13,10 +13,10 @@ namespace script {\n \n /** Parse a constant.\n  *\n- * If sp's initial part matches str, sp is updated to skip that part, and true is returned.\n+ * If sp's initial part matches str, sp is optionally updated to skip that part, and true is returned.",
      "path": "src/script/parsing.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "fe02d7cb237c00de6abe1776b3101342ffddf757",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In fe02d7cb237c00de6abe1776b3101342ffddf757 \"script/parsing: Allow Const to not skip the found constant\": what does \"sp\" stand for anyway?",
      "created_at": "2025-05-16T11:30:03Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2092871907",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092871907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092880889",
      "pull_request_review_id": 2846300829,
      "id": 2092880889,
      "node_id": "PRRC_kwDOABII5858vtP5",
      "diff_hunk": "@@ -100,18 +100,27 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n  *\n  * If sep does not occur in sp, a singleton with the entirety of sp is returned.\n  *\n+ * @param[in] include_sep Whether to include the separator at the end of the left side of the splits.",
      "path": "src/util/string.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "4a1eeee27a64c4be7293740f8fff839879b88d86",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 4a1eeee27a64c4be7293740f8fff839879b88d86 \"util/string: Allow Split to include the separator\": the commit message would be more clear if you use the same wording as in this comment, i.e. \"include the separator at the end of the left side of the splits\".",
      "created_at": "2025-05-16T11:37:01Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2092880889",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092880889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 103,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092887857",
      "pull_request_review_id": 2846300829,
      "id": 2092887857,
      "node_id": "PRRC_kwDOABII5858vu8x",
      "diff_hunk": "@@ -100,18 +100,27 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n  *\n  * If sep does not occur in sp, a singleton with the entirety of sp is returned.\n  *\n+ * @param[in] include_sep Whether to include the separator at the end of the left side of the splits.\n+ *\n  * Note that this function does not care about braces, so splitting\n  * \"foo(bar(1),2),3) on ',' will return {\"foo(bar(1)\", \"2)\", \"3)\"}.\n+ *\n+ * If include_sep == true, splitting \"foo(bar(1),2),3) on ','\n+ * will return {\"foo(bar(1),\", \"2),\", \"3)\"}.",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 10,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "4a1eeee27a64c4be7293740f8fff839879b88d86",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also in https://github.com/bitcoin/bitcoin/commit/4a1eeee27a64c4be7293740f8fff839879b88d86, this would be a bit easier to read:\r\n\r\n```\r\n* will return the following strings:\r\n* - foo(bar(1),\r\n* - 2),\r\n* - 3)\r\n```",
      "created_at": "2025-05-16T11:42:18Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2092887857",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092887857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092892121",
      "pull_request_review_id": 2846300829,
      "id": 2092892121,
      "node_id": "PRRC_kwDOABII5858vv_Z",
      "diff_hunk": "@@ -221,6 +221,9 @@ struct PubkeyProvider\n \n     /** Make a deep copy of this PubkeyProvider */\n     virtual std::unique_ptr<PubkeyProvider> Clone() const = 0;\n+\n+    /** Whether this PubkeyProvider can be a BIP 32 extended key that can be derived from */",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "26c25fed919d2520f561a891236220d54880b079",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 26c25fed919d2520f561a891236220d54880b079 \"descriptors: Add PubkeyProvider::IsBIP32()\": \"can be\" a BIP 32 extended key or \"is\"? In the former case, an additional comment would be useful. ",
      "created_at": "2025-05-16T11:45:35Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2092892121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092892121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092904357",
      "pull_request_review_id": 2846300829,
      "id": 2092904357,
      "node_id": "PRRC_kwDOABII5858vy-l",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <optional>\n+#include <vector>\n+\n+struct secp256k1_musig_keyagg_cache;\n+\n+bool GetMuSig2KeyAggCache(const std::vector<CPubKey>& pubkeys, secp256k1_musig_keyagg_cache& keyagg_cache);\n+std::optional<CPubKey> GetCPubKeyFromMuSig2KeyAggCache(secp256k1_musig_keyagg_cache& cache);\n+std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkeys);",
      "path": "src/musig.h",
      "position": 24,
      "original_position": 17,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "895f0c5ca9a12df843f2f7faff37c948046654ea",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 895f0c5ca9a12df843f2f7faff37c948046654ea \"Add MuSig2 Keyagg Cache helper functions\": why is this plural? IIUC there's one aggregate _key_ that's derived from the participant _keys_. If so, then maybe call this `MuSig2DeriveAggregatePubkey()`",
      "created_at": "2025-05-16T11:54:31Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2092904357",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092904357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092998484",
      "pull_request_review_id": 2846300829,
      "id": 2092998484,
      "node_id": "PRRC_kwDOABII5858wJ9U",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <optional>\n+#include <vector>\n+\n+struct secp256k1_musig_keyagg_cache;\n+\n+bool GetMuSig2KeyAggCache(const std::vector<CPubKey>& pubkeys, secp256k1_musig_keyagg_cache& keyagg_cache);",
      "path": "src/musig.h",
      "position": 20,
      "original_position": 15,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "895f0c5ca9a12df843f2f7faff37c948046654ea",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 895f0c5ca9a12df843f2f7faff37c948046654ea \"Add MuSig2 Keyagg Cache helper functions\": although we don't have to copy-paste all libsecp documentation,  I think it's worth mentioning that this doesn't sort pubkeys and the order matters.",
      "created_at": "2025-05-16T12:57:12Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2092998484",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092998484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093043309",
      "pull_request_review_id": 2846300829,
      "id": 2093043309,
      "node_id": "PRRC_kwDOABII5858wU5t",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        if (!any_privkeys) out.clear();\n+        return any_privkeys;\n+    }\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const override\n+    {\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (!pubkey->ToNormalizedString(arg, tmp)) {\n+                return false;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return true;\n+    }\n+\n+    void GetPrivKey(int pos, const SigningProvider& arg, FlatSigningProvider& out) const override\n+    {\n+        // Get the private keys for all participants\n+        // If there is participant derivation, it will be done.\n+        // If there is not, then the participant privkeys will be included directly\n+        for (const auto& prov : m_participants) {\n+            prov->GetPrivKey(pos, arg, out);\n+        }\n+    }\n+    std::optional<CPubKey> GetRootPubKey() const override",
      "path": "src/script/descriptor.cpp",
      "position": 233,
      "original_position": 194,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 6b634754d2783ffe16570ad37dbcf9251a7efc24 \"descriptor: Add MuSigPubkeyProvider\": could add a short comment to explain why this doesn't exist",
      "created_at": "2025-05-16T13:22:44Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093043309",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093043309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 771,
      "original_line": 771,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093043962",
      "pull_request_review_id": 2846300829,
      "id": 2093043962,
      "node_id": "PRRC_kwDOABII5858wVD6",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        if (!any_privkeys) out.clear();\n+        return any_privkeys;\n+    }\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const override\n+    {\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (!pubkey->ToNormalizedString(arg, tmp)) {\n+                return false;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return true;\n+    }\n+\n+    void GetPrivKey(int pos, const SigningProvider& arg, FlatSigningProvider& out) const override\n+    {\n+        // Get the private keys for all participants",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 187,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 6b634754d2783ffe16570ad37dbcf9251a7efc24 \"descriptor: Add MuSigPubkeyProvider\": do you mean \"all or nothing\" or \"any that we have\"?",
      "created_at": "2025-05-16T13:23:07Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093043962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093043962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 759,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093048884",
      "pull_request_review_id": 2846300829,
      "id": 2093048884,
      "node_id": "PRRC_kwDOABII5858wWQ0",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 158,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/6b634754d2783ffe16570ad37dbcf9251a7efc24 \"descriptor: why apostrophe? 😢",
      "created_at": "2025-05-16T13:25:36Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093048884",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093048884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 730,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093082286",
      "pull_request_review_id": 2846300829,
      "id": 2093082286,
      "node_id": "PRRC_kwDOABII5858weau",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 71,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": 2091162026,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This constant should probably live in `musig.h`.",
      "created_at": "2025-05-16T13:43:50Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093082286",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093082286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 643,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093504031",
      "pull_request_review_id": 2847351532,
      "id": 2093504031,
      "node_id": "PRRC_kwDOABII5858yFYf",
      "diff_hunk": "@@ -13,10 +13,10 @@ namespace script {\n \n /** Parse a constant.\n  *\n- * If sp's initial part matches str, sp is updated to skip that part, and true is returned.\n+ * If sp's initial part matches str, sp is optionally updated to skip that part, and true is returned.",
      "path": "src/script/parsing.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "fe02d7cb237c00de6abe1776b3101342ffddf757",
      "in_reply_to_id": 2092871907,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "**sp**an?",
      "created_at": "2025-05-16T18:23:31Z",
      "updated_at": "2025-05-16T18:23:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093504031",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093504031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093515670",
      "pull_request_review_id": 2847370495,
      "id": 2093515670,
      "node_id": "PRRC_kwDOABII5858yIOW",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <optional>\n+#include <vector>\n+\n+struct secp256k1_musig_keyagg_cache;\n+\n+bool GetMuSig2KeyAggCache(const std::vector<CPubKey>& pubkeys, secp256k1_musig_keyagg_cache& keyagg_cache);\n+std::optional<CPubKey> GetCPubKeyFromMuSig2KeyAggCache(secp256k1_musig_keyagg_cache& cache);\n+std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkeys);",
      "path": "src/musig.h",
      "position": 24,
      "original_position": 17,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "895f0c5ca9a12df843f2f7faff37c948046654ea",
      "in_reply_to_id": 2092904357,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"Aggregate\" is used as an imperative verb here, so it is \"(you,) aggregate (these) pubkeys\"",
      "created_at": "2025-05-16T18:34:13Z",
      "updated_at": "2025-05-16T18:34:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093515670",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093515670"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093530014",
      "pull_request_review_id": 2847393088,
      "id": 2093530014,
      "node_id": "PRRC_kwDOABII5858yLue",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 158,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": 2093048884,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It doesn't actually matter, the parameter does nothing as you can't do hardened derivation from the musig aggregate key.",
      "created_at": "2025-05-16T18:46:57Z",
      "updated_at": "2025-05-16T18:46:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093530014",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093530014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 730,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093554238",
      "pull_request_review_id": 2847431331,
      "id": 2093554238,
      "node_id": "PRRC_kwDOABII5858yRo-",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 71,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": 2091162026,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, added to musig.h",
      "created_at": "2025-05-16T19:08:31Z",
      "updated_at": "2025-05-16T19:08:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093554238",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093554238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 643,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093554514",
      "pull_request_review_id": 2847431738,
      "id": 2093554514,
      "node_id": "PRRC_kwDOABII5858yRtS",
      "diff_hunk": "@@ -286,6 +286,7 @@ class XOnlyPubKey\n      * This is needed for key lookups since keys are indexed by CKeyID.\n      */\n     std::vector<CKeyID> GetKeyIDs() const;\n+    std::vector<CPubKey> GetCPubKeys() const;",
      "path": "src/pubkey.h",
      "position": 10,
      "original_position": 4,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "225b3adbf53e4dfde32a1f798cde30cc41998e3c",
      "in_reply_to_id": 2092839369,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Updated the comments.",
      "created_at": "2025-05-16T19:08:46Z",
      "updated_at": "2025-05-16T19:08:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093554514",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093554514"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 292,
      "original_line": 292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093554645",
      "pull_request_review_id": 2847431931,
      "id": 2093554645,
      "node_id": "PRRC_kwDOABII5858yRvV",
      "diff_hunk": "@@ -100,18 +100,27 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n  *\n  * If sep does not occur in sp, a singleton with the entirety of sp is returned.\n  *\n+ * @param[in] include_sep Whether to include the separator at the end of the left side of the splits.",
      "path": "src/util/string.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "4a1eeee27a64c4be7293740f8fff839879b88d86",
      "in_reply_to_id": 2092880889,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-05-16T19:08:53Z",
      "updated_at": "2025-05-16T19:08:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093554645",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093554645"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 103,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093554764",
      "pull_request_review_id": 2847432111,
      "id": 2093554764,
      "node_id": "PRRC_kwDOABII5858yRxM",
      "diff_hunk": "@@ -100,18 +100,27 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n  *\n  * If sep does not occur in sp, a singleton with the entirety of sp is returned.\n  *\n+ * @param[in] include_sep Whether to include the separator at the end of the left side of the splits.\n+ *\n  * Note that this function does not care about braces, so splitting\n  * \"foo(bar(1),2),3) on ',' will return {\"foo(bar(1)\", \"2)\", \"3)\"}.\n+ *\n+ * If include_sep == true, splitting \"foo(bar(1),2),3) on ','\n+ * will return {\"foo(bar(1),\", \"2),\", \"3)\"}.",
      "path": "src/util/string.h",
      "position": null,
      "original_position": 10,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "4a1eeee27a64c4be7293740f8fff839879b88d86",
      "in_reply_to_id": 2092887857,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-05-16T19:08:59Z",
      "updated_at": "2025-05-16T19:08:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093554764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093554764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093554945",
      "pull_request_review_id": 2847432400,
      "id": 2093554945,
      "node_id": "PRRC_kwDOABII5858yR0B",
      "diff_hunk": "@@ -221,6 +221,9 @@ struct PubkeyProvider\n \n     /** Make a deep copy of this PubkeyProvider */\n     virtual std::unique_ptr<PubkeyProvider> Clone() const = 0;\n+\n+    /** Whether this PubkeyProvider can be a BIP 32 extended key that can be derived from */",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "26c25fed919d2520f561a891236220d54880b079",
      "in_reply_to_id": 2092892121,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"is\"",
      "created_at": "2025-05-16T19:09:09Z",
      "updated_at": "2025-05-16T19:09:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093554945",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093554945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093555270",
      "pull_request_review_id": 2847432936,
      "id": 2093555270,
      "node_id": "PRRC_kwDOABII5858yR5G",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <optional>\n+#include <vector>\n+\n+struct secp256k1_musig_keyagg_cache;\n+\n+bool GetMuSig2KeyAggCache(const std::vector<CPubKey>& pubkeys, secp256k1_musig_keyagg_cache& keyagg_cache);",
      "path": "src/musig.h",
      "position": 20,
      "original_position": 15,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "895f0c5ca9a12df843f2f7faff37c948046654ea",
      "in_reply_to_id": 2092998484,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added comments.",
      "created_at": "2025-05-16T19:09:27Z",
      "updated_at": "2025-05-16T19:09:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093555270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093555270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093555374",
      "pull_request_review_id": 2847433106,
      "id": 2093555374,
      "node_id": "PRRC_kwDOABII5858yR6u",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        if (!any_privkeys) out.clear();\n+        return any_privkeys;\n+    }\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const override\n+    {\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (!pubkey->ToNormalizedString(arg, tmp)) {\n+                return false;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return true;\n+    }\n+\n+    void GetPrivKey(int pos, const SigningProvider& arg, FlatSigningProvider& out) const override\n+    {\n+        // Get the private keys for all participants\n+        // If there is participant derivation, it will be done.\n+        // If there is not, then the participant privkeys will be included directly\n+        for (const auto& prov : m_participants) {\n+            prov->GetPrivKey(pos, arg, out);\n+        }\n+    }\n+    std::optional<CPubKey> GetRootPubKey() const override",
      "path": "src/script/descriptor.cpp",
      "position": 233,
      "original_position": 194,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": 2093043309,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-05-16T19:09:34Z",
      "updated_at": "2025-05-16T19:09:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093555374",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093555374"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 771,
      "original_line": 771,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093555457",
      "pull_request_review_id": 2847433279,
      "id": 2093555457,
      "node_id": "PRRC_kwDOABII5858yR8B",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        if (!any_privkeys) out.clear();\n+        return any_privkeys;\n+    }\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const override\n+    {\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (!pubkey->ToNormalizedString(arg, tmp)) {\n+                return false;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return true;\n+    }\n+\n+    void GetPrivKey(int pos, const SigningProvider& arg, FlatSigningProvider& out) const override\n+    {\n+        // Get the private keys for all participants",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 187,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": 2093043962,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "any that we have.",
      "created_at": "2025-05-16T19:09:41Z",
      "updated_at": "2025-05-16T19:09:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093555457",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093555457"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 759,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095000787",
      "pull_request_review_id": 2849650680,
      "id": 2095000787,
      "node_id": "PRRC_kwDOABII58583yzT",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <optional>\n+#include <vector>\n+\n+struct secp256k1_musig_keyagg_cache;\n+\n+bool GetMuSig2KeyAggCache(const std::vector<CPubKey>& pubkeys, secp256k1_musig_keyagg_cache& keyagg_cache);\n+std::optional<CPubKey> GetCPubKeyFromMuSig2KeyAggCache(secp256k1_musig_keyagg_cache& cache);\n+std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkeys);",
      "path": "src/musig.h",
      "position": 24,
      "original_position": 17,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "895f0c5ca9a12df843f2f7faff37c948046654ea",
      "in_reply_to_id": 2092904357,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, it's a verb, then it makes sense.",
      "created_at": "2025-05-19T07:14:21Z",
      "updated_at": "2025-05-19T07:14:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2095000787",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095000787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095003386",
      "pull_request_review_id": 2849655253,
      "id": 2095003386,
      "node_id": "PRRC_kwDOABII58583zb6",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 158,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": 2093048884,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In that case it's less confusing if you don't pass this argument (as the default is false).",
      "created_at": "2025-05-19T07:16:10Z",
      "updated_at": "2025-05-19T07:16:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2095003386",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095003386"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 730,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095044674",
      "pull_request_review_id": 2849720692,
      "id": 2095044674,
      "node_id": "PRRC_kwDOABII585839hC",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 158,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": 2093048884,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Update: I see you already did that in 048c95ea55.",
      "created_at": "2025-05-19T07:36:04Z",
      "updated_at": "2025-05-19T07:36:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2095044674",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095044674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 730,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096234268",
      "pull_request_review_id": 2851595777,
      "id": 2096234268,
      "node_id": "PRRC_kwDOABII58588f8c",
      "diff_hunk": "@@ -580,6 +581,219 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "048c95ea557cf81a8e55c5ffe9994cc9d8f3e039",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit 048c95ea557cf81a8e55c5ffe9994cc9d8f3e039: could `Assert` this condition instead, as otherwise the logic suggests that it's possible that neither of the if-branches are executed (it's not, IIUC; the only reason to not have a cached aggregate pubkey at this point is if we have ranged participants, so this condition is always true)\r\n```suggestion\r\n        } else {\r\n            Assert(IsRangedParticipants());\r\n```",
      "created_at": "2025-05-19T17:52:25Z",
      "updated_at": "2025-05-19T18:05:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2096234268",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096234268"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 669,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096247242",
      "pull_request_review_id": 2851595777,
      "id": 2096247242,
      "node_id": "PRRC_kwDOABII58588jHK",
      "diff_hunk": "@@ -12,6 +12,10 @@\n \n struct secp256k1_musig_keyagg_cache;\n \n+//! MuSig2 chaincode as defined by BIP 328\n+//! uint256 will byteswap the hex\n+constexpr uint256 MUSIG_CHAINCODE{\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\"};",
      "path": "src/musig.h",
      "position": null,
      "original_position": 6,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "048c95ea557cf81a8e55c5ffe9994cc9d8f3e039",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit 048c95ea557cf81a8e55c5ffe9994cc9d8f3e039: not too fond of \"reverse-hexstrings of byte-strings\"  creeping in, could do instead\r\n```suggestion\r\nusing namespace util::hex_literals;\r\nconstexpr std::array<uint8_t, 32> MUSIG_CHAINCODE{\"868087ca02a6f974c4598924c36b57762d32cb45717167e300622c7167e38965\"_hex_u8};\r\n```\r\nand assign the constant to the uint256 instance via `... = uint256(MUSIG_CHAINCODE)`.\r\n(but shouldn't be a blocker, can be improved in a follow-up as well, if others are even as annoyed by that as me 😅 )",
      "created_at": "2025-05-19T18:02:18Z",
      "updated_at": "2025-05-19T18:05:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2096247242",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096247242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 16,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096297063",
      "pull_request_review_id": 2851697041,
      "id": 2096297063,
      "node_id": "PRRC_kwDOABII58588vRn",
      "diff_hunk": "@@ -12,6 +12,10 @@\n \n struct secp256k1_musig_keyagg_cache;\n \n+//! MuSig2 chaincode as defined by BIP 328\n+//! uint256 will byteswap the hex\n+constexpr uint256 MUSIG_CHAINCODE{\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\"};",
      "path": "src/musig.h",
      "position": null,
      "original_position": 6,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "048c95ea557cf81a8e55c5ffe9994cc9d8f3e039",
      "in_reply_to_id": 2096247242,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Indeed it's nice if we can avoid this, because although reviewing the reversal was easy, finding it later with search is tedious.",
      "created_at": "2025-05-19T18:41:39Z",
      "updated_at": "2025-05-19T18:41:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2096297063",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096297063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 16,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2098613575",
      "pull_request_review_id": 2855191524,
      "id": 2098613575,
      "node_id": "PRRC_kwDOABII5859Fk1H",
      "diff_hunk": "@@ -580,6 +581,219 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "048c95ea557cf81a8e55c5ffe9994cc9d8f3e039",
      "in_reply_to_id": 2096234268,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, with `Assume`. It's occurred to me that `Assert` in descriptor code is probably not the way to go, so I've changed the couple other `Assert` to `Assume`.",
      "created_at": "2025-05-20T18:24:14Z",
      "updated_at": "2025-05-20T18:24:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2098613575",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2098613575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 669,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2098614758",
      "pull_request_review_id": 2855193710,
      "id": 2098614758,
      "node_id": "PRRC_kwDOABII5859FlHm",
      "diff_hunk": "@@ -12,6 +12,10 @@\n \n struct secp256k1_musig_keyagg_cache;\n \n+//! MuSig2 chaincode as defined by BIP 328\n+//! uint256 will byteswap the hex\n+constexpr uint256 MUSIG_CHAINCODE{\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\"};",
      "path": "src/musig.h",
      "position": null,
      "original_position": 6,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "048c95ea557cf81a8e55c5ffe9994cc9d8f3e039",
      "in_reply_to_id": 2096247242,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It looks like `_hex_u8` can be used directly in uin256's constructor with normal byte order, so used that.",
      "created_at": "2025-05-20T18:24:46Z",
      "updated_at": "2025-05-20T18:24:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2098614758",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2098614758"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 16,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099836377",
      "pull_request_review_id": 2857019010,
      "id": 2099836377,
      "node_id": "PRRC_kwDOABII5859KPXZ",
      "diff_hunk": "@@ -0,0 +1,27 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <optional>\n+#include <vector>\n+\n+struct secp256k1_musig_keyagg_cache;\n+\n+//! MuSig2 chaincode as defined by BIP 328\n+//! uint256 will byteswap the hex\n+using namespace util::hex_literals;\n+constexpr uint256 MUSIG_CHAINCODE{\"868087ca02a6f974c4598924c36b57762d32cb45717167e300622c7167e38965\"_hex_u8};\n+\n+//! Create a secp56k1_musig_keyagg_cache from the pubkeys in their current order. This is necessary for most MuSig2 operations",
      "path": "src/musig.h",
      "position": null,
      "original_position": 20,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "08d8a59597db34bcddcc1ec5fda98b0b14803170",
      "in_reply_to_id": null,
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "secp56k1 -> secp256k1 [typo in library name]",
      "created_at": "2025-05-21T09:37:19Z",
      "updated_at": "2025-05-21T09:37:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2099836377",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099836377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100870613",
      "pull_request_review_id": 2858668264,
      "id": 2100870613,
      "node_id": "PRRC_kwDOABII5859OL3V",
      "diff_hunk": "@@ -0,0 +1,27 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <optional>\n+#include <vector>\n+\n+struct secp256k1_musig_keyagg_cache;\n+\n+//! MuSig2 chaincode as defined by BIP 328\n+//! uint256 will byteswap the hex\n+using namespace util::hex_literals;\n+constexpr uint256 MUSIG_CHAINCODE{\"868087ca02a6f974c4598924c36b57762d32cb45717167e300622c7167e38965\"_hex_u8};\n+\n+//! Create a secp56k1_musig_keyagg_cache from the pubkeys in their current order. This is necessary for most MuSig2 operations",
      "path": "src/musig.h",
      "position": null,
      "original_position": 20,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "08d8a59597db34bcddcc1ec5fda98b0b14803170",
      "in_reply_to_id": 2099836377,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-05-21T17:55:32Z",
      "updated_at": "2025-05-21T17:55:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2100870613",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100870613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102052043",
      "pull_request_review_id": 2860429843,
      "id": 2102052043,
      "node_id": "PRRC_kwDOABII5859SsTL",
      "diff_hunk": "@@ -580,6 +581,220 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else {\n+            if (!Assume(IsRangedParticipants())) return std::nullopt;\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        if (!Assume(pubout.IsValid())) return std::nullopt;\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        if (!any_privkeys) out.clear();\n+        return any_privkeys;\n+    }\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const override\n+    {\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (!pubkey->ToNormalizedString(arg, tmp)) {\n+                return false;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return true;\n+    }\n+\n+    void GetPrivKey(int pos, const SigningProvider& arg, FlatSigningProvider& out) const override\n+    {\n+        // Get the private keys for any participants that we have\n+        // If there is participant derivation, it will be done.\n+        // If there is not, then the participant privkeys will be included directly\n+        for (const auto& prov : m_participants) {\n+            prov->GetPrivKey(pos, arg, out);\n+        }\n+    }\n+\n+    // Get RootPubKey and GetRootExtPubKey are used to return the single pubkey underlying the pubkey provider\n+    // to be presented to the user in gethdkeys. As this is a multisig construction, there is no single underlying\n+    // pubkey hence nothing should be returned.\n+    // While the aggregate pubkey could be returned as the root (ext)pubkey, it is not a pubkey that anyone should\n+    // be using by itself in a descriptor as it is unspendable without knowing its participants.\n+    std::optional<CPubKey> GetRootPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+    std::optional<CExtPubKey> GetRootExtPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+\n+    std::unique_ptr<PubkeyProvider> Clone() const override\n+    {\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers;\n+        providers.reserve(m_participants.size());\n+        for (const std::unique_ptr<PubkeyProvider>& p : m_participants) {\n+            providers.emplace_back(p->Clone());",
      "path": "src/script/descriptor.cpp",
      "position": 247,
      "original_position": 215,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "35db4f2dcfc3435e10935581ffa447ffe219cc1e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 35db4f2dcfc3435e10935581ffa447ffe219cc1e \"descriptor: Add MuSigPubkeyProvider\": no tests break if I delete this loop. What's the typical use case for `Clone()`? Maybe `Check()` in `descriptor_tests.cpp` should do this for all valid descriptors?",
      "created_at": "2025-05-22T09:13:11Z",
      "updated_at": "2025-05-22T10:08:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2102052043",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102052043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 785,
      "original_line": 785,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102121605",
      "pull_request_review_id": 2860429843,
      "id": 2102121605,
      "node_id": "PRRC_kwDOABII5859S9SF",
      "diff_hunk": "@@ -580,6 +581,220 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else {\n+            if (!Assume(IsRangedParticipants())) return std::nullopt;\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        if (!Assume(pubout.IsValid())) return std::nullopt;\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);",
      "path": "src/script/descriptor.cpp",
      "position": 180,
      "original_position": 148,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "35db4f2dcfc3435e10935581ffa447ffe219cc1e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 35db4f2dcfc3435e10935581ffa447ffe219cc1e \"descriptor: Add MuSigPubkeyProvider\": could avoid old school `for i`, make it slightly shorter and have the intention be more clear:\r\n\r\n```diff\r\n--- a/src/script/descriptor.cpp\r\n+++ b/src/script/descriptor.cpp\r\n@@ -691,9 +691,9 @@ public:\r\n     std::string ToString(StringType type=StringType::PUBLIC) const override\r\n     {\r\n         std::string out = \"musig(\";\r\n-        for (size_t i = 0; i < m_participants.size(); ++i) {\r\n-            const auto& pubkey = m_participants.at(i);\r\n-            if (i) out += \",\";\r\n+        size_t pos{0};\r\n+        for (const auto& pubkey : m_participants) {\r\n+            if (pos++) out += \",\";\r\n             std::string tmp;\r\n```\r\n\r\nThough it's a not a huge improvement.",
      "created_at": "2025-05-22T09:45:05Z",
      "updated_at": "2025-05-22T10:08:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2102121605",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102121605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 718,
      "original_line": 718,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102178194",
      "pull_request_review_id": 2860429843,
      "id": 2102178194,
      "node_id": "PRRC_kwDOABII5859TLGS",
      "diff_hunk": "@@ -580,6 +581,220 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it",
      "path": "src/script/descriptor.cpp",
      "position": 85,
      "original_position": 46,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "35db4f2dcfc3435e10935581ffa447ffe219cc1e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 35db4f2dcfc3435e10935581ffa447ffe219cc1e \"descriptor: Add MuSigPubkeyProvider\": just to check my own understanding, by ranged participants you mean the case of `musig(alice/*, bob)`, i.e. derivation before aggregation?\r\n\r\nI assume that if the participants are ranged, then you can't also have a range after derivation, e.g. `musig(alice/*, bob)/*` isn't allowed. Where do we check this?",
      "created_at": "2025-05-22T10:08:30Z",
      "updated_at": "2025-05-22T10:08:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2102178194",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102178194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 623,
      "original_line": 623,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2103137795",
      "pull_request_review_id": 2862155531,
      "id": 2103137795,
      "node_id": "PRRC_kwDOABII5859W1YD",
      "diff_hunk": "@@ -580,6 +581,220 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else {\n+            if (!Assume(IsRangedParticipants())) return std::nullopt;\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        if (!Assume(pubout.IsValid())) return std::nullopt;\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        if (!any_privkeys) out.clear();\n+        return any_privkeys;\n+    }\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const override\n+    {\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (!pubkey->ToNormalizedString(arg, tmp)) {\n+                return false;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return true;\n+    }\n+\n+    void GetPrivKey(int pos, const SigningProvider& arg, FlatSigningProvider& out) const override\n+    {\n+        // Get the private keys for any participants that we have\n+        // If there is participant derivation, it will be done.\n+        // If there is not, then the participant privkeys will be included directly\n+        for (const auto& prov : m_participants) {\n+            prov->GetPrivKey(pos, arg, out);\n+        }\n+    }\n+\n+    // Get RootPubKey and GetRootExtPubKey are used to return the single pubkey underlying the pubkey provider\n+    // to be presented to the user in gethdkeys. As this is a multisig construction, there is no single underlying\n+    // pubkey hence nothing should be returned.\n+    // While the aggregate pubkey could be returned as the root (ext)pubkey, it is not a pubkey that anyone should\n+    // be using by itself in a descriptor as it is unspendable without knowing its participants.\n+    std::optional<CPubKey> GetRootPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+    std::optional<CExtPubKey> GetRootExtPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+\n+    std::unique_ptr<PubkeyProvider> Clone() const override\n+    {\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers;\n+        providers.reserve(m_participants.size());\n+        for (const std::unique_ptr<PubkeyProvider>& p : m_participants) {\n+            providers.emplace_back(p->Clone());",
      "path": "src/script/descriptor.cpp",
      "position": 247,
      "original_position": 215,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "35db4f2dcfc3435e10935581ffa447ffe219cc1e",
      "in_reply_to_id": 2102052043,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is used for multipath descriptors, tests of which are added 2 commits later. We do not (and cannot) directly test the actual `DescriptorImpl` and `PubkeyProvider` classes; all of the unit tests start with a descriptor string that has to be parsed. The parsing is implemented in the next commit (because the `PubkeyProvider` it uses needs to exist before parsing can construct the object), and tests for everything in the following commit.",
      "created_at": "2025-05-22T18:09:58Z",
      "updated_at": "2025-05-22T18:13:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2103137795",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2103137795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 785,
      "original_line": 785,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2103139861",
      "pull_request_review_id": 2862159152,
      "id": 2103139861,
      "node_id": "PRRC_kwDOABII5859W14V",
      "diff_hunk": "@@ -580,6 +581,220 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else {\n+            if (!Assume(IsRangedParticipants())) return std::nullopt;\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        if (!Assume(pubout.IsValid())) return std::nullopt;\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);",
      "path": "src/script/descriptor.cpp",
      "position": 180,
      "original_position": 148,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "35db4f2dcfc3435e10935581ffa447ffe219cc1e",
      "in_reply_to_id": 2102121605,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find that harder to read. `for i` is used here because we need the position.",
      "created_at": "2025-05-22T18:11:03Z",
      "updated_at": "2025-05-22T18:11:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2103139861",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2103139861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 718,
      "original_line": 718,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2103140839",
      "pull_request_review_id": 2862161280,
      "id": 2103140839,
      "node_id": "PRRC_kwDOABII5859W2Hn",
      "diff_hunk": "@@ -580,6 +581,220 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it",
      "path": "src/script/descriptor.cpp",
      "position": 85,
      "original_position": 46,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "35db4f2dcfc3435e10935581ffa447ffe219cc1e",
      "in_reply_to_id": 2102178194,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In the next commit which implements parsing. Enforcement of the descriptor constraints is usually at the parsing level as it is not possible create these classes outside of the descriptor module.",
      "created_at": "2025-05-22T18:11:26Z",
      "updated_at": "2025-05-22T18:14:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2103140839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2103140839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 623,
      "original_line": 623,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2104017923",
      "pull_request_review_id": 2863524960,
      "id": 2104017923,
      "node_id": "PRRC_kwDOABII5859aMQD",
      "diff_hunk": "@@ -580,6 +581,220 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else {\n+            if (!Assume(IsRangedParticipants())) return std::nullopt;\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        if (!Assume(pubout.IsValid())) return std::nullopt;\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        if (!any_privkeys) out.clear();\n+        return any_privkeys;\n+    }\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const override\n+    {\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (!pubkey->ToNormalizedString(arg, tmp)) {\n+                return false;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return true;\n+    }\n+\n+    void GetPrivKey(int pos, const SigningProvider& arg, FlatSigningProvider& out) const override\n+    {\n+        // Get the private keys for any participants that we have\n+        // If there is participant derivation, it will be done.\n+        // If there is not, then the participant privkeys will be included directly\n+        for (const auto& prov : m_participants) {\n+            prov->GetPrivKey(pos, arg, out);\n+        }\n+    }\n+\n+    // Get RootPubKey and GetRootExtPubKey are used to return the single pubkey underlying the pubkey provider\n+    // to be presented to the user in gethdkeys. As this is a multisig construction, there is no single underlying\n+    // pubkey hence nothing should be returned.\n+    // While the aggregate pubkey could be returned as the root (ext)pubkey, it is not a pubkey that anyone should\n+    // be using by itself in a descriptor as it is unspendable without knowing its participants.\n+    std::optional<CPubKey> GetRootPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+    std::optional<CExtPubKey> GetRootExtPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+\n+    std::unique_ptr<PubkeyProvider> Clone() const override\n+    {\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers;\n+        providers.reserve(m_participants.size());\n+        for (const std::unique_ptr<PubkeyProvider>& p : m_participants) {\n+            providers.emplace_back(p->Clone());",
      "path": "src/script/descriptor.cpp",
      "position": 247,
      "original_position": 215,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "35db4f2dcfc3435e10935581ffa447ffe219cc1e",
      "in_reply_to_id": 2102052043,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just to clarify my initial comment: I can remove this loop _in the final version of this PR_ without breaking any test.",
      "created_at": "2025-05-23T07:45:09Z",
      "updated_at": "2025-05-23T07:45:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2104017923",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2104017923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 785,
      "original_line": 785,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2104022638",
      "pull_request_review_id": 2863532394,
      "id": 2104022638,
      "node_id": "PRRC_kwDOABII5859aNZu",
      "diff_hunk": "@@ -580,6 +581,220 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it",
      "path": "src/script/descriptor.cpp",
      "position": 85,
      "original_position": 46,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "35db4f2dcfc3435e10935581ffa447ffe219cc1e",
      "in_reply_to_id": 2102178194,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Being able to generate a (derived) descriptor without parsing is still on my wish list: https://github.com/bitcoin/bitcoin/issues/24003\r\n\r\nBut even in that case it could generate, convert to string and then re-parse as a sanity check.",
      "created_at": "2025-05-23T07:48:13Z",
      "updated_at": "2025-05-23T07:48:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2104022638",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2104022638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 623,
      "original_line": 623,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2104489088",
      "pull_request_review_id": 2864248620,
      "id": 2104489088,
      "node_id": "PRRC_kwDOABII5859b_SA",
      "diff_hunk": "@@ -12,6 +12,11 @@\n \n struct secp256k1_musig_keyagg_cache;\n \n+//! MuSig2 chaincode as defined by BIP 328\n+//! uint256 will byteswap the hex\n+using namespace util::hex_literals;\n+constexpr uint256 MUSIG_CHAINCODE{\"868087ca02a6f974c4598924c36b57762d32cb45717167e300622c7167e38965\"_hex_u8};",
      "path": "src/musig.h",
      "position": null,
      "original_position": 7,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "35db4f2dcfc3435e10935581ffa447ffe219cc1e",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit 35db4f2dcfc3435e10935581ffa447ffe219cc1e: the byteswap comment is obsolete now\r\n```suggestion\r\n//! MuSig2 chaincode as defined by BIP 328\r\nusing namespace util::hex_literals;\r\nconstexpr uint256 MUSIG_CHAINCODE{\"868087ca02a6f974c4598924c36b57762d32cb45717167e300622c7167e38965\"_hex_u8};\r\n```",
      "created_at": "2025-05-23T12:29:53Z",
      "updated_at": "2025-05-23T13:21:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2104489088",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2104489088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2104493385",
      "pull_request_review_id": 2864248620,
      "id": 2104493385,
      "node_id": "PRRC_kwDOABII5859cAVJ",
      "diff_hunk": "@@ -580,6 +581,220 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "35db4f2dcfc3435e10935581ffa447ffe219cc1e",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit 35db4f2dcfc3435e10935581ffa447ffe219cc1e: nit, could use the helper here:\r\n```suggestion\r\n            if (IsRangedDerivation() || !m_path.empty()) {\r\n```",
      "created_at": "2025-05-23T12:32:31Z",
      "updated_at": "2025-05-23T13:21:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2104493385",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2104493385"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 637,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2104518220",
      "pull_request_review_id": 2864248620,
      "id": 2104518220,
      "node_id": "PRRC_kwDOABII5859cGZM",
      "diff_hunk": "@@ -1653,7 +1658,7 @@ std::optional<uint32_t> ParseKeyPathNum(std::span<const char> elem, bool& apostr\n  * @param[in] allow_multipath Allows the parsed path to use the multipath specifier\n  * @returns false if parsing failed\n  **/\n-[[nodiscard]] bool ParseKeyPath(const std::vector<std::span<const char>>& split, std::vector<KeyPath>& out, bool& apostrophe, std::string& error, bool allow_multipath)\n+[[nodiscard]] bool ParseKeyPath(const std::vector<std::span<const char>>& split, std::vector<KeyPath>& out, bool& apostrophe, std::string& error, bool allow_multipath, bool allow_hardened = true)",
      "path": "src/script/descriptor.cpp",
      "position": 290,
      "original_position": 26,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "739f13986a49d8d7d5568ebcdd88665ea8423d42",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit 739f13986a49d8d7d5568ebcdd88665ea8423d42: could add a doxygen comment for the newly introduced parameter",
      "created_at": "2025-05-23T12:47:43Z",
      "updated_at": "2025-05-23T13:21:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2104518220",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2104518220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1660,
      "original_line": 1660,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2104576393",
      "pull_request_review_id": 2864248620,
      "id": 2104576393,
      "node_id": "PRRC_kwDOABII5859cUmJ",
      "diff_hunk": "@@ -1802,9 +1807,153 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)",
      "path": "src/script/descriptor.cpp",
      "position": 318,
      "original_position": 54,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "739f13986a49d8d7d5568ebcdd88665ea8423d42",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why is the `key_exp_index` parameter changed to pass by reference? Without that the unit tests fail, so it seems necessary, but I'm confused why this was not needed earlier already for similar constructs (e.g. for `multi()` expressions where the value is also incremented in the key expression parsing loop). Probably I'm missing some basic descriptors parsing knowledge.",
      "created_at": "2025-05-23T13:20:02Z",
      "updated_at": "2025-05-23T13:21:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2104576393",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2104576393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1810,
      "original_line": 1810,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2105211527",
      "pull_request_review_id": 2865366499,
      "id": 2105211527,
      "node_id": "PRRC_kwDOABII5859evqH",
      "diff_hunk": "@@ -1802,9 +1807,153 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)",
      "path": "src/script/descriptor.cpp",
      "position": 318,
      "original_position": 54,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "739f13986a49d8d7d5568ebcdd88665ea8423d42",
      "in_reply_to_id": 2104576393,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`musig()` expressions are a key expression, which itself contains multiple key expressions. It needs to be able to increment `key_exp_index` such that the caller will also know what the `key_exp_index` has been incremented to. The easiest way to do this was a reference.",
      "created_at": "2025-05-23T18:27:08Z",
      "updated_at": "2025-05-23T18:27:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2105211527",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2105211527"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1810,
      "original_line": 1810,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2105211725",
      "pull_request_review_id": 2865366773,
      "id": 2105211725,
      "node_id": "PRRC_kwDOABII5859evtN",
      "diff_hunk": "@@ -12,6 +12,11 @@\n \n struct secp256k1_musig_keyagg_cache;\n \n+//! MuSig2 chaincode as defined by BIP 328\n+//! uint256 will byteswap the hex\n+using namespace util::hex_literals;\n+constexpr uint256 MUSIG_CHAINCODE{\"868087ca02a6f974c4598924c36b57762d32cb45717167e300622c7167e38965\"_hex_u8};",
      "path": "src/musig.h",
      "position": null,
      "original_position": 7,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "35db4f2dcfc3435e10935581ffa447ffe219cc1e",
      "in_reply_to_id": 2104489088,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-05-23T18:27:18Z",
      "updated_at": "2025-05-23T18:27:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2105211725",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2105211725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2105211791",
      "pull_request_review_id": 2865366895,
      "id": 2105211791,
      "node_id": "PRRC_kwDOABII5859evuP",
      "diff_hunk": "@@ -580,6 +581,220 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "35db4f2dcfc3435e10935581ffa447ffe219cc1e",
      "in_reply_to_id": 2104493385,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-05-23T18:27:23Z",
      "updated_at": "2025-05-23T18:27:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2105211791",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2105211791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 637,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2105211849",
      "pull_request_review_id": 2865366978,
      "id": 2105211849,
      "node_id": "PRRC_kwDOABII5859evvJ",
      "diff_hunk": "@@ -1653,7 +1658,7 @@ std::optional<uint32_t> ParseKeyPathNum(std::span<const char> elem, bool& apostr\n  * @param[in] allow_multipath Allows the parsed path to use the multipath specifier\n  * @returns false if parsing failed\n  **/\n-[[nodiscard]] bool ParseKeyPath(const std::vector<std::span<const char>>& split, std::vector<KeyPath>& out, bool& apostrophe, std::string& error, bool allow_multipath)\n+[[nodiscard]] bool ParseKeyPath(const std::vector<std::span<const char>>& split, std::vector<KeyPath>& out, bool& apostrophe, std::string& error, bool allow_multipath, bool allow_hardened = true)",
      "path": "src/script/descriptor.cpp",
      "position": 290,
      "original_position": 26,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "739f13986a49d8d7d5568ebcdd88665ea8423d42",
      "in_reply_to_id": 2104518220,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-05-23T18:27:27Z",
      "updated_at": "2025-05-23T18:27:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2105211849",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2105211849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1660,
      "original_line": 1660,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2105280293",
      "pull_request_review_id": 2865482451,
      "id": 2105280293,
      "node_id": "PRRC_kwDOABII5859fAcl",
      "diff_hunk": "@@ -580,6 +581,220 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else {\n+            if (!Assume(IsRangedParticipants())) return std::nullopt;\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        if (!Assume(pubout.IsValid())) return std::nullopt;\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        if (!any_privkeys) out.clear();\n+        return any_privkeys;\n+    }\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const override\n+    {\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (!pubkey->ToNormalizedString(arg, tmp)) {\n+                return false;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return true;\n+    }\n+\n+    void GetPrivKey(int pos, const SigningProvider& arg, FlatSigningProvider& out) const override\n+    {\n+        // Get the private keys for any participants that we have\n+        // If there is participant derivation, it will be done.\n+        // If there is not, then the participant privkeys will be included directly\n+        for (const auto& prov : m_participants) {\n+            prov->GetPrivKey(pos, arg, out);\n+        }\n+    }\n+\n+    // Get RootPubKey and GetRootExtPubKey are used to return the single pubkey underlying the pubkey provider\n+    // to be presented to the user in gethdkeys. As this is a multisig construction, there is no single underlying\n+    // pubkey hence nothing should be returned.\n+    // While the aggregate pubkey could be returned as the root (ext)pubkey, it is not a pubkey that anyone should\n+    // be using by itself in a descriptor as it is unspendable without knowing its participants.\n+    std::optional<CPubKey> GetRootPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+    std::optional<CExtPubKey> GetRootExtPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+\n+    std::unique_ptr<PubkeyProvider> Clone() const override\n+    {\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers;\n+        providers.reserve(m_participants.size());\n+        for (const std::unique_ptr<PubkeyProvider>& p : m_participants) {\n+            providers.emplace_back(p->Clone());",
      "path": "src/script/descriptor.cpp",
      "position": 247,
      "original_position": 215,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "35db4f2dcfc3435e10935581ffa447ffe219cc1e",
      "in_reply_to_id": 2102052043,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah. I've added a test which exercises this code.",
      "created_at": "2025-05-23T19:19:36Z",
      "updated_at": "2025-05-23T19:19:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2105280293",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2105280293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 785,
      "original_line": 785,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107645746",
      "pull_request_review_id": 2868881729,
      "id": 2107645746,
      "node_id": "PRRC_kwDOABII5859oB8y",
      "diff_hunk": "@@ -580,6 +581,220 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it",
      "path": "src/script/descriptor.cpp",
      "position": 85,
      "original_position": 46,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "35db4f2dcfc3435e10935581ffa447ffe219cc1e",
      "in_reply_to_id": 2102178194,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I assume that if the participants are ranged, then you can't also have a range after derivation, e.g. musig(alice/\\*, bob)/\\* isn't allowed. Where do we check this?\r\n\r\n> In the next commit which implements parsing. Enforcement of the descriptor constraints is usually at the parsing level as it is not possible create these classes outside of the descriptor module.\r\n\r\nAs an additional belt-and-suspenders and documentation, would a corresponding assertion (or `Assume`) in the MuSig2PubkeyProvider ctor make sense? E.g. something like\r\n```diff\r\ndiff --git a/src/script/descriptor.cpp b/src/script/descriptor.cpp\r\nindex 04ba832ffc..92dcf73755 100644\r\n--- a/src/script/descriptor.cpp\r\n+++ b/src/script/descriptor.cpp\r\n@@ -611,7 +611,10 @@ public:\r\n         m_participants(std::move(providers)),\r\n         m_path(std::move(path)),\r\n         m_derive(derive)\r\n-    {}\r\n+    {\r\n+        /* if participants are already ranged, further derivation after pubkey aggregation isn't allowed */\r\n+        Assert(!(IsRangedParticipants() && IsRangedDerivation()));\r\n+    }\r\n \r\n     std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\r\n     {\r\n```",
      "created_at": "2025-05-26T16:45:10Z",
      "updated_at": "2025-05-26T16:45:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2107645746",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107645746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 623,
      "original_line": 623,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107649960",
      "pull_request_review_id": 2868887368,
      "id": 2107649960,
      "node_id": "PRRC_kwDOABII5859oC-o",
      "diff_hunk": "@@ -1802,9 +1807,153 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)",
      "path": "src/script/descriptor.cpp",
      "position": 318,
      "original_position": 54,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "739f13986a49d8d7d5568ebcdd88665ea8423d42",
      "in_reply_to_id": 2104576393,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That makes sense. I only realize now that I was talking about code paths in two different functions (`ParsePubkey` vs `ParseScript`; for the latter the `key_exp_index` argument was already passed by reference).",
      "created_at": "2025-05-26T16:50:18Z",
      "updated_at": "2025-05-26T16:50:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2107649960",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107649960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1810,
      "original_line": 1810,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107728700",
      "pull_request_review_id": 2868994393,
      "id": 2107728700,
      "node_id": "PRRC_kwDOABII5859oWM8",
      "diff_hunk": "@@ -580,6 +581,220 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it",
      "path": "src/script/descriptor.cpp",
      "position": 85,
      "original_position": 46,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "35db4f2dcfc3435e10935581ffa447ffe219cc1e",
      "in_reply_to_id": 2102178194,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added an `Assume`.",
      "created_at": "2025-05-26T18:28:54Z",
      "updated_at": "2025-05-26T18:28:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2107728700",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107728700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 623,
      "original_line": 623,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109115291",
      "pull_request_review_id": 2870961667,
      "id": 2109115291,
      "node_id": "PRRC_kwDOABII5859toub",
      "diff_hunk": "@@ -574,6 +581,224 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {\n+        if (!Assume(!(IsRangedParticipants() && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participatns and ranged derivation\");",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 78,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "e1475cbd0d477cd8e04348e839dbc3dff1374a44",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\r\n    participatns -> participants [correct misspelling in error message]\r\n",
      "created_at": "2025-05-27T12:54:54Z",
      "updated_at": "2025-05-27T12:54:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2109115291",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109115291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 616,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109683327",
      "pull_request_review_id": 2871820534,
      "id": 2109683327,
      "node_id": "PRRC_kwDOABII5859vzZ_",
      "diff_hunk": "@@ -580,6 +581,224 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {\n+        if (!Assume(!(IsRangedParticipants() && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participatns and ranged derivation\");\n+        }\n+    }\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (IsRangedDerivation() || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else {\n+            if (!Assume(IsRangedParticipants())) return std::nullopt;\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        if (!Assume(pubout.IsValid())) return std::nullopt;\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 138,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "ff7476ec32f4dbee07bf04169e741e2aea5a9ab7",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit ff7476ec32f4dbee07bf04169e741e2aea5a9ab7: can't this be simplified to\r\n```suggestion\r\n            out += pubkey->ToString(type);\r\n```\r\n? It's a bit confusing that there are two `StringType` enum classes within different classes, (`PubkeyProvider::StringType` and `DescriptorImpl::StringType`), but the code here seems to deal only with the former. I guess whether the diff makes sense or not depends on if it's possible in the future that the default arguments for pubkey providers `ToString(...)` method is ever changed from `StringType::PUBLIC` to something else. The unit tests still seem to pass at least.",
      "created_at": "2025-05-27T16:44:37Z",
      "updated_at": "2025-05-27T17:26:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2109683327",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109683327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 701,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 710,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109851713",
      "pull_request_review_id": 2872078210,
      "id": 2109851713,
      "node_id": "PRRC_kwDOABII5859wchB",
      "diff_hunk": "@@ -574,6 +581,224 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {\n+        if (!Assume(!(IsRangedParticipants() && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participatns and ranged derivation\");",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 78,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "e1475cbd0d477cd8e04348e839dbc3dff1374a44",
      "in_reply_to_id": 2109115291,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed",
      "created_at": "2025-05-27T18:13:35Z",
      "updated_at": "2025-05-27T18:13:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2109851713",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109851713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 616,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109851898",
      "pull_request_review_id": 2872078461,
      "id": 2109851898,
      "node_id": "PRRC_kwDOABII5859wcj6",
      "diff_hunk": "@@ -580,6 +581,224 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {\n+        if (!Assume(!(IsRangedParticipants() && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participatns and ranged derivation\");\n+        }\n+    }\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (IsRangedDerivation() || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else {\n+            if (!Assume(IsRangedParticipants())) return std::nullopt;\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        if (!Assume(pubout.IsValid())) return std::nullopt;\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 138,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "ff7476ec32f4dbee07bf04169e741e2aea5a9ab7",
      "in_reply_to_id": 2109683327,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point, done.",
      "created_at": "2025-05-27T18:13:42Z",
      "updated_at": "2025-05-27T18:13:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2109851898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2109851898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 701,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 710,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123695013",
      "pull_request_review_id": 2892172589,
      "id": 2123695013,
      "node_id": "PRRC_kwDOABII585-lQOl",
      "diff_hunk": "@@ -580,6 +581,215 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "16a88829e92c2676cae6b6e0acb75d2d26795a6d",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit 16a88829e92c2676cae6b6e0acb75d2d26795a6d:\r\n```suggestion\r\n    //! Derivation path\r\n    const KeyPath m_path;\r\n```\r\nas using non-ranged derivation is also possible (e.g. `musig(...)/1`, we also have a [test for that](https://github.com/achow101/bitcoin/blob/afcd397bc791d047508adb9d151d21384d7b49e3/src/test/descriptor_tests.cpp#L1118)); the BIP 390 specification can be interpreted in a way that only ranged derivation is possible though (https://github.com/bitcoin/bips/blob/master/bip-0390.mediawiki#user-content-Specification), maybe something that could be improved there?",
      "created_at": "2025-06-03T12:42:37Z",
      "updated_at": "2025-06-03T13:27:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2123695013",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123695013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 590,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 591,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123760984",
      "pull_request_review_id": 2892172589,
      "id": 2123760984,
      "node_id": "PRRC_kwDOABII585-lgVY",
      "diff_hunk": "@@ -1797,9 +1803,159 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> sp_musig(split.at(0).begin(), split.at(0).end());\n+\n+        auto expr = Expr(sp_musig);\n+        if (!Func(\"musig\", expr)) {",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 81,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "9e3a1d05bf066df31a6e124638046e70669eb470",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit 9e3a1d05bf066df31a6e124638046e70669eb470: nit: the `Expr` call seems to be a no-op here, considering that we already extracted the function expression with the parens-splitting above\r\n```suggestion\r\n        std::span<const char> expr(split.at(0).begin(), split.at(0).end());\r\n        if (!Func(\"musig\", expr)) {\r\n```\r\n\r\n",
      "created_at": "2025-06-03T13:07:49Z",
      "updated_at": "2025-06-03T13:27:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2123760984",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123760984"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 1828,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1832,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123779414",
      "pull_request_review_id": 2892172589,
      "id": 2123779414,
      "node_id": "PRRC_kwDOABII585-lk1W",
      "diff_hunk": "@@ -1797,9 +1803,159 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> sp_musig(split.at(0).begin(), split.at(0).end());\n+\n+        auto expr = Expr(sp_musig);\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }\n+\n+            any_ranged |= pk.at(0)->IsRange();\n+            all_bip32 &= pk.at(0)->IsBIP32();\n+\n+            max_providers_len = std::max(max_providers_len, pk.size());\n+\n+            providers.emplace_back(std::move(pk));\n+            key_exp_index++;\n+        }\n+        if (first) {\n+            error = \"musig(): Must contain key expressions\";\n+            return {};\n+        }\n+\n+        // Parse any derivation\n+        DeriveType deriv_type = DeriveType::NO;\n+        std::vector<KeyPath> paths;\n+        if (split.size() == 2 && Const(\"/\", split.at(1), /*skip=*/false)) {\n+            if (!all_bip32) {\n+                error = \"musig(): Ranged musig() requires all participants to be xpubs\";",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 129,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "9e3a1d05bf066df31a6e124638046e70669eb470",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit 9e3a1d05bf066df31a6e124638046e70669eb470: should this be \r\n```suggestion\r\n            if (!all_bip32) {\r\n                error = \"musig(): musig() derivation requires all participants to be xpubs\";\r\n```\r\ninstead? Ranged would mean ending with `/*` IIUC, which is not necessarily the case.\r\n",
      "created_at": "2025-06-03T13:15:37Z",
      "updated_at": "2025-06-03T13:27:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2123779414",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123779414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 1878,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1879,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123808039",
      "pull_request_review_id": 2892172589,
      "id": 2123808039,
      "node_id": "PRRC_kwDOABII585-lr0n",
      "diff_hunk": "@@ -1797,9 +1803,159 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> sp_musig(split.at(0).begin(), split.at(0).end());\n+\n+        auto expr = Expr(sp_musig);\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }",
      "path": "src/script/descriptor.cpp",
      "position": 368,
      "original_position": 109,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "9e3a1d05bf066df31a6e124638046e70669eb470",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in commit 9e3a1d05bf066df31a6e124638046e70669eb470: nit: A more thorough check would be to detect duplicates of actual resulting pubkeys, rather than only the expression strings (i.e. for a keypair `(priv,pub)`, the expression `musig(priv,pub)` would now still be valid).",
      "created_at": "2025-06-03T13:25:30Z",
      "updated_at": "2025-06-03T13:27:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2123808039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123808039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": 1856,
      "original_start_line": 1855,
      "start_side": "RIGHT",
      "line": 1860,
      "original_line": 1860,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2124891874",
      "pull_request_review_id": 2894064140,
      "id": 2124891874,
      "node_id": "PRRC_kwDOABII585-p0bi",
      "diff_hunk": "@@ -1797,9 +1803,159 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> sp_musig(split.at(0).begin(), split.at(0).end());\n+\n+        auto expr = Expr(sp_musig);\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }",
      "path": "src/script/descriptor.cpp",
      "position": 368,
      "original_position": 109,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "9e3a1d05bf066df31a6e124638046e70669eb470",
      "in_reply_to_id": 2123808039,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Checking for duplicates is actually a bit more complicated, and I'm thinking now that it would probably be easier to allow duplicates.\r\n\r\nThere are some scenarios where I think it's ambiguous whether they should be allowed. For example, would `musig(xpub/1,xpub/*)` be allowed? The same pubkey would appear twice for exactly one index.",
      "created_at": "2025-06-03T20:43:35Z",
      "updated_at": "2025-06-03T20:43:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2124891874",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2124891874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": 1856,
      "original_start_line": 1855,
      "start_side": "RIGHT",
      "line": 1860,
      "original_line": 1860,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2124941224",
      "pull_request_review_id": 2894138969,
      "id": 2124941224,
      "node_id": "PRRC_kwDOABII585-qAeo",
      "diff_hunk": "@@ -580,6 +581,215 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "16a88829e92c2676cae6b6e0acb75d2d26795a6d",
      "in_reply_to_id": 2123695013,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-06-03T21:14:37Z",
      "updated_at": "2025-06-03T21:14:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2124941224",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2124941224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 590,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 591,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2124941299",
      "pull_request_review_id": 2894139100,
      "id": 2124941299,
      "node_id": "PRRC_kwDOABII585-qAfz",
      "diff_hunk": "@@ -1797,9 +1803,159 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> sp_musig(split.at(0).begin(), split.at(0).end());\n+\n+        auto expr = Expr(sp_musig);\n+        if (!Func(\"musig\", expr)) {",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 81,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "9e3a1d05bf066df31a6e124638046e70669eb470",
      "in_reply_to_id": 2123760984,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-06-03T21:14:41Z",
      "updated_at": "2025-06-03T21:14:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2124941299",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2124941299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 1828,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1832,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2124941401",
      "pull_request_review_id": 2894139259,
      "id": 2124941401,
      "node_id": "PRRC_kwDOABII585-qAhZ",
      "diff_hunk": "@@ -1797,9 +1803,159 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> sp_musig(split.at(0).begin(), split.at(0).end());\n+\n+        auto expr = Expr(sp_musig);\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }\n+\n+            any_ranged |= pk.at(0)->IsRange();\n+            all_bip32 &= pk.at(0)->IsBIP32();\n+\n+            max_providers_len = std::max(max_providers_len, pk.size());\n+\n+            providers.emplace_back(std::move(pk));\n+            key_exp_index++;\n+        }\n+        if (first) {\n+            error = \"musig(): Must contain key expressions\";\n+            return {};\n+        }\n+\n+        // Parse any derivation\n+        DeriveType deriv_type = DeriveType::NO;\n+        std::vector<KeyPath> paths;\n+        if (split.size() == 2 && Const(\"/\", split.at(1), /*skip=*/false)) {\n+            if (!all_bip32) {\n+                error = \"musig(): Ranged musig() requires all participants to be xpubs\";",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 129,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "9e3a1d05bf066df31a6e124638046e70669eb470",
      "in_reply_to_id": 2123779414,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-06-03T21:14:46Z",
      "updated_at": "2025-06-03T21:14:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2124941401",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2124941401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 1878,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1879,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2125949575",
      "pull_request_review_id": 2895704122,
      "id": 2125949575,
      "node_id": "PRRC_kwDOABII585-t2qH",
      "diff_hunk": "@@ -1797,9 +1803,159 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> sp_musig(split.at(0).begin(), split.at(0).end());\n+\n+        auto expr = Expr(sp_musig);\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }",
      "path": "src/script/descriptor.cpp",
      "position": 368,
      "original_position": 109,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "9e3a1d05bf066df31a6e124638046e70669eb470",
      "in_reply_to_id": 2123808039,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You could also be more strict and disallow any duplicate non-hardened path. Or even duplicate origin fingerprint.\r\n\r\nThe bigger problem may be that whatever we choose might be slightly different than what implementations do. So we should probably change the descriptor standard to pick an extreme on either side: allow duplicate keys or more thorowly prevent them.",
      "created_at": "2025-06-04T07:59:56Z",
      "updated_at": "2025-06-04T07:59:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2125949575",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2125949575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": 1856,
      "original_start_line": 1855,
      "start_side": "RIGHT",
      "line": 1860,
      "original_line": 1860,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126630415",
      "pull_request_review_id": 2896780371,
      "id": 2126630415,
      "node_id": "PRRC_kwDOABII585-wc4P",
      "diff_hunk": "@@ -1797,9 +1803,157 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "8a2dc4662c816dcf7c845f55f69dbcd5c7267a66",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```diff\r\n- \"musig() is only allowed in tr()\"\r\n+ \"musig() is allowed in only tr() and rawtr()\"\r\n```",
      "created_at": "2025-06-04T13:38:09Z",
      "updated_at": "2025-06-04T14:32:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2126630415",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126630415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1817,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126634254",
      "pull_request_review_id": 2896780371,
      "id": 2126634254,
      "node_id": "PRRC_kwDOABII585-wd0O",
      "diff_hunk": "@@ -1797,9 +1803,157 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> expr(split.at(0).begin(), split.at(0).end());\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }\n+\n+            any_ranged |= pk.at(0)->IsRange();\n+            all_bip32 &= pk.at(0)->IsBIP32();\n+\n+            max_providers_len = std::max(max_providers_len, pk.size());\n+\n+            providers.emplace_back(std::move(pk));\n+            key_exp_index++;\n+        }\n+        if (first) {\n+            error = \"musig(): Must contain key expressions\";\n+            return {};\n+        }\n+\n+        // Parse any derivation\n+        DeriveType deriv_type = DeriveType::NO;\n+        std::vector<KeyPath> paths;\n+        if (split.size() == 2 && Const(\"/\", split.at(1), /*skip=*/false)) {\n+            if (!all_bip32) {\n+                error = \"musig(): musig() derivation requires all participants to be xpubs\";",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 127,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "8a2dc4662c816dcf7c845f55f69dbcd5c7267a66",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```diff\r\n- musig(): musig() derivation requires all participants to be xpubs\r\n+ musig(): derivation requires all participants to be xpubs or xprvs\r\n```",
      "created_at": "2025-06-04T13:39:58Z",
      "updated_at": "2025-06-04T14:30:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2126634254",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126634254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1877,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126642131",
      "pull_request_review_id": 2896780371,
      "id": 2126642131,
      "node_id": "PRRC_kwDOABII585-wfvT",
      "diff_hunk": "@@ -1797,9 +1803,157 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> expr(split.at(0).begin(), split.at(0).end());\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }\n+\n+            any_ranged |= pk.at(0)->IsRange();\n+            all_bip32 &= pk.at(0)->IsBIP32();",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 110,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "8a2dc4662c816dcf7c845f55f69dbcd5c7267a66",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Bitwise operations on bools, sorry to be the one raising this multiple times. :)",
      "created_at": "2025-06-04T13:43:17Z",
      "updated_at": "2025-06-04T14:30:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2126642131",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126642131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 1859,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1860,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126663894",
      "pull_request_review_id": 2896780371,
      "id": 2126663894,
      "node_id": "PRRC_kwDOABII585-wlDW",
      "diff_hunk": "@@ -1797,9 +1803,159 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> sp_musig(split.at(0).begin(), split.at(0).end());\n+\n+        auto expr = Expr(sp_musig);\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }",
      "path": "src/script/descriptor.cpp",
      "position": 368,
      "original_position": 109,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "9e3a1d05bf066df31a6e124638046e70669eb470",
      "in_reply_to_id": 2123808039,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> There are some scenarios where I think it's ambiguous whether they should be allowed.\r\n\r\n\"Repeated participant public keys are not allowed. The aggregate public key is produced by using the KeyAgg algorithm on all KEYs specified in the expression after performing all specified derivation.\"\r\n\r\nThe current language^ in [BIP 390](https://github.com/bitcoin/bips/blob/master/bip-0390.mediawiki) gives me an impression that the public key derived from the KEY expression should not be repeated that subsequently leads me to believe that the current check, which operates on string key expressions, is brittle.\r\n\r\n> So we should probably change the descriptor standard to pick an extreme on either side\r\n\r\nAgree, picking a side will lead to certainty.",
      "created_at": "2025-06-04T13:52:35Z",
      "updated_at": "2025-06-04T14:30:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2126663894",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126663894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": 1856,
      "original_start_line": 1855,
      "start_side": "RIGHT",
      "line": 1860,
      "original_line": 1860,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126684020",
      "pull_request_review_id": 2896780371,
      "id": 2126684020,
      "node_id": "PRRC_kwDOABII585-wp90",
      "diff_hunk": "@@ -1797,9 +1803,157 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> expr(split.at(0).begin(), split.at(0).end());\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }\n+\n+            any_ranged |= pk.at(0)->IsRange();\n+            all_bip32 &= pk.at(0)->IsBIP32();\n+\n+            max_providers_len = std::max(max_providers_len, pk.size());\n+\n+            providers.emplace_back(std::move(pk));\n+            key_exp_index++;\n+        }\n+        if (first) {\n+            error = \"musig(): Must contain key expressions\";\n+            return {};\n+        }\n+\n+        // Parse any derivation\n+        DeriveType deriv_type = DeriveType::NO;\n+        std::vector<KeyPath> paths;\n+        if (split.size() == 2 && Const(\"/\", split.at(1), /*skip=*/false)) {\n+            if (!all_bip32) {\n+                error = \"musig(): musig() derivation requires all participants to be xpubs\";\n+                return {};\n+            }\n+            auto deriv_split = Split(split.at(1), '/');\n+            if (std::ranges::equal(deriv_split.back(), std::span{\"*\"}.first(1))) {\n+                deriv_split.pop_back();\n+                deriv_type = DeriveType::UNHARDENED;\n+                if (any_ranged) {\n+                    error = \"musig(): Cannot have ranged participant keys if musig() is also ranged\";\n+                    return {};\n+                }\n+            } else if (std::ranges::equal(deriv_split.back(), std::span{\"*'\"}.first(2)) || std::ranges::equal(deriv_split.back(), std::span{\"*h\"}.first(2))) {\n+                error = \"musig(): Cannot have hardened child derivation\";\n+                return {};\n+            }\n+            bool dummy = false;\n+            if (!ParseKeyPath(deriv_split, paths, dummy, error, /*allow_multipath=*/true, /*allow_hardened=*/false)) {\n+                error = \"musig(): \" + error;\n+                return {};\n+            }\n+        } else {\n+            paths.emplace_back();\n+        }\n+\n+        // Makes sure that all providers vectors in providers are the given length, or exactly length 1\n+        // Length 1 vectors have the single provider cloned until it matches the given length.\n+        const auto& clone_providers = [&providers](size_t length) -> bool {\n+            for (auto& vec : providers) {\n+                if (vec.size() == 1) {\n+                    for (size_t i = 1; i < length; ++i) {\n+                        vec.emplace_back(vec.at(0)->Clone());\n+                    }\n+                } else if (vec.size() != length) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        };\n+\n+        // Emplace the final MuSigPubkeyProvider into ret with the pubkey providers from the specified provider vectors index\n+        // and the path from the specified path index\n+        const auto& emplace_final_provider = [&ret, &key_exp_index, &deriv_type, &paths, &providers](size_t vec_idx, size_t path_idx) -> void {\n+            KeyPath& path = paths.at(path_idx);\n+            std::vector<std::unique_ptr<PubkeyProvider>> pubs;\n+            pubs.reserve(providers.size());\n+            for (auto& vec : providers) {\n+                pubs.emplace_back(std::move(vec.at(vec_idx)));\n+            }\n+            ret.emplace_back(std::make_unique<MuSigPubkeyProvider>(key_exp_index, std::move(pubs), path, deriv_type));\n+        };\n+\n+        if (max_providers_len > 1 && paths.size() > 1) {\n+            error = \"musig(): Cannot have multipath participant keys if musig() is also multipath\";",
      "path": "src/script/descriptor.cpp",
      "position": 440,
      "original_position": 179,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "8a2dc4662c816dcf7c845f55f69dbcd5c7267a66",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Currently, [BIP 390](https://github.com/bitcoin/bips/blob/master/bip-0390.mediawiki) doesn't have a mention of multipath participant keys. As per [BIP 389](https://github.com/bitcoin/bips/blob/master/bip-0389.mediawiki):\r\n\r\n> Descriptors that contain multiple Key Expressions that each have a /<NUM;NUM;...;NUM> must have tuples of exactly the same length so that they are derived in lockstep in the same way that /* paths in multiple Key expressions are handled.\r\n\r\nBy using this lockstep approach, I believe technically multipath derivations for musig can be done. Is it not allowed because it doesn't seem as needed? ",
      "created_at": "2025-06-04T14:00:54Z",
      "updated_at": "2025-06-04T14:30:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2126684020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126684020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1932,
      "original_line": 1932,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126695356",
      "pull_request_review_id": 2896780371,
      "id": 2126695356,
      "node_id": "PRRC_kwDOABII585-wsu8",
      "diff_hunk": "@@ -580,6 +581,215 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "66f5405f5fad08231b06115a06c52c7267a2ca4e",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`IsRangedParticipants` is called multiple times in this class, can evaluate it once in the constructor itself and store the result in a const because I don't suppose a `MuSigPubkeyProvider` is updated with more `m_participants` after creation.",
      "created_at": "2025-06-04T14:06:01Z",
      "updated_at": "2025-06-04T14:33:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2126695356",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126695356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 598,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 601,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126700491",
      "pull_request_review_id": 2896780371,
      "id": 2126700491,
      "node_id": "PRRC_kwDOABII585-wt_L",
      "diff_hunk": "@@ -580,6 +581,215 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive",
      "path": "src/script/descriptor.cpp",
      "position": 67,
      "original_position": 36,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "66f5405f5fad08231b06115a06c52c7267a2ca4e",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can add `Assume` and throw if the derivation type is hardened, it's not allowed because IIUC, `m_derive` refers to the derivation type of this musig provider only.",
      "created_at": "2025-06-04T14:08:10Z",
      "updated_at": "2025-06-04T14:30:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2126700491",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126700491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 605,
      "original_line": 605,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126702224",
      "pull_request_review_id": 2896780371,
      "id": 2126702224,
      "node_id": "PRRC_kwDOABII585-wuaQ",
      "diff_hunk": "@@ -580,6 +581,215 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {\n+        if (!Assume(!(IsRangedParticipants() && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+    }\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (IsRangedDerivation() || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "66f5405f5fad08231b06115a06c52c7267a2ca4e",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```diff\r\n- Either way, we can passthrough to it's GetPubKey\r\n+ Either way, we can passthrough to its GetPubKey\r\n```",
      "created_at": "2025-06-04T14:08:55Z",
      "updated_at": "2025-06-04T14:30:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2126702224",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126702224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 668,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126734205",
      "pull_request_review_id": 2896780371,
      "id": 2126734205,
      "node_id": "PRRC_kwDOABII585-w2N9",
      "diff_hunk": "@@ -580,6 +581,215 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {\n+        if (!Assume(!(IsRangedParticipants() && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+    }\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (IsRangedDerivation() || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "66f5405f5fad08231b06115a06c52c7267a2ca4e",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: The calculation of aggregate public key & its provider can be done in the constructor itself unless it's anticipated that for some reason dummy MuSigPubkeyProviders will be used later.",
      "created_at": "2025-06-04T14:20:54Z",
      "updated_at": "2025-06-04T14:30:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2126734205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126734205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 623,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 655,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126952270",
      "pull_request_review_id": 2897310198,
      "id": 2126952270,
      "node_id": "PRRC_kwDOABII585-xrdO",
      "diff_hunk": "@@ -1797,9 +1803,159 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> sp_musig(split.at(0).begin(), split.at(0).end());\n+\n+        auto expr = Expr(sp_musig);\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }",
      "path": "src/script/descriptor.cpp",
      "position": 368,
      "original_position": 109,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "9e3a1d05bf066df31a6e124638046e70669eb470",
      "in_reply_to_id": 2123808039,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> allow duplicate keys or more thorowly prevent them.\r\n\r\nYes, I've suggest to the [mailing list](https://groups.google.com/g/bitcoindev/c/SSpyvbD9CMg) that we should allow the duplicate keys. Still checking with cryptographers that that will be okay, particularly since PSBT doesn't allow duplicate participants to use different pubnonces and partial sigs.",
      "created_at": "2025-06-04T15:59:25Z",
      "updated_at": "2025-06-04T15:59:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2126952270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126952270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": 1856,
      "original_start_line": 1855,
      "start_side": "RIGHT",
      "line": 1860,
      "original_line": 1860,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127435207",
      "pull_request_review_id": 2898097424,
      "id": 2127435207,
      "node_id": "PRRC_kwDOABII585-zhXH",
      "diff_hunk": "@@ -1797,9 +1803,157 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> expr(split.at(0).begin(), split.at(0).end());\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }\n+\n+            any_ranged |= pk.at(0)->IsRange();\n+            all_bip32 &= pk.at(0)->IsBIP32();\n+\n+            max_providers_len = std::max(max_providers_len, pk.size());\n+\n+            providers.emplace_back(std::move(pk));\n+            key_exp_index++;\n+        }\n+        if (first) {\n+            error = \"musig(): Must contain key expressions\";\n+            return {};\n+        }\n+\n+        // Parse any derivation\n+        DeriveType deriv_type = DeriveType::NO;\n+        std::vector<KeyPath> paths;\n+        if (split.size() == 2 && Const(\"/\", split.at(1), /*skip=*/false)) {\n+            if (!all_bip32) {\n+                error = \"musig(): musig() derivation requires all participants to be xpubs\";\n+                return {};\n+            }\n+            auto deriv_split = Split(split.at(1), '/');\n+            if (std::ranges::equal(deriv_split.back(), std::span{\"*\"}.first(1))) {\n+                deriv_split.pop_back();\n+                deriv_type = DeriveType::UNHARDENED;\n+                if (any_ranged) {\n+                    error = \"musig(): Cannot have ranged participant keys if musig() is also ranged\";\n+                    return {};\n+                }\n+            } else if (std::ranges::equal(deriv_split.back(), std::span{\"*'\"}.first(2)) || std::ranges::equal(deriv_split.back(), std::span{\"*h\"}.first(2))) {\n+                error = \"musig(): Cannot have hardened child derivation\";\n+                return {};\n+            }\n+            bool dummy = false;\n+            if (!ParseKeyPath(deriv_split, paths, dummy, error, /*allow_multipath=*/true, /*allow_hardened=*/false)) {\n+                error = \"musig(): \" + error;\n+                return {};\n+            }\n+        } else {\n+            paths.emplace_back();\n+        }\n+\n+        // Makes sure that all providers vectors in providers are the given length, or exactly length 1\n+        // Length 1 vectors have the single provider cloned until it matches the given length.\n+        const auto& clone_providers = [&providers](size_t length) -> bool {\n+            for (auto& vec : providers) {\n+                if (vec.size() == 1) {\n+                    for (size_t i = 1; i < length; ++i) {\n+                        vec.emplace_back(vec.at(0)->Clone());\n+                    }\n+                } else if (vec.size() != length) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        };\n+\n+        // Emplace the final MuSigPubkeyProvider into ret with the pubkey providers from the specified provider vectors index\n+        // and the path from the specified path index\n+        const auto& emplace_final_provider = [&ret, &key_exp_index, &deriv_type, &paths, &providers](size_t vec_idx, size_t path_idx) -> void {\n+            KeyPath& path = paths.at(path_idx);\n+            std::vector<std::unique_ptr<PubkeyProvider>> pubs;\n+            pubs.reserve(providers.size());\n+            for (auto& vec : providers) {\n+                pubs.emplace_back(std::move(vec.at(vec_idx)));\n+            }\n+            ret.emplace_back(std::make_unique<MuSigPubkeyProvider>(key_exp_index, std::move(pubs), path, deriv_type));\n+        };\n+\n+        if (max_providers_len > 1 && paths.size() > 1) {\n+            error = \"musig(): Cannot have multipath participant keys if musig() is also multipath\";",
      "path": "src/script/descriptor.cpp",
      "position": 440,
      "original_position": 179,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "8a2dc4662c816dcf7c845f55f69dbcd5c7267a66",
      "in_reply_to_id": 2126684020,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since multipath is similar to ranged expansion, I've applied the same restrictions that are on ranged to multipath as well. I suppose this should be mentioned in the BIP.",
      "created_at": "2025-06-04T21:02:45Z",
      "updated_at": "2025-06-04T21:02:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2127435207",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127435207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1932,
      "original_line": 1932,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127464652",
      "pull_request_review_id": 2898145044,
      "id": 2127464652,
      "node_id": "PRRC_kwDOABII585-zojM",
      "diff_hunk": "@@ -580,6 +581,215 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {\n+        if (!Assume(!(IsRangedParticipants() && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+    }\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (IsRangedDerivation() || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "66f5405f5fad08231b06115a06c52c7267a2ca4e",
      "in_reply_to_id": 2126734205,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's deferred to `GetPubKey` as the participants may involve hardened derivation which requires private keys that the constructor doesn't have access to.",
      "created_at": "2025-06-04T21:22:48Z",
      "updated_at": "2025-06-04T21:22:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2127464652",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127464652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 623,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 655,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127475291",
      "pull_request_review_id": 2898161838,
      "id": 2127475291,
      "node_id": "PRRC_kwDOABII585-zrJb",
      "diff_hunk": "@@ -1797,9 +1803,157 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "8a2dc4662c816dcf7c845f55f69dbcd5c7267a66",
      "in_reply_to_id": 2126630415,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-06-04T21:31:43Z",
      "updated_at": "2025-06-04T21:31:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2127475291",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127475291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1817,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127475367",
      "pull_request_review_id": 2898161937,
      "id": 2127475367,
      "node_id": "PRRC_kwDOABII585-zrKn",
      "diff_hunk": "@@ -1797,9 +1803,157 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> expr(split.at(0).begin(), split.at(0).end());\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }\n+\n+            any_ranged |= pk.at(0)->IsRange();\n+            all_bip32 &= pk.at(0)->IsBIP32();\n+\n+            max_providers_len = std::max(max_providers_len, pk.size());\n+\n+            providers.emplace_back(std::move(pk));\n+            key_exp_index++;\n+        }\n+        if (first) {\n+            error = \"musig(): Must contain key expressions\";\n+            return {};\n+        }\n+\n+        // Parse any derivation\n+        DeriveType deriv_type = DeriveType::NO;\n+        std::vector<KeyPath> paths;\n+        if (split.size() == 2 && Const(\"/\", split.at(1), /*skip=*/false)) {\n+            if (!all_bip32) {\n+                error = \"musig(): musig() derivation requires all participants to be xpubs\";",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 127,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "8a2dc4662c816dcf7c845f55f69dbcd5c7267a66",
      "in_reply_to_id": 2126634254,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-06-04T21:31:47Z",
      "updated_at": "2025-06-04T21:31:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2127475367",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127475367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1877,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127475461",
      "pull_request_review_id": 2898162330,
      "id": 2127475461,
      "node_id": "PRRC_kwDOABII585-zrMF",
      "diff_hunk": "@@ -1797,9 +1803,157 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> expr(split.at(0).begin(), split.at(0).end());\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }\n+\n+            any_ranged |= pk.at(0)->IsRange();\n+            all_bip32 &= pk.at(0)->IsBIP32();",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 110,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "8a2dc4662c816dcf7c845f55f69dbcd5c7267a66",
      "in_reply_to_id": 2126642131,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-06-04T21:31:51Z",
      "updated_at": "2025-06-04T21:31:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2127475461",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127475461"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 1859,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1860,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127475603",
      "pull_request_review_id": 2898162701,
      "id": 2127475603,
      "node_id": "PRRC_kwDOABII585-zrOT",
      "diff_hunk": "@@ -580,6 +581,215 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "66f5405f5fad08231b06115a06c52c7267a2ca4e",
      "in_reply_to_id": 2126695356,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-06-04T21:31:57Z",
      "updated_at": "2025-06-04T21:31:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2127475603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127475603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 598,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 601,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127475727",
      "pull_request_review_id": 2898163054,
      "id": 2127475727,
      "node_id": "PRRC_kwDOABII585-zrQP",
      "diff_hunk": "@@ -580,6 +581,215 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive",
      "path": "src/script/descriptor.cpp",
      "position": 67,
      "original_position": 36,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "66f5405f5fad08231b06115a06c52c7267a2ca4e",
      "in_reply_to_id": 2126700491,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-06-04T21:32:02Z",
      "updated_at": "2025-06-04T21:32:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2127475727",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127475727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 605,
      "original_line": 605,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127475822",
      "pull_request_review_id": 2898163216,
      "id": 2127475822,
      "node_id": "PRRC_kwDOABII585-zrRu",
      "diff_hunk": "@@ -580,6 +581,215 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {\n+        if (!Assume(!(IsRangedParticipants() && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+    }\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (IsRangedDerivation() || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "66f5405f5fad08231b06115a06c52c7267a2ca4e",
      "in_reply_to_id": 2126702224,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-06-04T21:32:06Z",
      "updated_at": "2025-06-04T21:32:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2127475822",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127475822"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 668,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128825473",
      "pull_request_review_id": 2900283699,
      "id": 2128825473,
      "node_id": "PRRC_kwDOABII585-40yB",
      "diff_hunk": "@@ -1797,9 +1803,157 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> expr(split.at(0).begin(), split.at(0).end());\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }\n+\n+            any_ranged |= pk.at(0)->IsRange();\n+            all_bip32 &= pk.at(0)->IsBIP32();\n+\n+            max_providers_len = std::max(max_providers_len, pk.size());\n+\n+            providers.emplace_back(std::move(pk));\n+            key_exp_index++;\n+        }\n+        if (first) {\n+            error = \"musig(): Must contain key expressions\";\n+            return {};\n+        }\n+\n+        // Parse any derivation\n+        DeriveType deriv_type = DeriveType::NO;\n+        std::vector<KeyPath> paths;\n+        if (split.size() == 2 && Const(\"/\", split.at(1), /*skip=*/false)) {\n+            if (!all_bip32) {\n+                error = \"musig(): musig() derivation requires all participants to be xpubs\";\n+                return {};\n+            }\n+            auto deriv_split = Split(split.at(1), '/');\n+            if (std::ranges::equal(deriv_split.back(), std::span{\"*\"}.first(1))) {\n+                deriv_split.pop_back();\n+                deriv_type = DeriveType::UNHARDENED;\n+                if (any_ranged) {\n+                    error = \"musig(): Cannot have ranged participant keys if musig() is also ranged\";\n+                    return {};\n+                }\n+            } else if (std::ranges::equal(deriv_split.back(), std::span{\"*'\"}.first(2)) || std::ranges::equal(deriv_split.back(), std::span{\"*h\"}.first(2))) {\n+                error = \"musig(): Cannot have hardened child derivation\";\n+                return {};\n+            }\n+            bool dummy = false;\n+            if (!ParseKeyPath(deriv_split, paths, dummy, error, /*allow_multipath=*/true, /*allow_hardened=*/false)) {\n+                error = \"musig(): \" + error;\n+                return {};\n+            }\n+        } else {\n+            paths.emplace_back();\n+        }\n+\n+        // Makes sure that all providers vectors in providers are the given length, or exactly length 1\n+        // Length 1 vectors have the single provider cloned until it matches the given length.\n+        const auto& clone_providers = [&providers](size_t length) -> bool {\n+            for (auto& vec : providers) {\n+                if (vec.size() == 1) {\n+                    for (size_t i = 1; i < length; ++i) {\n+                        vec.emplace_back(vec.at(0)->Clone());\n+                    }\n+                } else if (vec.size() != length) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        };\n+\n+        // Emplace the final MuSigPubkeyProvider into ret with the pubkey providers from the specified provider vectors index\n+        // and the path from the specified path index\n+        const auto& emplace_final_provider = [&ret, &key_exp_index, &deriv_type, &paths, &providers](size_t vec_idx, size_t path_idx) -> void {\n+            KeyPath& path = paths.at(path_idx);\n+            std::vector<std::unique_ptr<PubkeyProvider>> pubs;\n+            pubs.reserve(providers.size());\n+            for (auto& vec : providers) {\n+                pubs.emplace_back(std::move(vec.at(vec_idx)));\n+            }\n+            ret.emplace_back(std::make_unique<MuSigPubkeyProvider>(key_exp_index, std::move(pubs), path, deriv_type));\n+        };\n+\n+        if (max_providers_len > 1 && paths.size() > 1) {\n+            error = \"musig(): Cannot have multipath participant keys if musig() is also multipath\";",
      "path": "src/script/descriptor.cpp",
      "position": 440,
      "original_position": 179,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "8a2dc4662c816dcf7c845f55f69dbcd5c7267a66",
      "in_reply_to_id": 2126684020,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I raised a PR for it here: https://github.com/bitcoin/bips/pull/1866",
      "created_at": "2025-06-05T13:12:17Z",
      "updated_at": "2025-06-05T13:12:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2128825473",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128825473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1932,
      "original_line": 1932,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128930669",
      "pull_request_review_id": 2900467330,
      "id": 2128930669,
      "node_id": "PRRC_kwDOABII585-5Odt",
      "diff_hunk": "@@ -1797,9 +1803,159 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> sp_musig(split.at(0).begin(), split.at(0).end());\n+\n+        auto expr = Expr(sp_musig);\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }",
      "path": "src/script/descriptor.cpp",
      "position": 368,
      "original_position": 109,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "9e3a1d05bf066df31a6e124638046e70669eb470",
      "in_reply_to_id": 2123808039,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In [BIP 327](https://github.com/bitcoin/bips/blob/master/bip-0327.mediawiki), the paragraph starting from [here](https://github.com/bitcoin/bips/blob/master/bip-0327.mediawiki#:~:text=The%20same%20individual%20public%20key%20is%20allowed%20to%20occur%20more%20than%20once%20in%20the%20input%20of%20KeyAgg%20and%20KeySort) ~makes~ allows the case for having duplicate keys in the protocol. It's also recommended to omit such checks.\r\n\r\n>  In fact, applications are recommended to omit checks for duplicate individual public keys in order to simplify error handling.\r\n\r\nThe next paragraph, however, mentions a case where applications may choose to abort when duplicates are found. Since the base Musig2 BIP itself has a recommendation towards allowing duplicates, I don't mind the parsing of descriptors allowing them as well though I don't see a case where having duplicate keys would be valuable.\r\n\r\n> since PSBT doesn't allow duplicate participants to use different pubnonces and partial sigs.\r\n\r\nGood point, these 2 structs in PSBT would need to be updated: https://github.com/bitcoin/bitcoin/blob/ae024137bda9fe189f4e7ccf26dbaffd44cbbeb6/src/psbt.h#L272-L275 \r\nOne way I see is to also store the index of the participant key in the expression to differentiate between the duplicates.",
      "created_at": "2025-06-05T13:58:29Z",
      "updated_at": "2025-06-05T14:04:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2128930669",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128930669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": 1856,
      "original_start_line": 1855,
      "start_side": "RIGHT",
      "line": 1860,
      "original_line": 1860,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128980010",
      "pull_request_review_id": 2900553375,
      "id": 2128980010,
      "node_id": "PRRC_kwDOABII585-5agq",
      "diff_hunk": "@@ -580,6 +581,215 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {\n+        if (!Assume(!(IsRangedParticipants() && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+    }\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (IsRangedDerivation() || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 82,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "66f5405f5fad08231b06115a06c52c7267a2ca4e",
      "in_reply_to_id": 2126734205,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```cpp\r\nprov->GetPubKey(0, arg,\r\n```\r\n\r\nAh I see now the SigningProvider being passed here. I notice that `const SigningProvider& arg` is quite prevalent in this file, but I don't prefer calling the signing provider here just `arg` - it's easy to miss. Fine to stick with it in this PR, can be updated separately for all occurrences in one go if it makes sense to others as well.",
      "created_at": "2025-06-05T14:19:55Z",
      "updated_at": "2025-06-05T14:19:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2128980010",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128980010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 623,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 655,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129101313",
      "pull_request_review_id": 2900761388,
      "id": 2129101313,
      "node_id": "PRRC_kwDOABII585-54IB",
      "diff_hunk": "@@ -574,6 +581,216 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+    const bool m_ranged_participants;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive),\n+        m_ranged_participants(std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); }))\n+    {\n+        if (!Assume(!(m_ranged_participants && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+        if (!Assume(m_derive != DeriveType::HARDENED)) {\n+            throw std::runtime_error(\"musig(): Cannot have hardened hardened derivation\");\n+        }\n+    }\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !m_ranged_participants) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (IsRangedDerivation() || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to its GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 132,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "96af090b97e4a42e729202004b94f76d19faeac2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "IIUC, I think we should explicitly pass a dummy signing provider here instead of `arg` because there can't be a hardened derivation at this level. Also, better to not pass the signing provider if we know for certain that it will not be used.",
      "created_at": "2025-06-05T15:15:59Z",
      "updated_at": "2025-06-05T18:53:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2129101313",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129101313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 670,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129128674",
      "pull_request_review_id": 2900761388,
      "id": 2129128674,
      "node_id": "PRRC_kwDOABII585-5-zi",
      "diff_hunk": "@@ -574,6 +581,216 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+    const bool m_ranged_participants;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive),\n+        m_ranged_participants(std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); }))\n+    {\n+        if (!Assume(!(m_ranged_participants && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+        if (!Assume(m_derive != DeriveType::HARDENED)) {\n+            throw std::runtime_error(\"musig(): Cannot have hardened hardened derivation\");\n+        }\n+    }\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !m_ranged_participants) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (IsRangedDerivation() || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to its GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else {\n+            if (!Assume(m_ranged_participants)) return std::nullopt;\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 148,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "96af090b97e4a42e729202004b94f76d19faeac2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Slightly confused in this `else` block: for the case of ranged participants and non ranged musig derivation that has a `m_path` such as `/0/1/2`, it doesn't seem to do the derivation after getting the aggregate pubkey because I don't see `m_path` being used here like it is used in `m_aggregate_provider` above.\r\n\r\nI don't see an explicit mention of this in BIP 390 as well, is this not a valid case to consider?",
      "created_at": "2025-06-05T15:28:44Z",
      "updated_at": "2025-06-05T18:53:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2129128674",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129128674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 675,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129133487",
      "pull_request_review_id": 2900761388,
      "id": 2129133487,
      "node_id": "PRRC_kwDOABII585-5_-v",
      "diff_hunk": "@@ -574,6 +581,216 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+    const bool m_ranged_participants;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive),\n+        m_ranged_participants(std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); }))\n+    {\n+        if (!Assume(!(m_ranged_participants && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+        if (!Assume(m_derive != DeriveType::HARDENED)) {\n+            throw std::runtime_error(\"musig(): Cannot have hardened hardened derivation\");",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "96af090b97e4a42e729202004b94f76d19faeac2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```diff\r\n- Cannot have hardened hardened derivation\r\n+ Cannot have hardened derivation\r\n```",
      "created_at": "2025-06-05T15:31:17Z",
      "updated_at": "2025-06-05T18:53:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2129133487",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129133487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 617,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129134556",
      "pull_request_review_id": 2900761388,
      "id": 2129134556,
      "node_id": "PRRC_kwDOABII585-6APc",
      "diff_hunk": "@@ -574,6 +581,216 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+    const bool m_ranged_participants;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive),\n+        m_ranged_participants(std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); }))\n+    {\n+        if (!Assume(!(m_ranged_participants && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+        if (!Assume(m_derive != DeriveType::HARDENED)) {",
      "path": "src/script/descriptor.cpp",
      "position": 78,
      "original_position": 78,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "96af090b97e4a42e729202004b94f76d19faeac2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Interesting, I now understand why it's written in a double negation way.",
      "created_at": "2025-06-05T15:31:50Z",
      "updated_at": "2025-06-05T18:53:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2129134556",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129134556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": 613,
      "original_start_line": 613,
      "start_side": "RIGHT",
      "line": 616,
      "original_line": 616,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129163516",
      "pull_request_review_id": 2900761388,
      "id": 2129163516,
      "node_id": "PRRC_kwDOABII585-6HT8",
      "diff_hunk": "@@ -574,6 +581,216 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+    const bool m_ranged_participants;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive),\n+        m_ranged_participants(std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); }))\n+    {\n+        if (!Assume(!(m_ranged_participants && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+        if (!Assume(m_derive != DeriveType::HARDENED)) {\n+            throw std::runtime_error(\"musig(): Cannot have hardened hardened derivation\");\n+        }\n+    }\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !m_ranged_participants) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (IsRangedDerivation() || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to its GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else {\n+            if (!Assume(m_ranged_participants)) return std::nullopt;\n+            // Derive participants and compute new aggregate key",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 138,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "96af090b97e4a42e729202004b94f76d19faeac2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Aren't the participant pubkeys already derived in the loop on line 659? Here it seems to only aggregate the derived keys.",
      "created_at": "2025-06-05T15:46:57Z",
      "updated_at": "2025-06-05T18:53:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2129163516",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129163516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 676,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129819178",
      "pull_request_review_id": 2900761388,
      "id": 2129819178,
      "node_id": "PRRC_kwDOABII585-8nYq",
      "diff_hunk": "@@ -574,6 +581,216 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+    const bool m_ranged_participants;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive),\n+        m_ranged_participants(std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); }))\n+    {\n+        if (!Assume(!(m_ranged_participants && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+        if (!Assume(m_derive != DeriveType::HARDENED)) {\n+            throw std::runtime_error(\"musig(): Cannot have hardened hardened derivation\");\n+        }\n+    }\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !m_ranged_participants) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (IsRangedDerivation() || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());",
      "path": "src/script/descriptor.cpp",
      "position": 126,
      "original_position": 126,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "96af090b97e4a42e729202004b94f76d19faeac2",
      "in_reply_to_id": null,
      "user": {
        "login": "rkrux",
        "id": 5960750,
        "node_id": "MDQ6VXNlcjU5NjA3NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5960750?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rkrux",
        "html_url": "https://github.com/rkrux",
        "followers_url": "https://api.github.com/users/rkrux/followers",
        "following_url": "https://api.github.com/users/rkrux/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rkrux/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rkrux/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rkrux/subscriptions",
        "organizations_url": "https://api.github.com/users/rkrux/orgs",
        "repos_url": "https://api.github.com/users/rkrux/repos",
        "events_url": "https://api.github.com/users/rkrux/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rkrux/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm sensing that this block of derivation of participants' keys should reside later in the `else` block starting on line 674. Reason being that in case of non ranged participants that leads to the presence of `m_aggregate_provider`, we don't really need to derive the participants' keys again and `pos` is effectively unused.\r\n\r\nAfter moving this block down there, either we can derive the keys in the `if` block below with 0 `pos`, or preferably cache the participants' derived keys along with `m_aggregate_provider` so that we don't do this derivation again.\r\n\r\nThough the current implementation gets rid of code duplication by having this block before the below if/else blocks, but it derives again the keys in case of non ranged participants and also passes the unneeded `pos` argument, which makes the reader reason through it unnecessarily imho. ",
      "created_at": "2025-06-05T18:46:18Z",
      "updated_at": "2025-06-05T18:53:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2129819178",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129819178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": 657,
      "original_start_line": 657,
      "start_side": "RIGHT",
      "line": 664,
      "original_line": 664,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129857969",
      "pull_request_review_id": 2901739605,
      "id": 2129857969,
      "node_id": "PRRC_kwDOABII585-8w2x",
      "diff_hunk": "@@ -1797,9 +1803,159 @@ std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkeyInner(uint32_t key_exp_i\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+std::vector<std::unique_ptr<PubkeyProvider>> ParsePubkey(uint32_t& key_exp_index, const std::span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     std::vector<std::unique_ptr<PubkeyProvider>> ret;\n+\n+    using namespace script;\n+\n+    // musig cannot be nested inside of an origin\n+    std::span<const char> span = sp;\n+    if (Const(\"musig(\", span, /*skip=*/false)) {\n+        if (ctx != ParseScriptContext::P2TR) {\n+            error = \"musig() is only allowed in tr()\";\n+            return {};\n+        }\n+\n+        // Split the span on the end parentheses. The end parentheses must\n+        // be included in the resulting span so that Expr is happy.\n+        auto split = Split(span, ')', /*include_sep=*/true);\n+        if (split.size() > 2) {\n+            error = \"Too many ')' in musig() expression\";\n+            return {};\n+        }\n+        std::span<const char> sp_musig(split.at(0).begin(), split.at(0).end());\n+\n+        auto expr = Expr(sp_musig);\n+        if (!Func(\"musig\", expr)) {\n+            error = \"Invalid musig() expression\";\n+            return {};\n+        }\n+\n+        // Parse the participant pubkeys\n+        bool any_ranged = false;\n+        bool all_bip32 = true;\n+        std::vector<std::vector<std::unique_ptr<PubkeyProvider>>> providers;\n+        bool first = true;\n+        size_t max_providers_len = 0;\n+        std::set<std::string_view> key_exprs;\n+        while (expr.size()) {\n+            if (!first && !Const(\",\", expr)) {\n+                error = strprintf(\"musig(): expected ',', got '%c'\", expr[0]);\n+                return {};\n+            }\n+            first = false;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(key_exp_index, arg, ParseScriptContext::MUSIG, out, error);\n+            if (pk.empty()) {\n+                error = strprintf(\"musig(): %s\", error);\n+                return {};\n+            }\n+            const auto& [_, inserted] = key_exprs.emplace(arg.begin(), arg.end());\n+            if (!inserted) {\n+                error = strprintf(\"musig(): Cannot have repeated participant key expressions\");\n+                return {};\n+            }",
      "path": "src/script/descriptor.cpp",
      "position": 368,
      "original_position": 109,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "9e3a1d05bf066df31a6e124638046e70669eb470",
      "in_reply_to_id": 2123808039,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Good point, these 2 structs in PSBT would need to be updated: \r\n\r\nI believe there won't need to be any changes to PSBT. If a participant pubkey is duplicated, it is still valid to for each time the pubkey appears, to use the same pubnonce and the same partial sig for that nonce for each instance the pubkey appears. The only complication with this is if the duplicate pubkeys are different signers and produce different nonces and partial sigs as they may overwrite each other resulting a PSBT with a partial sig that does not match the pubn However, I'm pretty sure (and I did check with a cryptographer) that there cannot be any key leakage.",
      "created_at": "2025-06-05T18:54:37Z",
      "updated_at": "2025-06-05T18:54:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2129857969",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129857969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": 1856,
      "original_start_line": 1855,
      "start_side": "RIGHT",
      "line": 1860,
      "original_line": 1860,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129889627",
      "pull_request_review_id": 2901776782,
      "id": 2129889627,
      "node_id": "PRRC_kwDOABII585-84lb",
      "diff_hunk": "@@ -574,6 +581,216 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+    const bool m_ranged_participants;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive),\n+        m_ranged_participants(std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); }))\n+    {\n+        if (!Assume(!(m_ranged_participants && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+        if (!Assume(m_derive != DeriveType::HARDENED)) {\n+            throw std::runtime_error(\"musig(): Cannot have hardened hardened derivation\");\n+        }\n+    }\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !m_ranged_participants) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (IsRangedDerivation() || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to its GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else {\n+            if (!Assume(m_ranged_participants)) return std::nullopt;\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 148,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "96af090b97e4a42e729202004b94f76d19faeac2",
      "in_reply_to_id": 2129128674,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's disallowed. If there is derivation done on the aggregate at all, there cannot be ranged participants. This is not explicitly stated as disallowed in the BIP, but it is not stated as being allowed. It should be implied as the only form of `musig()` with aggregate derivation that the BIP describes explicitly disallows ranged participants.",
      "created_at": "2025-06-05T19:02:39Z",
      "updated_at": "2025-06-05T19:05:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2129889627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129889627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 675,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129925030",
      "pull_request_review_id": 2901823262,
      "id": 2129925030,
      "node_id": "PRRC_kwDOABII585-9BOm",
      "diff_hunk": "@@ -574,6 +581,216 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+    const bool m_ranged_participants;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive),\n+        m_ranged_participants(std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); }))\n+    {\n+        if (!Assume(!(m_ranged_participants && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+        if (!Assume(m_derive != DeriveType::HARDENED)) {\n+            throw std::runtime_error(\"musig(): Cannot have hardened hardened derivation\");\n+        }\n+    }\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !m_ranged_participants) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (IsRangedDerivation() || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());",
      "path": "src/script/descriptor.cpp",
      "position": 126,
      "original_position": 126,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "96af090b97e4a42e729202004b94f76d19faeac2",
      "in_reply_to_id": 2129819178,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Even with aggregate derivation, `out` needs to be filled with participant pukey info. This loop is present in order to do that for both aggregate derivation and participant derivation.",
      "created_at": "2025-06-05T19:11:06Z",
      "updated_at": "2025-06-05T19:11:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2129925030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129925030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": 657,
      "original_start_line": 657,
      "start_side": "RIGHT",
      "line": 664,
      "original_line": 664,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129933928",
      "pull_request_review_id": 2901833831,
      "id": 2129933928,
      "node_id": "PRRC_kwDOABII585-9DZo",
      "diff_hunk": "@@ -574,6 +581,216 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+    const bool m_ranged_participants;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive),\n+        m_ranged_participants(std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); }))\n+    {\n+        if (!Assume(!(m_ranged_participants && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+        if (!Assume(m_derive != DeriveType::HARDENED)) {\n+            throw std::runtime_error(\"musig(): Cannot have hardened hardened derivation\");\n+        }\n+    }\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !m_ranged_participants) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (IsRangedDerivation() || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to its GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 132,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "96af090b97e4a42e729202004b94f76d19faeac2",
      "in_reply_to_id": 2129101313,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-06-05T19:13:04Z",
      "updated_at": "2025-06-05T19:13:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2129933928",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129933928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 670,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129934262",
      "pull_request_review_id": 2901834205,
      "id": 2129934262,
      "node_id": "PRRC_kwDOABII585-9De2",
      "diff_hunk": "@@ -574,6 +581,216 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+    const bool m_ranged_participants;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive),\n+        m_ranged_participants(std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); }))\n+    {\n+        if (!Assume(!(m_ranged_participants && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+        if (!Assume(m_derive != DeriveType::HARDENED)) {\n+            throw std::runtime_error(\"musig(): Cannot have hardened hardened derivation\");",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "96af090b97e4a42e729202004b94f76d19faeac2",
      "in_reply_to_id": 2129133487,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-06-05T19:13:10Z",
      "updated_at": "2025-06-05T19:13:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2129934262",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129934262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 617,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129935247",
      "pull_request_review_id": 2901835270,
      "id": 2129935247,
      "node_id": "PRRC_kwDOABII585-9DuP",
      "diff_hunk": "@@ -574,6 +581,216 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+    const bool m_ranged_participants;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive),\n+        m_ranged_participants(std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); }))\n+    {\n+        if (!Assume(!(m_ranged_participants && IsRangedDerivation()))) {\n+            throw std::runtime_error(\"musig(): Cannot have both ranged participants and ranged derivation\");\n+        }\n+        if (!Assume(m_derive != DeriveType::HARDENED)) {\n+            throw std::runtime_error(\"musig(): Cannot have hardened hardened derivation\");\n+        }\n+    }\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !m_ranged_participants) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!Assume(m_aggregate_pubkey.has_value())) return std::nullopt;\n+\n+            // Make our pubkey provider\n+            if (IsRangedDerivation() || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode = MUSIG_CHAINCODE;\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to its GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else {\n+            if (!Assume(m_ranged_participants)) return std::nullopt;\n+            // Derive participants and compute new aggregate key",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 138,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "96af090b97e4a42e729202004b94f76d19faeac2",
      "in_reply_to_id": 2129163516,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed the comment.",
      "created_at": "2025-06-05T19:13:22Z",
      "updated_at": "2025-06-05T19:13:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2129935247",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2129935247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 676,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2138916560",
      "pull_request_review_id": 2915252677,
      "id": 2138916560,
      "node_id": "PRRC_kwDOABII585_fUbQ",
      "diff_hunk": "@@ -13,10 +13,10 @@ namespace script {\n \n /** Parse a constant.\n  *\n- * If sp's initial part matches str, sp is updated to skip that part, and true is returned.\n+ * If sp's initial part matches str, sp is optionally updated to skip that part, and true is returned.\n  * Otherwise sp is unmodified and false is returned.\n  */\n-bool Const(const std::string& str, std::span<const char>& sp);\n+bool Const(const std::string& str, std::span<const char>& sp, bool skip = true);",
      "path": "src/script/parsing.h",
      "position": 9,
      "original_position": 9,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "4b135f80d03c92fb522d1dcfd7d697aa0a4af626",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe a test in `src/test/util_tests.cpp` in `BOOST_AUTO_TEST_CASE(test_script_parsing)` would be good for consistency's sake.",
      "created_at": "2025-06-10T23:26:12Z",
      "updated_at": "2025-06-10T23:26:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2138916560",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2138916560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 19,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2138939609",
      "pull_request_review_id": 2915284020,
      "id": 2138939609,
      "node_id": "PRRC_kwDOABII585_faDZ",
      "diff_hunk": "@@ -161,6 +161,7 @@ class SigningProvider\n     virtual bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const { return false; }\n     virtual bool GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const { return false; }\n     virtual bool GetTaprootBuilder(const XOnlyPubKey& output_key, TaprootBuilder& builder) const { return false; }\n+    virtual std::vector<CPubKey> GetAggregateParticipantPubkeys(const CPubKey& pubkey) const { return {}; }",
      "path": "src/script/signingprovider.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Without proper context, it may not be clear that this aggregation specifically refers to a MuSig2 aggregation.\r\nPerhaps a name change could make the purpose and use of the function clearer.\r\n```suggestion\r\n    virtual std::vector<CPubKey> GetMuSig2AggregateParticipantPubkeys(const CPubKey& pubkey) const { return {}; }\r\n```",
      "created_at": "2025-06-10T23:58:21Z",
      "updated_at": "2025-06-10T23:58:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2138939609",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2138939609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2138945119",
      "pull_request_review_id": 2915292347,
      "id": 2138945119,
      "node_id": "PRRC_kwDOABII585_fbZf",
      "diff_hunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <musig.h>\n+\n+#include <secp256k1_musig.h>\n+\n+bool GetMuSig2KeyAggCache(const std::vector<CPubKey>& pubkeys, secp256k1_musig_keyagg_cache& keyagg_cache)\n+{\n+    // Parse the pubkeys\n+    std::vector<secp256k1_pubkey> secp_pubkeys;\n+    std::vector<const secp256k1_pubkey*> pubkey_ptrs;\n+    for (const CPubKey& pubkey : pubkeys) {\n+        if (!secp256k1_ec_pubkey_parse(secp256k1_context_static, &secp_pubkeys.emplace_back(), pubkey.data(), pubkey.size())) {\n+            return false;\n+        }\n+    }\n+    pubkey_ptrs.reserve(secp_pubkeys.size());\n+    for (const secp256k1_pubkey& p : secp_pubkeys) {\n+        pubkey_ptrs.push_back(&p);\n+    }\n+\n+    // Aggregate the pubkey\n+    if (!secp256k1_musig_pubkey_agg(secp256k1_context_static, nullptr, &keyagg_cache, pubkey_ptrs.data(), pubkey_ptrs.size())) {",
      "path": "src/musig.cpp",
      "position": 25,
      "original_position": 25,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "18aa7752304d84b02a539a34fe26961214e44aa2",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I wonder if this function should have an output parameter for `agg_pk` (the MuSig-aggregated x-only public key) for future use, instead of considering it null.\r\nBut yes, for now, there is no use.",
      "created_at": "2025-06-11T00:06:08Z",
      "updated_at": "2025-06-11T00:06:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2138945119",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2138945119"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2140771903",
      "pull_request_review_id": 2918195602,
      "id": 2140771903,
      "node_id": "PRRC_kwDOABII585_mZY_",
      "diff_hunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <musig.h>\n+\n+#include <secp256k1_musig.h>\n+\n+bool GetMuSig2KeyAggCache(const std::vector<CPubKey>& pubkeys, secp256k1_musig_keyagg_cache& keyagg_cache)\n+{\n+    // Parse the pubkeys\n+    std::vector<secp256k1_pubkey> secp_pubkeys;\n+    std::vector<const secp256k1_pubkey*> pubkey_ptrs;\n+    for (const CPubKey& pubkey : pubkeys) {\n+        if (!secp256k1_ec_pubkey_parse(secp256k1_context_static, &secp_pubkeys.emplace_back(), pubkey.data(), pubkey.size())) {\n+            return false;\n+        }\n+    }\n+    pubkey_ptrs.reserve(secp_pubkeys.size());\n+    for (const secp256k1_pubkey& p : secp_pubkeys) {\n+        pubkey_ptrs.push_back(&p);\n+    }\n+\n+    // Aggregate the pubkey\n+    if (!secp256k1_musig_pubkey_agg(secp256k1_context_static, nullptr, &keyagg_cache, pubkey_ptrs.data(), pubkey_ptrs.size())) {",
      "path": "src/musig.cpp",
      "position": 25,
      "original_position": 25,
      "commit_id": "af27ffbce34e3b6cf07eab82aa240b5482cc6f87",
      "original_commit_id": "18aa7752304d84b02a539a34fe26961214e44aa2",
      "in_reply_to_id": 2138945119,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That can be added if it is needed.\r\n\r\nAll of the MuSig2 operations rely on the keyagg cache, which is only produced by aggregating. That's why this function has that as an output parameter.",
      "created_at": "2025-06-11T17:58:26Z",
      "updated_at": "2025-06-11T17:58:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2140771903",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2140771903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    }
  ]
}