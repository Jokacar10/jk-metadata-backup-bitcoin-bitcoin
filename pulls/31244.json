{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244",
    "id": 2168019750,
    "node_id": "PR_kwDOABII586BOVsm",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31244",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31244.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31244.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/37f3557a7e26a9873d83ee309fdff53c9aa0114c",
    "number": 31244,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "descriptors: MuSig2",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Implements parsing of BIP 390 `musig()` descriptors.\r\n\r\nSplit from #29675",
    "labels": [
      {
        "id": 1482182044,
        "node_id": "MDU6TGFiZWwxNDgyMTgyMDQ0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Descriptors",
        "name": "Descriptors",
        "description": "",
        "color": "e9f76c",
        "default": false
      }
    ],
    "created_at": "2024-11-07T18:10:02Z",
    "updated_at": "2025-05-16T18:46:57Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "8a9d129e8ee1578dae5811b6d59469b7c6bf359d",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "achow101:musig2-desc",
      "ref": "musig2-desc",
      "sha": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 8,
        "stargazers_count": 42,
        "watchers_count": 42,
        "size": 295114,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-16T18:56:22Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2025-05-11T17:20:16Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "1b1b9f32cfdb7c3b21723d2e1b60d9d3dc7818f3",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37228,
        "stargazers_count": 83608,
        "watchers_count": 83608,
        "size": 282069,
        "default_branch": "master",
        "open_issues_count": 731,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-16T17:10:38Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-05-16T17:33:10Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 631,
    "deletions": 41,
    "changed_files": 12,
    "commits": 10,
    "review_comments": 24,
    "comments": 12
  },
  "events": [
    {
      "event": "commented",
      "id": 2462913654,
      "node_id": "IC_kwDOABII586SzRR2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2462913654",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T18:10:05Z",
      "updated_at": "2025-05-16T13:58:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31244.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [theStack](https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2796051128), [w0xlt](https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2808489885), [Sjors](https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2846300829) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#bitcoin-core/gui/872](https://github.com/bitcoin-core/gui/pull/872) (gui: Menu action to export a watchonly wallet by achow101)\n* [#32489](https://github.com/bitcoin/bitcoin/pull/32489) (wallet: Add `exportwatchonlywallet` RPC to export a watchonly version of a wallet by achow101)\n* [#32471](https://github.com/bitcoin/bitcoin/pull/32471) (wallet/rpc: fix listdescriptors RPC fails to return descriptors with private key information when wallet contains descriptors missing any key by Eunovo)\n* [#32332](https://github.com/bitcoin/bitcoin/pull/32332) (refactor: Update `XOnlyPubKey::GetKeyIDs()` to return a pair of pubkeys by w0xlt)\n* [#30243](https://github.com/bitcoin/bitcoin/pull/30243) (descriptors: taproot partial descriptors by Eunovo)\n* [#29675](https://github.com/bitcoin/bitcoin/pull/29675) (wallet: Be able to receive and spend inputs involving MuSig2 aggregate keys by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2462913654",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "labeled",
      "id": 15188785099,
      "node_id": "LE_lADOABII586ddsd2zwAAAAOJUnfL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15188785099",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-07T18:10:09Z",
      "label": {
        "name": "Descriptors",
        "color": "e9f76c"
      }
    },
    {
      "event": "commented",
      "id": 2500865562,
      "node_id": "IC_kwDOABII586VEC4a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2500865562",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T13:54:14Z",
      "updated_at": "2024-11-26T13:55:27Z",
      "author_association": "MEMBER",
      "body": "Can you add an example to `doc/descriptors.md`?\r\n\r\nDid you mean [BIP390](https://github.com/bitcoin/bips/blob/master/bip-0390.mediawiki) in the description?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2500865562",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "commented",
      "id": 2527475671,
      "node_id": "IC_kwDOABII586WpjfX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2527475671",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-09T10:06:44Z",
      "updated_at": "2024-12-09T10:06:44Z",
      "author_association": "MEMBER",
      "body": "```\r\n$ echo \"cGsobXVzaWcoZGR9dXVlLzAwLylrKA==\" | base64 --decode > mocked_descriptor_parse_1.crash\r\n$ FUZZ=mocked_descriptor_parse fuzz mocked_descriptor_parse_1.crash\r\nscript/descriptor.cpp:1838 ParsePubkey: Assertion `Func(\"musig\", expr)' failed.\r\n\r\n$ echo \"dHIobXVzaWcoICAgICB0dXVzKG9sZGVwayhnZylnZ2dnZmdnKTwseigoKCgoKCgoKCgoKCgoKCgoKCgoKHN0KQ==\" | base64 --decode > mocked_descriptor_parse_2.crash\r\n$ FUZZ=mocked_descriptor_parse fuzz mocked_descriptor_parse_2.crash\r\nscript/descriptor.cpp:1833 ParsePubkey: Assertion `split.size() <= 2' failed.\r\n```",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2527475671",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15591503410,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAOhU3Yy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15591503410",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7be277c4b8948fb5105b26e8aa12d0add43b14d4",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/7be277c4b8948fb5105b26e8aa12d0add43b14d4",
      "created_at": "2024-12-09T22:34:28Z"
    },
    {
      "event": "commented",
      "id": 2529679956,
      "node_id": "IC_kwDOABII586Wx9pU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2529679956",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-09T22:34:39Z",
      "updated_at": "2024-12-09T22:34:39Z",
      "author_association": "MEMBER",
      "body": "Fixed the fuzz crashes and added those descriptors to the unit tests.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2529679956",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "commented",
      "id": 2531046640,
      "node_id": "IC_kwDOABII586W3LTw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2531046640",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-10T09:51:04Z",
      "updated_at": "2024-12-10T09:51:04Z",
      "author_association": "MEMBER",
      "body": "```\r\n$ echo \"dHIobXVzaWcoJTIyLzMzMmgpSigoKChhZGRyKEJjdXUp\" | base64 --decode > mocked_descriptor_parse_3.crash\r\n$ FUZZ=mocked_descriptor_parse fuzz mocked_descriptor_parse_3.crash\r\nscript/descriptor.cpp:632 GetPubKey: Assertion `pubkey.has_value()' failed.\r\n```",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2531046640",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "commented",
      "id": 2531119817,
      "node_id": "IC_kwDOABII586W3dLJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2531119817",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-10T10:19:12Z",
      "updated_at": "2024-12-10T10:19:12Z",
      "author_association": "MEMBER",
      "body": "```\r\n$ echo \"dHIobXVzaWcoKS8wMDAwMTEp\" | base64 --decode > descriptor_parse_1.crash\r\n$ FUZZ=descriptor_parse fuzz descriptor_parse_1.crash\r\n[libsecp256k1] illegal argument: pubkeys != NULL\r\n```",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2531119817",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15604446841,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAOiGPZ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15604446841",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9a0397e08b7f1b451a311d32a45970d27fd9fff9",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/9a0397e08b7f1b451a311d32a45970d27fd9fff9",
      "created_at": "2024-12-10T17:16:15Z"
    },
    {
      "event": "commented",
      "id": 2532329132,
      "node_id": "IC_kwDOABII586W8Eas",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2532329132",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-10T17:16:22Z",
      "updated_at": "2024-12-10T17:16:22Z",
      "author_association": "MEMBER",
      "body": "Fixed those crashes too.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2532329132",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "commented",
      "id": 2532707235,
      "node_id": "IC_kwDOABII586W9guj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2532707235",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-10T19:41:25Z",
      "updated_at": "2024-12-10T19:41:25Z",
      "author_association": "MEMBER",
      "body": "```\r\n$ echo \"dHIobXVzaWcoJWU5LzwwOzAwMDAwMzU7MDYwOzM7MDY+KS82Nik=\" | base64 --decode > mocked_descriptor_parse_4.crash\r\n$ FUZZ=mocked_descriptor_parse fuzz mocked_descriptor_parse_4.crash\r\nfuzz: script/descriptor.cpp:1942: std::vector<std::unique_ptr<PubkeyProvider>> (anonymous namespace)::ParsePubkey(uint32_t &, const Span<const char> &, ParseScriptContext, FlatSigningProvider &, std::string &): Assertion `pub.size() == 1' failed.\r\n```",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2532707235",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15786092305,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAOs7KcR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15786092305",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "65824b5d32e286dc7474b89759753558958e2f2f",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/65824b5d32e286dc7474b89759753558958e2f2f",
      "created_at": "2024-12-30T17:45:57Z"
    },
    {
      "event": "commented",
      "id": 2565857130,
      "node_id": "IC_kwDOABII586Y799q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2565857130",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-30T19:46:48Z",
      "updated_at": "2024-12-30T19:46:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/34992034826</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2565857130",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "labeled",
      "id": 15786679140,
      "node_id": "LE_lADOABII586ddsd2zwAAAAOs9Ztk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15786679140",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-30T19:46:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15803626328,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAOt-DNY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15803626328",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "02f50cc2ea685324f50ca99835b548c067589ef2",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/02f50cc2ea685324f50ca99835b548c067589ef2",
      "created_at": "2025-01-03T01:20:52Z"
    },
    {
      "event": "unlabeled",
      "id": 15803820786,
      "node_id": "UNLE_lADOABII586ddsd2zwAAAAOt-yry",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15803820786",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-03T02:22:59Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15830479775,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAOvkfOf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15830479775",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7c65e9663a0932ce11da584619d500f080fc02aa",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/7c65e9663a0932ce11da584619d500f080fc02aa",
      "created_at": "2025-01-06T20:13:49Z"
    },
    {
      "event": "labeled",
      "id": 16013447937,
      "node_id": "LE_lADOABII586ddsd2zwAAAAO6edMB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16013447937",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T12:17:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16021037735,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAO67aKn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16021037735",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "efe85f891e625634e489e47ae2f84b851caa1785",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/efe85f891e625634e489e47ae2f84b851caa1785",
      "created_at": "2025-01-21T22:37:41Z"
    },
    {
      "event": "unlabeled",
      "id": 16021266985,
      "node_id": "UNLE_lADOABII586ddsd2zwAAAAO68SIp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16021266985",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T23:08:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 16899806372,
      "node_id": "LE_lADOABII586ddsd2zwAAAAPvTpSk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16899806372",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T10:16:54Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17214144236,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQCCv7s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17214144236",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "09d109d39b22256b4978e2c9300538f4bb0267b9",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/09d109d39b22256b4978e2c9300538f4bb0267b9",
      "created_at": "2025-04-10T21:43:55Z"
    },
    {
      "event": "labeled",
      "id": 17214382693,
      "node_id": "LE_lADOABII586ddsd2zwAAAAQCDqJl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17214382693",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-10T22:07:36Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2795270555,
      "node_id": "IC_kwDOABII586mnHGb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2795270555",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-10T22:07:37Z",
      "updated_at": "2025-04-10T22:07:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/40357481289</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2795270555",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17214764455,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQCFHWn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17214764455",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2e5756cc48ac1299c769e5e4428837a31eeaf630",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/2e5756cc48ac1299c769e5e4428837a31eeaf630",
      "created_at": "2025-04-10T22:35:36Z"
    },
    {
      "event": "unlabeled",
      "id": 17214951572,
      "node_id": "UNLE_lADOABII586ddsd2zwAAAAQCF1CU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17214951572",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-10T22:53:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17255472845,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQEgZ7N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17255472845",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "de468fc93a6748b8fa7d4271c5e4937ac29dd582",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/de468fc93a6748b8fa7d4271c5e4937ac29dd582",
      "created_at": "2025-04-14T20:33:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17255475124,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQEgae0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17255475124",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b5fd6067537ee1498bd3cd4fc04b24ab55c03c87",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/b5fd6067537ee1498bd3cd4fc04b24ab55c03c87",
      "created_at": "2025-04-14T20:33:52Z"
    },
    {
      "event": "unlabeled",
      "id": 17257149321,
      "node_id": "UNLE_lADOABII586ddsd2zwAAAAQEmzOJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17257149321",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-14T22:51:20Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 17342608495,
      "node_id": "LE_lADOABII586ddsd2zwAAAAQJszRv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17342608495",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T19:34:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDIyNWIzYWRiZjUzZTRkZmRlMzJhMWY3OThjZGUzMGNjNDE5OThlM2M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/225b3adbf53e4dfde32a1f798cde30cc41998e3c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/225b3adbf53e4dfde32a1f798cde30cc41998e3c",
      "tree": {
        "sha": "625aa875a5976fa4a879ae736510f30165bec9d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/625aa875a5976fa4a879ae736510f30165bec9d5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06439a14c884d7f81f331646ad361e88b3037a51",
          "sha": "06439a14c884d7f81f331646ad361e88b3037a51",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/06439a14c884d7f81f331646ad361e88b3037a51"
        }
      ],
      "message": "XOnlyPubKey: Add GetCPubKeys\n\nWe need to retrieve the even and odd compressed pubkeys for xonly\npubkeys, so add a function to do that. Also reuse it in GetKeyIDs.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-04-21T21:36:12Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-29T22:32:02Z"
      },
      "sha": "225b3adbf53e4dfde32a1f798cde30cc41998e3c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZlMDJkN2NiMjM3YzAwZGU2YWJlMTc3NmIzMTAxMzQyZmZkZGY3NTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe02d7cb237c00de6abe1776b3101342ffddf757",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fe02d7cb237c00de6abe1776b3101342ffddf757",
      "tree": {
        "sha": "5653408997b2b7dcef5b95ca7657b3ecbaddee25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5653408997b2b7dcef5b95ca7657b3ecbaddee25"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/225b3adbf53e4dfde32a1f798cde30cc41998e3c",
          "sha": "225b3adbf53e4dfde32a1f798cde30cc41998e3c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/225b3adbf53e4dfde32a1f798cde30cc41998e3c"
        }
      ],
      "message": "script/parsing: Allow Const to not skip the found constant",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-04-21T21:36:12Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-15T22:08:47Z"
      },
      "sha": "fe02d7cb237c00de6abe1776b3101342ffddf757"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRhMWVlZWUyN2E2NGM0YmU3MjkzNzQwZjhmZmY4Mzk4NzliODhkODY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a1eeee27a64c4be7293740f8fff839879b88d86",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4a1eeee27a64c4be7293740f8fff839879b88d86",
      "tree": {
        "sha": "2d0c216354b9a9994b06cba18d616aea50fe053a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d0c216354b9a9994b06cba18d616aea50fe053a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe02d7cb237c00de6abe1776b3101342ffddf757",
          "sha": "fe02d7cb237c00de6abe1776b3101342ffddf757",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fe02d7cb237c00de6abe1776b3101342ffddf757"
        }
      ],
      "message": "util/string: Allow Split to include the separator\n\nWhen splitting a string, sometimes the separator needs to be included.\nSplit will now optionally include the separator on the left side of the\nsplits, i.e. it appears at the end of the splits, except for the last\none.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-04-21T21:36:12Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-04-14T20:31:31Z"
      },
      "sha": "4a1eeee27a64c4be7293740f8fff839879b88d86"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI2YzI1ZmVkOTE5ZDI1MjBmNTYxYTg5MTIzNjIyMGQ1NDg4MGIwNzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26c25fed919d2520f561a891236220d54880b079",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/26c25fed919d2520f561a891236220d54880b079",
      "tree": {
        "sha": "bfdc595f914e46ef1df5e1bf8705b86bebe6cd8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfdc595f914e46ef1df5e1bf8705b86bebe6cd8d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a1eeee27a64c4be7293740f8fff839879b88d86",
          "sha": "4a1eeee27a64c4be7293740f8fff839879b88d86",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4a1eeee27a64c4be7293740f8fff839879b88d86"
        }
      ],
      "message": "descriptors: Add PubkeyProvider::IsBIP32()",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-04-21T21:36:12Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-15T22:09:22Z"
      },
      "sha": "26c25fed919d2520f561a891236220d54880b079"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJkNGYyZjYzOWYwZjhmZGFiYzgzYmJmZjQ5NTBmOTE3MzhjYjJlOTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d4f2f639f0f8fdabc83bbff4950f91738cb2e95",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2d4f2f639f0f8fdabc83bbff4950f91738cb2e95",
      "tree": {
        "sha": "6d25f2846c401d9388f954719d92c27fac102f83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d25f2846c401d9388f954719d92c27fac102f83"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26c25fed919d2520f561a891236220d54880b079",
          "sha": "26c25fed919d2520f561a891236220d54880b079",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/26c25fed919d2520f561a891236220d54880b079"
        }
      ],
      "message": "build: Enable secp256k1 musig module",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-04-21T21:36:12Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-11-05T20:09:55Z"
      },
      "sha": "2d4f2f639f0f8fdabc83bbff4950f91738cb2e95"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17343811633,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQJxZAx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17343811633",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e7c67ec86dcb24f78b642f8dc1917a7e3cf2e780",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/e7c67ec86dcb24f78b642f8dc1917a7e3cf2e780",
      "created_at": "2025-04-21T21:36:29Z"
    },
    {
      "event": "ready_for_review",
      "id": 17343819027,
      "node_id": "RFRE_lADOABII586ddsd2zwAAAAQJxa0T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17343819027",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T21:37:26Z"
    },
    {
      "event": "commented",
      "id": 2819555645,
      "node_id": "IC_kwDOABII586oDwE9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2819555645",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T21:37:38Z",
      "updated_at": "2025-04-21T21:37:38Z",
      "author_association": "MEMBER",
      "body": "All dependencies have been merged, ready for review.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2819555645",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "unlabeled",
      "id": 17343963102,
      "node_id": "UNLE_lADOABII586ddsd2zwAAAAQJx9_e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17343963102",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T21:53:47Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2796051128,
      "node_id": "PRR_kwDOABII586mqFq4",
      "url": null,
      "actor": null,
      "commit_id": "e7c67ec86dcb24f78b642f8dc1917a7e3cf2e780",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nSeems like the commit message for 2e6dcdbc8055660a2e20ba81b62b7d26ae0ccb05 (\"Add MuSig2 Keyagg Cache class and functions\") is out-of-sync, as there is no such class added and also the mentioned `MuSig2KeyAggCacheImpl` doesn't exist.\r\n\r\nFor the newly introduced parameters of the `Const` and `Split` functions (commits fe02d7cb237c00de6abe1776b3101342ffddf757 and 4a1eeee27a64c4be7293740f8fff839879b88d86), it would be nice to have unit test coverage, but this can be also done in a follow-up.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2796051128",
      "submitted_at": "2025-04-26T14:39:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "reviewed",
      "id": 2808489885,
      "node_id": "PRR_kwDOABII586nZied",
      "url": null,
      "actor": null,
      "commit_id": "e7c67ec86dcb24f78b642f8dc1917a7e3cf2e780",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2808489885",
      "submitted_at": "2025-04-30T21:26:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17563773885,
      "node_id": "HRFPE_lADOABII586ddsd2zwAAAAQW4eu9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17563773885",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "created_at": "2025-05-07T21:33:16Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI0OTBjNTQ2OTY1ODgwMzUxNWYxZDVjNmFhNmNlNThkNWVlNDg0ZmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2490c5469658803515f1d5c6aa6ce58d5ee484fd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2490c5469658803515f1d5c6aa6ce58d5ee484fd",
      "tree": {
        "sha": "59b0d724c0c680b32f07bab25ade072f091cefb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59b0d724c0c680b32f07bab25ade072f091cefb3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d4f2f639f0f8fdabc83bbff4950f91738cb2e95",
          "sha": "2d4f2f639f0f8fdabc83bbff4950f91738cb2e95",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2d4f2f639f0f8fdabc83bbff4950f91738cb2e95"
        }
      ],
      "message": "sign: Add GetAggregateParticipantPubkeys to SigningProvider",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-05-07T21:33:32Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-22T21:43:26Z"
      },
      "sha": "2490c5469658803515f1d5c6aa6ce58d5ee484fd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg5NWYwYzVjYTlhMTJkZjg0M2YyZjdmYWZmMzdjOTQ4MDQ2NjU0ZWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/895f0c5ca9a12df843f2f7faff37c948046654ea",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/895f0c5ca9a12df843f2f7faff37c948046654ea",
      "tree": {
        "sha": "82b13bb656af75fdda61089ccfafd9a2c331d925",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82b13bb656af75fdda61089ccfafd9a2c331d925"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2490c5469658803515f1d5c6aa6ce58d5ee484fd",
          "sha": "2490c5469658803515f1d5c6aa6ce58d5ee484fd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2490c5469658803515f1d5c6aa6ce58d5ee484fd"
        }
      ],
      "message": "Add MuSig2 Keyagg Cache helper functions\n\nsecp256k1 provides us secp256k1_musig_keyagg_cache objects which we are\nused as part of session info and to get the aggregate pubkey. These\nhelper functions help us convert to/from the secp256k1 C objects into\nthe Bitcoin Core C++ objects.",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-05-07T21:33:32Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-22T20:18:28Z"
      },
      "sha": "895f0c5ca9a12df843f2f7faff37c948046654ea"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZiNjM0NzU0ZDI3ODNmZmUxNjU3MGFkMzdkYmNmOTI1MWE3ZWZjMjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "tree": {
        "sha": "e3e9be31d994fe202aea4569b8c77b3b1c4614ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3e9be31d994fe202aea4569b8c77b3b1c4614ec"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/895f0c5ca9a12df843f2f7faff37c948046654ea",
          "sha": "895f0c5ca9a12df843f2f7faff37c948046654ea",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/895f0c5ca9a12df843f2f7faff37c948046654ea"
        }
      ],
      "message": "descriptor: Add MuSigPubkeyProvider",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-05-07T21:33:32Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-15T22:10:08Z"
      },
      "sha": "6b634754d2783ffe16570ad37dbcf9251a7efc24"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkzOTE1MTQyZTE2MWU3ODQ1Mjc2MmVlN2UwMjM4OTMxNmYxNzY3MzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93915142e161e78452762ee7e02389316f176735",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/93915142e161e78452762ee7e02389316f176735",
      "tree": {
        "sha": "b452532ed4e20d3091fbf5208f85a53257198b21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b452532ed4e20d3091fbf5208f85a53257198b21"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b634754d2783ffe16570ad37dbcf9251a7efc24",
          "sha": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6b634754d2783ffe16570ad37dbcf9251a7efc24"
        }
      ],
      "message": "descriptor: Parse musig() key expressions",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-05-07T21:33:32Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-15T22:10:25Z"
      },
      "sha": "93915142e161e78452762ee7e02389316f176735"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM3ZjM1NTdhN2UyNmE5ODczZDgzZWUzMDlmZGZmNTNjOWFhMDExNGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "tree": {
        "sha": "2a12ee20ddb296440b0e9798163f712e801b746c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a12ee20ddb296440b0e9798163f712e801b746c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93915142e161e78452762ee7e02389316f176735",
          "sha": "93915142e161e78452762ee7e02389316f176735",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/93915142e161e78452762ee7e02389316f176735"
        }
      ],
      "message": "tests: Test musig() parsing",
      "committer": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2025-05-07T21:33:32Z"
      },
      "author": {
        "name": "Ava Chow",
        "email": "github@achow101.com",
        "date": "2024-01-15T22:48:19Z"
      },
      "sha": "37f3557a7e26a9873d83ee309fdff53c9aa0114c"
    },
    {
      "event": "commented",
      "id": 2860444988,
      "node_id": "IC_kwDOABII586qfu08",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2860444988",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-07T21:34:01Z",
      "updated_at": "2025-05-07T21:34:01Z",
      "author_association": "MEMBER",
      "body": "> Seems like the commit message for [2e6dcdb](https://github.com/bitcoin/bitcoin/commit/2e6dcdbc8055660a2e20ba81b62b7d26ae0ccb05) (\"Add MuSig2 Keyagg Cache class and functions\") is out-of-sync, as there is no such class added and also the mentioned `MuSig2KeyAggCacheImpl` doesn't exist.\r\n\r\nUpdated the commit message.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#issuecomment-2860444988",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31244"
    },
    {
      "event": "reviewed",
      "id": 2843677281,
      "node_id": "PRR_kwDOABII586pfxJh",
      "url": null,
      "actor": null,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2843677281",
      "submitted_at": "2025-05-15T18:40:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    },
    {
      "event": "reviewed",
      "id": 2846300829,
      "node_id": "PRR_kwDOABII586ppxqd",
      "url": null,
      "actor": null,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nReviewed up to 6b634754d2783ffe16570ad37dbcf9251a7efc24, mostly happy.\r\n\r\nI didn't thoroughly check that all test vectors from BIP390 are in the test, but did check a few.\r\n\r\n> Can you add an example to `doc/descriptors.md`?\r\n\r\nThis still seems useful (and this document should probably link back to the bip numbers, but that's orthogonal).\r\n\r\nManual testing hint for other reviewers: you can use the `deriveaddresses` RPC with some of the test vectors. Just use `00000000` as the checksum, it will tell you the right one, and then call it gain to see an address. Pass that address into `validateaddress` and compare the `scriptPubKey` to the one in the bip. ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#pullrequestreview-2846300829",
      "submitted_at": "2025-05-16T13:58:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061332697",
      "pull_request_review_id": 2796051128,
      "id": 2061332697,
      "node_id": "PRRC_kwDOABII58563XDZ",
      "diff_hunk": "@@ -82,13 +87,21 @@ bool FlatSigningProvider::GetTaprootBuilder(const XOnlyPubKey& output_key, Tapro\n     return LookupHelper(tr_trees, output_key, builder);\n }\n \n+std::vector<CPubKey> FlatSigningProvider::GetAggregateParticipantPubkeys(const CPubKey& pubkey) const\n+{\n+    const auto& it = aggregate_pubkeys.find(pubkey);\n+    if (it == aggregate_pubkeys.end()) return {};\n+    return it->second;",
      "path": "src/script/signingprovider.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "7da3e7bdd050d864a7b46fabb285aefa29ce61fc",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: could use `LookupHelper` here (for slightly better readability imho)\r\n```suggestion\r\n    std::vector<CPubKey> participant_pubkeys;\r\n    LookupHelper(aggregate_pubkeys, pubkey, participant_pubkeys);\r\n    return participant_pubkeys;\r\n```",
      "created_at": "2025-04-26T14:20:43Z",
      "updated_at": "2025-04-26T14:39:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2061332697",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061332697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 92,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061338625",
      "pull_request_review_id": 2796051128,
      "id": 2061338625,
      "node_id": "PRRC_kwDOABII58563YgB",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <vector>",
      "path": "src/musig.h",
      "position": 11,
      "original_position": 10,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "2e6dcdbc8055660a2e20ba81b62b7d26ae0ccb05",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: should also include ` <optional>`, since it's used for the return types below\r\n```suggestion\r\n#include <optional>\r\n#include <vector>\r\n```",
      "created_at": "2025-04-26T14:27:24Z",
      "updated_at": "2025-04-26T14:39:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2061338625",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061338625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061339360",
      "pull_request_review_id": 2796051128,
      "id": 2061339360,
      "node_id": "PRRC_kwDOABII58563Yrg",
      "diff_hunk": "@@ -580,6 +581,219 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        for (const auto& pubkey : m_participants) {\n+            if (pubkey->IsRange()) return true;\n+        }\n+        return false;",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "b70531cac94aa125116093c28c65f4c203dca772",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: could turn this into a one-liner by using `std::any_of`",
      "created_at": "2025-04-26T14:29:41Z",
      "updated_at": "2025-04-26T14:39:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2061339360",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061339360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 600,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 603,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061339636",
      "pull_request_review_id": 2796051128,
      "id": 2061339636,
      "node_id": "PRRC_kwDOABII58563Yv0",
      "diff_hunk": "@@ -580,6 +581,219 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        for (const auto& pubkey : m_participants) {\n+            if (pubkey->IsRange()) return true;\n+        }\n+        return false;\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        if (!any_privkeys) out.clear();\n+        return any_privkeys;\n+    }\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const override\n+    {\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (!pubkey->ToNormalizedString(arg, tmp)) {\n+                return false;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return true;\n+    }\n+\n+    void GetPrivKey(int pos, const SigningProvider& arg, FlatSigningProvider& out) const override\n+    {\n+        // Get the private keys for all participants\n+        // If there is participant derivation, it will be done.\n+        // If there is not, then the participant privkeys will be included directly\n+        for (const auto& prov : m_participants) {\n+            prov->GetPrivKey(pos, arg, out);\n+        }\n+    }\n+    std::optional<CPubKey> GetRootPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+    std::optional<CExtPubKey> GetRootExtPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+    std::unique_ptr<PubkeyProvider> Clone() const override\n+    {\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers;\n+        providers.reserve(m_participants.size());\n+        for (const std::unique_ptr<PubkeyProvider>& p : m_participants) {\n+            providers.emplace_back(p->Clone());\n+        }\n+        return std::make_unique<MuSigPubkeyProvider>(m_expr_index, std::move(providers), m_path, m_derive);\n+    }\n+    bool IsBIP32() const override\n+    {\n+        // musig() can only be a BIP 32 key if all participants are bip32 too\n+        bool all_bip32 = true;\n+        for (const auto& pk : m_participants) {\n+            all_bip32 &= pk->IsBIP32();\n+        }\n+        return all_bip32;",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 221,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "b70531cac94aa125116093c28c65f4c203dca772",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: could turn this into a one-liner by using `std::all_of`",
      "created_at": "2025-04-26T14:30:30Z",
      "updated_at": "2025-04-26T14:39:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2061339636",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061339636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 789,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 793,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526779",
      "pull_request_review_id": 2823263223,
      "id": 2078526779,
      "node_id": "PRRC_kwDOABII58574807",
      "diff_hunk": "@@ -82,13 +87,21 @@ bool FlatSigningProvider::GetTaprootBuilder(const XOnlyPubKey& output_key, Tapro\n     return LookupHelper(tr_trees, output_key, builder);\n }\n \n+std::vector<CPubKey> FlatSigningProvider::GetAggregateParticipantPubkeys(const CPubKey& pubkey) const\n+{\n+    const auto& it = aggregate_pubkeys.find(pubkey);\n+    if (it == aggregate_pubkeys.end()) return {};\n+    return it->second;",
      "path": "src/script/signingprovider.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "7da3e7bdd050d864a7b46fabb285aefa29ce61fc",
      "in_reply_to_id": 2061332697,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-05-07T21:33:32Z",
      "updated_at": "2025-05-07T21:33:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2078526779",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526779"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 92,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526898",
      "pull_request_review_id": 2823263381,
      "id": 2078526898,
      "node_id": "PRRC_kwDOABII5857482y",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <vector>",
      "path": "src/musig.h",
      "position": 11,
      "original_position": 10,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "2e6dcdbc8055660a2e20ba81b62b7d26ae0ccb05",
      "in_reply_to_id": 2061338625,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-05-07T21:33:40Z",
      "updated_at": "2025-05-07T21:33:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2078526898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526958",
      "pull_request_review_id": 2823263492,
      "id": 2078526958,
      "node_id": "PRRC_kwDOABII5857483u",
      "diff_hunk": "@@ -580,6 +581,219 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        for (const auto& pubkey : m_participants) {\n+            if (pubkey->IsRange()) return true;\n+        }\n+        return false;",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "b70531cac94aa125116093c28c65f4c203dca772",
      "in_reply_to_id": 2061339360,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-05-07T21:33:44Z",
      "updated_at": "2025-05-07T21:33:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2078526958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 600,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 603,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526998",
      "pull_request_review_id": 2823263567,
      "id": 2078526998,
      "node_id": "PRRC_kwDOABII5857484W",
      "diff_hunk": "@@ -580,6 +581,219 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        for (const auto& pubkey : m_participants) {\n+            if (pubkey->IsRange()) return true;\n+        }\n+        return false;\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        if (!any_privkeys) out.clear();\n+        return any_privkeys;\n+    }\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const override\n+    {\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (!pubkey->ToNormalizedString(arg, tmp)) {\n+                return false;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return true;\n+    }\n+\n+    void GetPrivKey(int pos, const SigningProvider& arg, FlatSigningProvider& out) const override\n+    {\n+        // Get the private keys for all participants\n+        // If there is participant derivation, it will be done.\n+        // If there is not, then the participant privkeys will be included directly\n+        for (const auto& prov : m_participants) {\n+            prov->GetPrivKey(pos, arg, out);\n+        }\n+    }\n+    std::optional<CPubKey> GetRootPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+    std::optional<CExtPubKey> GetRootExtPubKey() const override\n+    {\n+        return std::nullopt;\n+    }\n+    std::unique_ptr<PubkeyProvider> Clone() const override\n+    {\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers;\n+        providers.reserve(m_participants.size());\n+        for (const std::unique_ptr<PubkeyProvider>& p : m_participants) {\n+            providers.emplace_back(p->Clone());\n+        }\n+        return std::make_unique<MuSigPubkeyProvider>(m_expr_index, std::move(providers), m_path, m_derive);\n+    }\n+    bool IsBIP32() const override\n+    {\n+        // musig() can only be a BIP 32 key if all participants are bip32 too\n+        bool all_bip32 = true;\n+        for (const auto& pk : m_participants) {\n+            all_bip32 &= pk->IsBIP32();\n+        }\n+        return all_bip32;",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 221,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "b70531cac94aa125116093c28c65f4c203dca772",
      "in_reply_to_id": 2061339636,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-05-07T21:33:47Z",
      "updated_at": "2025-05-07T21:33:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2078526998",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078526998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": 789,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 793,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091162026",
      "pull_request_review_id": 2843677281,
      "id": 2091162026,
      "node_id": "PRRC_kwDOABII5858pJmq",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 71,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: could add a comment where this constant is coming from (https://github.com/bitcoin/bips/blob/master/bip-0328.mediawiki#cite_note-1)",
      "created_at": "2025-05-15T13:21:16Z",
      "updated_at": "2025-05-15T18:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2091162026",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091162026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 643,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091770520",
      "pull_request_review_id": 2843677281,
      "id": 2091770520,
      "node_id": "PRRC_kwDOABII5858reKY",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <optional>\n+#include <vector>\n+\n+struct secp256k1_musig_keyagg_cache;\n+\n+bool GetMuSig2KeyAggCache(const std::vector<CPubKey>& pubkeys, secp256k1_musig_keyagg_cache& keyagg_cache);\n+std::optional<CPubKey> GetCPubKeyFromMuSig2KeyAggCache(secp256k1_musig_keyagg_cache& cache);",
      "path": "src/musig.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "895f0c5ca9a12df843f2f7faff37c948046654ea",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "note for other reviewers that might wonder: these two functions and the involved `secp256k1_musig_keyagg_cache` instance are not publicly used within this PR yet, but they will be in #29675 (or any other future PRs that get split up from that one)",
      "created_at": "2025-05-15T18:40:36Z",
      "updated_at": "2025-05-15T18:40:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2091770520",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091770520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": 15,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092839369",
      "pull_request_review_id": 2846300829,
      "id": 2092839369,
      "node_id": "PRRC_kwDOABII5858vjHJ",
      "diff_hunk": "@@ -286,6 +286,7 @@ class XOnlyPubKey\n      * This is needed for key lookups since keys are indexed by CKeyID.\n      */\n     std::vector<CKeyID> GetKeyIDs() const;\n+    std::vector<CPubKey> GetCPubKeys() const;",
      "path": "src/pubkey.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "225b3adbf53e4dfde32a1f798cde30cc41998e3c",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 225b3adbf53e4dfde32a1f798cde30cc41998e3c \"XOnlyPubKey: Add GetCPubKeys\": maybe document:\r\n\r\n```cpp\r\n// Return both a version prefixed with 0x02, and one with 0x03.\r\n```\r\n\r\nThe comment inside `GetKeyIDs` could also be moved to the header.",
      "created_at": "2025-05-16T11:05:08Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2092839369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092839369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 289,
      "original_line": 289,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092871907",
      "pull_request_review_id": 2846300829,
      "id": 2092871907,
      "node_id": "PRRC_kwDOABII5858vrDj",
      "diff_hunk": "@@ -13,10 +13,10 @@ namespace script {\n \n /** Parse a constant.\n  *\n- * If sp's initial part matches str, sp is updated to skip that part, and true is returned.\n+ * If sp's initial part matches str, sp is optionally updated to skip that part, and true is returned.",
      "path": "src/script/parsing.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "fe02d7cb237c00de6abe1776b3101342ffddf757",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In fe02d7cb237c00de6abe1776b3101342ffddf757 \"script/parsing: Allow Const to not skip the found constant\": what does \"sp\" stand for anyway?",
      "created_at": "2025-05-16T11:30:03Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2092871907",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092871907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092880889",
      "pull_request_review_id": 2846300829,
      "id": 2092880889,
      "node_id": "PRRC_kwDOABII5858vtP5",
      "diff_hunk": "@@ -100,18 +100,27 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n  *\n  * If sep does not occur in sp, a singleton with the entirety of sp is returned.\n  *\n+ * @param[in] include_sep Whether to include the separator at the end of the left side of the splits.",
      "path": "src/util/string.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "4a1eeee27a64c4be7293740f8fff839879b88d86",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 4a1eeee27a64c4be7293740f8fff839879b88d86 \"util/string: Allow Split to include the separator\": the commit message would be more clear if you use the same wording as in this comment, i.e. \"include the separator at the end of the left side of the splits\".",
      "created_at": "2025-05-16T11:37:01Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2092880889",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092880889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 103,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092887857",
      "pull_request_review_id": 2846300829,
      "id": 2092887857,
      "node_id": "PRRC_kwDOABII5858vu8x",
      "diff_hunk": "@@ -100,18 +100,27 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n  *\n  * If sep does not occur in sp, a singleton with the entirety of sp is returned.\n  *\n+ * @param[in] include_sep Whether to include the separator at the end of the left side of the splits.\n+ *\n  * Note that this function does not care about braces, so splitting\n  * \"foo(bar(1),2),3) on ',' will return {\"foo(bar(1)\", \"2)\", \"3)\"}.\n+ *\n+ * If include_sep == true, splitting \"foo(bar(1),2),3) on ','\n+ * will return {\"foo(bar(1),\", \"2),\", \"3)\"}.",
      "path": "src/util/string.h",
      "position": 10,
      "original_position": 10,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "4a1eeee27a64c4be7293740f8fff839879b88d86",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also in https://github.com/bitcoin/bitcoin/commit/4a1eeee27a64c4be7293740f8fff839879b88d86, this would be a bit easier to read:\r\n\r\n```\r\n* will return the following strings:\r\n* - foo(bar(1),\r\n* - 2),\r\n* - 3)\r\n```",
      "created_at": "2025-05-16T11:42:18Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2092887857",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092887857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 109,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092892121",
      "pull_request_review_id": 2846300829,
      "id": 2092892121,
      "node_id": "PRRC_kwDOABII5858vv_Z",
      "diff_hunk": "@@ -221,6 +221,9 @@ struct PubkeyProvider\n \n     /** Make a deep copy of this PubkeyProvider */\n     virtual std::unique_ptr<PubkeyProvider> Clone() const = 0;\n+\n+    /** Whether this PubkeyProvider can be a BIP 32 extended key that can be derived from */",
      "path": "src/script/descriptor.cpp",
      "position": 13,
      "original_position": 5,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "26c25fed919d2520f561a891236220d54880b079",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 26c25fed919d2520f561a891236220d54880b079 \"descriptors: Add PubkeyProvider::IsBIP32()\": \"can be\" a BIP 32 extended key or \"is\"? In the former case, an additional comment would be useful. ",
      "created_at": "2025-05-16T11:45:35Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2092892121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092892121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 226,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092904357",
      "pull_request_review_id": 2846300829,
      "id": 2092904357,
      "node_id": "PRRC_kwDOABII5858vy-l",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <optional>\n+#include <vector>\n+\n+struct secp256k1_musig_keyagg_cache;\n+\n+bool GetMuSig2KeyAggCache(const std::vector<CPubKey>& pubkeys, secp256k1_musig_keyagg_cache& keyagg_cache);\n+std::optional<CPubKey> GetCPubKeyFromMuSig2KeyAggCache(secp256k1_musig_keyagg_cache& cache);\n+std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkeys);",
      "path": "src/musig.h",
      "position": 17,
      "original_position": 17,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "895f0c5ca9a12df843f2f7faff37c948046654ea",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 895f0c5ca9a12df843f2f7faff37c948046654ea \"Add MuSig2 Keyagg Cache helper functions\": why is this plural? IIUC there's one aggregate _key_ that's derived from the participant _keys_. If so, then maybe call this `MuSig2DeriveAggregatePubkey()`",
      "created_at": "2025-05-16T11:54:31Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2092904357",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092904357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092998484",
      "pull_request_review_id": 2846300829,
      "id": 2092998484,
      "node_id": "PRRC_kwDOABII5858wJ9U",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <optional>\n+#include <vector>\n+\n+struct secp256k1_musig_keyagg_cache;\n+\n+bool GetMuSig2KeyAggCache(const std::vector<CPubKey>& pubkeys, secp256k1_musig_keyagg_cache& keyagg_cache);",
      "path": "src/musig.h",
      "position": 15,
      "original_position": 15,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "895f0c5ca9a12df843f2f7faff37c948046654ea",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 895f0c5ca9a12df843f2f7faff37c948046654ea \"Add MuSig2 Keyagg Cache helper functions\": although we don't have to copy-paste all libsecp documentation,  I think it's worth mentioning that this doesn't sort pubkeys and the order matters.",
      "created_at": "2025-05-16T12:57:12Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2092998484",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092998484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093043309",
      "pull_request_review_id": 2846300829,
      "id": 2093043309,
      "node_id": "PRRC_kwDOABII5858wU5t",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        if (!any_privkeys) out.clear();\n+        return any_privkeys;\n+    }\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const override\n+    {\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (!pubkey->ToNormalizedString(arg, tmp)) {\n+                return false;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return true;\n+    }\n+\n+    void GetPrivKey(int pos, const SigningProvider& arg, FlatSigningProvider& out) const override\n+    {\n+        // Get the private keys for all participants\n+        // If there is participant derivation, it will be done.\n+        // If there is not, then the participant privkeys will be included directly\n+        for (const auto& prov : m_participants) {\n+            prov->GetPrivKey(pos, arg, out);\n+        }\n+    }\n+    std::optional<CPubKey> GetRootPubKey() const override",
      "path": "src/script/descriptor.cpp",
      "position": 228,
      "original_position": 194,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 6b634754d2783ffe16570ad37dbcf9251a7efc24 \"descriptor: Add MuSigPubkeyProvider\": could add a short comment to explain why this doesn't exist",
      "created_at": "2025-05-16T13:22:44Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093043309",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093043309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 766,
      "original_line": 766,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093043962",
      "pull_request_review_id": 2846300829,
      "id": 2093043962,
      "node_id": "PRRC_kwDOABII5858wVD6",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        if (!any_privkeys) out.clear();\n+        return any_privkeys;\n+    }\n+    bool ToNormalizedString(const SigningProvider& arg, std::string& out, const DescriptorCache* cache = nullptr) const override\n+    {\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (!pubkey->ToNormalizedString(arg, tmp)) {\n+                return false;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return true;\n+    }\n+\n+    void GetPrivKey(int pos, const SigningProvider& arg, FlatSigningProvider& out) const override\n+    {\n+        // Get the private keys for all participants",
      "path": "src/script/descriptor.cpp",
      "position": 221,
      "original_position": 187,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 6b634754d2783ffe16570ad37dbcf9251a7efc24 \"descriptor: Add MuSigPubkeyProvider\": do you mean \"all or nothing\" or \"any that we have\"?",
      "created_at": "2025-05-16T13:23:07Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093043962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093043962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 759,
      "original_line": 759,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093048884",
      "pull_request_review_id": 2846300829,
      "id": 2093048884,
      "node_id": "PRRC_kwDOABII5858wWQ0",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);",
      "path": "src/script/descriptor.cpp",
      "position": 192,
      "original_position": 158,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In https://github.com/bitcoin/bitcoin/commit/6b634754d2783ffe16570ad37dbcf9251a7efc24 \"descriptor: why apostrophe? 😢",
      "created_at": "2025-05-16T13:25:36Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093048884",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093048884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 730,
      "original_line": 730,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093082286",
      "pull_request_review_id": 2846300829,
      "id": 2093082286,
      "node_id": "PRRC_kwDOABII5858weau",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");",
      "path": "src/script/descriptor.cpp",
      "position": null,
      "original_position": 71,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": 2091162026,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This constant should probably live in `musig.h`.",
      "created_at": "2025-05-16T13:43:50Z",
      "updated_at": "2025-05-16T13:58:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093082286",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093082286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 643,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093504031",
      "pull_request_review_id": 2847351532,
      "id": 2093504031,
      "node_id": "PRRC_kwDOABII5858yFYf",
      "diff_hunk": "@@ -13,10 +13,10 @@ namespace script {\n \n /** Parse a constant.\n  *\n- * If sp's initial part matches str, sp is updated to skip that part, and true is returned.\n+ * If sp's initial part matches str, sp is optionally updated to skip that part, and true is returned.",
      "path": "src/script/parsing.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "fe02d7cb237c00de6abe1776b3101342ffddf757",
      "in_reply_to_id": 2092871907,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "**sp**an?",
      "created_at": "2025-05-16T18:23:31Z",
      "updated_at": "2025-05-16T18:23:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093504031",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093504031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093515670",
      "pull_request_review_id": 2847370495,
      "id": 2093515670,
      "node_id": "PRRC_kwDOABII5858yIOW",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MUSIG_H\n+#define BITCOIN_MUSIG_H\n+\n+#include <pubkey.h>\n+\n+#include <optional>\n+#include <vector>\n+\n+struct secp256k1_musig_keyagg_cache;\n+\n+bool GetMuSig2KeyAggCache(const std::vector<CPubKey>& pubkeys, secp256k1_musig_keyagg_cache& keyagg_cache);\n+std::optional<CPubKey> GetCPubKeyFromMuSig2KeyAggCache(secp256k1_musig_keyagg_cache& cache);\n+std::optional<CPubKey> MuSig2AggregatePubkeys(const std::vector<CPubKey>& pubkeys);",
      "path": "src/musig.h",
      "position": 17,
      "original_position": 17,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "895f0c5ca9a12df843f2f7faff37c948046654ea",
      "in_reply_to_id": 2092904357,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"Aggregate\" is used as an imperative verb here, so it is \"(you,) aggregate (these) pubkeys\"",
      "created_at": "2025-05-16T18:34:13Z",
      "updated_at": "2025-05-16T18:34:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093515670",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093515670"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093530014",
      "pull_request_review_id": 2847393088,
      "id": 2093530014,
      "node_id": "PRRC_kwDOABII5858yLue",
      "diff_hunk": "@@ -580,6 +581,212 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n     }\n };\n \n+/** PubkeyProvider for a musig() expression */\n+class MuSigPubkeyProvider final : public PubkeyProvider\n+{\n+private:\n+    //! PubkeyProvider for the participants\n+    const std::vector<std::unique_ptr<PubkeyProvider>> m_participants;\n+    //! Derivation path if this is ranged\n+    const KeyPath m_path;\n+    //! PubkeyProvider for the aggregate pubkey if it can be cached (i.e. participants are not ranged)\n+    mutable std::unique_ptr<PubkeyProvider> m_aggregate_provider;\n+    mutable std::optional<CPubKey> m_aggregate_pubkey;\n+    const DeriveType m_derive;\n+\n+    bool IsRangedDerivation() const { return m_derive != DeriveType::NO; }\n+    bool IsRangedParticipants() const\n+    {\n+        return std::any_of(m_participants.begin(), m_participants.end(), [](const auto& pubkey) { return pubkey->IsRange(); });\n+    }\n+\n+public:\n+    MuSigPubkeyProvider(\n+        uint32_t exp_index,\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers,\n+        KeyPath path,\n+        DeriveType derive\n+    )\n+        : PubkeyProvider(exp_index),\n+        m_participants(std::move(providers)),\n+        m_path(std::move(path)),\n+        m_derive(derive)\n+    {}\n+\n+    std::optional<CPubKey> GetPubKey(int pos, const SigningProvider& arg, FlatSigningProvider& out, const DescriptorCache* read_cache = nullptr, DescriptorCache* write_cache = nullptr) const override\n+    {\n+        // If the participants are not ranged, we can compute and cache the aggregate pubkey by creating a PubkeyProvider for it\n+        if (!m_aggregate_provider && !IsRangedParticipants()) {\n+            // Retrieve the pubkeys from the providers\n+            std::vector<CPubKey> pubkeys;\n+            for (const auto& prov : m_participants) {\n+                FlatSigningProvider dummy;\n+                std::optional<CPubKey> pubkey = prov->GetPubKey(0, arg, dummy, read_cache, write_cache);\n+                if (!pubkey.has_value()) {\n+                    return std::nullopt;\n+                }\n+                pubkeys.push_back(pubkey.value());\n+            }\n+            std::sort(pubkeys.begin(), pubkeys.end());\n+\n+            // Aggregate the pubkey\n+            m_aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            Assert(m_aggregate_pubkey.has_value());\n+\n+            // Make our pubkey provider\n+            if (m_derive != DeriveType::NO || !m_path.empty()) {\n+                // Make the synthetic xpub and construct the BIP32PubkeyProvider\n+                CExtPubKey extpub;\n+                extpub.nDepth = 0;\n+                std::memset(extpub.vchFingerprint, 0, 4);\n+                extpub.nChild = 0;\n+                extpub.chaincode.FromHex(\"6589e367712c6200e367717145cb322d76576bc3248959c474f9a602ca878086\");\n+                extpub.pubkey = m_aggregate_pubkey.value();\n+\n+                m_aggregate_provider = std::make_unique<BIP32PubkeyProvider>(m_expr_index, extpub, m_path, m_derive, /*apostrophe=*/false);\n+            } else {\n+                m_aggregate_provider = std::make_unique<ConstPubkeyProvider>(m_expr_index, m_aggregate_pubkey.value(), /*xonly=*/false);\n+            }\n+        }\n+\n+        // Retrieve all participant pubkeys\n+        std::vector<CPubKey> pubkeys;\n+        for (const auto& prov : m_participants) {\n+            std::optional<CPubKey> pub = prov->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubkeys.emplace_back(*pub);\n+        }\n+        std::sort(pubkeys.begin(), pubkeys.end());\n+\n+        CPubKey pubout;\n+        if (m_aggregate_provider) {\n+            // When we have a cached aggregate key, we are either returning it or deriving from it\n+            // Either way, we can passthrough to it's GetPubKey\n+            std::optional<CPubKey> pub = m_aggregate_provider->GetPubKey(pos, arg, out, read_cache, write_cache);\n+            if (!pub) return std::nullopt;\n+            pubout = *pub;\n+            out.aggregate_pubkeys.emplace(m_aggregate_pubkey.value(), pubkeys);\n+        } else if (IsRangedParticipants()) {\n+            // Derive participants and compute new aggregate key\n+            std::optional<CPubKey> aggregate_pubkey = MuSig2AggregatePubkeys(pubkeys);\n+            if (!aggregate_pubkey) return std::nullopt;\n+            pubout = *aggregate_pubkey;\n+\n+            KeyOriginInfo info;\n+            CKeyID keyid = aggregate_pubkey->GetID();\n+            std::copy(keyid.begin(), keyid.begin() + sizeof(info.fingerprint), info.fingerprint);\n+            out.origins.emplace(keyid, std::make_pair(*aggregate_pubkey, info));\n+            out.pubkeys.emplace(aggregate_pubkey->GetID(), *aggregate_pubkey);\n+            out.aggregate_pubkeys.emplace(pubout, pubkeys);\n+        }\n+\n+        Assert(pubout.IsValid());\n+        return pubout;\n+    }\n+    bool IsRange() const override { return IsRangedDerivation() || IsRangedParticipants(); }\n+    // musig() expressions can only be used in tr() contexts which have 32 byte xonly pubkeys\n+    size_t GetSize() const override { return 32; }\n+\n+    std::string ToString(StringType type=StringType::PUBLIC) const override\n+    {\n+        std::string out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            switch (type) {\n+                case StringType::PUBLIC:\n+                    tmp = pubkey->ToString();\n+                    break;\n+                case StringType::COMPAT:\n+                    tmp = pubkey->ToString(PubkeyProvider::StringType::COMPAT);\n+                    break;\n+            }\n+            out += tmp;\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);\n+        if (IsRangedDerivation()) {\n+            out += \"/*\";\n+        }\n+        return out;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        bool any_privkeys = false;\n+        out = \"musig(\";\n+        for (size_t i = 0; i < m_participants.size(); ++i) {\n+            const auto& pubkey = m_participants.at(i);\n+            if (i) out += \",\";\n+            std::string tmp;\n+            if (pubkey->ToPrivateString(arg, tmp)) {\n+                any_privkeys = true;\n+                out += tmp;\n+            } else {\n+                out += pubkey->ToString();\n+            }\n+        }\n+        out += \")\";\n+        out += FormatHDKeypath(m_path, /*apostrophe=*/true);",
      "path": "src/script/descriptor.cpp",
      "position": 192,
      "original_position": 158,
      "commit_id": "37f3557a7e26a9873d83ee309fdff53c9aa0114c",
      "original_commit_id": "6b634754d2783ffe16570ad37dbcf9251a7efc24",
      "in_reply_to_id": 2093048884,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It doesn't actually matter, the parameter does nothing as you can't do hardened derivation from the musig aggregate key.",
      "created_at": "2025-05-16T18:46:57Z",
      "updated_at": "2025-05-16T18:46:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31244#discussion_r2093530014",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093530014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31244"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 730,
      "original_line": 730,
      "side": "RIGHT"
    }
  ]
}