{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377",
    "id": 1949202161,
    "node_id": "PR_kwDOABII5850Lnbx",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30377",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30377.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30377.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/8756ccd71218c8e013181473720b10d3c4a94957",
    "number": 30377,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "refactor: Replace ParseHex with consteval \"\"_hex literals",
    "user": {
      "login": "hodlinator",
      "id": 172445034,
      "node_id": "U_kgDOCkdNag",
      "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hodlinator",
      "html_url": "https://github.com/hodlinator",
      "followers_url": "https://api.github.com/users/hodlinator/followers",
      "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
      "organizations_url": "https://api.github.com/users/hodlinator/orgs",
      "repos_url": "https://api.github.com/users/hodlinator/repos",
      "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/hodlinator/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Motivation:\r\n* Validates and converts the hex string into bytes at compile time instead of at runtime like `ParseHex()`.\r\n* Eliminates runtime dependencies: https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2214432177, https://github.com/bitcoin/bitcoin/pull/30048#discussion_r1592108480\r\n* Has stricter requirements than `ParseHex()` (disallows whitespace and uppercase hex digits) and replaces it in a bunch of places.\r\n* Makes it possible to derive other compile time constants.\r\n* Minor: should shave off a few runtime CPU cycles.\r\n\r\n`\"\"_hex` produces `std::array<std::byte>` as the momentum in the codebase is to use `std::byte` over `uint8_t`.\r\n\r\nAlso makes `uint256` hex string constructor disallow uppercase hex digits. Discussed: https://github.com/bitcoin/bitcoin/pull/30560#discussion_r1701323070\r\n\r\nSurprisingly does not change the size of the Guix **bitcoind** binary (on x86_64-linux-gnu) by 1 single byte.\r\n\r\nSpawned already merged PRs: #30436, #30482, #30532, #30560.",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      }
    ],
    "created_at": "2024-07-02T10:50:08Z",
    "updated_at": "2025-09-16T11:42:18Z",
    "closed_at": "2024-08-31T14:18:13Z",
    "mergeable_state": "unknown",
    "merged": true,
    "merged_at": "2024-08-31T14:18:13Z",
    "merged_by": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "b52d54736168bed82775e3c9e66c6320c7b83626",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "hodlinator:2024-07_uint256S_consteval",
      "ref": "2024-07_uint256S_consteval",
      "sha": "8756ccd71218c8e013181473720b10d3c4a94957",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 813856282,
        "node_id": "R_kgDOMIJ2Gg",
        "name": "bitcoin",
        "full_name": "hodlinator/bitcoin",
        "owner": {
          "login": "hodlinator",
          "id": 172445034,
          "node_id": "U_kgDOCkdNag",
          "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/hodlinator",
          "html_url": "https://github.com/hodlinator",
          "followers_url": "https://api.github.com/users/hodlinator/followers",
          "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
          "organizations_url": "https://api.github.com/users/hodlinator/orgs",
          "repos_url": "https://api.github.com/users/hodlinator/repos",
          "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/hodlinator/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/hodlinator/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/hodlinator/bitcoin",
        "archive_url": "https://api.github.com/repos/hodlinator/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/hodlinator/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/hodlinator/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/hodlinator/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/hodlinator/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/hodlinator/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/hodlinator/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/hodlinator/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/hodlinator/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/hodlinator/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/hodlinator/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/hodlinator/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/hodlinator/bitcoin/events",
        "forks_url": "https://api.github.com/repos/hodlinator/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/hodlinator/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/hodlinator/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/hodlinator/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/hodlinator/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/hodlinator/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/hodlinator/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/hodlinator/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/hodlinator/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/hodlinator/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/hodlinator/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/hodlinator/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/hodlinator/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/hodlinator/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/hodlinator/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/hodlinator/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:hodlinator/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/hodlinator/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/hodlinator/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/hodlinator/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/hodlinator/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/hodlinator/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/hodlinator/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/hodlinator/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/hodlinator/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/hodlinator/bitcoin/hooks",
        "svn_url": "https://github.com/hodlinator/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 251527,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-09-12T20:33:06Z",
        "created_at": "2024-06-11T22:00:51Z",
        "updated_at": "2025-09-09T13:03:15Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "4ee1940e849efe8fb1510b11d78399231df4b578",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37789,
        "stargazers_count": 85528,
        "watchers_count": 85528,
        "size": 293569,
        "default_branch": "master",
        "open_issues_count": 785,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-09-16T10:20:59Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-09-16T11:54:34Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 482,
    "deletions": 361,
    "changed_files": 31,
    "commits": 10,
    "review_comments": 303,
    "comments": 53
  },
  "events": [
    {
      "event": "commented",
      "id": 2202720361,
      "node_id": "IC_kwDOABII586DSthp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2202720361",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-02T10:50:10Z",
      "updated_at": "2024-08-31T01:32:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30377).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [l0rinc](https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2316300953), [ryanofsky](https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2267607398), [stickies-v](https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2317177524) |\n| Stale ACK | [maflcko](https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2295963942) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#30765](https://github.com/bitcoin/bitcoin/pull/30765) (refactor: Extend CScript with `operator<<` for `std::array` by l0rinc)\n* [#30618](https://github.com/bitcoin/bitcoin/pull/30618) (test: increase FromUserHex FUZZ and unit testing coverage by l0rinc)\n* [#28710](https://github.com/bitcoin/bitcoin/pull/28710) (Remove the legacy wallet and BDB dependency by achow101)\n* [#26593](https://github.com/bitcoin/bitcoin/pull/26593) (tracing: Only prepare tracepoint arguments when actually tracing by 0xB10C)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2202720361",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "labeled",
      "id": 13363990793,
      "node_id": "LE_lADOABII586ONi66zwAAAAMcjlEJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13363990793",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-02T10:50:12Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13370582119,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMc8uRn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13370582119",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a2c3d739d21965484f10380c24dc1f380f4f4246",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/a2c3d739d21965484f10380c24dc1f380f4f4246",
      "created_at": "2024-07-02T19:10:24Z"
    },
    {
      "event": "labeled",
      "id": 13393384086,
      "node_id": "LE_lADOABII586ONi66zwAAAAMeTtKW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13393384086",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-04T11:13:36Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2208857200,
      "node_id": "IC_kwDOABII586DqHxw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2208857200",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-04T12:29:51Z",
      "updated_at": "2024-07-04T12:29:51Z",
      "author_association": "MEMBER",
      "body": "> **transaction_identifier.h** - Fixed dormant bug in `TxidFromString()` where the `string_view` length wasn't respected(!).\r\n\r\nThis is known, see https://github.com/bitcoin/bitcoin/pull/28922#discussion_r1404437378. Thanks for picking it up!\r\n\r\nMaybe submit the fix first?\r\n\r\n\r\n\r\n> Realizing my GH history has minimum proof of work, I might have delayed creating a PR, but it felt timely as Testnet 4 is being worked on.\r\n\r\nNot sure what this has to do with testnet 4. May be best to remove unrelated non-technical details from the commits and pull request description. (You can still share them in later comments, if you really want)\r\n\r\n\r\nConcept ACK. The same should be done to `ParseHex`: https://github.com/bitcoin/bitcoin/pull/30048#discussion_r1592108480\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2208857200",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2211455306,
      "node_id": "IC_kwDOABII586D0CFK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2211455306",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-05T22:00:08Z",
      "updated_at": "2024-07-05T22:00:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > **transaction_identifier.h** - Fixed dormant bug in `TxidFromString()` where the `string_view` length wasn't respected(!).\r\n> \r\n> This is known, see [#28922 (comment)](https://github.com/bitcoin/bitcoin/pull/28922#discussion_r1404437378). Thanks for picking it up!\r\n>\r\n> Maybe submit the fix first?\r\n\r\nAha, good that you are tracking it! I see at least 4 possible fixes:\r\n\r\n1. Switch back to `Txid TxidFromString(const std::string& str)`\r\n2. Make `TxidFromString()` convert from `std::string_view` back to `std::string` internally before calling `uint256S()` to introduce a null-terminator.\r\n3. Carry over the full `SetHex(std::string_view)` implementation from this PR without touching the `SetHex(const char*)` implementation.\r\n4. Like 3 but implement `SetHex(const char* str)` by calling the `std::string_view` version.\r\n\r\nWhich do you recommend?\r\n\r\n> > Realizing my GH history has minimum proof of work, I might have delayed creating a PR, but it felt timely as Testnet 4 is being worked on.\r\n> \r\n> Not sure what this has to do with testnet 4. May be best to remove unrelated non-technical details from the commits and pull request description. (You can still share them in later comments, if you really want)\r\n\r\nThanks for the feedback. The Testnet 4 PR from this weeks review club introduces new hash-literals to the code, but I concede that it's a weak argument.\r\n\r\n> Concept ACK. The same should be done to `ParseHex`: [#30048 (comment)](https://github.com/bitcoin/bitcoin/pull/30048#discussion_r1592108480)\r\n\r\nThanks for having a look and the pointer to `ParseHex`! It was on my radar momentarily but I didn't reconsider it after reaching the current solution for `uint256S()`. Should probably introduce a `consteval ParseHex(const char*)` implementation as part of this PR. Moving to draft for now.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2211455306",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "convert_to_draft",
      "id": 13409704329,
      "node_id": "CTDE_lADOABII586ONi66zwAAAAMfR9mJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13409704329",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-05T22:00:29Z"
    },
    {
      "event": "commented",
      "id": 2213171483,
      "node_id": "IC_kwDOABII586D6lEb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2213171483",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-08T06:47:17Z",
      "updated_at": "2024-07-08T06:47:17Z",
      "author_association": "MEMBER",
      "body": "> Like 3 but implement `SetHex(const char* str)` by calling the `std::string_view` version.\r\n\r\nI don't think `const char*` overloads will need to be provided when `string_view` exists. Seems fine to just have a single `sting_view` function (and call it a fix at the same time).",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2213171483",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2214432177,
      "node_id": "IC_kwDOABII586D_Y2x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2214432177",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-08T15:22:15Z",
      "updated_at": "2024-07-08T15:22:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, and would be very nice for this to cover ParseHex. If it did, it seems like it would fix the unexpected consensus library dependency on the util library that hebasto reported in https://github.com/bitcoin/bitcoin/pull/29015#issuecomment-2209258843: \r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/a83f050dbe1392fc6b1b6c2a140c7346653b40d3/src/pubkey.cpp#L193\r\n\r\n\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2214432177",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13484305210,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMjuis6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13484305210",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "67b1735457ea4eaac3837952fba1098e07790428",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/67b1735457ea4eaac3837952fba1098e07790428",
      "created_at": "2024-07-12T09:03:00Z"
    },
    {
      "event": "commented",
      "id": 2225154172,
      "node_id": "IC_kwDOABII586EoSh8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2225154172",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T09:09:21Z",
      "updated_at": "2024-07-12T09:09:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > **transaction_identifier.h** - Fixed dormant bug in `TxidFromString()` where the `string_view` length wasn't respected(!).\r\n> \r\n> This is known, see [#28922 (comment)](https://github.com/bitcoin/bitcoin/pull/28922#discussion_r1404437378). Thanks for picking it up!\r\n> \r\n> Maybe submit the fix first?\r\n\r\nPR up now: #30436",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2225154172",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13484471753,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMjvLXJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13484471753",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "52f9666c2ee5e5268fe6341d064c64dcfd9d2ecc",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/52f9666c2ee5e5268fe6341d064c64dcfd9d2ecc",
      "created_at": "2024-07-12T09:16:32Z"
    },
    {
      "event": "unlabeled",
      "id": 13484542575,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAMjvcpv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13484542575",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T09:22:41Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13485120335,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMjxptP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13485120335",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "afdd377c18937d54fe479eb84df6cfccac8eb411",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/afdd377c18937d54fe479eb84df6cfccac8eb411",
      "created_at": "2024-07-12T10:10:54Z"
    },
    {
      "event": "renamed",
      "id": 13485134435,
      "node_id": "RTE_lADOABII586ONi66zwAAAAMjxtJj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13485134435",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-12T10:12:12Z",
      "rename": {
        "from": "refactor: Make uint256S(const char*) consteval",
        "to": "refactor: Make uint256S(const char*) and ParseHex(const char*) consteval"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13492563809,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMkOC9h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13492563809",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fb9bc919c74f7ebc94c535afec8b7c916a8f5160",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/fb9bc919c74f7ebc94c535afec8b7c916a8f5160",
      "created_at": "2024-07-12T21:53:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13495499192,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMkZPm4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13495499192",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "38e9a5d7b2085ed8417e8652600dbbdc163738df",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/38e9a5d7b2085ed8417e8652600dbbdc163738df",
      "created_at": "2024-07-13T13:41:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13527003181,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMmRbAt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13527003181",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8febab443bb994ac5182733f65ceff123e6e9ce7",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/8febab443bb994ac5182733f65ceff123e6e9ce7",
      "created_at": "2024-07-16T20:57:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13527045694,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMmRlY-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13527045694",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "afbf8f94aa349962750ad47f71d8d9eadbec34f1",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/afbf8f94aa349962750ad47f71d8d9eadbec34f1",
      "created_at": "2024-07-16T21:01:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13527449652,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMmTIA0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13527449652",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "92b0fb059f81959abbfe995b32ea103c2aa8db46",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/92b0fb059f81959abbfe995b32ea103c2aa8db46",
      "created_at": "2024-07-16T21:51:21Z"
    },
    {
      "event": "commented",
      "id": 2231885215,
      "node_id": "IC_kwDOABII586FB92f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2231885215",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T21:51:26Z",
      "updated_at": "2024-07-16T21:51:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/27531471253</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2231885215",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "labeled",
      "id": 13527450250,
      "node_id": "LE_lADOABII586ONi66zwAAAAMmTIKK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13527450250",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T21:51:26Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 13530104045,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAMmdQDt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13530104045",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-17T03:18:15Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2181892158,
      "node_id": "PRR_kwDOABII586CDQg-",
      "url": null,
      "actor": null,
      "commit_id": "92b0fb059f81959abbfe995b32ea103c2aa8db46",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-07-17T05:23:54Z",
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2181892158",
      "submitted_at": "2024-07-17T05:23:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2181909441,
      "node_id": "PRR_kwDOABII586CDUvB",
      "url": null,
      "actor": null,
      "commit_id": "92b0fb059f81959abbfe995b32ea103c2aa8db46",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-07-17T05:27:52Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2181909441",
      "submitted_at": "2024-07-17T05:27:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2181911444,
      "node_id": "PRR_kwDOABII586CDVOU",
      "url": null,
      "actor": null,
      "commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-07-17T05:29:39Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2181911444",
      "submitted_at": "2024-07-17T05:29:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13554997074,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMn8NdS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13554997074",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "10baae11ecc376f2250d4a51d2bbfeea56c0a31d",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/10baae11ecc376f2250d4a51d2bbfeea56c0a31d",
      "created_at": "2024-07-18T12:39:11Z"
    },
    {
      "event": "renamed",
      "id": 13555194322,
      "node_id": "RTE_lADOABII586ONi66zwAAAAMn89nS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13555194322",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T12:52:54Z",
      "rename": {
        "from": "refactor: Make uint256S(const char*) and ParseHex(const char*) consteval",
        "to": "refactor: Add consteval uint256(const char (&str)[65]) and ParseHex(const char (&s)[Size])"
      }
    },
    {
      "event": "renamed",
      "id": 13555206656,
      "node_id": "RTE_lADOABII586ONi66zwAAAAMn9AoA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13555206656",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T12:53:49Z",
      "rename": {
        "from": "refactor: Add consteval uint256(const char (&str)[65]) and ParseHex(const char (&s)[Size])",
        "to": "refactor: Add consteval uint256(\"str\") and ParseHex(\"str\")"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13555896145,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMn_o9R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13555896145",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5f07d3eb9695613fe663470d88c4750d1382692c",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/5f07d3eb9695613fe663470d88c4750d1382692c",
      "created_at": "2024-07-18T13:23:33Z"
    },
    {
      "event": "commented",
      "id": 2236516058,
      "node_id": "IC_kwDOABII586FToba",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236516058",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T13:23:39Z",
      "updated_at": "2024-07-18T13:23:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/27614934599</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2236516058",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "labeled",
      "id": 13555897438,
      "node_id": "LE_lADOABII586ONi66zwAAAAMn_pRe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13555897438",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T13:23:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2236517862,
      "node_id": "IC_kwDOABII586FTo3m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2236517862",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T13:24:34Z",
      "updated_at": "2024-07-18T13:24:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "(Fixed QT/GUI CI errors).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2236517862",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "reviewed",
      "id": 2185798321,
      "node_id": "PRR_kwDOABII586CSKKx",
      "url": null,
      "actor": null,
      "commit_id": "5f07d3eb9695613fe663470d88c4750d1382692c",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-07-18T13:24:36Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2185798321",
      "submitted_at": "2024-07-18T13:24:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13556084342,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMoAW52",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13556084342",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "created_at": "2024-07-18T13:36:57Z"
    },
    {
      "event": "reviewed",
      "id": 2185885552,
      "node_id": "PRR_kwDOABII586CSfdw",
      "url": null,
      "actor": null,
      "commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-07-18T13:48:31Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2185885552",
      "submitted_at": "2024-07-18T13:48:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2186032755,
      "node_id": "PRR_kwDOABII586CTDZz",
      "url": null,
      "actor": null,
      "commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-07-18T14:33:38Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2186032755",
      "submitted_at": "2024-07-18T14:33:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "unlabeled",
      "id": 13559435019,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAMoNI8L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13559435019",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-18T16:23:42Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13582174228,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMpj4gU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13582174228",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bc418507eeaa8c880784f6973494340ec241bf8e",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/bc418507eeaa8c880784f6973494340ec241bf8e",
      "created_at": "2024-07-19T21:38:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13593399467,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMqOtCr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13593399467",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "146a2db9e17466b3ff06a66103d5480bda2e6dba",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/146a2db9e17466b3ff06a66103d5480bda2e6dba",
      "created_at": "2024-07-21T19:05:54Z"
    },
    {
      "event": "reviewed",
      "id": 2190864424,
      "node_id": "PRR_kwDOABII586ClfAo",
      "url": null,
      "actor": null,
      "commit_id": "146a2db9e17466b3ff06a66103d5480bda2e6dba",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-07-22T07:48:58Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2190864424",
      "submitted_at": "2024-07-22T07:48:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13597363317,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMqd0x1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13597363317",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "76ef62c370d742e02636927dd95c2b70fec72881",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/76ef62c370d742e02636927dd95c2b70fec72881",
      "created_at": "2024-07-22T08:15:36Z"
    },
    {
      "event": "referenced",
      "id": 13619712190,
      "node_id": "REFE_lADOABII586ONi66zwAAAAMrzFC-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13619712190",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7cc00bfc86b4dece2e3baef5b12e910d79c822a1",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cc00bfc86b4dece2e3baef5b12e910d79c822a1",
      "created_at": "2024-07-23T18:19:35Z"
    },
    {
      "event": "labeled",
      "id": 13621177292,
      "node_id": "LE_lADOABII586ONi66zwAAAAMr4qvM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13621177292",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-23T20:26:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13666516553,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMuln5J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666516553",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "198d68c55a3deadc36c10bee1015eda34c15d7e3",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/198d68c55a3deadc36c10bee1015eda34c15d7e3",
      "created_at": "2024-07-26T22:21:35Z"
    },
    {
      "event": "renamed",
      "id": 13666518397,
      "node_id": "RTE_lADOABII586ONi66zwAAAAMuloV9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666518397",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:22:00Z",
      "rename": {
        "from": "refactor: Add consteval uint256(\"str\") and ParseHex(\"str\")",
        "to": "refactor: Add consteval uint256{\"str\"}"
      }
    },
    {
      "event": "commented",
      "id": 2253592887,
      "node_id": "IC_kwDOABII586GUxk3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2253592887",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:29:58Z",
      "updated_at": "2024-07-26T22:29:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've scaled back this PR again to only concern itself with `uint256` and not `ParseHex` in the hopes of getting it merged.\r\n\r\nEven if it doesn't get merged in favor of work by @stickies-v (https://github.com/bitcoin/bitcoin/pull/30482#discussion_r1693314022) at least it might provide valuable input without too much distraction.\r\n\r\nWill try to make use of discussion around `ParseHex` approaches here in later PR.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2253592887",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "mentioned",
      "id": 13666554080,
      "node_id": "MEE_lADOABII586ONi66zwAAAAMulxDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666554080",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:29:59Z"
    },
    {
      "event": "subscribed",
      "id": 13666554082,
      "node_id": "SE_lADOABII586ONi66zwAAAAMulxDi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666554082",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-26T22:30:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13666577770,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAMul21q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666577770",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/e6b3438aae1bb7311f655d3eeb2331989002cd2f",
      "created_at": "2024-07-26T22:35:26Z"
    },
    {
      "event": "unlabeled",
      "id": 13666915311,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAMunJPv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13666915311",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-27T00:07:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "ready_for_review",
      "id": 13668802827,
      "node_id": "RFRE_lADOABII586ONi66zwAAAAMuuWEL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13668802827",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-27T13:02:45Z"
    },
    {
      "event": "commented",
      "id": 2257792024,
      "node_id": "IC_kwDOABII586GkywY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2257792024",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T08:37:09Z",
      "updated_at": "2024-07-30T08:37:09Z",
      "author_association": "MEMBER",
      "body": "> While this may not be a hot spot, it's better hygiene _in C++20_ to store the parsed data blob directly in the binary, without any parsing at runtime.\r\n\r\nI don't understand the motivation for this change. You seem to imply that this is some vague performance improvement. However, this is  questionable.\r\n\r\n\r\nWithout a benchmark or otherwise steps to reproduce, those claims are hard to follow. Also, I'd argue performance is irrelevant in the touched code parts.\r\n\r\nThe real reason is that there is now strict compile-time checking for full validity of the hex string. Previously, any invalid string was accepted silently. I'd say this should be explained in the motivation and not silently omitted.\r\n\r\nAn alternative to the changes in this pull request would be to change the changed lines to `*Assert(uint256::FromHex(...))` to get some of the same benefits (at runtime).",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2257792024",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2257802299,
      "node_id": "IC_kwDOABII586Gk1Q7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2257802299",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T08:42:06Z",
      "updated_at": "2024-07-30T08:42:06Z",
      "author_association": "MEMBER",
      "body": "Maybe even close this pull request and open a fresh one, given that most discussion and conceptual feedback is about something that is now dropped from the pull? https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2214432177",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2257802299",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2258277800,
      "node_id": "IC_kwDOABII586GmpWo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2258277800",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T12:51:49Z",
      "updated_at": "2024-07-30T12:51:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think I don't understand the suggestion to this close PR, or maybe I just disagree with it. It seems like there are a lot of reasons to think this is a good change. It does seem like the main benefit is that constants can be checked at compile time rather than runtime, but this change can also eliminate runtime dependencies(*), make it possible to derive other constants programmatically rather than hardcoding them as opaque binary strings, make the binary smaller, and make it start up faster. The term \"hygiene\" can be a little vague, but if this change enables all of that, it seems like good hygiene to me.\r\n\r\n(*) Even if this change doesn't make ParseHex consteval right now, it seems like it would help make it consteval in the future, unless I'm missing something.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2258277800",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2258339031,
      "node_id": "IC_kwDOABII586Gm4TX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2258339031",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-30T13:21:30Z",
      "updated_at": "2024-07-30T13:21:30Z",
      "author_association": "MEMBER",
      "body": "> I think I don't understand the suggestion to this close PR\r\n\r\nTo clarify with \"close this pull request and open a fresh one\" I meant \"close this pull request and open a fresh one with the exact same commits, including a proper motivation and pull request description\". The reason being that most of the discussion comments are not related to the code changes in this pull request anymore. A good chunk of the discussion was about `ParseHex` and about a change that has since been split up and merged (https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2225154172).\r\n\r\nBut anything is fine here. My main feedback is to clarify the motivation (pull request description). This will have to be done whether it is re-opened or not. Otherwise, every single reviewer and future reader will have to do it themselves, like in https://github.com/bitcoin/bitcoin/pull/30436#issuecomment-2238241424.\r\n\r\nAlso, to clarify:\r\n\r\n* Concept ACK on `consteval uint256`.\r\n* Concept ACK on `consteval` vector hex parsing. (Looking forward to review a pull request with this)",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2258339031",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "convert_to_draft",
      "id": 13707693152,
      "node_id": "CTDE_lADOABII586ONi66zwAAAAMxCsxg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13707693152",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T10:18:15Z"
    },
    {
      "event": "commented",
      "id": 2260179265,
      "node_id": "IC_kwDOABII586Gt5lB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2260179265",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T10:22:03Z",
      "updated_at": "2024-07-31T10:22:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'll open a new PR for `uint256{\"str\"}` only (with a clearer motivation) as suggested and possibly re-use this one for `ParseHex` later, unless I don't make that into it's own PR too.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2260179265",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2260558903,
      "node_id": "IC_kwDOABII586GvWQ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2260558903",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T13:42:36Z",
      "updated_at": "2024-07-31T13:42:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "(#30560 extracted).\r\n\r\n### Differences\r\n\r\n[Comparison](https://github.com/bitcoin/bitcoin/compare/e6b3438aae1bb7311f655d3eeb2331989002cd2f..9813cbf1936a7c03a1837a5f23d1c887d0efe174)\r\n\r\n* Acquiesced to using `string_view` in the uint256-constructor instead of `char[65]`. Makes it more suitable for being called from other `consteval`/`constexpr` contexts.\r\n* Changed arg name to `hex_str` to clarify.\r\n* Cleaned up `hex_str` -> byte loop à la @paplorinc. :)",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2260558903",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "mentioned",
      "id": 13710290717,
      "node_id": "MEE_lADOABII586ONi66zwAAAAMxMm8d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13710290717",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T13:42:37Z"
    },
    {
      "event": "subscribed",
      "id": 13710290740,
      "node_id": "SE_lADOABII586ONi66zwAAAAMxMm80",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13710290740",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-31T13:42:37Z"
    },
    {
      "event": "labeled",
      "id": 13757568526,
      "node_id": "LE_lADOABII586ONi66zwAAAAM0A9YO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13757568526",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-05T03:44:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "renamed",
      "id": 13759716055,
      "node_id": "RTE_lADOABII586ONi66zwAAAAM0JJrX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13759716055",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-05T07:40:42Z",
      "rename": {
        "from": "refactor: Add consteval uint256{\"str\"}",
        "to": "on hold: refactor: Add consteval ParseHex variant"
      }
    },
    {
      "event": "referenced",
      "id": 13767075391,
      "node_id": "REFE_lADOABII586ONi66zwAAAAM0lOY_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13767075391",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "21c2879f37ce336af6df878d43ab090eb9d02157",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21c2879f37ce336af6df878d43ab090eb9d02157",
      "created_at": "2024-08-05T16:45:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13863345240,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM6UdxY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13863345240",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d6d7a0b5221935518d2797aec7abc5c9632cbf68",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/d6d7a0b5221935518d2797aec7abc5c9632cbf68",
      "created_at": "2024-08-13T13:10:59Z"
    },
    {
      "event": "renamed",
      "id": 13863364215,
      "node_id": "RTE_lADOABII586ONi66zwAAAAM6UiZ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13863364215",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T13:12:34Z",
      "rename": {
        "from": "on hold: refactor: Add consteval ParseHex variant",
        "to": "refactor: Add consteval ArrayFromBytes()"
      }
    },
    {
      "event": "ready_for_review",
      "id": 13863528223,
      "node_id": "RFRE_lADOABII586ONi66zwAAAAM6VKcf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13863528223",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T13:24:05Z"
    },
    {
      "event": "unlabeled",
      "id": 13863944148,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAM6Wv_U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13863944148",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T13:52:05Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2236080683,
      "node_id": "PRR_kwDOABII586FR-Ir",
      "url": null,
      "actor": null,
      "commit_id": "d6d7a0b5221935518d2797aec7abc5c9632cbf68",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-13T17:09:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "Did not review in detail yet but light code review ACK d6d7a0b5221935518d2797aec7abc5c9632cbf68. All changes seem like what I would expect.\r\n\r\nI think I would suggest changing title of PR to \"refactor: Replace ParseHex with consteval ArrayFromHex\" so it mentions ParseHex and it is more obvious how this affects existing code.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2236080683",
      "submitted_at": "2024-08-13T17:09:58Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "review_requested",
      "id": 13866668081,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM6hJAx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13866668081",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-13T17:10:02Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13873321330,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM66hVy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13873321330",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "created_at": "2024-08-14T01:58:04Z"
    },
    {
      "event": "renamed",
      "id": 13873324923,
      "node_id": "RTE_lADOABII586ONi66zwAAAAM66iN7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13873324923",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-14T01:58:44Z",
      "rename": {
        "from": "refactor: Add consteval ArrayFromBytes()",
        "to": "refactor: Replace ParseHex with consteval ArrayFromHex"
      }
    },
    {
      "event": "reviewed",
      "id": 2237076703,
      "node_id": "PRR_kwDOABII586FVxTf",
      "url": null,
      "actor": null,
      "commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-14T03:10:50Z",
      "author_association": "NONE",
      "user": {
        "login": "Mahmoud198425",
        "id": 172866158,
        "node_id": "U_kgDOCk26bg",
        "avatar_url": "https://avatars.githubusercontent.com/u/172866158?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Mahmoud198425",
        "html_url": "https://github.com/Mahmoud198425",
        "followers_url": "https://api.github.com/users/Mahmoud198425/followers",
        "following_url": "https://api.github.com/users/Mahmoud198425/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Mahmoud198425/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Mahmoud198425/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Mahmoud198425/subscriptions",
        "organizations_url": "https://api.github.com/users/Mahmoud198425/orgs",
        "repos_url": "https://api.github.com/users/Mahmoud198425/repos",
        "events_url": "https://api.github.com/users/Mahmoud198425/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Mahmoud198425/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2237076703",
      "submitted_at": "2024-08-14T03:10:50Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2237724166,
      "node_id": "PRR_kwDOABII586FYPYG",
      "url": null,
      "actor": null,
      "commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-14T10:42:49Z",
      "author_association": "MEMBER",
      "body": "Left some style nits / questions, feel free to ignore.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2237724166",
      "submitted_at": "2024-08-14T10:42:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2237589001,
      "node_id": "PRR_kwDOABII586FXuYJ",
      "url": null,
      "actor": null,
      "commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-14T11:27:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "I see this has been open for some time, if I missed an old comment that is still relevant, let me know.\r\n\r\nI would prefer some simplifications, since the code becase slightly more complex and I think there are a few simple fixes for that.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2237589001",
      "submitted_at": "2024-08-14T11:27:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2237840417,
      "node_id": "PRR_kwDOABII586FYrwh",
      "url": null,
      "actor": null,
      "commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-14T13:17:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK for more compile time validation.\r\n\r\n~Strangely enough, 09458eadc9a4484ba37a70d1b378ed3f3c9e31d0 [doesn't compile for me](https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716752262) even though CI seems fine.~ edit: [fixed](https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716909297) by bumping to XCode 15",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2237840417",
      "submitted_at": "2024-08-14T11:49:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13884293306,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM7kYC6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13884293306",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "created_at": "2024-08-14T17:25:17Z"
    },
    {
      "event": "reviewed",
      "id": 2238863495,
      "node_id": "PRR_kwDOABII586FcliH",
      "url": null,
      "actor": null,
      "commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-14T18:41:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 65bc6dcd573fe74d2ce175466c30ed830d17f0fc. Looks good, thanks for working on this, and I think this will avoid the need to add the ParseHex suppression in #30415. Left a few comments but nothing critical.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2238863495",
      "submitted_at": "2024-08-14T18:41:39Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "review_requested",
      "id": 13885474074,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM7o4Ua",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13885474074",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-14T18:41:43Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 13885474160,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM7o4Vw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13885474160",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-14T18:41:44Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2238242329,
      "node_id": "PRR_kwDOABII586FaN4Z",
      "url": null,
      "actor": null,
      "commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-14T18:53:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2238242329",
      "submitted_at": "2024-08-14T18:53:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2238996588,
      "node_id": "PRR_kwDOABII586FdGBs",
      "url": null,
      "actor": null,
      "commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-14T19:12:44Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2238996588",
      "submitted_at": "2024-08-14T19:12:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2239004019,
      "node_id": "PRR_kwDOABII586FdH1z",
      "url": null,
      "actor": null,
      "commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-14T19:33:14Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2239004019",
      "submitted_at": "2024-08-14T19:33:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13887476332,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM7whJs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13887476332",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/734ac5a9002493013c0f8afe763f751ac99f89c8",
      "created_at": "2024-08-14T21:11:34Z"
    },
    {
      "event": "reviewed",
      "id": 2239975805,
      "node_id": "PRR_kwDOABII586Fg1F9",
      "url": null,
      "actor": null,
      "commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-15T10:06:30Z",
      "author_association": "MEMBER",
      "body": "Left some style nits, feel free to ignore.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2239975805",
      "submitted_at": "2024-08-15T10:06:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2240096017,
      "node_id": "PRR_kwDOABII586FhScR",
      "url": null,
      "actor": null,
      "commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-15T10:51:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "We're getting closer, I still hope we don't have to sacrifice some readability.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2240096017",
      "submitted_at": "2024-08-15T10:51:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2239084398,
      "node_id": "PRR_kwDOABII586Fdbdu",
      "url": null,
      "actor": null,
      "commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-15T12:50:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review 734ac5a9002493013c0f8afe763f751ac99f89c8\r\n\r\nAfter experimenting with simplifying this. I don't think I like this approach anymore. I think adding the `ConstevalHexLiteral` class is basically going out of the way to make the code less efficient and more confusing, because instead of having a clear separation between runtime and compile time functions, we are duplicating code at runtime and compile time to provide a hybrid function that checks hex strings at compile time and then stores the unparsed hex strings in the binary to be parsed later at runtime, instead of just doing the obvious thing and storing bytes so nothing needs to be parsed at runtime.\r\n\r\nI implemented a simpler approach in https://github.com/ryanofsky/bitcoin/commits/pr/hex providing straightforward `util::HexLiteral` and `util::Vec` functions that I think would be good to adopt here. The changed commits are;\r\n\r\n- b4b923565b4adaa5e3bcb22a6bc03f1f7ac4cdde util: Add util::HexLiteral and util::Vec functions\r\n- 8ea5ece5a05967e02338f4392103513dbdb5c3f7 refactor: Hand-replace some ParseHex -> HexLiteral\r\n- c1409f4df5489df211861ce9cba1922c7a20e744 refactor: add util::HexLiteral and util::Vec using statements\r\n- 4a20aa89ffc82077c941493b61b8a13e87742c91 scripted-diff: Replace ParseHex(\"str\") -> ArrayFromHex(\"str\")\r\n\r\nThe main change is commit b4b923565b4adaa5e3bcb22a6bc03f1f7ac4cdde \"util: Add util::HexLiteral and util::Vec functions\". The other commits have only minor changes.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2239084398",
      "submitted_at": "2024-08-15T12:46:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "commented",
      "id": 2291521586,
      "node_id": "IC_kwDOABII586Ildgy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2291521586",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T15:27:07Z",
      "updated_at": "2024-08-15T15:30:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "> The main change is commit b4b923565b4adaa5e3bcb22a6bc03f1f7ac4cdde \"util: Add util::HexLiteral and util::Vec functions\". The other commits have only minor changes.\r\n\r\nDesign note about b4b923565b4adaa5e3bcb22a6bc03f1f7ac4cdde: I spent hours yesterday trying many ways to implement `VectorFromHex(...)` and `ScriptFromHex(...)` hybrid compile/runtime functions that would be equivalent to `Vec(HexLiteral(...))` and `Script(HexLiteral(...)` in this commit and concluded it was impossible because:\r\n\r\n- In order for these functions to be evaluate `char[]` arguments at compile time, they would need to be `constexpr` or `consteval`, which would make it impossible for them to return `std::vector` and `CScript` objects which are usable at runtime.\r\n\r\n- If the functions could not take `char[]` arguments, they would have to take implicitly converted arguments of an intermediate type like `ConstevalHexLiteral` with consteval constructors. But unfortunately, because of the way function template parameter deduction works in C++, the intermediate type would have to be a non-template class instead of a template class, which would make it it impossible for its size to vary based on the size of the string, so not possible for it to represent arbitrary sized binary data.\r\n\r\nEventually, I did find it was possible to implement hybrid functions that evaluated arguments at compile time but returned values that could be used at runtime if they were written like `VectorFromHex<\"1234\">()` instead of `VectorFromHex(\"1234\")`. But at that point I became convinced this was a bad approach and that is just better to have a separate compile time function `HexLiteral()` and a runtime function `Vec()` that can be used together simply and clearly instead of trying to combine different things into one function.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2291521586",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13903402904,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM8tReY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13903402904",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d543ac9702b559e0ea46af216518964e27aae7ce",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/d543ac9702b559e0ea46af216518964e27aae7ce",
      "created_at": "2024-08-15T22:11:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13903409215,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM8tTA_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13903409215",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e4032e253c2dfc8d75defd450dbb23ccf689c390",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/e4032e253c2dfc8d75defd450dbb23ccf689c390",
      "created_at": "2024-08-15T22:11:58Z"
    },
    {
      "event": "commented",
      "id": 2292367131,
      "node_id": "IC_kwDOABII586Ior8b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2292367131",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T22:16:57Z",
      "updated_at": "2024-08-15T22:33:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for taking the time @ryanofsky!\r\n\r\nYour troubles with runtime vs compile time memory is indeed part of what fed into prior solutions. Cool that `VectorFromHex<\"1234\">()` works, but I'm happy you're not a fan either.\r\n\r\nWhile I did like the symmetry of `ArrayFromHex` with the recently added `Txid::FromHex` and `uint256::FromHex`, the latter ones like to reverse the byte order, and `HexLiteral` is 2 chars less. `HexLiteral` feels more like prime real estate, so hiding behind the fig-leaf of `util` seems wise. I tried experimenting with user defined literals in response now but ran into issues with both making them `consteval` and accepting a `size_t`-templated `char`-array argument.\r\n\r\nThe implementation of `VecFromHex` was a compromise, and when un-drafting the PR a few days ago my initial version did not include it. [Some](https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716680866) [pressure](https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716693711) from @maflcko made me flip and add it, but your feedback has made me flop back gain. May him and other reviewers have mercy on my soul.\r\n\r\nI called the new helper function in **script_tests.cpp** `ToScript()` in [my original version](https://github.com/bitcoin/bitcoin/commit/d821eb1866a2e16a1af5f45215ae5f57a02cfa59#diff-060e8fd790fc1c3e18c64327a7395bb5b2d6d57db9792cc666bd8d7354a40c0b), rather than `Script()`. Are you not concerned that some day the `CScript` -> `Script` rename will happen? You evidently have less aversion to noun-named functions whereas I gravitate towards verb-adjacent.\r\n\r\nEdit:\r\nThe recent pushes were from 734ac5a9002493013c0f8afe763f751ac99f89c8 [to](https://github.com/bitcoin/bitcoin/compare/734ac5a9002493013c0f8afe763f751ac99f89c8..d543ac9702b559e0ea46af216518964e27aae7ce) d543ac9702b559e0ea46af216518964e27aae7ce [to](https://github.com/bitcoin/bitcoin/compare/d543ac9702b559e0ea46af216518964e27aae7ce..e4032e253c2dfc8d75defd450dbb23ccf689c390) e4032e253c2dfc8d75defd450dbb23ccf689c390.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2292367131",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "mentioned",
      "id": 13903453825,
      "node_id": "MEE_lADOABII586ONi66zwAAAAM8td6B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13903453825",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T22:16:59Z"
    },
    {
      "event": "subscribed",
      "id": 13903453834,
      "node_id": "SE_lADOABII586ONi66zwAAAAM8td6K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13903453834",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T22:16:59Z"
    },
    {
      "event": "mentioned",
      "id": 13903453851,
      "node_id": "MEE_lADOABII586ONi66zwAAAAM8td6b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13903453851",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T22:16:59Z"
    },
    {
      "event": "subscribed",
      "id": 13903453857,
      "node_id": "SE_lADOABII586ONi66zwAAAAM8td6h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13903453857",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T22:16:59Z"
    },
    {
      "event": "renamed",
      "id": 13903761593,
      "node_id": "RTE_lADOABII586ONi66zwAAAAM8upC5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13903761593",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T22:39:40Z",
      "rename": {
        "from": "refactor: Replace ParseHex with consteval ArrayFromHex",
        "to": "refactor: Replace ParseHex with consteval HexLiteral"
      }
    },
    {
      "event": "labeled",
      "id": 13904015347,
      "node_id": "LE_lADOABII586ONi66zwAAAAM8vm_z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13904015347",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T23:28:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2292449059,
      "node_id": "IC_kwDOABII586Io_8j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2292449059",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T23:28:40Z",
      "updated_at": "2024-08-15T23:28:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/28834906136</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2292449059",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "reviewed",
      "id": 2241499736,
      "node_id": "PRR_kwDOABII586FmpJY",
      "url": null,
      "actor": null,
      "commit_id": "e4032e253c2dfc8d75defd450dbb23ccf689c390",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-16T03:19:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK e4032e253c2dfc8d75defd450dbb23ccf689c390 if visual studio and clang-tidy errors are fixed\r\n\r\nhttps://cirrus-ci.com/task/5821174167371776\r\nhttps://github.com/bitcoin/bitcoin/actions/runs/10411271977/job/28834888600?pr=30377#step:20:2031\r\n\r\nThanks for updating. To be clear I don't have really have any issue with embedding hex constants instead byte constants in the compiled code. I mainly just thought behavior of VectorFromHex function was hard to explain and confusing, arbitrarily doing certain things at runtime and other things at compile time, and the implementation was pretty involved, duplicating code and logic. Adding one simple compile-time function seems preferable.\r\n\r\nI do think ToScript might be a better name than Script, I just didn't put much thought into it since it is a local test function. I'd want to look into semantics more (not sure if it is deserializing or pushing a number), because probably there is a better, more descriptive name. (EDIT: It looks like this is just interpreting the bytes as a serialized script, so a name like `AsScript` or `ToScript` \\\\ might be more descriptive than `Script`. I think ideally CScript would probably just have private constructors and we would use construct named functions like `ScriptCode` and `ScriptData` to construct CScript objects in a less ambiguous way.) In general, I agree verb names can be better than noun names but I think noun and other types of names can be ok when functions are acting like constructors.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2241499736",
      "submitted_at": "2024-08-15T23:48:44Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "review_requested",
      "id": 13904141513,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM8wFzJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13904141513",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T23:48:48Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 13904141596,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM8wF0c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13904141596",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T23:48:49Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2241890604,
      "node_id": "PRR_kwDOABII586FoIks",
      "url": null,
      "actor": null,
      "commit_id": "84c830f27fd62db4a9cb93bf6d28a86f7751e504",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-16T05:38:04Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2241890604",
      "submitted_at": "2024-08-16T05:38:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "review_requested",
      "id": 13906299314,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM84Umy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13906299314",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-16T05:38:09Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13909883845,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM9F_vF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13909883845",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3a96b9f4b56c2ef47f41e9baa9ce36a268aa9440",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/3a96b9f4b56c2ef47f41e9baa9ce36a268aa9440",
      "created_at": "2024-08-16T11:42:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13909923382,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM9GJY2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13909923382",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/01e18d94d9577f415748869376988e3f0f59ced0",
      "created_at": "2024-08-16T11:47:12Z"
    },
    {
      "event": "unlabeled",
      "id": 13910710239,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAM9JJff",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13910710239",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-16T13:06:36Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2242829972,
      "node_id": "PRR_kwDOABII586Frt6U",
      "url": null,
      "actor": null,
      "commit_id": "01e18d94d9577f415748869376988e3f0f59ced0",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-16T15:47:52Z",
      "author_association": "MEMBER",
      "body": "review ACK 44bb5a12c4389dc18e181387356901787844e89f\r\n\r\n(I'll do the rest later)",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2242829972",
      "submitted_at": "2024-08-16T15:47:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13917272692,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM9iLp0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13917272692",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "created_at": "2024-08-16T23:08:56Z"
    },
    {
      "event": "reviewed",
      "id": 2244077893,
      "node_id": "PRR_kwDOABII586FwelF",
      "url": null,
      "actor": null,
      "commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-17T12:25:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm mostly fine with it, would love if we could make a few usages more compact, since I think we've lost readability a bit",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2244077893",
      "submitted_at": "2024-08-17T12:25:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "commented",
      "id": 2295942259,
      "node_id": "IC_kwDOABII586I2Uxz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2295942259",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-19T08:13:18Z",
      "updated_at": "2024-08-19T08:13:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Added section on `std::array<std::byte>` to PR summary.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2295942259",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2295963942,
      "node_id": "IC_kwDOABII586I2aEm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2295963942",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-19T08:22:53Z",
      "updated_at": "2024-08-19T09:02:25Z",
      "author_association": "MEMBER",
      "body": "I haven't reviewed the last two commits, because I think the test-only changes offers the least amount of benefits, while being the hardest to review, because the type is changed and thus one has to make sure the call graph is still the same. Also, they seemingly are attracting the most bike-shedding.\r\n\r\nI think it would be better to remember the commit and then just update the called sites to accept `std::byte` (and then use that as an excuse to change the tests one-by-one to use the new HexLiteral function) in a follow-up. Otherwise, the tests will be changed again anyway for that reason (to replace `HexLiteral<uint8_t>` with `HexLiteral`).\r\n\r\nIf you decide to keep the last two commits, it would be good to correct the scripted-diff, because I think it is wrong and just happens to work by accident. The replacement is `HexLiteral\\1<uint8_t>`, where `\\1` refers to the original inner Byte type, for example `<std::byte>`. However `HexLiteral<std::byte><uint8_t>` wouldn't be valid C++ code, when the scripted-diff happens to pick it up in the future.\r\n\r\n\r\n\r\nreview ACK 01e18d94d9577f415748869376988e3f0f59ced0 🕶\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: review ACK 01e18d94d9577f415748869376988e3f0f59ced0 🕶\r\nUHkELMR2tX1aCqoW34kTrN54RD5uxnY1x/QSLH2gY0/HJ15FhM9ZEnlKU16r7AkBB6d6Dlgr99qRlQ2o6wScBA==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2295963942",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "reviewed",
      "id": 2244828359,
      "node_id": "PRR_kwDOABII586FzVzH",
      "url": null,
      "actor": null,
      "commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-19T08:23:14Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2244828359",
      "submitted_at": "2024-08-19T08:23:14Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "commented",
      "id": 2296047020,
      "node_id": "IC_kwDOABII586I2uWs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2296047020",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-19T09:01:25Z",
      "updated_at": "2024-08-19T09:01:25Z",
      "author_association": "MEMBER",
      "body": "Still haven't reviewed the last two commits, otherwise the changes since my previous review were:\r\n\r\n* Add back the comment to the `XOnlyPubKey` constructor (taking a span)\r\n* Use safer `UCharCast` in one instance\r\n* Some refactoring in the `crypter` module (Personally, I'd prefer if multi-line refactoring were done in a separate commit, not mixed with renaming and type-changes, but not sure if it makes sense to change this pull now)\r\n\r\nre-ACK 67fc994bedf14e360b3e51fa1a71dc6c1684b532 🍠\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: re-ACK 67fc994bedf14e360b3e51fa1a71dc6c1684b532 🍠\r\nbFF4oTk98kWCPHMIS+g5dBIiIgb5V1Amx9ULwWvE9TGCIN3neWeUKgPR9J9A2tUOvyYV0NUITo8uy7hQz/qcAw==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2296047020",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "review_requested",
      "id": 13927237094,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM-IMXm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13927237094",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-19T09:01:30Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2240152108,
      "node_id": "PRR_kwDOABII586FhgIs",
      "url": null,
      "actor": null,
      "commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-19T13:37:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 67fc994bedf14e360b3e51fa1a71dc6c1684b532, but\r\n\r\n> I think it would be better to remember the commit and then just update the called sites to accept `std::byte` (and then use that as an excuse to change the tests one-by-one to use the new HexLiteral function) in a follow-up. Otherwise, the tests will be changed again anyway for that reason (to replace `HexLiteral<uint8_t>` with `HexLiteral`).\r\n\r\nI agree with this approach, although I also wouldn't object to keeping the PR as-is.\r\n\r\nOtherwise, a few trivial nits, but nothing blocking.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2240152108",
      "submitted_at": "2024-08-19T13:37:57Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2245582079,
      "node_id": "PRR_kwDOABII586F2Nz_",
      "url": null,
      "actor": null,
      "commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-19T14:16:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 67fc994bedf14e360b3e51fa1a71dc6c1684b532, but it'd be fine to drop last two commits of this PR. I do think they would be improvement despite drawbacks Marco listed, but they aren't necessary and could be saved for a followup which fixes their shortcomings.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2245582079",
      "submitted_at": "2024-08-19T14:16:11Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "commented",
      "id": 2297409003,
      "node_id": "IC_kwDOABII586I763r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2297409003",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-19T20:38:04Z",
      "updated_at": "2024-08-19T20:38:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "@maflcko:\r\n> If you decide to keep the last two commits, it would be good to correct the scripted-diff, because I think it is wrong and just happens to work by accident. The replacement is `HexLiteral\\1<uint8_t>`, where `\\1` refers to the original inner Byte type, for example `<std::byte>`. However `HexLiteral<std::byte><uint8_t>` wouldn't be valid C++ code, when the scripted-diff happens to pick it up in the future.\r\n\r\nWell spotted! I wrote it that way for it to fail compilation and prompt manual adjustments. But I'm replacing it with:\r\n```\r\nsed -i --regexp-extended 's/\\bParseHex(\\(\"[^\"]*\"\\))/HexLiteral<uint8_t>\\1/g' $(git grep -l ParseHex -- :src ':(exclude)src/test/util_tests.cpp')\r\nsed -i --regexp-extended 's/\\bParseHex<std::byte>(\\(\"[^\"]*\"\\))/HexLiteral\\1/g' $(git grep -l ParseHex -- :src ':(exclude)src/test/util_tests.cpp')\r\nsed -i --regexp-extended 's/\\bParseHex(<[^>]*>)(\\(\"[^\"]*\"\\))/HexLiteral\\1\\2/g' $(git grep -l ParseHex -- :src ':(exclude)src/test/util_tests.cpp')\r\n```\r\n...which should :tm: not require manual adjustments.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2297409003",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "mentioned",
      "id": 13935599500,
      "node_id": "MEE_lADOABII586ONi66zwAAAAM-oF-M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13935599500",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-19T20:38:06Z"
    },
    {
      "event": "subscribed",
      "id": 13935599512,
      "node_id": "SE_lADOABII586ONi66zwAAAAM-oF-Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13935599512",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-19T20:38:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13935616882,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM-oKNy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13935616882",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "80a596ecca5df9f471d9fbcd9fcd15ddd296cdca",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/80a596ecca5df9f471d9fbcd9fcd15ddd296cdca",
      "created_at": "2024-08-19T20:39:54Z"
    },
    {
      "event": "commented",
      "id": 2297461028,
      "node_id": "IC_kwDOABII586I8Hkk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2297461028",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-19T21:09:12Z",
      "updated_at": "2024-08-19T21:19:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "The major change in the latest push is that I've broken out the changes to `CCrypter` + tests into several more commits (code improvement, de-Hungarianization rename, vector->span, separate XOnlyPubKey) to try to clarify what is actually happening. [Suggested by maflcko](https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2296047020).\r\n\r\nI've implemented `ScriptFromHex` in terms of a modified `ToScript` in a last attempt before [maflcko gets to veto it](https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721951966).\r\n\r\nDone some **util_tests.cpp** adjustments as suggested by [stickies-v](https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721607971) & [paplorinc](https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720760697). Added [ryanofsky's assert](https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721808875) with some `<type_traits>` adjustments.\r\n\r\nAlso improved the scripted diff as mentioned in the [message right above](https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2297409003).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2297461028",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2297476666,
      "node_id": "IC_kwDOABII586I8LY6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2297476666",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-19T21:19:47Z",
      "updated_at": "2024-08-19T21:19:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for your patience, re-reviewed everything from scratch - the focused commits help a lot.\r\nACK 80a596ecca5df9f471d9fbcd9fcd15ddd296cdca",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2297476666",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "review_requested",
      "id": 13935984339,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM-pj7T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13935984339",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-19T21:19:54Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 13935984411,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM-pj8b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13935984411",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-19T21:19:55Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 13935984512,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM-pj-A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13935984512",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-19T21:19:55Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13940496592,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM-6xjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13940496592",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9fb6c7c05660cd27227af77b5269af2b0a2e9662",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/9fb6c7c05660cd27227af77b5269af2b0a2e9662",
      "created_at": "2024-08-20T07:30:08Z"
    },
    {
      "event": "commented",
      "id": 2298177522,
      "node_id": "IC_kwDOABII586I-2fy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298177522",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T07:38:07Z",
      "updated_at": "2024-08-20T07:38:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Apologies for another push.\r\n\r\nNoticed that some of the commit messages were incorrect/imprecise:\r\n\"Only touching functions that will be modified in upcoming 2 commits.\" -> \"Only touching functions that will be modified in next commit.\"\r\n(A prior local version had code fixups happening after the de-Hungarianization and vector->span, which wasn't as smooth).\r\n\"Lines will be touched in upcoming commits within this PR.\" -> \"Lines will be touched in next 2 commits.\"\r\n\r\nContent change: The de-Hungarianization commit was adding a space after `if`, which now happens in the commit before.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2298177522",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "reviewed",
      "id": 2247213617,
      "node_id": "PRR_kwDOABII586F8cIx",
      "url": null,
      "actor": null,
      "commit_id": "08a880de6c94bc84c1f43a3845e1645d3eb67607",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-20T08:01:02Z",
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2247213617",
      "submitted_at": "2024-08-20T08:01:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13942572216,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM_CsS4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13942572216",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e29741857e900d933b5cf0fb22e3a63bfa1ecd6a",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/e29741857e900d933b5cf0fb22e3a63bfa1ecd6a",
      "created_at": "2024-08-20T10:04:56Z"
    },
    {
      "event": "reviewed",
      "id": 2247641047,
      "node_id": "PRR_kwDOABII586F-EfX",
      "url": null,
      "actor": null,
      "commit_id": "e29741857e900d933b5cf0fb22e3a63bfa1ecd6a",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-20T11:17:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK e29741857e900d933b5cf0fb22e3a63bfa1ecd6a",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2247641047",
      "submitted_at": "2024-08-20T11:17:32Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "review_requested",
      "id": 13943453648,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM_GDfQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13943453648",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T11:17:38Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 13943453786,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM_GDha",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13943453786",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T11:17:39Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "labeled",
      "id": 13943584191,
      "node_id": "LE_lADOABII586ONi66zwAAAAM_GjW_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13943584191",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T11:29:06Z",
      "label": {
        "name": "DrahtBot Guix build requested",
        "color": "bfd4f2"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13943769354,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAAM_HQkK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13943769354",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c3fa29db1b05aa51f74cc8be5bdae59be4f3b7c0",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/c3fa29db1b05aa51f74cc8be5bdae59be4f3b7c0",
      "created_at": "2024-08-20T11:45:17Z"
    },
    {
      "event": "commented",
      "id": 2298662545,
      "node_id": "IC_kwDOABII586JAs6R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298662545",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T11:47:57Z",
      "updated_at": "2024-08-20T11:47:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "reACK c3fa29db1b05aa51f74cc8be5bdae59be4f3b7c0\r\n\r\nhttps://github.com/bitcoin/bitcoin/compare/80a596ecca5df9f471d9fbcd9fcd15ddd296cdca..c3fa29db1b05aa51f74cc8be5bdae59be4f3b7c0:\r\n* Removed many `<uint8_t>` inside `ToScript`\r\n* out_exp -> string_view\r\n* braces in wallet_crypto_tests.cpp and crypter.cpp\r\n* remove_reference -> remove_reference_t",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2298662545",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "review_requested",
      "id": 13943802405,
      "node_id": "RRE_lADOABII586ONi66zwAAAAM_HYol",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13943802405",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T11:48:05Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2298715703,
      "node_id": "IC_kwDOABII586JA543",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298715703",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T12:16:17Z",
      "updated_at": "2024-08-20T12:16:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK c3fa29db1b05aa51f74cc8be5bdae59be4f3b7c0",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2298715703",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2299042222,
      "node_id": "IC_kwDOABII586JCJmu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2299042222",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T14:45:48Z",
      "updated_at": "2024-08-20T15:53:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "> does not make the binary smaller (built x86_64-linux-gnu guix bitcoind binary) - actually grows by 0.04% (~49.6 KB).\r\n\r\nNot sure if it's a dealbreaker of not, but it seems that when compiling with GCC with -O1 we're not actually storing the hexadecimal values as an array of bytes, but rather as separate stack pushes, which might be the reason for the size increase, i.e.\r\n```C++\r\nHexLiteral(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")\r\n```\r\nSeems to produce\r\n```asm\r\n    mov     BYTE PTR [rbp-80], 4\r\n    mov     BYTE PTR [rbp-79], 103\r\n    mov     BYTE PTR [rbp-78], -118\r\n    mov     BYTE PTR [rbp-77], -3\r\n    ...\r\n    mov     BYTE PTR [rbp-18], -15\r\n    mov     BYTE PTR [rbp-17], 29\r\n    mov     BYTE PTR [rbp-16], 95\r\n```\r\nSee: \r\nhttps://godbolt.org/z/7xGb1oYvq\r\n\r\n<details>\r\n<summary>vs Clang</summary>\r\n\r\n```asm\r\nmain:\r\n    push    rbp\r\n    mov     rbp, rsp\r\n    sub     rsp, 80\r\n    mov     dword ptr [rbp - 4], 0\r\n    lea     rdi, [rbp - 69]\r\n    lea     rsi, [rip + .L__const.main.hex_value]\r\n    mov     edx, 65\r\n    call    memcpy@PLT\r\n    xor     eax, eax\r\n    add     rsp, 80\r\n    pop     rbp\r\n    ret\r\n\r\n.L__const.main.hex_value:\r\n    .ascii  \"\\004g\\212\\375\\260\\376UH'\\031g\\361\\246q0\\267\\020\\\\\\326\\250(\\3409\\t\\246yb\\340\\352\\037a\\336\\266I\\366\\274?L\\3578\\304\\363U\\004\\345\\036\\301\\022\\336\\\\8M\\367\\272\\013\\215W\\212Lp+k\\361\\035_\"\r\n```\r\n\r\n</details>",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2299042222",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "reviewed",
      "id": 2248351160,
      "node_id": "PRR_kwDOABII586GAx24",
      "url": null,
      "actor": null,
      "commit_id": "c3fa29db1b05aa51f74cc8be5bdae59be4f3b7c0",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-20T16:37:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK c3fa29db1b05aa51f74cc8be5bdae59be4f3b7c0. Main changes since last review were cleanup commits being splitup, and ToScript being changed to accept std::byte so it works better with HexLiteral",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2248351160",
      "submitted_at": "2024-08-20T16:37:36Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "commented",
      "id": 2299321774,
      "node_id": "IC_kwDOABII586JDN2u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2299321774",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T16:55:24Z",
      "updated_at": "2024-08-20T16:55:24Z",
      "author_association": "MEMBER",
      "body": "@paplorinc \r\n\r\n> when compiling with GCC with -O1\r\n\r\nI don't think we care about performance/binary properties when compiling with anything below -O2.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2299321774",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "mentioned",
      "id": 13948187534,
      "node_id": "MEE_lADOABII586ONi66zwAAAAM_YHOO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13948187534",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T16:55:25Z"
    },
    {
      "event": "subscribed",
      "id": 13948187549,
      "node_id": "SE_lADOABII586ONi66zwAAAAM_YHOd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13948187549",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T16:55:26Z"
    },
    {
      "event": "commented",
      "id": 2299336432,
      "node_id": "IC_kwDOABII586JDRbw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2299336432",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T17:03:37Z",
      "updated_at": "2024-08-20T17:03:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I don't think we care about performance/binary properties when compiling with anything below -O2.\r\n\r\nBut the final binary seems to be bigger than before - @hodlinator, did you compare the before/after with `-O3`?",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2299336432",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "mentioned",
      "id": 13948283740,
      "node_id": "MEE_lADOABII586ONi66zwAAAAM_Yetc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13948283740",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T17:03:38Z"
    },
    {
      "event": "subscribed",
      "id": 13948283754,
      "node_id": "SE_lADOABII586ONi66zwAAAAM_Yetq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13948283754",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T17:03:38Z"
    },
    {
      "event": "commented",
      "id": 2299511984,
      "node_id": "IC_kwDOABII586JD8Sw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2299511984",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T18:42:02Z",
      "updated_at": "2024-08-20T18:42:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "> But the final binary seems to be bigger than before - @hodlinator, did you compare the before/after with -O3?\r\n\r\n@paplorinc I compared before/after using a guix-build since that should be representative, don't know which optimization level it has. Updated the relative size increase in the PR summary ~6 hours ago, based on the latest push (c3fa29db1b05aa51f74cc8be5bdae59be4f3b7c0). +0.04% seems okay if you ask me.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2299511984",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "mentioned",
      "id": 13949368413,
      "node_id": "MEE_lADOABII586ONi66zwAAAAM_cnhd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13949368413",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T18:42:03Z"
    },
    {
      "event": "subscribed",
      "id": 13949368426,
      "node_id": "SE_lADOABII586ONi66zwAAAAM_cnhq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13949368426",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T18:42:03Z"
    },
    {
      "event": "mentioned",
      "id": 13949368441,
      "node_id": "MEE_lADOABII586ONi66zwAAAAM_cnh5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13949368441",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T18:42:03Z"
    },
    {
      "event": "subscribed",
      "id": 13949368448,
      "node_id": "SE_lADOABII586ONi66zwAAAAM_cniA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13949368448",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T18:42:03Z"
    },
    {
      "event": "commented",
      "id": 2299712012,
      "node_id": "IC_kwDOABII586JEtIM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2299712012",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T20:31:04Z",
      "updated_at": "2024-08-20T20:31:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds (on x86_64) [untrusted test-only build, possibly unsafe, not for production use]\n\n| File | commit d79ea809d28197b1b4e3748aa1715272b53601d0<br>(master) | commit e769f5579d7b0e147b6e1c9fbacb855d4d9cf679<br>(master and this pull) |\n|--|--|--|\n| SHA256SUMS.part | [`3d911b898e9ed91f...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/SHA256SUMS.part) | [`d62651e018619c11...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/SHA256SUMS.part) |\n| *-aarch64-linux-gnu-debug.tar.gz | [`f334765cfd2ddfad...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-aarch64-linux-gnu-debug.tar.gz) | [`73218910dbc0f0f4...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-aarch64-linux-gnu-debug.tar.gz) |\n| *-aarch64-linux-gnu.tar.gz | [`71815acb3280990d...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-aarch64-linux-gnu.tar.gz) | [`54f18176f2f90839...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-aarch64-linux-gnu.tar.gz) |\n| *-arm-linux-gnueabihf-debug.tar.gz | [`04f24e107a1964ca...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-arm-linux-gnueabihf-debug.tar.gz) | [`f2be579f2b2499a1...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-arm-linux-gnueabihf-debug.tar.gz) |\n| *-arm-linux-gnueabihf.tar.gz | [`5c9d374a903ee25c...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-arm-linux-gnueabihf.tar.gz) | [`10d9657ef8ad1c53...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-arm-linux-gnueabihf.tar.gz) |\n| *-arm64-apple-darwin-unsigned.tar.gz | [`557d7dff56ee8e09...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-arm64-apple-darwin-unsigned.tar.gz) | [`4ebe258f0aea2a52...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-arm64-apple-darwin-unsigned.tar.gz) |\n| *-arm64-apple-darwin-unsigned.zip | [`abeac21881c99a45...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-arm64-apple-darwin-unsigned.zip) | [`f450e81f40976e67...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-arm64-apple-darwin-unsigned.zip) |\n| *-arm64-apple-darwin.tar.gz | [`e01f42186a42b4cf...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-arm64-apple-darwin.tar.gz) | [`94a976ffa8dcaf05...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-arm64-apple-darwin.tar.gz) |\n| *-powerpc64-linux-gnu-debug.tar.gz | [`92c87b02f1f7902e...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-powerpc64-linux-gnu-debug.tar.gz) | [`56053c8c11417f64...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-powerpc64-linux-gnu-debug.tar.gz) |\n| *-powerpc64-linux-gnu.tar.gz | [`d380db9025c9edb2...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-powerpc64-linux-gnu.tar.gz) | [`967c7f121efe4315...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-powerpc64-linux-gnu.tar.gz) |\n| *-riscv64-linux-gnu-debug.tar.gz | [`efc52e2d31119579...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-riscv64-linux-gnu-debug.tar.gz) | [`dd945e671aa7dd10...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-riscv64-linux-gnu-debug.tar.gz) |\n| *-riscv64-linux-gnu.tar.gz | [`13d42c6099da8cf0...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-riscv64-linux-gnu.tar.gz) | [`a95bc2166ae09e63...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-riscv64-linux-gnu.tar.gz) |\n| *-x86_64-apple-darwin-unsigned.tar.gz | [`69766bcdb0e7fbe4...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-x86_64-apple-darwin-unsigned.tar.gz) | [`082bda236d4804c1...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-x86_64-apple-darwin-unsigned.tar.gz) |\n| *-x86_64-apple-darwin-unsigned.zip | [`476c4d4b5f427258...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-x86_64-apple-darwin-unsigned.zip) | [`017d0f23e006ad5d...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-x86_64-apple-darwin-unsigned.zip) |\n| *-x86_64-apple-darwin.tar.gz | [`0c22dd8521ff4994...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-x86_64-apple-darwin.tar.gz) | [`245ad23101d2b8f1...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-x86_64-apple-darwin.tar.gz) |\n| *-x86_64-linux-gnu-debug.tar.gz | [`c89a5bfd3eb1648c...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-x86_64-linux-gnu-debug.tar.gz) | [`3570a9db9b29ef88...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-x86_64-linux-gnu-debug.tar.gz) |\n| *-x86_64-linux-gnu.tar.gz | [`439f2639afcc8383...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281-x86_64-linux-gnu.tar.gz) | [`9f6368f903a294f2...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b-x86_64-linux-gnu.tar.gz) |\n| *.tar.gz | [`dca2b46624c3038f...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/bitcoin-d79ea809d281.tar.gz) | [`c63b6302c66f7789...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/bitcoin-e769f5579d7b.tar.gz) |\n| guix_build.log | [`21734aba68dd5df4...`](https://drahtbot.space/guix/bitcoin/bitcoin/d79ea809d28197b1b4e3748aa1715272b53601d0/guix_build.log) | [`4a82c98c2e2c1996...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/guix_build.log) |\n| guix_build.log.diff |  | [`53d56c56ccd829f2...`](https://drahtbot.space/guix/bitcoin/bitcoin/e769f5579d7b0e147b6e1c9fbacb855d4d9cf679/guix_build.log.diff) |\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2299712012",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "unlabeled",
      "id": 13950577620,
      "node_id": "UNLE_lADOABII586ONi66zwAAAAM_hOvU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13950577620",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T20:31:04Z",
      "label": {
        "name": "DrahtBot Guix build requested",
        "color": "bfd4f2"
      }
    },
    {
      "event": "commented",
      "id": 2299770686,
      "node_id": "IC_kwDOABII586JE7c-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2299770686",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T21:09:11Z",
      "updated_at": "2024-08-20T21:09:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "> +0.04% seems okay if you ask me.\r\n\r\nMaybe, but I was expecting smaller, that's why I started digging.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2299770686",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2301457862,
      "node_id": "IC_kwDOABII586JLXXG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2301457862",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-21T08:25:21Z",
      "updated_at": "2024-08-21T08:25:21Z",
      "author_association": "MEMBER",
      "body": "An O2 godbolt would be https://godbolt.org/z/Kqxe6353P \r\n\r\n> +0.04% seems okay if you ask me.\r\n\r\nAre you sure? I checked the DrahtBot guix build and everything I checked was smaller, but maybe the build is malicious or I made a mistake.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2301457862",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2301467409,
      "node_id": "IC_kwDOABII586JLZsR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2301467409",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-21T08:30:08Z",
      "updated_at": "2024-08-21T08:30:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "This is how I checked the sizes of current tip vs base:\r\n```\r\n$ ls -al guix-build-c3fa29db1b05/distsrc-c3fa29db1b05-x86_64-linux-gnu/src/bitcoind\r\n-rwxr-xr-x 1 hodlinator users 115048128 aug 20 14:10 guix-build-c3fa29db1b05/distsrc-c3fa29db1b05-x86_64-linux-gnu/src/bitcoind\r\n\r\n$ ls -al guix-build-5fdbc8b4ee60/distsrc-5fdbc8b4ee60-x86_64-linux-gnu/src/bitcoind\r\n-rwxr-xr-x 1 hodlinator users 114998544 aug 13 11:29 guix-build-5fdbc8b4ee60/distsrc-5fdbc8b4ee60-x86_64-linux-gnu/src/bitcoind\r\n```",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2301467409",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2301487768,
      "node_id": "IC_kwDOABII586JLeqY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2301487768",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-21T08:39:04Z",
      "updated_at": "2024-08-21T08:39:58Z",
      "author_association": "MEMBER",
      "body": "I see, so I guess you are counting the increase in the debug symbols, which seems plausible, given that the pull request includes refactoring changes to introduce more implicit or explicit function or constructor calls (vector->span conversions, as well as newly introduced array->vector conversions)",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2301487768",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "commented",
      "id": 2301546811,
      "node_id": "IC_kwDOABII586JLtE7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2301546811",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-21T09:06:42Z",
      "updated_at": "2024-08-21T09:06:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "Aha.. was assuming Guix builds weren't producing debug symbols.. do the non-debug archives under */output/* contain the release-binaries? Results after untaring them:\r\n\r\n```\r\n$ ls -al guix-build-c3fa29db1b05/output/x86_64-linux-gnu/bitcoin-c3fa29db1b05/bin/bitcoind \r\n-rwxr-xr-x 1 hodlinator users 16509032 jan  1  1980 guix-build-c3fa29db1b05/output/x86_64-linux-gnu/bitcoin-c3fa29db1b05/bin/bitcoind\r\n\r\n$ ls -al guix-build-5fdbc8b4ee60/output/x86_64-linux-gnu/bitcoin-5fdbc8b4ee60/bin/bitcoind \r\n-rwxr-xr-x 1 hodlinator users 16509032 jan  1  1980 guix-build-5fdbc8b4ee60/output/x86_64-linux-gnu/bitcoin-5fdbc8b4ee60/bin/bitcoind\r\n\r\n$ diff guix-build-c3fa29db1b05/output/x86_64-linux-gnu/bitcoin-c3fa29db1b05/bin/bitcoind guix-build-5fdbc8b4ee60/output/x86_64-linux-gnu/bitcoin-5fdbc8b4ee60/bin/bitcoind\r\nBinary files guix-build-c3fa29db1b05/output/x86_64-linux-gnu/bitcoin-c3fa29db1b05/bin/bitcoind and guix-build-5fdbc8b4ee60/output/x86_64-linux-gnu/bitcoin-5fdbc8b4ee60/bin/bitcoind differ\r\n```",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2301546811",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13960077233,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAANAFd-x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13960077233",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "daba1a25a62e72e9797a134c6377d17a9274a25f",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/daba1a25a62e72e9797a134c6377d17a9274a25f",
      "created_at": "2024-08-21T12:57:38Z"
    },
    {
      "event": "renamed",
      "id": 13960224918,
      "node_id": "RTE_lADOABII586ONi66zwAAAANAGCCW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13960224918",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-21T13:07:47Z",
      "rename": {
        "from": "refactor: Replace ParseHex with consteval HexLiteral",
        "to": "refactor: Replace ParseHex with consteval \"\"_hex literals"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13960471548,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAANAG-P8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13960471548",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c90e92cb13e357c5d485f744e84ab20e65ea4e4e",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/c90e92cb13e357c5d485f744e84ab20e65ea4e4e",
      "created_at": "2024-08-21T13:24:45Z"
    },
    {
      "event": "labeled",
      "id": 13960484031,
      "node_id": "LE_lADOABII586ONi66zwAAAANAHBS_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13960484031",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-21T13:25:35Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2302056220,
      "node_id": "IC_kwDOABII586JNpcc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2302056220",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-21T13:25:36Z",
      "updated_at": "2024-08-21T13:25:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/29056977746</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2302056220",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13961240762,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAANAJ6C6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13961240762",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c139a788e0052ece8f6c5689e4cd04b406032875",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/c139a788e0052ece8f6c5689e4cd04b406032875",
      "created_at": "2024-08-21T14:17:50Z"
    },
    {
      "event": "unlabeled",
      "id": 13962777872,
      "node_id": "UNLE_lADOABII586ONi66zwAAAANAPxUQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13962777872",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-21T15:45:33Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2251172614,
      "node_id": "PRR_kwDOABII586GLisG",
      "url": null,
      "actor": null,
      "commit_id": "c139a788e0052ece8f6c5689e4cd04b406032875",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-21T16:38:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK c139a788e0052ece8f6c5689e4cd04b406032875. Switched to template literals since last review, so final state of this is a lot nicer. I like the new choice of suffixes, they seem to provide clarity and convenience.\r\n\r\nI did leave one code suggestion to move literal operators to an inline namespace, but it could easily be a followup if it would complicate this PR, since it should only add new code.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2251172614",
      "submitted_at": "2024-08-21T16:38:18Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "commented",
      "id": 2302599944,
      "node_id": "IC_kwDOABII586JPuMI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2302599944",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-21T17:23:19Z",
      "updated_at": "2024-08-21T17:23:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK c139a788e0052ece8f6c5689e4cd04b406032875",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2302599944",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13966080618,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAANAcXpq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13966080618",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7a4d249267cb5f63ace96a5fcc03452acc5468b5",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/7a4d249267cb5f63ace96a5fcc03452acc5468b5",
      "created_at": "2024-08-21T20:06:59Z"
    },
    {
      "event": "commented",
      "id": 2302928839,
      "node_id": "IC_kwDOABII586JQ-fH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2302928839",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-21T20:10:41Z",
      "updated_at": "2024-08-21T20:10:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @ryanofsky, incorporated your latest feedback in 7a4d249267cb5f63ace96a5fcc03452acc5468b5.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2302928839",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "mentioned",
      "id": 13966121576,
      "node_id": "MEE_lADOABII586ONi66zwAAAANAchpo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13966121576",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-21T20:10:42Z"
    },
    {
      "event": "subscribed",
      "id": 13966121600,
      "node_id": "SE_lADOABII586ONi66zwAAAANAchqA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13966121600",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-21T20:10:42Z"
    },
    {
      "event": "commented",
      "id": 2302954316,
      "node_id": "IC_kwDOABII586JREtM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2302954316",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-21T20:26:39Z",
      "updated_at": "2024-08-21T20:26:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "namespace + formatting changes\r\nACK 7a4d249267cb5f63ace96a5fcc03452acc5468b5",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2302954316",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "review_requested",
      "id": 13966286233,
      "node_id": "RRE_lADOABII586ONi66zwAAAANAdJ2Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13966286233",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-21T20:26:45Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "labeled",
      "id": 13975890074,
      "node_id": "LE_lADOABII586ONi66zwAAAANBByia",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13975890074",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-22T11:46:34Z",
      "label": {
        "name": "DrahtBot Guix build requested",
        "color": "bfd4f2"
      }
    },
    {
      "event": "reviewed",
      "id": 2254756097,
      "node_id": "PRR_kwDOABII586GZNkB",
      "url": null,
      "actor": null,
      "commit_id": "7a4d249267cb5f63ace96a5fcc03452acc5468b5",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-22T15:16:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 7a4d249267cb5f63ace96a5fcc03452acc5468b5. Changes since last review were just adding hex_literals namespace and improving comments as suggested (thanks!)",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2254756097",
      "submitted_at": "2024-08-22T15:16:50Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13983753147,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAANBfyO7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13983753147",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3bf94248262c34d2a0d5f57d89ed2600656d60af",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/3bf94248262c34d2a0d5f57d89ed2600656d60af",
      "created_at": "2024-08-22T20:34:36Z"
    },
    {
      "event": "commented",
      "id": 2305586006,
      "node_id": "IC_kwDOABII586JbHNW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2305586006",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-22T20:36:20Z",
      "updated_at": "2024-08-22T20:36:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds (on x86_64) [untrusted test-only build, possibly unsafe, not for production use]\n\n| File | commit bc87ad98543299e1990ee1994d0653df3ac70093<br>(master) | commit 3d1c8b1143f71644ab6339c535888efb5bf6e502<br>(master and this pull) |\n|--|--|--|\n| SHA256SUMS.part | [`5a610e983a4fcc01...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/SHA256SUMS.part) | [`8530068160c65660...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/SHA256SUMS.part) |\n| *-aarch64-linux-gnu-debug.tar.gz | [`c0172136d30ba6d9...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-aarch64-linux-gnu-debug.tar.gz) | [`dd9cd54dbac35062...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-aarch64-linux-gnu-debug.tar.gz) |\n| *-aarch64-linux-gnu.tar.gz | [`e839a3d864b3df80...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-aarch64-linux-gnu.tar.gz) | [`a9cbec45c80c4a41...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-aarch64-linux-gnu.tar.gz) |\n| *-arm-linux-gnueabihf-debug.tar.gz | [`0fb0f55e2fc0ddb3...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-arm-linux-gnueabihf-debug.tar.gz) | [`fb7cf87f23cc9f85...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-arm-linux-gnueabihf-debug.tar.gz) |\n| *-arm-linux-gnueabihf.tar.gz | [`d999afba72e1f77b...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-arm-linux-gnueabihf.tar.gz) | [`3a572311975c9f94...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-arm-linux-gnueabihf.tar.gz) |\n| *-arm64-apple-darwin-unsigned.tar.gz | [`8ead23a66a5db4ba...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-arm64-apple-darwin-unsigned.tar.gz) | [`d9ff133f276d8d04...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-arm64-apple-darwin-unsigned.tar.gz) |\n| *-arm64-apple-darwin-unsigned.zip | [`d339e2be0a131b6f...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-arm64-apple-darwin-unsigned.zip) | [`8aacc66cb52e2906...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-arm64-apple-darwin-unsigned.zip) |\n| *-arm64-apple-darwin.tar.gz | [`d83c4fd2a0d0ec3d...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-arm64-apple-darwin.tar.gz) | [`778848da9139613c...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-arm64-apple-darwin.tar.gz) |\n| *-powerpc64-linux-gnu-debug.tar.gz | [`68106d41333bfc6d...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-powerpc64-linux-gnu-debug.tar.gz) | [`5b3f721fbaf77ef9...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-powerpc64-linux-gnu-debug.tar.gz) |\n| *-powerpc64-linux-gnu.tar.gz | [`d4e70fa8303a3d41...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-powerpc64-linux-gnu.tar.gz) | [`81a446b39c932895...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-powerpc64-linux-gnu.tar.gz) |\n| *-riscv64-linux-gnu-debug.tar.gz | [`15fc2c6a2ffb489f...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-riscv64-linux-gnu-debug.tar.gz) | [`51cdf9ef4c293ac2...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-riscv64-linux-gnu-debug.tar.gz) |\n| *-riscv64-linux-gnu.tar.gz | [`7769e1b123de3991...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-riscv64-linux-gnu.tar.gz) | [`1cfb9e47d7d45d61...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-riscv64-linux-gnu.tar.gz) |\n| *-x86_64-apple-darwin-unsigned.tar.gz | [`0fe2a4cd1d6f4a65...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-x86_64-apple-darwin-unsigned.tar.gz) | [`667c61801612cd75...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-x86_64-apple-darwin-unsigned.tar.gz) |\n| *-x86_64-apple-darwin-unsigned.zip | [`6595b69b243f19e0...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-x86_64-apple-darwin-unsigned.zip) | [`c80173bbac4fbe11...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-x86_64-apple-darwin-unsigned.zip) |\n| *-x86_64-apple-darwin.tar.gz | [`fd8bde8242b702b9...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-x86_64-apple-darwin.tar.gz) | [`4c87a8468daf789f...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-x86_64-apple-darwin.tar.gz) |\n| *-x86_64-linux-gnu-debug.tar.gz | [`973533336d1e65d8...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-x86_64-linux-gnu-debug.tar.gz) | [`4069401f6f409655...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-x86_64-linux-gnu-debug.tar.gz) |\n| *-x86_64-linux-gnu.tar.gz | [`7792be2c3dc1a33e...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432-x86_64-linux-gnu.tar.gz) | [`0cde2435a0a4f0a2...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7-x86_64-linux-gnu.tar.gz) |\n| *.tar.gz | [`4e4718eaffc52514...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/bitcoin-bc87ad985432.tar.gz) | [`961cb39cebf18bfa...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/bitcoin-3d1c8b1143f7.tar.gz) |\n| guix_build.log | [`d28572665bf76fdb...`](https://drahtbot.space/guix/bitcoin/bitcoin/bc87ad98543299e1990ee1994d0653df3ac70093/guix_build.log) | [`1fcc45c4c0bdf649...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/guix_build.log) |\n| guix_build.log.diff |  | [`95ccdc6c1c71e697...`](https://drahtbot.space/guix/bitcoin/bitcoin/3d1c8b1143f71644ab6339c535888efb5bf6e502/guix_build.log.diff) |\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2305586006",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "unlabeled",
      "id": 13983770052,
      "node_id": "UNLE_lADOABII586ONi66zwAAAANBf2XE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13983770052",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-22T20:36:21Z",
      "label": {
        "name": "DrahtBot Guix build requested",
        "color": "bfd4f2"
      }
    },
    {
      "event": "reviewed",
      "id": 2255609564,
      "node_id": "PRR_kwDOABII586Gcd7c",
      "url": null,
      "actor": null,
      "commit_id": "3bf94248262c34d2a0d5f57d89ed2600656d60af",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-22T20:38:07Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2255609564",
      "submitted_at": "2024-08-22T20:38:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13983817596,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAANBgB98",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13983817596",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a3cafc6b14e6640f220801318a9914e729d091d1",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/a3cafc6b14e6640f220801318a9914e729d091d1",
      "created_at": "2024-08-22T20:40:36Z"
    },
    {
      "event": "labeled",
      "id": 13983818779,
      "node_id": "LE_lADOABII586ONi66zwAAAANBgCQb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13983818779",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-22T20:40:42Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2305594141,
      "node_id": "IC_kwDOABII586JbJMd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2305594141",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-22T20:40:43Z",
      "updated_at": "2024-08-22T20:40:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/29134897722</sub>\n\n<details><summary>Hints</summary>\n\nMake sure to run all tests locally, according to the documentation.\n\nThe failure may happen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2305594141",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13983880591,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAANBgRWP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13983880591",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/df92661444f46790b12d5061344d72106ef820d9",
      "created_at": "2024-08-22T20:46:12Z"
    },
    {
      "event": "commented",
      "id": 2305609525,
      "node_id": "IC_kwDOABII586JbM81",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2305609525",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-22T20:49:20Z",
      "updated_at": "2024-08-22T20:49:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK df92661444f46790b12d5061344d72106ef820d9\r\n\r\nDoc updates",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2305609525",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "review_requested",
      "id": 13983917191,
      "node_id": "RRE_lADOABII586ONi66zwAAAANBgaSH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13983917191",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-22T20:49:28Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "unlabeled",
      "id": 13985086770,
      "node_id": "UNLE_lADOABII586ONi66zwAAAANBk30y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13985086770",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-22T21:59:03Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2256099298,
      "node_id": "PRR_kwDOABII586GeVfi",
      "url": null,
      "actor": null,
      "commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-23T02:04:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK df92661444f46790b12d5061344d72106ef820d9. Just documentation update since last review (thanks!)",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2256099298",
      "submitted_at": "2024-08-23T02:04:03Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2257201161,
      "node_id": "PRR_kwDOABII586GiigJ",
      "url": null,
      "actor": null,
      "commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-23T13:47:38Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2257201161",
      "submitted_at": "2024-08-23T13:47:38Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "reviewed",
      "id": 2256959862,
      "node_id": "PRR_kwDOABII586Ghnl2",
      "url": null,
      "actor": null,
      "commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-28T10:15:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK df92661444f46790b12d5061344d72106ef820d9 . \r\n\r\nThe new \"\"_hex literals approach makes for a much more ergonomic interface that is concise, clear and easy to use. Since the \"\"_hex operators are templated on the string literal, It does generate a lot of template instantiations, ~but since these are all consteval, I believe these should not end up in the binary, so that seems like a reasonable trade-off.~\r\n\r\nLeft a few nits and a possible approach to further clean up the `base_blob::base_blob(string_view)` constructor, but nothing that needs to be done now or here.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2256959862",
      "submitted_at": "2024-08-23T14:56:54Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14000043711,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAANCd7a_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14000043711",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "07b4d292e22be59d0c605744ac01e5c0cd689810",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/07b4d292e22be59d0c605744ac01e5c0cd689810",
      "created_at": "2024-08-24T07:09:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14001465760,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAANCjWmg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14001465760",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e63d7e54d26ddabedc5cd2cb8e1180da520fd063",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/e63d7e54d26ddabedc5cd2cb8e1180da520fd063",
      "created_at": "2024-08-24T14:07:11Z"
    },
    {
      "event": "commented",
      "id": 2308415965,
      "node_id": "IC_kwDOABII586Jl6Hd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2308415965",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T14:37:17Z",
      "updated_at": "2024-08-24T14:37:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "[docs + constexpr mostly](https://github.com/bitcoin/bitcoin/compare/df92661..e63d7e54d26ddabedc5cd2cb8e1180da520fd063)\r\n\r\nACK e63d7e54d26ddabedc5cd2cb8e1180da520fd063",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2308415965",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "review_requested",
      "id": 14001538273,
      "node_id": "RRE_lADOABII586ONi66zwAAAANCjoTh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14001538273",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T14:37:24Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 14001538303,
      "node_id": "RRE_lADOABII586ONi66zwAAAANCjoT_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14001538303",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T14:37:25Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2258752238,
      "node_id": "PRR_kwDOABII586GodLu",
      "url": null,
      "actor": null,
      "commit_id": "e63d7e54d26ddabedc5cd2cb8e1180da520fd063",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-24T14:38:31Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2258752238",
      "submitted_at": "2024-08-24T14:38:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14002062210,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAANCloOC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14002062210",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "92e599d57c507f35d889c3a804d2a7020dcc6b1d",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/92e599d57c507f35d889c3a804d2a7020dcc6b1d",
      "created_at": "2024-08-24T18:50:42Z"
    },
    {
      "event": "commented",
      "id": 2308510085,
      "node_id": "IC_kwDOABII586JmRGF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2308510085",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T19:30:38Z",
      "updated_at": "2024-08-25T10:19:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "~I'm not sure what's with the `Instruction clone failed` CI failures, but the change looks good to me~ the build fixed itself\r\n\r\nACK 92e599d57c507f35d889c3a804d2a7020dcc6b1d ",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2308510085",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "labeled",
      "id": 14002165305,
      "node_id": "LE_lADOABII586ONi66zwAAAANCmBY5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14002165305",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T19:35:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 14002238171,
      "node_id": "UNLE_lADOABII586ONi66zwAAAANCmTLb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14002238171",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-24T20:08:27Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2260843182,
      "node_id": "PRR_kwDOABII586Gwbqu",
      "url": null,
      "actor": null,
      "commit_id": "92e599d57c507f35d889c3a804d2a7020dcc6b1d",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-26T14:29:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 92e599d57c507f35d889c3a804d2a7020dcc6b1d, just small suggested tweaks since last review (comments, constexpr, MakeByteSpan)",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2260843182",
      "submitted_at": "2024-08-26T14:29:28Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "commented",
      "id": 2314476543,
      "node_id": "IC_kwDOABII586J9Bv_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2314476543",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T07:01:09Z",
      "updated_at": "2024-08-28T10:09:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased due to conflict. Also took advantage of now merged #29369 that fully resolves https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722229379 and https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719742146.\r\n\r\nChanges are:\r\n* 3 out of 5 replacements in **miniscript_tests.cpp** are moved to the scripted-diff commit.\r\n* The new `ToScript` in **script_tests.cpp** can now use the more natural `{span.begin(), span.end()}` instead of `{span.data(), span.data() + span.size()}`.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2314476543",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "labeled",
      "id": 14043902221,
      "node_id": "LE_lADOABII586ONi66zwAAAANFFPEN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14043902221",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T10:00:22Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14043990934,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAANFFkuW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14043990934",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "dae42d474d04168fba077f30bf5113721e9fc108",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/dae42d474d04168fba077f30bf5113721e9fc108",
      "created_at": "2024-08-28T10:07:03Z"
    },
    {
      "event": "reviewed",
      "id": 2265810088,
      "node_id": "PRR_kwDOABII586HDYSo",
      "url": null,
      "actor": null,
      "commit_id": "dae42d474d04168fba077f30bf5113721e9fc108",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-28T11:17:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK dae42d474d04168fba077f30bf5113721e9fc108",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2265810088",
      "submitted_at": "2024-08-28T11:17:32Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "review_requested",
      "id": 14044876705,
      "node_id": "RRE_lADOABII586ONi66zwAAAANFI8-h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14044876705",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T11:17:39Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 14044876872,
      "node_id": "RRE_lADOABII586ONi66zwAAAANFI9BI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14044876872",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T11:17:40Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14045036671,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAANFJkB_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14045036671",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a096215c9c71a2ec03e76f1fd0bcdda0727996e0",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/a096215c9c71a2ec03e76f1fd0bcdda0727996e0",
      "created_at": "2024-08-28T11:30:23Z"
    },
    {
      "event": "commented",
      "id": 2315130614,
      "node_id": "IC_kwDOABII586J_hb2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2315130614",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T11:59:12Z",
      "updated_at": "2024-08-28T11:59:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK a096215c9c71a2ec03e76f1fd0bcdda0727996e0",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2315130614",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "unlabeled",
      "id": 14045501960,
      "node_id": "UNLE_lADOABII586ONi66zwAAAANFLVoI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14045501960",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T12:07:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2315742637,
      "node_id": "IC_kwDOABII586KB22t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2315742637",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T16:00:32Z",
      "updated_at": "2024-08-28T16:00:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Changes since 92e599d57c507f35d889c3a804d2a7020dcc6b1d:\r\n```diff\r\ndiff --git a/src/test/miniscript_tests.cpp b/src/test/miniscript_tests.cpp\r\nindex 452baebff3..e9b0d0ec1d 100644\r\n--- a/src/test/miniscript_tests.cpp\r\n+++ b/src/test/miniscript_tests.cpp\r\n@@ -596,11 +596,11 @@ BOOST_AUTO_TEST_CASE(fixed_tests)\r\n     //  - no pubkey before the CHECKSIG\r\n     constexpr KeyConverter tap_converter{miniscript::MiniscriptContext::TAPSCRIPT};\r\n     constexpr KeyConverter wsh_converter{miniscript::MiniscriptContext::P2WSH};\r\n-    const auto no_pubkey{\"ac519c\"_hex_v_u8};\r\n+    const auto no_pubkey{\"ac519c\"_hex_u8};\r\n     BOOST_CHECK(miniscript::FromScript({no_pubkey.begin(), no_pubkey.end()}, tap_converter) == nullptr);\r\n-    const auto incomplete_multi_a{\"ba20c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5ba519c\"_hex_v_u8};\r\n+    const auto incomplete_multi_a{\"ba20c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5ba519c\"_hex_u8};\r\n     BOOST_CHECK(miniscript::FromScript({incomplete_multi_a.begin(), incomplete_multi_a.end()}, tap_converter) == nullptr);\r\n-    const auto incomplete_multi_a_2{\"ac2079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac20c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5ba519c\"_hex_v_u8};\r\n+    const auto incomplete_multi_a_2{\"ac2079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac20c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5ba519c\"_hex_u8};\r\n     BOOST_CHECK(miniscript::FromScript({incomplete_multi_a_2.begin(), incomplete_multi_a_2.end()}, tap_converter) == nullptr);\r\n     // Can use multi_a under Tapscript but not P2WSH.\r\n     Test(\"and_v(v:multi_a(2,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a,025601570cb47f238d2b0286db4a990fa0f3ba28d1a319f5e7cf55c2a2444da7cc),after(1231488000))\", \"?\", \"20d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85aac205601570cb47f238d2b0286db4a990fa0f3ba28d1a319f5e7cf55c2a2444da7ccba529d0400046749b1\", TESTMODE_VALID | TESTMODE_NONMAL | TESTMODE_NEEDSIG | TESTMODE_P2WSH_INVALID, 4, 2, {}, {}, 3);\r\n@@ -645,12 +645,12 @@ BOOST_AUTO_TEST_CASE(fixed_tests)\r\n \r\n     // Misc unit tests\r\n     // A Script with a non minimal push is invalid\r\n-    const std::vector<unsigned char> nonminpush{\"0000210232780000feff00ffffffffffff21ff005f00ae21ae00000000060602060406564c2102320000060900fe00005f00ae21ae00100000060606060606000000000000000000000000000000000000000000000000000000000000000000\"_hex_v_u8};\r\n+    constexpr auto nonminpush{\"0000210232780000feff00ffffffffffff21ff005f00ae21ae00000000060602060406564c2102320000060900fe00005f00ae21ae00100000060606060606000000000000000000000000000000000000000000000000000000000000000000\"_hex_u8};\r\n     const CScript nonminpush_script(nonminpush.begin(), nonminpush.end());\r\n     BOOST_CHECK(miniscript::FromScript(nonminpush_script, wsh_converter) == nullptr);\r\n     BOOST_CHECK(miniscript::FromScript(nonminpush_script, tap_converter) == nullptr);\r\n     // A non-minimal VERIFY (<key> CHECKSIG VERIFY 1)\r\n-    const std::vector<unsigned char> nonminverify{\"2103a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7ac6951\"_hex_v_u8};\r\n+    constexpr auto nonminverify{\"2103a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7ac6951\"_hex_u8};\r\n     const CScript nonminverify_script(nonminverify.begin(), nonminverify.end());\r\n     BOOST_CHECK(miniscript::FromScript(nonminverify_script, wsh_converter) == nullptr);\r\n     BOOST_CHECK(miniscript::FromScript(nonminverify_script, tap_converter) == nullptr);\r\ndiff --git a/src/test/script_tests.cpp b/src/test/script_tests.cpp\r\nindex ef6ca8dc0d..5825684947 100644\r\n--- a/src/test/script_tests.cpp\r\n+++ b/src/test/script_tests.cpp\r\n@@ -1358,7 +1358,7 @@ template <typename T>\r\n CScript ToScript(const T& byte_container)\r\n {\r\n     auto span{MakeUCharSpan(byte_container)};\r\n-    return {span.data(), span.data() + span.size()};\r\n+    return {span.begin(), span.end()};\r\n }\r\n \r\n static CScript ScriptFromHex(const std::string& str)\r\ndiff --git a/src/util/strencodings.h b/src/util/strencodings.h\r\nindex f9076de047..1543de03ab 100644\r\n--- a/src/util/strencodings.h\r\n+++ b/src/util/strencodings.h\r\n@@ -396,7 +396,7 @@ consteval uint8_t ConstevalHexDigit(const char c)\r\n  *   length and serialized with no prefix.\r\n  *\r\n  * @warning It may be preferable to use vector variants to save stack space when\r\n- *   declaring local variables if hex strings are large. Alternately variables\r\n+ *   declaring local variables if hex strings are large. Alternatively variables\r\n  *   could be declared constexpr to avoid using stack space.\r\n  *\r\n  * @warning Avoid `uint8_t` variants when not necessary, as the codebase\r\n```\r\n\r\nACK a096215c9c71a2ec03e76f1fd0bcdda0727996e0",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2315742637",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "labeled",
      "id": 14049915838,
      "node_id": "LE_lADOABII586ONi66zwAAAANFcLO-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14049915838",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T16:33:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdlMWQ5YTg0Njg5ZDc3YTkzNDlhM2EwOWZkNWY5ZGQzZjljMjkzYWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e1d9a84689d77a9349a3a09fd5f9dd3f9c293aa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7e1d9a84689d77a9349a3a09fd5f9dd3f9c293aa",
      "tree": {
        "sha": "5c31d5049d9784ba2895d7b737406c8260898495",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c31d5049d9784ba2895d7b737406c8260898495"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5c31d5049d9784ba2895d7b737406c8260898495\nparent 4ee1940e849efe8fb1510b11d78399231df4b578\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724071554 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724864991 +0200\n\nrefactor: Enforce lowercase hex digits for consteval uint256\n\nAlso changes compile-time asserts with comments into throws.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQLj5E6Z8L/AxYNREgjGaBNLn6qbmGqp1Ep8GvFWyrVMYWU1IKhl1tCdj8UTYKjUgSr\nVCJmeNmctwYPWxo4jWCwg=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ee1940e849efe8fb1510b11d78399231df4b578",
          "sha": "4ee1940e849efe8fb1510b11d78399231df4b578",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4ee1940e849efe8fb1510b11d78399231df4b578"
        }
      ],
      "message": "refactor: Enforce lowercase hex digits for consteval uint256\n\nAlso changes compile-time asserts with comments into throws.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-28T17:09:51Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-19T12:45:54Z"
      },
      "sha": "7e1d9a84689d77a9349a3a09fd5f9dd3f9c293aa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ5OWM4MTY5NzE0OGE5Njk1YzBmYmE2MTRkZmY5ZmJlNzI4YTNhY2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d99c81697148a9695c0fba614dff9fbe728a3acd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d99c81697148a9695c0fba614dff9fbe728a3acd",
      "tree": {
        "sha": "0f4a41e38343454160abb1a4c9b255b1a2c856bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f4a41e38343454160abb1a4c9b255b1a2c856bd"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0f4a41e38343454160abb1a4c9b255b1a2c856bd\nparent 7e1d9a84689d77a9349a3a09fd5f9dd3f9c293aa\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724190062 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724864991 +0200\n\nrefactor: Improve CCrypter related lines\n\nLines will be touched in next 2 commits.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQD+8VBdqGVg/peBSfyeMsGsHvNCqQj6iEhbUUazmlQ0QWy49Y7wKHR1yfeAJfCWOR1\nLDow88ivPNVIN0Izh4VQY=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e1d9a84689d77a9349a3a09fd5f9dd3f9c293aa",
          "sha": "7e1d9a84689d77a9349a3a09fd5f9dd3f9c293aa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7e1d9a84689d77a9349a3a09fd5f9dd3f9c293aa"
        }
      ],
      "message": "refactor: Improve CCrypter related lines\n\nLines will be touched in next 2 commits.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-28T17:09:51Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-20T21:41:02Z"
      },
      "sha": "d99c81697148a9695c0fba614dff9fbe728a3acd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJkMDgzMGJiZDQxMDVhZjE5NTNiNmI4OTdiYTZiYzM1MDk4Y2JlMTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd0830bbd4105af1953b6b897ba6bc35098cbe13",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bd0830bbd4105af1953b6b897ba6bc35098cbe13",
      "tree": {
        "sha": "d1d823e011bc446119a7854e9028846ba0d7bf9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1d823e011bc446119a7854e9028846ba0d7bf9f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d1d823e011bc446119a7854e9028846ba0d7bf9f\nparent d99c81697148a9695c0fba614dff9fbe728a3acd\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724190297 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724864991 +0200\n\nrefactor: de-Hungarianize CCrypter\n\nBeyond renaming it also adjusts whitespace and adds braces to conform to current doc/developer-notes.md.\n\nTestEncrypt: Change iterator type to auto in ahead of vector -> span conversion.\n\nOnly touches functions that will be modified in next commit.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQGlPNDTiMtti/C9qmPTFXcxTy1lKi8+GFgVQ06OFn+MTPDff81QVNUZqEcoegk4FrB\n2kupP/aw8MX7nITK546QE=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d99c81697148a9695c0fba614dff9fbe728a3acd",
          "sha": "d99c81697148a9695c0fba614dff9fbe728a3acd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d99c81697148a9695c0fba614dff9fbe728a3acd"
        }
      ],
      "message": "refactor: de-Hungarianize CCrypter\n\nBeyond renaming it also adjusts whitespace and adds braces to conform to current doc/developer-notes.md.\n\nTestEncrypt: Change iterator type to auto in ahead of vector -> span conversion.\n\nOnly touches functions that will be modified in next commit.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-28T17:09:51Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-20T21:44:57Z"
      },
      "sha": "bd0830bbd4105af1953b6b897ba6bc35098cbe13"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQwM2Q4NmYxY2NmMGI3M2YwNDJkNDJhOTcyMmJiMDA3YmE4YzdhMzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/403d86f1ccf0b73f042d42a9722bb007ba8c7a31",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/403d86f1ccf0b73f042d42a9722bb007ba8c7a31",
      "tree": {
        "sha": "8fd3934c3a5c128ba6cd91d68483ea290684f3ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fd3934c3a5c128ba6cd91d68483ea290684f3ce"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8fd3934c3a5c128ba6cd91d68483ea290684f3ce\nparent bd0830bbd4105af1953b6b897ba6bc35098cbe13\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724084509 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724864991 +0200\n\nrefactor: vector -> span in CCrypter\n\nTestEncryptSingle: Remove no longer needed plaintext2-variable that existed because vectors had different allocators.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQMhWc2pTuNXG5se9hL0upYnLTbAHoiEh6mffsq+YNKD0ILpi9+gLaTkKgYxwhUAMiN\nQ++VrrhDvmKlcPNFWwRQk=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd0830bbd4105af1953b6b897ba6bc35098cbe13",
          "sha": "bd0830bbd4105af1953b6b897ba6bc35098cbe13",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bd0830bbd4105af1953b6b897ba6bc35098cbe13"
        }
      ],
      "message": "refactor: vector -> span in CCrypter\n\nTestEncryptSingle: Remove no longer needed plaintext2-variable that existed because vectors had different allocators.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-28T17:09:51Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-19T16:21:49Z"
      },
      "sha": "403d86f1ccf0b73f042d42a9722bb007ba8c7a31"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJiNWU2ZWZmMzZhYmU0YzIzYjg3ODllZjFiYWJmYWZlZGM5MGI5NzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b5e6eff36abe4c23b8789ef1babfafedc90b973",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2b5e6eff36abe4c23b8789ef1babfafedc90b973",
      "tree": {
        "sha": "b7a956af0626972b989c09fafbca68f64aae5256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7a956af0626972b989c09fafbca68f64aae5256"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b7a956af0626972b989c09fafbca68f64aae5256\nparent 403d86f1ccf0b73f042d42a9722bb007ba8c7a31\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724073114 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724864991 +0200\n\nrefactor: Make XOnlyPubKey tolerate constexpr std::arrays\n\nLength was already asserted inside of base_blob-ctor.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQHMEHP6ESH8Sq0i3UCohQUgbPptMROxlEwhyqdOeD7GFmq5Ak/5DB1oPCXSfVeWWE0\nhPc0Ct/+J2q3mWTpznxQ0=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/403d86f1ccf0b73f042d42a9722bb007ba8c7a31",
          "sha": "403d86f1ccf0b73f042d42a9722bb007ba8c7a31",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/403d86f1ccf0b73f042d42a9722bb007ba8c7a31"
        }
      ],
      "message": "refactor: Make XOnlyPubKey tolerate constexpr std::arrays\n\nLength was already asserted inside of base_blob-ctor.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-28T17:09:51Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-19T13:11:54Z"
      },
      "sha": "2b5e6eff36abe4c23b8789ef1babfafedc90b973"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRjNWY2ZjY4MTI3NWY1NmZmMzg5NTAwZTNkZDk4ZmJlNzkxZjRhNDU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc5f6f681275f56ff389500e3dd98fbe791f4a45",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dc5f6f681275f56ff389500e3dd98fbe791f4a45",
      "tree": {
        "sha": "39898bd391a5a3346f1ca9aacb2d333c8b258735",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39898bd391a5a3346f1ca9aacb2d333c8b258735"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 39898bd391a5a3346f1ca9aacb2d333c8b258735\nparent 2b5e6eff36abe4c23b8789ef1babfafedc90b973\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724244910 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724864991 +0200\n\ntest refactor: util_tests - parse_hex clean up\n\n* Use BOOST_CHECK_EQUAL_COLLECTIONS and BOOST_CHECK_EQUAL instead of deprecated BOOST_CHECK.\n* Avoid repeating expected values.\n* Break out repeated HEX_PARSE_INPUT and rename ParseHex_expected to HEX_PARSE_OUTPUT.\n\nDone in preparation for adding a couple more tests in the next commit.\n\nCo-Authored-By: l0rinc <pap.lorinc@gmail.com>\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQDwGRJRg4FnHrEtWx0HPeYdGPP9551Fi1fnt3zR+0wRAp9hgXs9VtPgwxxsS+RTHCK\nI106+pAN+rUKurxKx2zgM=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b5e6eff36abe4c23b8789ef1babfafedc90b973",
          "sha": "2b5e6eff36abe4c23b8789ef1babfafedc90b973",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2b5e6eff36abe4c23b8789ef1babfafedc90b973"
        }
      ],
      "message": "test refactor: util_tests - parse_hex clean up\n\n* Use BOOST_CHECK_EQUAL_COLLECTIONS and BOOST_CHECK_EQUAL instead of deprecated BOOST_CHECK.\n* Avoid repeating expected values.\n* Break out repeated HEX_PARSE_INPUT and rename ParseHex_expected to HEX_PARSE_OUTPUT.\n\nDone in preparation for adding a couple more tests in the next commit.\n\nCo-Authored-By: l0rinc <pap.lorinc@gmail.com>",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-28T17:09:51Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-21T12:55:10Z"
      },
      "sha": "dc5f6f681275f56ff389500e3dd98fbe791f4a45"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDViNzRhODQ5Y2Y1YzU0NTQzMjgwYmE2NDg4YWU3Zjg3MzYxYjFlMmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b74a849cf5c54543280ba6488ae7f87361b1e2f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5b74a849cf5c54543280ba6488ae7f87361b1e2f",
      "tree": {
        "sha": "2146d1966bf938843a19b4e136abb741888b3d84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2146d1966bf938843a19b4e136abb741888b3d84"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2146d1966bf938843a19b4e136abb741888b3d84\nparent dc5f6f681275f56ff389500e3dd98fbe791f4a45\nauthor l0rinc <pap.lorinc@gmail.com> 1724844505 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724864991 +0200\n\nutil: Add consteval \"\"_hex[_v][_u8] literals\n\n\"\"_hex is a compile-time user-defined literal returning std::array<std::byte>, equivalent of ParseHex.\n\nVariants:\n- \"\"_hex_v returns std::vector<std::byte>\n- \"\"_hex_u8 returns std::array<uint8_t>\n- \"\"_hex_v_u8 returns std::vector<uint8_t> - Directly serializable as a size-prefixed OP_PUSH CScript payload using operator<<.\n\nAlso extracts from_hex into shared util::ConstevalHexDigit function.\n\nCo-Authored-By: hodlinator <172445034+hodlinator@users.noreply.github.com>\nCo-Authored-By: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>\nCo-Authored-By: Ryan Ofsky <ryan@ofsky.org>\nCo-Authored-By: stickies-v <stickies-v@protonmail.com>\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQHDqdvwXuuDSlQ3f7yDBW2WNZS7pt+F9vVe2/3163gwJ8tkf76NepwrlfvDNZgeObb\nln7r0ZV9Rbq968coyagQc=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc5f6f681275f56ff389500e3dd98fbe791f4a45",
          "sha": "dc5f6f681275f56ff389500e3dd98fbe791f4a45",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dc5f6f681275f56ff389500e3dd98fbe791f4a45"
        }
      ],
      "message": "util: Add consteval \"\"_hex[_v][_u8] literals\n\n\"\"_hex is a compile-time user-defined literal returning std::array<std::byte>, equivalent of ParseHex.\n\nVariants:\n- \"\"_hex_v returns std::vector<std::byte>\n- \"\"_hex_u8 returns std::array<uint8_t>\n- \"\"_hex_v_u8 returns std::vector<uint8_t> - Directly serializable as a size-prefixed OP_PUSH CScript payload using operator<<.\n\nAlso extracts from_hex into shared util::ConstevalHexDigit function.\n\nCo-Authored-By: hodlinator <172445034+hodlinator@users.noreply.github.com>\nCo-Authored-By: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>\nCo-Authored-By: Ryan Ofsky <ryan@ofsky.org>\nCo-Authored-By: stickies-v <stickies-v@protonmail.com>",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-28T17:09:51Z"
      },
      "author": {
        "name": "l0rinc",
        "email": "pap.lorinc@gmail.com",
        "date": "2024-08-28T11:28:25Z"
      },
      "sha": "5b74a849cf5c54543280ba6488ae7f87361b1e2f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDUwYmMwMTcwNDBhZTMwMGM3OTVlMzcwOTIzM2I4MDYxOWRiMjQ1MTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50bc017040ae300c795e3709233b80619db24518",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/50bc017040ae300c795e3709233b80619db24518",
      "tree": {
        "sha": "167e39a98d9c91f06e1c6624e2c40b9e213e7b7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/167e39a98d9c91f06e1c6624e2c40b9e213e7b7a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 167e39a98d9c91f06e1c6624e2c40b9e213e7b7a\nparent 5b74a849cf5c54543280ba6488ae7f87361b1e2f\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724786490 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724865119 +0200\n\nrefactor: Hand-replace some ParseHex -> \"\"_hex\n\nThe following scripted-diff commit will replace ParseHex(\"...\") with \"...\"_hex_u8, but this replacement will not work in cases where vectors are needed instead of arrays, and is not ideal in cases where std::byte is accepted.\n\nFor example, it is currently necessary to use _hex_v_u8 when calling CScript operator<< because that operator does not currently support std::array or std::byte.\n\nConversely, it is incorrect to use _hex_v instead of _hex in net_processing.cpp for the MakeAndPushMessage argument, because if the argument is a std::vector it is considered variable-length and serialized with a size prefix, but if the argument is a std::array or Span is it considered fixed length and serialized without a prefix.\n\nBy the same logic, it is also safe to change the NUMS_H constant in pubkey.cpp from a std::vector to std::array because it is never serialized.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQGgDBa7R0WSpQb92KZAD94cYQ37fnFTIhe0T26VCpmCiTey8FtwfwrbOeMbwyXZ1iJ\nBY8wudpvKQPZE625+DUQ8=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b74a849cf5c54543280ba6488ae7f87361b1e2f",
          "sha": "5b74a849cf5c54543280ba6488ae7f87361b1e2f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5b74a849cf5c54543280ba6488ae7f87361b1e2f"
        }
      ],
      "message": "refactor: Hand-replace some ParseHex -> \"\"_hex\n\nThe following scripted-diff commit will replace ParseHex(\"...\") with \"...\"_hex_u8, but this replacement will not work in cases where vectors are needed instead of arrays, and is not ideal in cases where std::byte is accepted.\n\nFor example, it is currently necessary to use _hex_v_u8 when calling CScript operator<< because that operator does not currently support std::array or std::byte.\n\nConversely, it is incorrect to use _hex_v instead of _hex in net_processing.cpp for the MakeAndPushMessage argument, because if the argument is a std::vector it is considered variable-length and serialized with a size prefix, but if the argument is a std::array or Span is it considered fixed length and serialized without a prefix.\n\nBy the same logic, it is also safe to change the NUMS_H constant in pubkey.cpp from a std::vector to std::array because it is never serialized.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-28T17:11:59Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-27T19:21:30Z"
      },
      "sha": "50bc017040ae300c795e3709233b80619db24518"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDljYjY4NzM1MWY3ZmY1MGQxOWI1YzU5OTdlZDY5Y2ZkYWI3NWJiZjI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cb687351f7ff50d19b5c5997ed69cfdab75bbf2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9cb687351f7ff50d19b5c5997ed69cfdab75bbf2",
      "tree": {
        "sha": "f8a95f7c451d8a316f6fb2770885cc959d081a23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8a95f7c451d8a316f6fb2770885cc959d081a23"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f8a95f7c451d8a316f6fb2770885cc959d081a23\nparent 50bc017040ae300c795e3709233b80619db24518\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724785273 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724865119 +0200\n\nrefactor: Prepare for ParseHex -> \"\"_hex scripted-diff\n\n- Adds using namespace.\n- Extracts ToScript helper function from ScriptFromHex, to be used heavily in the next commit.\n- Changes ScriptFromHex from using ParseHex to TryParseHex, now asserting the string is valid.\n- Use even number of hex digits in comment (and apply replacement from next commit to only touch line once).\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQBS8Up9CPRaXDDfLaBNLDgsZmihQprMRWvCmpq2sPdoCwelxx3RGLtnjdpIVyJZQ24\nCdNlVJbUQLwiLfJ8HwNAo=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50bc017040ae300c795e3709233b80619db24518",
          "sha": "50bc017040ae300c795e3709233b80619db24518",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/50bc017040ae300c795e3709233b80619db24518"
        }
      ],
      "message": "refactor: Prepare for ParseHex -> \"\"_hex scripted-diff\n\n- Adds using namespace.\n- Extracts ToScript helper function from ScriptFromHex, to be used heavily in the next commit.\n- Changes ScriptFromHex from using ParseHex to TryParseHex, now asserting the string is valid.\n- Use even number of hex digits in comment (and apply replacement from next commit to only touch line once).",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-28T17:11:59Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-27T19:01:13Z"
      },
      "sha": "9cb687351f7ff50d19b5c5997ed69cfdab75bbf2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg3NTZjY2Q3MTIxOGM4ZTAxMzE4MTQ3MzcyMGIxMGQzYzRhOTQ5NTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8756ccd71218c8e013181473720b10d3c4a94957",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8756ccd71218c8e013181473720b10d3c4a94957",
      "tree": {
        "sha": "3ea9fb2957b4be1ba0078af5a1d8fbd25ee4399d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ea9fb2957b4be1ba0078af5a1d8fbd25ee4399d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3ea9fb2957b4be1ba0078af5a1d8fbd25ee4399d\nparent 9cb687351f7ff50d19b5c5997ed69cfdab75bbf2\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724188421 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1724865119 +0200\n\nscripted-diff: Replace ParseHex[<std::byte>](\"str\") -> \"str\"_hex[_u8]\n\nIdeally all call sites should accept std::byte instead of uint8_t but those transformations are left to future PRs.\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended 's/\\bParseHex\\((\"[^\"]*\")\\)/\\1_hex_u8/g' $(git grep -l ParseHex -- :src ':(exclude)src/test/util_tests.cpp')\nsed -i --regexp-extended 's/\\bParseHex<std::byte>\\((\"[^\"]*\")\\)/\\1_hex/g' $(git grep -l ParseHex -- :src ':(exclude)src/test/util_tests.cpp')\nsed -i --regexp-extended 's/\\bScriptFromHex\\((\"[^\"]*\")\\)/ToScript(\\1_hex)/g' src/test/script_tests.cpp\n-END VERIFY SCRIPT-\n\nCo-Authored-By: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>\nCo-Authored-By: Ryan Ofsky <ryan@ofsky.org>\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQEkULxkbxI0b5AGPDoGbgLBv7sPrKa82vx3hQeqhDFZmA9Djq/UXv/g9Zhczy3qCiA\nKT8r+0TmLXUqEeTWmMUw4=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cb687351f7ff50d19b5c5997ed69cfdab75bbf2",
          "sha": "9cb687351f7ff50d19b5c5997ed69cfdab75bbf2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9cb687351f7ff50d19b5c5997ed69cfdab75bbf2"
        }
      ],
      "message": "scripted-diff: Replace ParseHex[<std::byte>](\"str\") -> \"str\"_hex[_u8]\n\nIdeally all call sites should accept std::byte instead of uint8_t but those transformations are left to future PRs.\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended 's/\\bParseHex\\((\"[^\"]*\")\\)/\\1_hex_u8/g' $(git grep -l ParseHex -- :src ':(exclude)src/test/util_tests.cpp')\nsed -i --regexp-extended 's/\\bParseHex<std::byte>\\((\"[^\"]*\")\\)/\\1_hex/g' $(git grep -l ParseHex -- :src ':(exclude)src/test/util_tests.cpp')\nsed -i --regexp-extended 's/\\bScriptFromHex\\((\"[^\"]*\")\\)/ToScript(\\1_hex)/g' src/test/script_tests.cpp\n-END VERIFY SCRIPT-\n\nCo-Authored-By: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>\nCo-Authored-By: Ryan Ofsky <ryan@ofsky.org>",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-28T17:11:59Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-08-20T21:13:41Z"
      },
      "sha": "8756ccd71218c8e013181473720b10d3c4a94957"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14050461536,
      "node_id": "HRFPE_lADOABII586ONi66zwAAAANFeQdg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14050461536",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/8756ccd71218c8e013181473720b10d3c4a94957",
      "created_at": "2024-08-28T17:22:41Z"
    },
    {
      "event": "unlabeled",
      "id": 14051350071,
      "node_id": "UNLE_lADOABII586ONi66zwAAAANFhpY3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14051350071",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T18:47:41Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2316300953,
      "node_id": "IC_kwDOABII586KD_KZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2316300953",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T21:43:38Z",
      "updated_at": "2024-08-28T21:43:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "Non-trivial rebase with conflicts in `bloom_tests`, `crypto_tests` and `txpackage_tests`.\r\nThe resolutions seem correct, all 3 are passing locally.\r\nACK 8756ccd71218c8e013181473720b10d3c4a94957",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2316300953",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "review_requested",
      "id": 14053003830,
      "node_id": "RRE_lADOABII586ONi66zwAAAANFn9I2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14053003830",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T21:43:46Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2267607398,
      "node_id": "PRR_kwDOABII586HKPFm",
      "url": null,
      "actor": null,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-29T03:25:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 8756ccd71218c8e013181473720b10d3c4a94957, just rebasing since last review and taking advantage of CScript constructors in #29369, also tweaking a code comment",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#pullrequestreview-2267607398",
      "submitted_at": "2024-08-29T03:25:35Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
    },
    {
      "event": "commented",
      "id": 2317177524,
      "node_id": "IC_kwDOABII586KHVK0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2317177524",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-29T09:43:31Z",
      "updated_at": "2024-08-29T09:43:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebase re-ACK 8756ccd71218c8e013181473720b10d3c4a94957, no changes since a096215c9c71a2ec03e76f1fd0bcdda0727996e0",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2317177524",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "merged",
      "id": 14091879020,
      "node_id": "ME_lADOABII586ONi66zwAAAANH8QJs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14091879020",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b52d54736168bed82775e3c9e66c6320c7b83626",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b52d54736168bed82775e3c9e66c6320c7b83626",
      "created_at": "2024-08-31T14:18:13Z"
    },
    {
      "event": "closed",
      "id": 14091879023,
      "node_id": "CE_lADOABII586ONi66zwAAAANH8QJv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14091879023",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-31T14:18:13Z"
    },
    {
      "event": "commented",
      "id": 2328519108,
      "node_id": "IC_kwDOABII586KymHE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2328519108",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T10:34:50Z",
      "updated_at": "2024-09-16T10:32:11Z",
      "author_association": "MEMBER",
      "body": "macOS follow-up idea: Someone could check on macOS 13, if compilation with XCode still works. If not, `build-osx.md` could be updated (Ref: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716956530)\r\n\r\nedit: i guess this is already checked by CI? ",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2328519108",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30377"
    },
    {
      "event": "head_ref_deleted",
      "id": 14130684558,
      "node_id": "HRDE_lADOABII586ONi66zwAAAANKQSKO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14130684558",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-04T13:02:37Z"
    },
    {
      "event": "referenced",
      "id": 14136305510,
      "node_id": "REFE_lADOABII586ONi66zwAAAANKludm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14136305510",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3a90dd0df68ee2f2a8c1234a4b774038888f9586",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/3a90dd0df68ee2f2a8c1234a4b774038888f9586",
      "created_at": "2024-09-04T19:42:19Z"
    },
    {
      "event": "referenced",
      "id": 14148847629,
      "node_id": "REFE_lADOABII586ONi66zwAAAANLVkgN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14148847629",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c1e8012b0add731eacf55dbbf2b145b41f8db515",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/c1e8012b0add731eacf55dbbf2b145b41f8db515",
      "created_at": "2024-09-05T14:56:29Z"
    },
    {
      "event": "referenced",
      "id": 14148987574,
      "node_id": "REFE_lADOABII586ONi66zwAAAANLWGq2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14148987574",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3c99f5a38a47e4e10a0daab3a114b5e476fcacfa",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/3c99f5a38a47e4e10a0daab3a114b5e476fcacfa",
      "created_at": "2024-09-05T15:05:41Z"
    },
    {
      "event": "referenced",
      "id": 14344638319,
      "node_id": "REFE_lADOABII586ONi66zwAAAANXAc9v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14344638319",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "33adc7521cc8bb24b941d959022b084002ba7c60",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33adc7521cc8bb24b941d959022b084002ba7c60",
      "created_at": "2024-09-20T19:17:00Z"
    },
    {
      "event": "locked",
      "id": 19724536696,
      "node_id": "LOE_lADOABII586ONi66zwAAAASXrIt4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19724536696",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-16T11:42:18Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680414541",
      "pull_request_review_id": 2181892158,
      "id": 1680414541,
      "node_id": "PRRC_kwDOABII585kKRdN",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 16,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "not sure about overloading this. Otherwise, one may get a runtime evaluation when switching from a raw string literal pointer to a consteval string_view, no?\r\n\r\nSeems clearer to make it a constructor taking a string_view? I guess the only confusion could be that the `Span<const unsigned char>` and string_view (aka `Span<const char>`) do different things (one is hex decoding and the other is not), but that should be fine, because both are distinct types.",
      "created_at": "2024-07-17T05:10:45Z",
      "updated_at": "2024-07-17T05:23:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680414541",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680414541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680415361",
      "pull_request_review_id": 2181892158,
      "id": 1680415361,
      "node_id": "PRRC_kwDOABII585kKRqB",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 30,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What is the point of this? Seems odd to add space before compilation and then remove it during compilation.\r\n\r\nSeems easier to not add the space in the first place and fail compilation when there is one?",
      "created_at": "2024-07-17T05:11:58Z",
      "updated_at": "2024-07-17T05:23:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680415361",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680415361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680415419",
      "pull_request_review_id": 2181892158,
      "id": 1680415419,
      "node_id": "PRRC_kwDOABII585kKRq7",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 33,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same",
      "created_at": "2024-07-17T05:12:05Z",
      "updated_at": "2024-07-17T05:23:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680415419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680415419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680419847",
      "pull_request_review_id": 2181892158,
      "id": 1680419847,
      "node_id": "PRRC_kwDOABII585kKSwH",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 40,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure about hardcoding this for every base_blob.\r\n\r\nSeems easier to just implement it once for `base_blob` and then have it available for all?",
      "created_at": "2024-07-17T05:19:01Z",
      "updated_at": "2024-07-17T05:23:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680419847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680419847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680422462",
      "pull_request_review_id": 2181892158,
      "id": 1680422462,
      "node_id": "PRRC_kwDOABII585kKTY-",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.\n+    assert(digits <= 64);",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 41,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure about fuzzy decoding here. Accidentally truncating an `uint256` and thus parsing it as something else seems dangerous.\r\n\r\nThe convenience of being able to truncate leading zeros of a hex-encoded base_blob are never used, are they? The two constants ZERO and ONE are constructed without hex-decoding, so this isn't needed there, and I fail to see another use case right now.\r\n\r\nIt seems easier to just assert WIDTH.",
      "created_at": "2024-07-17T05:23:02Z",
      "updated_at": "2024-07-17T05:23:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680422462",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680422462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680425993",
      "pull_request_review_id": 2181909441,
      "id": 1680425993,
      "node_id": "PRRC_kwDOABII585kKUQJ",
      "diff_hunk": "@@ -67,6 +68,87 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 56,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "92b0fb059f81959abbfe995b32ea103c2aa8db46",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same here. Overloading `ParseHex` seems fragile, because a compile time string_view will be evaluate at runtime, while a string literal will be evaluated at compile time.",
      "created_at": "2024-07-17T05:27:52Z",
      "updated_at": "2024-07-17T05:27:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680425993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680425993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680427277",
      "pull_request_review_id": 2181911444,
      "id": 1680427277,
      "node_id": "PRRC_kwDOABII585kKUkN",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 20,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Please add `{`, `}` for multiline-if, according to the dev notes.",
      "created_at": "2024-07-17T05:29:39Z",
      "updated_at": "2024-07-17T05:29:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680427277",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680427277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680955841",
      "pull_request_review_id": 2182763400,
      "id": 1680955841,
      "node_id": "PRRC_kwDOABII585kMVnB",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 16,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for taking a closer look!\r\n\r\nI want to enforce `consteval` for existing string literals. Ideally the `string_view` overload should be `constexpr` but from my research on MSVC assembly output in the PR summary it seems to handle lookup tables poorly. One possibility would be to remove the lookup table and use `if (c >= '0' && c <= '9')`, sacrificing some performance, but we don't often parse ASCII hex strings in runtime anyway, right?\r\n\r\nThe main purpose of overloading `uint256S()` with a `consteval` version was to avoid changing all the call-sites. If we are okay with changing call-sites, it might be better to introduce a `uint256(uint64_t,uint64_t,uint64_t,uint64_t)` constructor. That way it would be the compiler parsing hexadecimal integer literals directly. See my raw array (54e0213c9c7a7a942dd320264c1f9224c494b777) and span (bfc2fb049f2a12e9936b938fb073738babac0cbb) explorations.",
      "created_at": "2024-07-17T12:21:12Z",
      "updated_at": "2024-07-17T12:21:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680955841",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680955841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680963050",
      "pull_request_review_id": 2182775665,
      "id": 1680963050,
      "node_id": "PRRC_kwDOABII585kMXXq",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 30,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680415361,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My first stab at this was much more strict but when I added tests I went for full compatibility with the runtime overload. I'm certainly open to making it less permissive though.",
      "created_at": "2024-07-17T12:27:00Z",
      "updated_at": "2024-07-17T12:27:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680963050",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680963050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680963523",
      "pull_request_review_id": 2182776481,
      "id": 1680963523,
      "node_id": "PRRC_kwDOABII585kMXfD",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 33,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680415419,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same (https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680963050)",
      "created_at": "2024-07-17T12:27:24Z",
      "updated_at": "2024-07-17T12:27:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680963523",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680963523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680966315",
      "pull_request_review_id": 2182781123,
      "id": 1680966315,
      "node_id": "PRRC_kwDOABII585kMYKr",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 16,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> `uint256(uint64_t,uint64_t,uint64_t,uint64_t)` constructor. That way it would be the compiler parsing hexadecimal integer literals directly.\r\n\r\nNot sure. That'd make it impossible to grep for a (let's say) block hash. Also, it would be harder to copy-paste one, if the developer has to manually split it into 4 parts and add `0x` prefixes. Finally, truncation checks can't be done, see https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680422462\r\n\r\n> was to avoid changing all the call-sites. \r\n\r\nHow many are there? Should be trivial to write a scripted-diff to replace `uint256S(\"` with something else, no?\r\n\r\nEdit: There are around 50 instances. Most of them in a single file:\r\n\r\n```\r\n$ git grep 'uint256S(\"' | grep -v 'src/test/' | wc -l \r\n54\r\n$ git grep 'uint256S(\"' src/kernel/chainparams.cpp  | wc -l \r\n48\r\n",
      "created_at": "2024-07-17T12:29:29Z",
      "updated_at": "2024-07-17T12:35:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680966315",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680966315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680967973",
      "pull_request_review_id": 2182783841,
      "id": 1680967973,
      "node_id": "PRRC_kwDOABII585kMYkl",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 16,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I want to enforce `consteval` for existing string literals. Ideally the `string_view` overload should be `constexpr` but from my research on MSVC assembly output\r\n\r\nI think `string_view` can be used in a consteval context, no?",
      "created_at": "2024-07-17T12:30:47Z",
      "updated_at": "2024-07-17T12:30:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680967973",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680967973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680976118",
      "pull_request_review_id": 2182797237,
      "id": 1680976118,
      "node_id": "PRRC_kwDOABII585kMaj2",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 40,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680419847,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There is no `uint160S()` outside of **uint256_tests.cpp** and only `uint256` and `uint160` use `base_blob` so it felt alright having it here. If we abandon the `uint256S()`-overload approach I agree to change this.",
      "created_at": "2024-07-17T12:36:46Z",
      "updated_at": "2024-07-17T12:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680976118",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680976118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680983277",
      "pull_request_review_id": 2182810948,
      "id": 1680983277,
      "node_id": "PRRC_kwDOABII585kMcTt",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.\n+    assert(digits <= 64);",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 41,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680422462,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Generally agree https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680963050\r\n\r\n(Some call-sites do use \"0x\"-prefix now that I think of it, while others do not, but aligning that would probably be an easy diff to accept).",
      "created_at": "2024-07-17T12:41:46Z",
      "updated_at": "2024-07-17T12:41:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680983277",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680983277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680986937",
      "pull_request_review_id": 2182817008,
      "id": 1680986937,
      "node_id": "PRRC_kwDOABII585kMdM5",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 16,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> > I want to enforce `consteval` for existing string literals. Ideally the `string_view` overload should be `constexpr` but from my research on MSVC assembly output\r\n> \r\n> I think `string_view` can be used in a consteval context, no?\r\n\r\nYes, it's the rest of that paragraph that poses some concern.",
      "created_at": "2024-07-17T12:44:34Z",
      "updated_at": "2024-07-17T12:44:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680986937",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680986937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680995968",
      "pull_request_review_id": 2182831735,
      "id": 1680995968,
      "node_id": "PRRC_kwDOABII585kMfaA",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 16,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Ideally the string_view overload should be constexpr but from my research on MSVC assembly output\r\n\r\nPlease don't be overly concerned about MSVC. We've had issues with it in the past, where it's failed to optimize code properly, or we've had to write workarounds for it, when code was otherwise fine in Clang or GCC, i.e (https://github.com/bitcoin/bitcoin/pull/28657#discussion_r1360780446). We don't use it as a release compiler (and never will), so if it's failing to do X, that isn't necessarily a blocker to making changes (if X is working correctly in Clang & GCC). MSVC can always be improved later, and shouldn't prevent us from writing better code now.",
      "created_at": "2024-07-17T12:51:13Z",
      "updated_at": "2024-07-17T12:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1680995968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1680995968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682767232",
      "pull_request_review_id": 2185699313,
      "id": 1682767232,
      "node_id": "PRRC_kwDOABII585kTP2A",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 20,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680427277,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed as of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d.",
      "created_at": "2024-07-18T12:40:01Z",
      "updated_at": "2024-07-18T12:40:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682767232",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682767232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682772285",
      "pull_request_review_id": 2185708052,
      "id": 1682772285,
      "node_id": "PRRC_kwDOABII585kTRE9",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 16,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680414541,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d I have stopped overloading `uint256S()`:\r\n\r\nChanged from `consteval uint256 uint256S(const char *str)` -> `consteval explicit uint256(const char (&str)[65])` and `base_blob(std::string_view str)`\r\nThis means the string width is enforced at compile time. (The new parsing code is much more strict and also asserts on the length).\r\n\r\nApplied uint256S -> uint256 conversion where applicable, removing \"0x\"-prefixes.\r\nTODO: if there is agreement on the current approach - create scripted diff commit.\r\n\r\nAdded `TxidFromStringS()` to mirror `uint256S()` for runtime use.\r\n\r\nClarified reason for introduction of `FixedVec` in commit message 10baae11ecc376f2250d4a51d2bbfeea56c0a31d.",
      "created_at": "2024-07-18T12:43:11Z",
      "updated_at": "2024-07-18T12:43:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682772285",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682772285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682773691",
      "pull_request_review_id": 2185710123,
      "id": 1682773691,
      "node_id": "PRRC_kwDOABII585kTRa7",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 30,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680415361,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "More strict as of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d.",
      "created_at": "2024-07-18T12:44:10Z",
      "updated_at": "2024-07-18T12:44:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682773691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682773691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682775910",
      "pull_request_review_id": 2185714766,
      "id": 1682775910,
      "node_id": "PRRC_kwDOABII585kTR9m",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 40,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680419847,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`consteval` parsing now done inside `base_blob(std::string_view)` as of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d.",
      "created_at": "2024-07-18T12:45:52Z",
      "updated_at": "2024-07-18T12:45:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682775910",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682775910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682777414",
      "pull_request_review_id": 2185718006,
      "id": 1682777414,
      "node_id": "PRRC_kwDOABII585kTSVG",
      "diff_hunk": "@@ -111,6 +112,47 @@ class uint256 : public base_blob<256> {\n     static const uint256 ONE;\n };\n \n+/* uint256 from const char *.\n+ * Could theoretically have been a constructor but is overload of uint256S() for\n+ * historical reasons.\n+ */\n+consteval uint256 uint256S(const char *str)\n+{\n+   // Non lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9')\n+            return c - '0';\n+        else if (c >= 'a' && c <= 'f')\n+            return c - 'a' + 0xA;\n+        else if (c >= 'A' && c <= 'F')\n+            return c - 'A' + 0xA;\n+        else\n+            return -1;\n+    };\n+\n+    // Skip leading spaces.\n+    while (IsSpace(*str))\n+        str += 1;\n+    // Skip \"0x\" prefix.\n+    if (str[0] == '0' && str[1] == 'x')\n+        str += 2;\n+\n+    size_t digits = 0;\n+    while (from_hex(str[digits]) != -1)\n+        ++digits;\n+    // 64 = 32 bytes * 2 chars each. 32 bytes = 256 bits.\n+    assert(digits <= 64);",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 41,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dc5bf669e9120441d61ad3fa50be2cdca21a3691",
      "in_reply_to_id": 1680422462,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed as of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d.",
      "created_at": "2024-07-18T12:46:59Z",
      "updated_at": "2024-07-18T12:46:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682777414",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682777414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682782077",
      "pull_request_review_id": 2185726157,
      "id": 1682782077,
      "node_id": "PRRC_kwDOABII585kTTd9",
      "diff_hunk": "@@ -67,6 +68,87 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 56,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "92b0fb059f81959abbfe995b32ea103c2aa8db46",
      "in_reply_to_id": 1680425993,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Still kept it as an overload as of 10baae11ecc376f2250d4a51d2bbfeea56c0a31d. If you prefer different names for runtime/compile time, which do you suggest?",
      "created_at": "2024-07-18T12:50:25Z",
      "updated_at": "2024-07-18T12:50:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682782077",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682782077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682825302",
      "pull_request_review_id": 2185798321,
      "id": 1682825302,
      "node_id": "PRRC_kwDOABII585kTeBW",
      "diff_hunk": "@@ -66,9 +66,14 @@ using Txid = transaction_identifier<false>;\n /** Wtxid commits to all transaction fields including the witness. */\n using Wtxid = transaction_identifier<true>;\n \n-inline Txid TxidFromString(std::string_view str)\n+inline Txid TxidFromStringS(std::string_view str)\n {\n-    return Txid::FromUint256(uint256S(str.data()));\n+    return Txid::FromUint256(uint256S(str));\n+}\n+\n+consteval Txid TxidFromString(const char (&str)[65])\n+{\n+    return Txid::FromUint256(uint256(str));\n }",
      "path": "src/util/transaction_identifier.h",
      "position": 1,
      "original_position": 32,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "10baae11ecc376f2250d4a51d2bbfeea56c0a31d",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why add a consteval overload here? Generally I am not a fan of adding test-only code (code that is only used in tests) to the real program. Performance or exe-size shouldn't matter for tests, unless it is significant. If you still want to add it to the tests, that is fine, but then please move it to the test code. But please change the function name of the test-only function to something else. It seems odd that test-only code forces real code to be renamed.",
      "created_at": "2024-07-18T13:17:40Z",
      "updated_at": "2024-07-18T13:24:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682825302",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682825302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 69,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682843219",
      "pull_request_review_id": 2185826728,
      "id": 1682843219,
      "node_id": "PRRC_kwDOABII585kTiZT",
      "diff_hunk": "@@ -66,9 +66,14 @@ using Txid = transaction_identifier<false>;\n /** Wtxid commits to all transaction fields including the witness. */\n using Wtxid = transaction_identifier<true>;\n \n-inline Txid TxidFromString(std::string_view str)\n+inline Txid TxidFromStringS(std::string_view str)\n {\n-    return Txid::FromUint256(uint256S(str.data()));\n+    return Txid::FromUint256(uint256S(str));\n+}\n+\n+consteval Txid TxidFromString(const char (&str)[65])\n+{\n+    return Txid::FromUint256(uint256(str));\n }",
      "path": "src/util/transaction_identifier.h",
      "position": 1,
      "original_position": 32,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "10baae11ecc376f2250d4a51d2bbfeea56c0a31d",
      "in_reply_to_id": 1682825302,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good call, will fix.",
      "created_at": "2024-07-18T13:28:35Z",
      "updated_at": "2024-07-18T13:28:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682843219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682843219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 69,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682878016",
      "pull_request_review_id": 2185885552,
      "id": 1682878016,
      "node_id": "PRRC_kwDOABII585kTq5A",
      "diff_hunk": "@@ -108,25 +134,16 @@ class uint256 : public base_blob<256> {\n     constexpr uint256() = default;\n     constexpr explicit uint256(uint8_t v) : base_blob<256>(v) {}\n     constexpr explicit uint256(Span<const unsigned char> vch) : base_blob<256>(vch) {}\n+    consteval explicit uint256(const char (&str)[65]) : base_blob<256>(str) {}",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 55,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A more flexible alternative would be to just accept a string_view and rely on the length assert. However, I guess this prints a more confusing compile error.\r\n\r\nSeems fine to change later to string_view, if this is needed.\r\n\r\nHowever, I wonder if you can replace `65` by `WIDTH+1`?",
      "created_at": "2024-07-18T13:48:31Z",
      "updated_at": "2024-07-18T13:48:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682878016",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682878016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682882026",
      "pull_request_review_id": 2185893269,
      "id": 1682882026,
      "node_id": "PRRC_kwDOABII585kTr3q",
      "diff_hunk": "@@ -108,25 +134,16 @@ class uint256 : public base_blob<256> {\n     constexpr uint256() = default;\n     constexpr explicit uint256(uint8_t v) : base_blob<256>(v) {}\n     constexpr explicit uint256(Span<const unsigned char> vch) : base_blob<256>(vch) {}\n+    consteval explicit uint256(const char (&str)[65]) : base_blob<256>(str) {}",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 55,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682878016,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also, I wonder if the three duplicate redirects can be replaced by a single `uinsg base_blob::base_blob;` (or similar) to import all constructors.",
      "created_at": "2024-07-18T13:50:54Z",
      "updated_at": "2024-07-18T13:50:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682882026",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682882026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682962565",
      "pull_request_review_id": 2186032755,
      "id": 1682962565,
      "node_id": "PRRC_kwDOABII585kT_iF",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure about these. It should fail compilation instead if non-hex is detected.",
      "created_at": "2024-07-18T14:33:38Z",
      "updated_at": "2024-07-18T14:33:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682962565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1682962565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1684964695",
      "pull_request_review_id": 2189222906,
      "id": 1684964695,
      "node_id": "PRRC_kwDOABII585kboVX",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it's more acceptable to diverge on behavior if we call the `consteval` function something different, see https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1682782077",
      "created_at": "2024-07-19T20:55:53Z",
      "updated_at": "2024-07-19T20:55:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1684964695",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1684964695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685019567",
      "pull_request_review_id": 2189378300,
      "id": 1685019567,
      "node_id": "PRRC_kwDOABII585kb1uv",
      "diff_hunk": "@@ -108,25 +134,16 @@ class uint256 : public base_blob<256> {\n     constexpr uint256() = default;\n     constexpr explicit uint256(uint8_t v) : base_blob<256>(v) {}\n     constexpr explicit uint256(Span<const unsigned char> vch) : base_blob<256>(vch) {}\n+    consteval explicit uint256(const char (&str)[65]) : base_blob<256>(str) {}",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 55,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682878016,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Seems fine to change later to string_view, if this is needed.\r\n> \r\n> However, I wonder if you can replace `65` by `WIDTH+1`?\r\n\r\nDone now in 79921003ffc858ca4b47e0fb187ed83c1667bc27 along with added comment and more descriptive parameter name.\r\n\r\n> Also, I wonder if the three duplicate redirects can be replaced by a single uinsg base_blob::base_blob; (or similar) to import all constructors.\r\n\r\nI guess that would only be possible if switching the uint256-ctor to `string_view`, which I'd rather hold off on for now.",
      "created_at": "2024-07-19T21:42:41Z",
      "updated_at": "2024-07-19T21:42:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1685019567",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1685019567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1686109312",
      "pull_request_review_id": 2190854560,
      "id": 1686109312,
      "node_id": "PRRC_kwDOABII585kf_yA",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe `BytesFromHex`?",
      "created_at": "2024-07-22T07:43:48Z",
      "updated_at": "2024-07-22T07:43:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1686109312",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1686109312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1686115679",
      "pull_request_review_id": 2190864424,
      "id": 1686115679,
      "node_id": "PRRC_kwDOABII585kgBVf",
      "diff_hunk": "@@ -88,6 +89,31 @@ class base_blob\n     }\n };\n \n+// No support for \"0x\"-prefix or whitespace, mirroring GetHex().\n+template<unsigned int BITS>\n+consteval base_blob<BITS>::base_blob(std::string_view str)\n+{\n+    // Non-lookup table version of HexDigit().\n+    auto from_hex = [](const char c) -> int8_t {\n+        if (c >= '0' && c <= '9') {\n+            return c - '0';\n+        } else if (c >= 'a' && c <= 'f') {\n+            return c - 'a' + 0xA;\n+        } else if (c >= 'A' && c <= 'F') {\n+            return c - 'A' + 0xA;\n+        }\n+        assert(false);\n+    };\n+\n+    // 2 chars per byte.\n+    assert(str.length() == m_data.size() * 2);\n+    auto writeIt = m_data.begin();",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 41,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "146a2db9e17466b3ff06a66103d5480bda2e6dba",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: snake_case for new code: `write_it`, `str_it`, according to the dev notes.",
      "created_at": "2024-07-22T07:48:58Z",
      "updated_at": "2024-07-22T07:48:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1686115679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1686115679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688654352",
      "pull_request_review_id": 2194976610,
      "id": 1688654352,
      "node_id": "PRRC_kwDOABII585kptIQ",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, that would be along the lines of `uint256::FromHex()` that you have in the works in #30482.\r\n\r\nOne thing that comes to mind now though is that `uint256::FromHex()` can return a failure state. Maybe it would be better to have a constructor for this `consteval` thing - rename `FixedVec` into `ByteVec` with an added `consteval` constructor.",
      "created_at": "2024-07-23T20:10:20Z",
      "updated_at": "2024-07-23T20:10:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1688654352",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688654352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688788130",
      "pull_request_review_id": 2195187288,
      "id": 1688788130,
      "node_id": "PRRC_kwDOABII585kqNyi",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Having problems inferring the size of the underlying `std::array` from the `char`-array size using the constructor approach. Looks like a free function is where it's at for this one. (And maybe going back to raw `std::array` for the container if we fail compilation on whitespace/invalid input).",
      "created_at": "2024-07-23T22:21:42Z",
      "updated_at": "2024-07-23T22:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1688788130",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1688788130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689162345",
      "pull_request_review_id": 2195680135,
      "id": 1689162345,
      "node_id": "PRRC_kwDOABII585krpJp",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I am a bit worried that putting the bytes directly onto the stack (or easily allowing the dev to do so) may lead to high stack usage in some code paths and stack overflow on some platforms that have tighter limits.\r\n\r\nMaybe a better overall approach is to validate the hex string at compile time, but then parse into a (heap) vector at runtime?\r\n\r\nI don't think there are any performance concerns where hex parsing is used right now, so doing the parsing at runtime or compile time shouldn't matter. The important thing is compile-time checking, to catch bugs before the code compiles.",
      "created_at": "2024-07-24T05:33:56Z",
      "updated_at": "2024-07-24T05:33:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689162345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689162345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689312472",
      "pull_request_review_id": 2195905666,
      "id": 1689312472,
      "node_id": "PRRC_kwDOABII585ksNzY",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point.. the compile-time parsed bytes would go into a data section in the binary instead of the hex string literal, which should :tm: make the binary smaller. But when the `std::array` containers are initialized during runtime they will take up stack space, instead of the former `std::vector` taking up heap-space.\r\n\r\nHeap is usually slower than the stack, but if the vector was just allocated in the local function, the data should be \"hot\" anyway.\r\n\r\nNot sure how to elegantly achieve compile time validation + runtime parsing.\r\n\r\nWill ruminate on this, cheers!",
      "created_at": "2024-07-24T07:51:56Z",
      "updated_at": "2024-07-24T07:51:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689312472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689312472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689327270",
      "pull_request_review_id": 2195928300,
      "id": 1689327270,
      "node_id": "PRRC_kwDOABII585ksRam",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Heap is usually slower than the stack, but if the vector was just allocated in the local function, the data should be \"hot\" anyway.\r\n\r\nRight, and I think there is no performance critical path.\r\n\r\n> Not sure how to elegantly achieve compile time validation + runtime parsing.\r\n\r\n\r\nShould be easy:\r\n\r\n```cpp\r\n\r\nstruct ConstevalHexLiteral {\r\n  const char* const hex;\r\n  consteval ConstevalHexLiteral(const char* str) : hex{str} { assert(IsCHex(str)); }\r\n  consteval ConstevalHexLiteral(std::nullptr_t) = delete;\r\n};\r\n\r\nauto BytesFromHex(ConstevalHexLiteral hex) { return std::vector{*Assert(RuntimeParse(hex))}; }",
      "created_at": "2024-07-24T08:02:42Z",
      "updated_at": "2024-07-24T08:03:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689327270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689327270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689373817",
      "pull_request_review_id": 2196001492,
      "id": 1689373817,
      "node_id": "PRRC_kwDOABII585kscx5",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks! That is a piece of art. :)\r\n\r\n(Think I would put any `Assert()`s and `vector` initialization inside of `RuntimeParse()`).",
      "created_at": "2024-07-24T08:35:41Z",
      "updated_at": "2024-07-24T08:35:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689373817",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689373817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689399364",
      "pull_request_review_id": 2196042215,
      "id": 1689399364,
      "node_id": "PRRC_kwDOABII585ksjBE",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, `RuntimeParse` is probably just `TryParseHex`, which returns a vector already, so you can drop the vector-move-constructor from my suggestion.",
      "created_at": "2024-07-24T08:53:14Z",
      "updated_at": "2024-07-24T08:53:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689399364",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1689399364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692176710",
      "pull_request_review_id": 2200522624,
      "id": 1692176710,
      "node_id": "PRRC_kwDOABII585k3JFG",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I am a bit worried that putting the bytes directly onto the stack (or easily allowing the dev to do so) may lead to high stack usage in some code paths and stack overflow on some platforms that have tighter limits.\r\n\r\nOutside of tests & benchmarks there would *currently* only be 4 places where `ParseHex()` is replaced with `BytesFromHex`. One has static storage file scope, so wouldn't affect the stack. The longest one is 336 chars, which becomes 168 bytes on the stack.\r\n\r\n<details>\r\n<summary>\r\n\r\n### 4 runtime places tentatively replaced with `BytesFromHex`\r\n\r\n</summary>\r\n\r\n**net_processing.cpp**, the big one:\r\n```C++\r\n// If the peer is old enough to have the old alert system, send it the final alert.\r\nif (greatest_common_version <= 70012) {\r\n    constexpr auto finalAlert{BytesFromHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\")};\r\n    MakeAndPushMessage(pfrom, \"alert\", Span{finalAlert});\r\n}\r\n```\r\n\r\n```C++\r\nconst CScript genesisOutputScript = CScript() << BytesFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\r\n```\r\n\r\n```C++\r\nbin = ToByteVector(BytesFromHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\"));\r\n```\r\n\r\n```C++\r\nconstexpr XOnlyPubKey XOnlyPubKey::NUMS_H{BytesFromHex(\"50929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0\")};\r\n```\r\n</details>\r\n\r\nFor reference, **src/leveldb/util/posix_logger.h** has:\r\n```C++\r\n    constexpr const int kStackBufferSize = 512;\r\n    char stack_buffer[kStackBufferSize];\r\n```\r\n(But it may be dead code, and would also just be part of a leaf in the call graph).\r\n\r\nOn my workstation I have an 8MB stack (50000x 160 bytes) according to:\r\n```C++\r\n    struct rlimit rl;\r\n    int result = getrlimit(RLIMIT_STACK, &rl);\r\n    if (result == 0) {\r\n        LogInfo(\"Stack size: %ld\", rl.rlim_cur);\r\n    } else {\r\n        LogInfo(\"getrlimit failed: %d\", result);\r\n    }\r\n```\r\n\r\nThis article gives 135168 bytes of stack size (~800x 168 bytes) for unnamed Raspberry Pi device in 2020: https://www.embeddedrelated.com/showarticle/1330.php\r\n",
      "created_at": "2024-07-25T21:49:18Z",
      "updated_at": "2024-07-25T21:49:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692176710",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692176710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692203055",
      "pull_request_review_id": 2200551062,
      "id": 1692203055,
      "node_id": "PRRC_kwDOABII585k3Pgv",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You can also use `std::is_constant_evaluated` to make a function behave differently inside constexpr and outside of it.",
      "created_at": "2024-07-25T22:13:17Z",
      "updated_at": "2024-07-25T22:13:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692203055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692203055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692641088",
      "pull_request_review_id": 2201143973,
      "id": 1692641088,
      "node_id": "PRRC_kwDOABII585k46dA",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I was experimenting with `std::is_constant_evaluated` early on (don't think it was discussed). If I remember correctly, the reason I abandoned it in favor of `consteval` overloads taking string literals was that I was never getting compile-time evaluation where I expected it. There's also the divergence in behavior that runtime-functions may need to return optional or heap-allocated types, while compile time-functions can keep all error handling internal and need to return stack-allocated types.\r\n\r\nIf we were to go with compile time validation when possible, but always heap-allocation for `ParseHex`, I can see how it may be useful.",
      "created_at": "2024-07-26T07:38:10Z",
      "updated_at": "2024-07-26T07:38:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692641088",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692641088"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692754289",
      "pull_request_review_id": 2201322541,
      "id": 1692754289,
      "node_id": "PRRC_kwDOABII585k5WFx",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Outside of tests & benchmarks there would _currently_ only be 4 places where `ParseHex()` is replaced with `BytesFromHex`.\r\n\r\nThanks for enumerating. Looking at them:\r\n\r\n* `finalAlert` -> Shouldn't matter much, either way (Span-serialization doesn't care about the underlying type)\r\n* `genesisOutputScript` -> This must be a vector and can not be an array, because array-serialization is different from vector-serialization\r\n* `ToByteVector` -> Yeah, vector as well\r\n* `XOnlyPubKey` -> Shouldn't matter?\r\n\r\nAgain, up to you what you see is a better fit.\r\n\r\nIf you want to provide a function for arrays and another for vectors, it seems fine as well.",
      "created_at": "2024-07-26T09:12:48Z",
      "updated_at": "2024-07-26T09:12:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692754289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692754289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692958389",
      "pull_request_review_id": 2201654010,
      "id": 1692958389,
      "node_id": "PRRC_kwDOABII585k6H61",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> genesisOutputScript -> This must be a vector and can not be an array, because array-serialization is different from vector-serialization\r\n\r\nThanks for pointing that difference out, already ran into some other issues with local changes in test code regarding this. Seems a bit brittle that `vector`s serialize with the size prefixed while `Span`s don't, as `vector`s can implicitly convert to `Span`s.\r\n\r\nThis difference in behavior affects `DataStream` and possibly other types using **serialize.h**, but as far as I see `CScript` only has `CScript& operator<<(const std::vector<unsigned char>& b)`.\r\n\r\nI am considering proposing the `CScript` method take `std::span` instead. Either way I think `genesisOutputScript` should still be okay.",
      "created_at": "2024-07-26T11:57:45Z",
      "updated_at": "2024-07-26T11:57:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692958389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692958389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692989490",
      "pull_request_review_id": 2201712376,
      "id": 1692989490,
      "node_id": "PRRC_kwDOABII585k6Pgy",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Seems a bit brittle that `vector`s serialize with the size prefixed while `Span`s don't, as `vector`s can implicitly convert to `Span`s.\r\n\r\nAs for serialize code, an implicit conversion should not happen. If it does anywhere, then that is a bug and should be fixed.\r\n\r\n\r\n\r\n> I am considering proposing the `CScript` method take `std::span` instead. Either way I think `genesisOutputScript` should still be okay.\r\n\r\nI am not sure if it is beneficial to have cscript-serialization differ from streams-serialization here.  In any case, it shouldn't be required for the changes here, or otherwise touch the same lines of code as the changes here?",
      "created_at": "2024-07-26T12:25:45Z",
      "updated_at": "2024-07-26T12:25:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692989490",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1692989490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696565971",
      "pull_request_review_id": 2207043250,
      "id": 1696565971,
      "node_id": "PRRC_kwDOABII585lH4rT",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(Feel free to resolve the discussion for now, given that you dropped those changes here for now)",
      "created_at": "2024-07-30T08:39:03Z",
      "updated_at": "2024-07-30T08:39:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1696565971",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1696565971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715287560",
      "pull_request_review_id": 2235547654,
      "id": 1715287560,
      "node_id": "PRRC_kwDOABII585mPTYI",
      "diff_hunk": "@@ -67,6 +68,88 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/**\n+ * Max size fixed at compile time.\n+ * Created to be used on the border between runtime and compile time which a\n+ * dynamically allocating std::vector cannot cross.\n+ * The type was created in preference over std::array to be able to parse hex\n+ * strings at compile time which may contain whitespace, making exact size()\n+ * unknown ahead of template instantiation.\n+ */\n+template<typename T, size_t N>\n+class FixedVec\n+{\n+    std::array<T, N> m_data{};\n+    size_t m_size{0};\n+\n+public:\n+    constexpr const T* data() const { return m_data.data(); }\n+    constexpr size_t size() const { return m_size; }\n+    constexpr const T* begin() const { return data(); }\n+    constexpr const T* end() const { return data() + m_size; }\n+    constexpr void push_back(const T& v)\n+    {\n+        assert(m_size < N);\n+        m_data[m_size] = v;\n+        ++m_size;\n+    }\n+\n+    /// Enables creation of a runtime allocated vector when necessary.\n+    // NOT just a plain `operator std::vector<T>()` since we want to expose\n+    // allocations.\n+    constexpr std::vector<T> to_dynamic() const\n+    {\n+        return {begin(), end()};\n+    }\n+};\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const FixedVec<T, N>& b)\n+{\n+    return std::ranges::equal(a, b);\n+}\n+\n+constexpr inline bool IsSpace(char c) noexcept;\n+template <typename Byte = uint8_t, size_t Size>\n+consteval FixedVec<Byte, Size / 2> ParseHex(const char (&hex_str)[Size])\n+{\n+    // Non lookup table version of HexDigit().\n+    auto from_hex = [](const uint8_t c) -> std::optional<uint8_t> {\n+        if (c >= '0' && c <= '9') {\n+            return std::make_optional<uint8_t>(c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'a' - 0xA});\n+        } else if (c >= 'A' && c <= 'F') {\n+            return std::make_optional<uint8_t>(c - uint8_t{'A' - 0xA});\n+        } else {\n+            return std::nullopt;\n+        }\n+    };\n+\n+    FixedVec<Byte, Size / 2> rv;\n+    size_t it = 0;\n+    while (it < (Size - 1)) { // -1 - Assumes null-term at the end.\n+        if (IsSpace(hex_str[it])) {\n+            ++it;\n+            continue;\n+        }\n+        auto c1 = from_hex(hex_str[it++]);\n+        if (it >= Size)\n+            return {};\n+        if (!c1.has_value())\n+            return {};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "83a4d2f1cfc18733d778d1da72d37152efb463d1",
      "in_reply_to_id": 1682962565,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Went with `ArrayFromBytes` for all in the latest tip ~d6d7a0b5221935518d2797aec7abc5c9632cbf68~ 240bc10e3f5f90fcc386b1a72ee2067a156abff3.\r\n\r\n~Avoided adding a public `CScript::operator<<(std::span)` and went for a private method + public `std::array` overload.~ (Latest doesn't touch `script.h`-header).\r\n\r\nHave a variant with consteval validation in VecFromHex-branch, but didn't feel it was urgent to use in any of the cases, so currently dropped from this PR:\r\nhttps://github.com/hodlinator/bitcoin/blob/2024-07/uint256S_consteval_VecFromHex/src/util/strencodings.h#L95-L110",
      "created_at": "2024-08-13T13:23:53Z",
      "updated_at": "2024-08-14T02:04:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1715287560",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715287560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715621085",
      "pull_request_review_id": 2236080683,
      "id": 1715621085,
      "node_id": "PRRC_kwDOABII585mQkzd",
      "diff_hunk": "@@ -67,6 +68,42 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // -1 comes from implicit null terminator\n+    if ((Size - 1) % 2 != 0) throw \"2 hex digits per byte is required\";\n+    std::array<Byte, (Size - 1) / 2> rv;\n+    size_t it = 0;\n+    for (auto& elem : rv) {\n+        auto hi = ConstevalHexDigit(hex_str[it++]) << 4;\n+        elem = Byte(hi | ConstevalHexDigit(hex_str[it++]));\n+    }\n+    return rv;\n+}\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const std::array<T, N>& b)",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 43,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: Add consteval ArrayFromHex()\" (00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5)\r\n\r\nIs this necessary? I'd be concerned adding such a generic top-level operator might cause this to get called in places we are not expecting, and maybe lead to hard to explain behavior or bugs. Would be good to at least have a comment explaining what this is intended to be used for.",
      "created_at": "2024-08-13T16:47:53Z",
      "updated_at": "2024-08-13T17:09:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1715621085",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715621085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715636099",
      "pull_request_review_id": 2236080683,
      "id": 1715636099,
      "node_id": "PRRC_kwDOABII585mQoeD",
      "diff_hunk": "@@ -67,6 +68,42 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 27,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: Add consteval ArrayFromHex()\" (00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5)\r\n\r\nThis warning seems unnecessarily scary and maybe not true. I don't think the function itself would use any stack space with NRVO, and callers could be calling this to initialize an array on the heap not the stack. Would suggest deleting this comment, because it seems like a warning about std::array in general, and I don't think there is anything that really distinguishes this function from other functions using std::array.",
      "created_at": "2024-08-13T17:00:11Z",
      "updated_at": "2024-08-13T17:09:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1715636099",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715636099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715642251",
      "pull_request_review_id": 2236080683,
      "id": 1715642251,
      "node_id": "PRRC_kwDOABII585mQp-L",
      "diff_hunk": "@@ -392,7 +392,10 @@ class prevector {\n             change_capacity(new_size + (new_size >> 1));\n         }\n         T* ptr = item_ptr(p);\n-        memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n+        // Passing dst variable with explicit type instead of temporary\n+        // expression calms down GCC under some circumstances.",
      "path": "src/prevector.h",
      "position": 1,
      "original_position": 6,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "05c16ae8649ee3b6bbcdbdf0541a65ccf4477537",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: Make code more tolerant of constexpr std::arrays\" (05c16ae8649ee3b6bbcdbdf0541a65ccf4477537)\r\n\r\nWhat is this referring to?",
      "created_at": "2024-08-13T17:05:34Z",
      "updated_at": "2024-08-13T17:09:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1715642251",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1715642251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 395,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 396,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716215869",
      "pull_request_review_id": 2237014975,
      "id": 1716215869,
      "node_id": "PRRC_kwDOABII585mS2A9",
      "diff_hunk": "@@ -67,6 +68,42 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // -1 comes from implicit null terminator\n+    if ((Size - 1) % 2 != 0) throw \"2 hex digits per byte is required\";\n+    std::array<Byte, (Size - 1) / 2> rv;\n+    size_t it = 0;\n+    for (auto& elem : rv) {\n+        auto hi = ConstevalHexDigit(hex_str[it++]) << 4;\n+        elem = Byte(hi | ConstevalHexDigit(hex_str[it++]));\n+    }\n+    return rv;\n+}\n+\n+template <typename T, size_t N>\n+constexpr bool operator==(const std::vector<T>& a, const std::array<T, N>& b)",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 43,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5",
      "in_reply_to_id": 1715621085,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree, it turned out it could be worked around by switching to `BOOST_CHECK_EQUAL_COLLECTIONS` in **key_tests.cpp**.",
      "created_at": "2024-08-14T02:00:56Z",
      "updated_at": "2024-08-14T02:00:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716215869",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716215869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716226929",
      "pull_request_review_id": 2237035142,
      "id": 1716226929,
      "node_id": "PRRC_kwDOABII585mS4tx",
      "diff_hunk": "@@ -67,6 +68,42 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 27,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5",
      "in_reply_to_id": 1715636099,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is in response to https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1689162345\r\n\r\nTo summarize - the concern is not stack memory being used inside `ArrayFromBytes` itself, but rather that the `std::array` returned contains an inner C-array (https://github.com/gcc-mirror/gcc/blob/61715e9340ab8941d40d62158fe437e9dbe3e068/libstdc%2B%2B-v3/include/std/array) that is not allocated from the heap and so will bump the stack pointer in the calling function by a fair bit for long hex strings.\r\n\r\nShould clarify the comment a bit on next re-touch.",
      "created_at": "2024-08-14T02:16:39Z",
      "updated_at": "2024-08-14T02:16:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716226929",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716226929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716229145",
      "pull_request_review_id": 2237039052,
      "id": 1716229145,
      "node_id": "PRRC_kwDOABII585mS5QZ",
      "diff_hunk": "@@ -392,7 +392,10 @@ class prevector {\n             change_capacity(new_size + (new_size >> 1));\n         }\n         T* ptr = item_ptr(p);\n-        memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n+        // Passing dst variable with explicit type instead of temporary\n+        // expression calms down GCC under some circumstances.",
      "path": "src/prevector.h",
      "position": 1,
      "original_position": 6,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "05c16ae8649ee3b6bbcdbdf0541a65ccf4477537",
      "in_reply_to_id": 1715642251,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I was running into an issue with `CScript` (inheriting `prevector`) and `std::array`s, similar to here: https://gitlab.freedesktop.org/pipewire/media-session/-/issues/4\r\n\r\nReverted this change in the latest push as I'm no longer modifying `CScript`. (Was running into MSVC CI-failures stemming from inability to infer `N`-parameter in constructor taking `std::array<unsigned char, N>::const_iterator`).",
      "created_at": "2024-08-14T02:19:53Z",
      "updated_at": "2024-08-14T02:29:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716229145",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716229145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 395,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 396,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716574220",
      "pull_request_review_id": 2237589001,
      "id": 1716574220,
      "node_id": "PRRC_kwDOABII585mUNgM",
      "diff_hunk": "@@ -128,13 +128,13 @@ consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n     // Non-lookup table version of HexDigit().\n     auto from_hex = [](const char c) -> int8_t {\n         if (c >= '0' && c <= '9') return c - '0';\n+        // Only lowercase letters are supported, for consistency.",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 4,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "9dab917088e83f627786ed5caafec859a3481b78",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "<3",
      "created_at": "2024-08-14T09:08:48Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716574220",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716574220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716588998",
      "pull_request_review_id": 2237589001,
      "id": 1716588998,
      "node_id": "PRRC_kwDOABII585mURHG",
      "diff_hunk": "@@ -254,7 +254,11 @@ class XOnlyPubKey\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n     /** Construct an x-only pubkey from exactly 32 bytes. */",
      "path": "src/pubkey.h",
      "position": 3,
      "original_position": 3,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "29090eca423327353b474615d02ed7c3190e4a50",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: now that the code is available here, the comment bacame redundant, since it doesn't provide any info that the code doesn't already explain",
      "created_at": "2024-08-14T09:17:28Z",
      "updated_at": "2024-08-14T19:00:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716588998",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716588998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 256,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716610850",
      "pull_request_review_id": 2237589001,
      "id": 1716610850,
      "node_id": "PRRC_kwDOABII585mUWci",
      "diff_hunk": "@@ -154,28 +154,29 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());",
      "path": "src/test/util_tests.cpp",
      "position": 64,
      "original_position": 7,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "1953d21e3f2b7d0fecae0b7bdf4012f16cb21b41",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nice!\r\n\r\nAlternatively, since we claim to be testing whitespace support - and we've already tested that non-whitespace values are parsed correctly -, we might as well compare `ParseHex(\"12 34 56 78\")` to `ParseHex(\"12345678\")` instead - otherwise all tests would fail all the time when an error is introduced, this way only the appropriate tests would fail (+ testing is simpler).",
      "created_at": "2024-08-14T09:31:03Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716610850",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716610850"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716616576",
      "pull_request_review_id": 2237589001,
      "id": 1716616576,
      "node_id": "PRRC_kwDOABII585mUX2A",
      "diff_hunk": "@@ -154,28 +154,29 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"12 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Leading space must be supported (used in BerkeleyEnvironment::Salvage)\n+    expected = {0x89, 0x34, 0x56, 0x78};\n     result = ParseHex(\" 89 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\" 89 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Mixed case and spaces are supported\n+    expected = {0xff, 0xaa};\n     result = ParseHex(\"     Ff        aA    \");",
      "path": "src/test/util_tests.cpp",
      "position": 80,
      "original_position": 23,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "1953d21e3f2b7d0fecae0b7bdf4012f16cb21b41",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "internal whitespaces are weird enough - but do we still encourage mixed casing?",
      "created_at": "2024-08-14T09:35:20Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716616576",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716616576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 193,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716622610",
      "pull_request_review_id": 2237589001,
      "id": 1716622610,
      "node_id": "PRRC_kwDOABII585mUZUS",
      "diff_hunk": "@@ -148,6 +148,8 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     std::vector<unsigned char> result;\n     std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 2,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can me modernized/simplified:\r\n```suggestion\r\n    std::vector<unsigned char> expected(std::begin(ParseHex_expected), std::end(ParseHex_expected));\r\n```\r\n\r\n(nit: weird `ParseHex_expected` naming)",
      "created_at": "2024-08-14T09:40:04Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716622610",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716622610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716629782",
      "pull_request_review_id": 2237589001,
      "id": 1716629782,
      "node_id": "PRRC_kwDOABII585mUbEW",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // - 1 comes from implicit null terminator\n+    if ((Size - 1) % 2 == 1) throw \"2 hex digits per byte is required\";",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 32,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "* x - 1 is odd means x is even\r\n* `digits` is plural, `are required` seems better\r\n```suggestion\r\n    if (Size % 2 == 0) throw \"2 hex digits per byte are required\";\r\n```\r\nor\r\n```suggestion\r\n    if (Size % 2 == 0) throw \"2 hex digits required per byte\";\r\n```",
      "created_at": "2024-08-14T09:44:58Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716629782",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716629782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 90,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716648031",
      "pull_request_review_id": 2237589001,
      "id": 1716648031,
      "node_id": "PRRC_kwDOABII585mUfhf",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // - 1 comes from implicit null terminator\n+    if ((Size - 1) % 2 == 1) throw \"2 hex digits per byte is required\";\n+    std::array<Byte, (Size - 1) / 2> rv{};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 33,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we've checked already that Size is always odd, it seems to me that we can safely truncate:\r\n```suggestion\r\n    std::array<Byte, Size  / 2> rv{};\r\n```\r\nand\r\n```C++\r\nstd::array<Byte, Size / 2>\r\n```\r\nin the signature",
      "created_at": "2024-08-14T09:58:30Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716648031",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716648031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716660247",
      "pull_request_review_id": 2237724166,
      "id": 1716660247,
      "node_id": "PRRC_kwDOABII585mUigX",
      "diff_hunk": "@@ -63,11 +61,11 @@ static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchP\n     TestDecrypt(crypt, vchCiphertext, vchPlaintext2);\n }\n \n-static void TestEncrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchPlaintextIn, \\\n+static void TestEncrypt(const CCrypter& crypt, std::span<const unsigned char> vchPlaintextIn, \\",
      "path": "src/wallet/test/wallet_crypto_tests.cpp",
      "position": 1,
      "original_position": 37,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "29090eca423327353b474615d02ed7c3190e4a50",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "style nit in 29090eca423327353b474615d02ed7c3190e4a50: Can drop the trailing `\\`, since this is a normal function and not a macro.",
      "created_at": "2024-08-14T10:07:58Z",
      "updated_at": "2024-08-14T10:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716660247",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716660247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716665464",
      "pull_request_review_id": 2237724166,
      "id": 1716665464,
      "node_id": "PRRC_kwDOABII585mUjx4",
      "diff_hunk": "@@ -128,13 +128,13 @@ consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n     // Non-lookup table version of HexDigit().\n     auto from_hex = [](const char c) -> int8_t {\n         if (c >= '0' && c <= '9') return c - '0';\n+        // Only lowercase letters are supported, for consistency.\n         if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-        if (c >= 'A' && c <= 'F') return c - 'A' + 0xA;\n \n-        assert(false); // Reached if ctor is called with an invalid hex digit.\n+        throw \"Called ctor with an invalid hex digit\";",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 9,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "9dab917088e83f627786ed5caafec859a3481b78",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in 9dab917088e83f627786ed5caafec859a3481b78: If you change the behavior, it also needs to adjust the error string. Now it should say: `throw \"Hex string must only contain lowercase hex chars\";`.",
      "created_at": "2024-08-14T10:11:57Z",
      "updated_at": "2024-08-14T10:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716665464",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716665464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716678159",
      "pull_request_review_id": 2237589001,
      "id": 1716678159,
      "node_id": "PRRC_kwDOABII585mUm4P",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Checked manually to make sure this still produces the same CScript as before 👍 ",
      "created_at": "2024-08-14T10:21:26Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716678159",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716678159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716680866",
      "pull_request_review_id": 2237724166,
      "id": 1716680866,
      "node_id": "PRRC_kwDOABII585mUnii",
      "diff_hunk": "@@ -1383,60 +1390,60 @@ BOOST_AUTO_TEST_CASE(script_FindAndDelete)\n     BOOST_CHECK_EQUAL(FindAndDelete(s, d), 4);\n     BOOST_CHECK(s == expect);\n \n-    s = ScriptFromHex(\"0302ff03\"); // PUSH 0x02ff03 onto stack\n-    d = ScriptFromHex(\"0302ff03\");\n+    s = ToScript(ArrayFromHex(\"0302ff03\")); // PUSH 0x02ff03 onto stack\n+    d = ToScript(ArrayFromHex(\"0302ff03\"));",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "style nit in 6a256b96af8c94804538eb9e78964557c032b74f: I think in tests it is more important that they are short, easy to read, and write. Compile time enforcements are neat at best, but shouldn't be a goal. Generally, the unit tests are single threaded and fully deterministic, so if the test ran once (and passed), it should always pass.\r\n\r\nSo my preference would be to just call `data = *Assert(TryParseHex(str))` inside `ScriptFromHex`.\r\n\r\nThis makes the diff smaller and also ensures that the same validation is done for `ScriptFromHex` that remain untouched in this pull.",
      "created_at": "2024-08-14T10:23:47Z",
      "updated_at": "2024-08-14T10:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716680866",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716680866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716685019",
      "pull_request_review_id": 2237589001,
      "id": 1716685019,
      "node_id": "PRRC_kwDOABII585mUojb",
      "diff_hunk": "@@ -72,7 +72,7 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     // check that DecodeBase58 skips whitespace, but still fails with unexpected non-whitespace at the end.\n     BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result, 3));\n     BOOST_CHECK( DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t \", result, 3));\n-    std::vector<unsigned char> expected = ParseHex(\"971a55\");\n+    constexpr std::array<unsigned char, 3> expected{ArrayFromHex(\"971a55\")};",
      "path": "src/test/base58_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could we simplify some of these declarations (at least in tests) to e.g.\r\n```suggestion\r\n    auto expected{ArrayFromHex(\"971a55\")};\r\n```",
      "created_at": "2024-08-14T10:27:17Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716685019",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716685019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716693711",
      "pull_request_review_id": 2237724166,
      "id": 1716693711,
      "node_id": "PRRC_kwDOABII585mUqrP",
      "diff_hunk": "@@ -407,7 +407,7 @@ class SigNetParams : public CChainParams {\n         vSeeds.clear();\n \n         if (!options.challenge) {\n-            bin = ParseHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\");\n+            bin = ToByteVector(ArrayFromHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\"));",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "ToByteVector seems to be called in a few places, though mostly in tests.\r\n\r\nI wonder if it makes sense to just go with https://github.com/hodlinator/bitcoin/blob/2024-07/uint256S_consteval_VecFromHex/src/util/strencodings.h#L95-L110\r\n\r\n",
      "created_at": "2024-08-14T10:34:48Z",
      "updated_at": "2024-08-14T10:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716693711",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716693711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716695410",
      "pull_request_review_id": 2237589001,
      "id": 1716695410,
      "node_id": "PRRC_kwDOABII585mUrFy",
      "diff_hunk": "@@ -1358,6 +1358,13 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template <size_t N>\n+static CScript ToScript(const std::array<uint8_t, N>& data)\n+{\n+    auto v = ToByteVector(data);",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 7,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "To keep previous behavior fully, we could we add a `CheckedParseHex` style validation here as well\r\n(since `ArrayFromHex(\"\")` is theoretically accepted, while `ScriptFromHex` failed for empty inputs).",
      "created_at": "2024-08-14T10:36:26Z",
      "updated_at": "2024-08-14T11:28:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716695410",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716695410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716703571",
      "pull_request_review_id": 2237724166,
      "id": 1716703571,
      "node_id": "PRRC_kwDOABII585mUtFT",
      "diff_hunk": "@@ -11,7 +11,7 @@\n #include <vector>\n \n namespace wallet {\n-int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, const SecureString& strKeyData, int count, unsigned char *key,unsigned char *iv) const\n+int CCrypter::BytesToKeySHA512AES(std::span<const unsigned char> chSalt, const SecureString& strKeyData, int count, unsigned char* key, unsigned char* iv) const",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "29090eca423327353b474615d02ed7c3190e4a50",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in 29090eca423327353b474615d02ed7c3190e4a50: When touching all of those lines, I wonder if it makes sense to switch them to `std::byte`, but that will probably be more involved.",
      "created_at": "2024-08-14T10:42:15Z",
      "updated_at": "2024-08-14T10:42:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716703571",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716703571"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716705665",
      "pull_request_review_id": 2237589001,
      "id": 1716705665,
      "node_id": "PRRC_kwDOABII585mUtmB",
      "diff_hunk": "@@ -1358,6 +1358,13 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template <size_t N>\n+static CScript ToScript(const std::array<uint8_t, N>& data)\n+{\n+    auto v = ToByteVector(data);\n+    return CScript(v.begin(), v.end());",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 8,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do we even need the vector conversion here?\r\n```C++\r\n    return CScript(data.begin(), data.end());\r\n```",
      "created_at": "2024-08-14T10:43:36Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716705665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716705665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1365,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716709558",
      "pull_request_review_id": 2237589001,
      "id": 1716709558,
      "node_id": "PRRC_kwDOABII585mUui2",
      "diff_hunk": "@@ -1383,60 +1390,60 @@ BOOST_AUTO_TEST_CASE(script_FindAndDelete)\n     BOOST_CHECK_EQUAL(FindAndDelete(s, d), 4);\n     BOOST_CHECK(s == expect);\n \n-    s = ScriptFromHex(\"0302ff03\"); // PUSH 0x02ff03 onto stack\n-    d = ScriptFromHex(\"0302ff03\");",
      "path": "src/test/script_tests.cpp",
      "position": 42,
      "original_position": 19,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Checked that `ScriptFromHex` is only used for non-static values now 👍 \r\n\r\nThough I'm not sure `ToScript(ArrayFromHex(\"0302ff03\"))` is more readable (or performant) than `ScriptFromHex(\"0302ff03\"`.",
      "created_at": "2024-08-14T10:47:03Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716709558",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716709558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1389,
      "original_line": 1389,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716732991",
      "pull_request_review_id": 2237840417,
      "id": 1716732991,
      "node_id": "PRRC_kwDOABII585mU0Q_",
      "diff_hunk": "@@ -254,7 +254,11 @@ class XOnlyPubKey\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n     /** Construct an x-only pubkey from exactly 32 bytes. */\n-    explicit XOnlyPubKey(Span<const unsigned char> bytes);\n+    constexpr explicit XOnlyPubKey(Span<const unsigned char> bytes)\n+    {\n+        assert(bytes.size() == 32);",
      "path": "src/pubkey.h",
      "position": 1,
      "original_position": 7,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: while touching, might be worth updating to\r\n\r\n```suggestion\r\n        assert(bytes.size() == m_keydata.size());\r\n```",
      "created_at": "2024-08-14T11:06:25Z",
      "updated_at": "2024-08-14T11:49:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716732991",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716732991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716747672",
      "pull_request_review_id": 2237589001,
      "id": 1716747672,
      "node_id": "PRRC_kwDOABII585mU32Y",
      "diff_hunk": "@@ -407,7 +407,7 @@ class SigNetParams : public CChainParams {\n         vSeeds.clear();\n \n         if (!options.challenge) {\n-            bin = ParseHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\");\n+            bin = ToByteVector(ArrayFromHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\"));",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716693711,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Or maybe we could change the `CScript& operator<<` to accept `std::span` instead:\r\n```patch\r\ndiff --git a/src/script/script.h b/src/script/script.h\r\n--- a/src/script/script.h\t(revision 8509f5ade3ad7e1f1a727fe027483faaf2f2d4fe)\r\n+++ b/src/script/script.h\t(date 1723634083423)\r\n@@ -463,7 +463,7 @@\r\n         return *this;\r\n     }\r\n \r\n-    CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\r\n+    CScript& operator<<(const std::span<const unsigned char>& b) LIFETIMEBOUND\r\n     {\r\n         if (b.size() < OP_PUSHDATA1)\r\n         {\r\n```\r\n\r\nEdit: these would work for `CScript() << OP_RETURN << ArrayFromHex(\"\")` only (eagerly merged my comment with @maflcko's, but it wasn't a perfect match)\r\n",
      "created_at": "2024-08-14T11:19:19Z",
      "updated_at": "2024-08-14T11:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716747672",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716747672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716752262",
      "pull_request_review_id": 2237840417,
      "id": 1716752262,
      "node_id": "PRRC_kwDOABII585mU4-G",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 18,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm unable to compile 09458eadc9a4484ba37a70d1b378ed3f3c9e31d0  using:\r\n\r\n```\r\n% clang --version\r\nHomebrew clang version 17.0.6\r\nTarget: arm64-apple-darwin23.3.0\r\nThread model: posix\r\nInstalledDir: /opt/homebrew/opt/llvm/bin\r\n```\r\n\r\n\r\n```\r\ngit clean -xdf && git checkout 09458eadc9a4484ba37a70d1b378ed3f3c9e31d0 && ./autogen.sh && ./configure --without-gui && make -j 7\r\n\r\n./uint256.h:131:19: error: call to consteval function 'ConstevalHexDigit' is not a constant expression\r\n        auto lo = ConstevalHexDigit(*(str_it++));\r\n                  ^\r\n./uint256.h:173:60: note: in instantiation of member function 'base_blob<256>::base_blob' requested here\r\n    consteval explicit uint256(std::string_view hex_str) : base_blob<256>(hex_str) {}\r\n                                                           ^\r\n/Library/Developer/CommandLineTools/SDKs/MacOSX14.0.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:168:56: note: read of non-constexpr variable 'str_it' is not allowed in a constant expression\r\n    reverse_iterator operator++(int) {reverse_iterator __tmp(*this); --current; return __tmp;}\r\n                                                       ^\r\n/Library/Developer/CommandLineTools/SDKs/MacOSX14.0.sdk/usr/include/c++/v1/__iterator/reverse_iterator.h:168:56: note: in call to 'reverse_iterator(str_it)'\r\n./uint256.h:131:39: note: in call to '&str_it->operator++(0)'\r\n        auto lo = ConstevalHexDigit(*(str_it++));\r\n                                      ^\r\n./uint256.h:129:10: note: declared here\r\n    auto str_it = hex_str.rbegin();\r\n```",
      "created_at": "2024-08-14T11:23:25Z",
      "updated_at": "2024-08-14T11:49:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716752262",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716752262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716754351",
      "pull_request_review_id": 2237589001,
      "id": 1716754351,
      "node_id": "PRRC_kwDOABII585mU5ev",
      "diff_hunk": "@@ -63,11 +61,11 @@ static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchP\n     TestDecrypt(crypt, vchCiphertext, vchPlaintext2);\n }\n \n-static void TestEncrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchPlaintextIn, \\\n+static void TestEncrypt(const CCrypter& crypt, std::span<const unsigned char> vchPlaintextIn, \\",
      "path": "src/wallet/test/wallet_crypto_tests.cpp",
      "position": 1,
      "original_position": 37,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "29090eca423327353b474615d02ed7c3190e4a50",
      "in_reply_to_id": 1716660247,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My original comment was:\r\n> Q: what the purpose of the trailing backslash, is it an automatic formatter trick?\r\n\r\nBut this answers it, thanks",
      "created_at": "2024-08-14T11:25:15Z",
      "updated_at": "2024-08-14T11:27:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716754351",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716754351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716833566",
      "pull_request_review_id": 2238011758,
      "id": 1716833566,
      "node_id": "PRRC_kwDOABII585mVM0e",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 18,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716752262,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What is your macOS and XCode version? IIRC Xcode 14 is no longer supported, see also https://github.com/bitcoin/bitcoin/pull/29934, but I think this isn't documented, nor tested, so probably up for debate.\r\n\r\nThe CI passes, because it is using Xcode 15, see d742be3d3f5d5063d7160f72422bce2fec953f38",
      "created_at": "2024-08-14T12:26:02Z",
      "updated_at": "2024-08-14T12:26:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716833566",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716833566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716839513",
      "pull_request_review_id": 2238021832,
      "id": 1716839513,
      "node_id": "PRRC_kwDOABII585mVORZ",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 18,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716752262,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It was working for me with:\r\n```python\r\n % clang --version\r\nHomebrew clang version 18.1.8\r\nTarget: arm64-apple-darwin23.5.0\r\nThread model: posix\r\nInstalledDir: /opt/homebrew/opt/llvm/bin\r\n\r\n % xcodebuild -version\r\nXcode 15.4\r\nBuild version 15F31d\r\n```",
      "created_at": "2024-08-14T12:30:25Z",
      "updated_at": "2024-08-14T12:31:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716839513",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716839513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716875704",
      "pull_request_review_id": 2238080694,
      "id": 1716875704,
      "node_id": "PRRC_kwDOABII585mVXG4",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716678159,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Responding to https://github.com/bitcoin/bitcoin/pull/30377/files#r1716678159:\r\n\r\nThanks, better get this part right. :)",
      "created_at": "2024-08-14T12:54:35Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716875704",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716875704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716886175",
      "pull_request_review_id": 2238080694,
      "id": 1716886175,
      "node_id": "PRRC_kwDOABII585mVZqf",
      "diff_hunk": "@@ -407,7 +407,7 @@ class SigNetParams : public CChainParams {\n         vSeeds.clear();\n \n         if (!options.challenge) {\n-            bin = ParseHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\");\n+            bin = ToByteVector(ArrayFromHex(\"512103ad5e0edad18cb1f0fc0d28a3d4f1f3e445640337489abb10404f2d1e086be430210359ef5021964fe22d6f8e05b2463c9540ce96883fe3b278760f048f5189f2e6c452ae\"));",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716693711,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Responding to https://github.com/bitcoin/bitcoin/pull/30377/files#r1716693711:\r\n@maflcko: Might introduce `VecFromHex` for tests but I like that this constant is fully compile time.\r\n\r\n@paplorinc: I have been trying out exactly that approach quite a bit, but was [warned by maflcko](https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1692989490) that there may be lying dragons among the different serializations of `vector`/`array`/`span`/`Span`. Also had some annoying MSVC compiler errors when just trying to add an overload for `std::array`. So undid my changes to that class.",
      "created_at": "2024-08-14T13:01:46Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716886175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716886175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716887365",
      "pull_request_review_id": 2238080694,
      "id": 1716887365,
      "node_id": "PRRC_kwDOABII585mVZ9F",
      "diff_hunk": "@@ -72,7 +72,7 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     // check that DecodeBase58 skips whitespace, but still fails with unexpected non-whitespace at the end.\n     BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result, 3));\n     BOOST_CHECK( DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t \", result, 3));\n-    std::vector<unsigned char> expected = ParseHex(\"971a55\");\n+    constexpr std::array<unsigned char, 3> expected{ArrayFromHex(\"971a55\")};",
      "path": "src/test/base58_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716685019,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Responding to https://github.com/bitcoin/bitcoin/pull/30377/files#r1716685019:\r\nI'll meet you half-way with `constexpr auto`. :)",
      "created_at": "2024-08-14T13:02:34Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716887365",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716887365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716890935",
      "pull_request_review_id": 2238080694,
      "id": 1716890935,
      "node_id": "PRRC_kwDOABII585mVa03",
      "diff_hunk": "@@ -1358,6 +1358,13 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template <size_t N>\n+static CScript ToScript(const std::array<uint8_t, N>& data)\n+{\n+    auto v = ToByteVector(data);\n+    return CScript(v.begin(), v.end());",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 8,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716705665,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Clang and GCC don't, but MSVC does. :(\r\n\r\nRemoved this function in latest push.",
      "created_at": "2024-08-14T13:04:57Z",
      "updated_at": "2024-08-14T17:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716890935",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716890935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1365,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716895696",
      "pull_request_review_id": 2238080694,
      "id": 1716895696,
      "node_id": "PRRC_kwDOABII585mVb_Q",
      "diff_hunk": "@@ -154,28 +154,29 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());",
      "path": "src/test/util_tests.cpp",
      "position": 64,
      "original_position": 7,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "1953d21e3f2b7d0fecae0b7bdf4012f16cb21b41",
      "in_reply_to_id": 1716610850,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Responding to https://github.com/bitcoin/bitcoin/pull/30377/files#r1716610850:\r\nI think it's more rigorous/strict to not use `ParseHex` on both left & right sides of the comparison.",
      "created_at": "2024-08-14T13:08:15Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716895696",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716895696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716900164",
      "pull_request_review_id": 2238080694,
      "id": 1716900164,
      "node_id": "PRRC_kwDOABII585mVdFE",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 18,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716752262,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Responding to https://github.com/bitcoin/bitcoin/pull/30377/files#r1716752262:\r\n\r\nWeird, actually works for me on same clang version as @stickies-v, but under Linux:\r\n```\r\n$ clang --version\r\nclang version 17.0.6\r\nTarget: x86_64-unknown-linux-gnu\r\n```\r\nMaybe it's the standard library that is somehow different (missing some `constexpr`)?",
      "created_at": "2024-08-14T13:10:45Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716900164",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716900164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716903532",
      "pull_request_review_id": 2238080694,
      "id": 1716903532,
      "node_id": "PRRC_kwDOABII585mVd5s",
      "diff_hunk": "@@ -11,7 +11,7 @@\n #include <vector>\n \n namespace wallet {\n-int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, const SecureString& strKeyData, int count, unsigned char *key,unsigned char *iv) const\n+int CCrypter::BytesToKeySHA512AES(std::span<const unsigned char> chSalt, const SecureString& strKeyData, int count, unsigned char* key, unsigned char* iv) const",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "29090eca423327353b474615d02ed7c3190e4a50",
      "in_reply_to_id": 1716703571,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Responding to https://github.com/bitcoin/bitcoin/pull/30377/files#r1716703571:\r\nTried to start switching to `std::byte` after your comment, but it quickly propagated to untouched files.",
      "created_at": "2024-08-14T13:12:56Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716903532",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716903532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716909297",
      "pull_request_review_id": 2238137404,
      "id": 1716909297,
      "node_id": "PRRC_kwDOABII585mVfTx",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 18,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716752262,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> What is your macOS and XCode version? IIRC Xcode 14 is no longer supported, see also https://github.com/bitcoin/bitcoin/pull/29934, but I think this isn't documented, nor tested, so probably up for debate.\r\n\r\nThanks, I'm on macOS 14.3.1 and just bumped XCode from 14.3.1.0.1.1683849156 to 15.3.0.0.1.1708646388 which resolves the issue 👍 ",
      "created_at": "2024-08-14T13:16:27Z",
      "updated_at": "2024-08-14T13:16:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716909297",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716909297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716956530",
      "pull_request_review_id": 2238217828,
      "id": 1716956530,
      "node_id": "PRRC_kwDOABII585mVq1y",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 18,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716752262,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "So I guess this commit drops support for XCode on macOS Ventura 13. Not sure if `doc/build-osx.md` needs to be adjusted, similar to https://github.com/bitcoin/bitcoin/pull/29934/files",
      "created_at": "2024-08-14T13:43:12Z",
      "updated_at": "2024-08-14T13:43:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716956530",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716956530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716969813",
      "pull_request_review_id": 2238242329,
      "id": 1716969813,
      "node_id": "PRRC_kwDOABII585mVuFV",
      "diff_hunk": "@@ -87,7 +87,7 @@ bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned\n     return true;\n }\n \n-bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext) const\n+bool CCrypter::Decrypt(std::span<const unsigned char> vchCiphertext, CKeyingMaterial& vchPlaintext) const",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `vch` var name prefixes are annoying now that they're not vectors anymore. It'll increase the diff but I still think it might be worth modernizing the names here to avoid that inconsistency? (here + a bunch of other instances)",
      "created_at": "2024-08-14T13:50:51Z",
      "updated_at": "2024-08-14T18:53:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716969813",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1716969813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717012368",
      "pull_request_review_id": 2238080694,
      "id": 1717012368,
      "node_id": "PRRC_kwDOABII585mV4eQ",
      "diff_hunk": "@@ -1358,6 +1358,13 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template <size_t N>\n+static CScript ToScript(const std::array<uint8_t, N>& data)\n+{\n+    auto v = ToByteVector(data);",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 7,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716695410,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> `ScriptFromHex` failed for empty inputs.\r\n\r\nHow come? `ParseHex(\"\")` returns `0` as verified by **util_tests.cpp**. Besides that, I think it's not really what we are testing in this file.",
      "created_at": "2024-08-14T14:12:05Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717012368",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717012368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1364,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717015082",
      "pull_request_review_id": 2238080694,
      "id": 1717015082,
      "node_id": "PRRC_kwDOABII585mV5Iq",
      "diff_hunk": "@@ -1383,60 +1390,60 @@ BOOST_AUTO_TEST_CASE(script_FindAndDelete)\n     BOOST_CHECK_EQUAL(FindAndDelete(s, d), 4);\n     BOOST_CHECK(s == expect);\n \n-    s = ScriptFromHex(\"0302ff03\"); // PUSH 0x02ff03 onto stack\n-    d = ScriptFromHex(\"0302ff03\");\n+    s = ToScript(ArrayFromHex(\"0302ff03\")); // PUSH 0x02ff03 onto stack\n+    d = ToScript(ArrayFromHex(\"0302ff03\"));",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 21,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716680866,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Attempted to minimize the diff in latest push, but went with `VecFromHex` for string literals and introduced a new `ScriptFromHexStr` for the 2 runtime validated call sites.",
      "created_at": "2024-08-14T14:13:55Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717015082",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717015082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1394,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717020191",
      "pull_request_review_id": 2238080694,
      "id": 1717020191,
      "node_id": "PRRC_kwDOABII585mV6Yf",
      "diff_hunk": "@@ -154,28 +154,29 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"12 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Leading space must be supported (used in BerkeleyEnvironment::Salvage)\n+    expected = {0x89, 0x34, 0x56, 0x78};\n     result = ParseHex(\" 89 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\" 89 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Mixed case and spaces are supported\n+    expected = {0xff, 0xaa};\n     result = ParseHex(\"     Ff        aA    \");",
      "path": "src/test/util_tests.cpp",
      "position": 80,
      "original_position": 23,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "1953d21e3f2b7d0fecae0b7bdf4012f16cb21b41",
      "in_reply_to_id": 1716616576,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Responding to https://github.com/bitcoin/bitcoin/pull/30377/files#r1716616576:\r\nEnough casing changes for one PR. :)",
      "created_at": "2024-08-14T14:16:49Z",
      "updated_at": "2024-08-14T17:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717020191",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717020191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 193,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717082261",
      "pull_request_review_id": 2238424878,
      "id": 1717082261,
      "node_id": "PRRC_kwDOABII585mWJiV",
      "diff_hunk": "@@ -67,6 +68,42 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 27,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5",
      "in_reply_to_id": 1715636099,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716226929\r\n\r\nThe comment seems not true and not helpful.\r\n\r\n- If the concern is _not_ stack space used inside the function, and this warning is only being added because the return type of the function is a variable-sized std::array, then I'm not sure why every function that returns a variable-sized std::array shouldn't have the same warning. This actually seems less deserving of a warning than other functions returning a std::array object, because the size of the returned array is not determined by a number passed by the caller, but by a literal string passed by the caller, and is half the size of that string, so pretty much guaranteed to be small.\r\n\r\n- It is also inaccurate to say std::array is a stack based container or that calling this function will use stack space to store the array. This function can be called to initialize not just stack objects, but also global and heap objects due to NRVO, without being allocated on or copied from the stack.",
      "created_at": "2024-08-14T14:49:08Z",
      "updated_at": "2024-08-14T14:49:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717082261",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717082261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717088367",
      "pull_request_review_id": 2238242329,
      "id": 1717088367,
      "node_id": "PRRC_kwDOABII585mWLBv",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 14,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Testing `consteval` functions is quite constrained, but I think it still might be useful to add some happy path test cases to `util_tests.cpp`?\r\n\r\n```cpp\r\nBOOST_AUTO_TEST_CASE(consteval_hex_digit)\r\n{\r\n    BOOST_CHECK_EQUAL(ConstevalHexDigit('0'), 0);\r\n    BOOST_CHECK_EQUAL(ConstevalHexDigit('9'), 9);\r\n    BOOST_CHECK_EQUAL(ConstevalHexDigit('a'), 0xa);\r\n    BOOST_CHECK_EQUAL(ConstevalHexDigit('f'), 0xf);\r\n}\r\n```",
      "created_at": "2024-08-14T14:52:44Z",
      "updated_at": "2024-08-14T18:53:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717088367",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717088367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717177489",
      "pull_request_review_id": 2238242329,
      "id": 1717177489,
      "node_id": "PRRC_kwDOABII585mWgyR",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // - 1 comes from implicit null terminator\n+    if ((Size - 1) % 2 == 1) throw \"2 hex digits per byte is required\";\n+    std::array<Byte, (Size - 1) / 2> rv{};\n+    size_t it = 0;",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 34,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: calling this non-iterator `i` would be more clear",
      "created_at": "2024-08-14T15:46:54Z",
      "updated_at": "2024-08-14T18:53:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717177489",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717177489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717314517",
      "pull_request_review_id": 2238803326,
      "id": 1717314517,
      "node_id": "PRRC_kwDOABII585mXCPV",
      "diff_hunk": "@@ -254,7 +254,11 @@ class XOnlyPubKey\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n     /** Construct an x-only pubkey from exactly 32 bytes. */\n-    explicit XOnlyPubKey(Span<const unsigned char> bytes);\n+    constexpr explicit XOnlyPubKey(Span<const unsigned char> bytes)\n+    {\n+        assert(bytes.size() == 32);",
      "path": "src/pubkey.h",
      "position": 1,
      "original_position": 7,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": 1716732991,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taken in latest push.",
      "created_at": "2024-08-14T17:31:12Z",
      "updated_at": "2024-08-14T17:31:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717314517",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717314517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717316492",
      "pull_request_review_id": 2238806505,
      "id": 1717316492,
      "node_id": "PRRC_kwDOABII585mXCuM",
      "diff_hunk": "@@ -148,6 +148,8 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     std::vector<unsigned char> result;\n     std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 2,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716622610,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taken in latest push.",
      "created_at": "2024-08-14T17:32:29Z",
      "updated_at": "2024-08-14T17:32:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717316492",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717316492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717317988",
      "pull_request_review_id": 2238809036,
      "id": 1717317988,
      "node_id": "PRRC_kwDOABII585mXDFk",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // - 1 comes from implicit null terminator\n+    if ((Size - 1) % 2 == 1) throw \"2 hex digits per byte is required\";",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 32,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716629782,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taken in latest push.",
      "created_at": "2024-08-14T17:33:35Z",
      "updated_at": "2024-08-14T17:33:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717317988",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717317988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 90,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717318999",
      "pull_request_review_id": 2238810796,
      "id": 1717318999,
      "node_id": "PRRC_kwDOABII585mXDVX",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // - 1 comes from implicit null terminator\n+    if ((Size - 1) % 2 == 1) throw \"2 hex digits per byte is required\";\n+    std::array<Byte, (Size - 1) / 2> rv{};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 33,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716648031,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taken in latest push, should add co-authorship on next re-touch.",
      "created_at": "2024-08-14T17:34:23Z",
      "updated_at": "2024-08-14T17:34:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717318999",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717318999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717320370",
      "pull_request_review_id": 2238812944,
      "id": 1717320370,
      "node_id": "PRRC_kwDOABII585mXDqy",
      "diff_hunk": "@@ -254,7 +254,11 @@ class XOnlyPubKey\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n     /** Construct an x-only pubkey from exactly 32 bytes. */",
      "path": "src/pubkey.h",
      "position": 3,
      "original_position": 3,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "29090eca423327353b474615d02ed7c3190e4a50",
      "in_reply_to_id": 1716588998,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taken in latest push.",
      "created_at": "2024-08-14T17:35:15Z",
      "updated_at": "2024-08-14T17:35:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717320370",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717320370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 256,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717324499",
      "pull_request_review_id": 2238242329,
      "id": 1717324499,
      "node_id": "PRRC_kwDOABII585mXErT",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 59,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: The size requirement could also be expressed as a requires clause:\r\n```cpp\r\nconsteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\r\n    requires (Size % 2 == 1)\r\n```\r\n\r\nIt provides more helpful information on why the constraints aren't met, e.g.:\r\n\r\n```\r\nnet_processing.cpp:3934:39: error: no matching function for call to 'ArrayFromHex'\r\n            constexpr auto finalAlert{ArrayFromHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\")};\r\n                                      ^~~~~~~~~~~~\r\n./util/strencodings.h:88:44: note: candidate template ignored: constraints not satisfied [with Byte = unsigned char, Size = 337]\r\nconsteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])    \r\n                                           ^\r\n./util/strencodings.h:89:15: note: because '337UL % 2 == 0' (1 == 0) evaluated to false\r\n    requires (Size % 2 == 0)\r\n```",
      "created_at": "2024-08-14T17:38:23Z",
      "updated_at": "2024-08-14T18:53:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717324499",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717324499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717327999",
      "pull_request_review_id": 2238824588,
      "id": 1717327999,
      "node_id": "PRRC_kwDOABII585mXFh_",
      "diff_hunk": "@@ -128,13 +128,13 @@ consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n     // Non-lookup table version of HexDigit().\n     auto from_hex = [](const char c) -> int8_t {\n         if (c >= '0' && c <= '9') return c - '0';\n+        // Only lowercase letters are supported, for consistency.\n         if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-        if (c >= 'A' && c <= 'F') return c - 'A' + 0xA;\n \n-        assert(false); // Reached if ctor is called with an invalid hex digit.\n+        throw \"Called ctor with an invalid hex digit\";",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 9,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "9dab917088e83f627786ed5caafec859a3481b78",
      "in_reply_to_id": 1716665464,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Updated with slightly different string in latest push and removed comment about consistency above as well.\r\n\r\n```C++\r\nthrow \"Only lowercase hex digits are allowed, for consistency\";\r\n```",
      "created_at": "2024-08-14T17:40:53Z",
      "updated_at": "2024-08-14T17:40:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717327999",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717327999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717352300",
      "pull_request_review_id": 2238863495,
      "id": 1717352300,
      "node_id": "PRRC_kwDOABII585mXLds",
      "diff_hunk": "@@ -146,36 +146,37 @@ static const unsigned char ParseHex_expected[65] = {\n BOOST_AUTO_TEST_CASE(parse_hex)\n {\n     std::vector<unsigned char> result;\n-    std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));\n+    std::vector<unsigned char> expected(std::begin(ParseHex_expected), std::end(ParseHex_expected));\n     // Basic test vector\n     result = ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\").value();\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"12 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Leading space must be supported (used in BerkeleyEnvironment::Salvage)\n+    expected = {0x89, 0x34, 0x56, 0x78};\n     result = ParseHex(\" 89 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\" 89 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Mixed case and spaces are supported\n+    expected = {0xff, 0xaa};\n     result = ParseHex(\"     Ff        aA    \");\n-    BOOST_CHECK(result.size() == 2 && result[0] == 0xff && result[1] == 0xaa);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"     Ff        aA    \").value();\n-    BOOST_CHECK(result.size() == 2 && result[0] == 0xff && result[1] == 0xaa);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Empty string is supported\n-    result = ParseHex(\"\");\n-    BOOST_CHECK(result.size() == 0);\n-    result = TryParseHex<uint8_t>(\"\").value();\n-    BOOST_CHECK(result.size() == 0);\n+    BOOST_CHECK_EQUAL(ParseHex(\"\").size(), 0);\n+    BOOST_CHECK_EQUAL(TryParseHex<uint8_t>(\"\").value().size(), 0);",
      "path": "src/test/util_tests.cpp",
      "position": 97,
      "original_position": 45,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "c6e1d5bff44b7d382a5a91b6722743b5fe07a95d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test refactor: util_tests - Use BOOST_CHECK_EQUAL_COLLECTIONS()\" (c6e1d5bff44b7d382a5a91b6722743b5fe07a95d)\r\n\r\nMight be worth mentioning this change in commit message or saying it has other test cleanups.",
      "created_at": "2024-08-14T18:00:19Z",
      "updated_at": "2024-08-14T18:41:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717352300",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717352300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": 203,
      "original_start_line": 178,
      "start_side": "RIGHT",
      "line": 204,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717373651",
      "pull_request_review_id": 2238863495,
      "id": 1717373651,
      "node_id": "PRRC_kwDOABII585mXQrT",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // Size should be uneven due to implicit null terminator.\n+    if (Size % 2 == 0) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 62,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b997d266e549ad6745d01a696cd9fbf1d3525944",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: Add consteval ArrayFromHex and VecFromHex\" (b997d266e549ad6745d01a696cd9fbf1d3525944)\r\n\r\nIt seems like this is assuming the last character in the string is \\0 and then ignoring it? I guess that is good because it makes this convenient to call, but in theory it means somebody could call this with a character array that is does not end in \\0 and then the last character of the string would be ignored.\r\n\r\nWould suggest changing this to:\r\n\r\n```c++\r\nsize_t size{hex_str[Size-1] == '\\0' ? Size-1 : Size};\r\nif (size % 2 != 0) throw \"2 hex digits required per byte\";\r\n```\r\n\r\nto work correctly in either case and actually verify that the last character is \\0 if an odd-size array is passed.",
      "created_at": "2024-08-14T18:19:41Z",
      "updated_at": "2024-08-14T18:41:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717373651",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717373651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717382220",
      "pull_request_review_id": 2238912630,
      "id": 1717382220,
      "node_id": "PRRC_kwDOABII585mXSxM",
      "diff_hunk": "@@ -67,6 +68,42 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 27,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5",
      "in_reply_to_id": 1715636099,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "New version of the comment in latest push:\r\n```\r\n * @warning Unlike VecFromHex which returns a vector, the returned array may use\r\n *          significant stack space if called inside a function.\r\n```",
      "created_at": "2024-08-14T18:26:15Z",
      "updated_at": "2024-08-14T18:26:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717382220",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717382220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717386520",
      "pull_request_review_id": 2238863495,
      "id": 1717386520,
      "node_id": "PRRC_kwDOABII585mXT0Y",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "8ad7e7d3fdfed4b126859dd83ab81cf8a8ae82a9",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: Hand-replace some ParseHex -> ArrayFromHex + VecFromHex\" (8ad7e7d3fdfed4b126859dd83ab81cf8a8ae82a9)\r\n\r\nIt's not obvious why an extra ToByteVector conversion is necessary here and why ArrayFromHex is not sufficient. Does CScript not accept std::array, or does it not accept uint8_t? I think this change is ok but it would be good to say in commit message what is happening here and how we could simplify this in the future, assuming it is something we should be able to clean up later.",
      "created_at": "2024-08-14T18:30:34Z",
      "updated_at": "2024-08-14T18:41:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717386520",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717386520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717392937",
      "pull_request_review_id": 2238863495,
      "id": 1717392937,
      "node_id": "PRRC_kwDOABII585mXVYp",
      "diff_hunk": "@@ -67,6 +68,42 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 27,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "00dc16bc29124dfbaf9d47c5411e4ebcf95e30b5",
      "in_reply_to_id": 1715636099,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717382220\r\n\r\n> New version of the comment in latest push:\r\n\r\nThank you! That seems accurate now.\r\n",
      "created_at": "2024-08-14T18:36:47Z",
      "updated_at": "2024-08-14T18:41:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717392937",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717392937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717416131",
      "pull_request_review_id": 2238968243,
      "id": 1717416131,
      "node_id": "PRRC_kwDOABII585mXbDD",
      "diff_hunk": "@@ -146,36 +146,37 @@ static const unsigned char ParseHex_expected[65] = {\n BOOST_AUTO_TEST_CASE(parse_hex)\n {\n     std::vector<unsigned char> result;\n-    std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));\n+    std::vector<unsigned char> expected(std::begin(ParseHex_expected), std::end(ParseHex_expected));\n     // Basic test vector\n     result = ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\").value();\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"12 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Leading space must be supported (used in BerkeleyEnvironment::Salvage)\n+    expected = {0x89, 0x34, 0x56, 0x78};\n     result = ParseHex(\" 89 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\" 89 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Mixed case and spaces are supported\n+    expected = {0xff, 0xaa};\n     result = ParseHex(\"     Ff        aA    \");\n-    BOOST_CHECK(result.size() == 2 && result[0] == 0xff && result[1] == 0xaa);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"     Ff        aA    \").value();\n-    BOOST_CHECK(result.size() == 2 && result[0] == 0xff && result[1] == 0xaa);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Empty string is supported\n-    result = ParseHex(\"\");\n-    BOOST_CHECK(result.size() == 0);\n-    result = TryParseHex<uint8_t>(\"\").value();\n-    BOOST_CHECK(result.size() == 0);\n+    BOOST_CHECK_EQUAL(ParseHex(\"\").size(), 0);\n+    BOOST_CHECK_EQUAL(TryParseHex<uint8_t>(\"\").value().size(), 0);",
      "path": "src/test/util_tests.cpp",
      "position": 97,
      "original_position": 45,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "c6e1d5bff44b7d382a5a91b6722743b5fe07a95d",
      "in_reply_to_id": 1717352300,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In the PR summary you mean?",
      "created_at": "2024-08-14T18:57:01Z",
      "updated_at": "2024-08-14T18:57:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717416131",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717416131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": 203,
      "original_start_line": 178,
      "start_side": "RIGHT",
      "line": 204,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717420847",
      "pull_request_review_id": 2238976235,
      "id": 1717420847,
      "node_id": "PRRC_kwDOABII585mXcMv",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // Size should be uneven due to implicit null terminator.\n+    if (Size % 2 == 0) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 62,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b997d266e549ad6745d01a696cd9fbf1d3525944",
      "in_reply_to_id": 1717373651,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changing it to a requires-clause as per https://github.com/bitcoin/bitcoin/pull/30377/files#r1717324499 with additional check for null terminator in the function body. Don't think someone would do:\r\n```C++\r\nconstexpr char my_hex[] = {'f', 'f'};\r\nconstexpr std::array<uint8_t, 1> arr = ArrayFromHex(my_hex);\r\n```\r\nwhen they could just do:\r\n```C++\r\nconstexpr std::array<uint8_t, 1> arr = {0xff};\r\n```",
      "created_at": "2024-08-14T19:01:41Z",
      "updated_at": "2024-08-15T06:09:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717420847",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717420847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717421534",
      "pull_request_review_id": 2238977364,
      "id": 1717421534,
      "node_id": "PRRC_kwDOABII585mXcXe",
      "diff_hunk": "@@ -154,28 +154,29 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());",
      "path": "src/test/util_tests.cpp",
      "position": 64,
      "original_position": 7,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "1953d21e3f2b7d0fecae0b7bdf4012f16cb21b41",
      "in_reply_to_id": 1716610850,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "By testing these transitively, we wouldn't test everything everywhere. But the latter can have the advantage of making mistakes *really* obvious :)",
      "created_at": "2024-08-14T19:02:21Z",
      "updated_at": "2024-08-14T19:02:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717421534",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717421534"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717422784",
      "pull_request_review_id": 2238979482,
      "id": 1717422784,
      "node_id": "PRRC_kwDOABII585mXcrA",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716678159,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah :))",
      "created_at": "2024-08-14T19:03:35Z",
      "updated_at": "2024-08-14T19:03:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717422784",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717422784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717423143",
      "pull_request_review_id": 2238980131,
      "id": 1717423143,
      "node_id": "PRRC_kwDOABII585mXcwn",
      "diff_hunk": "@@ -72,7 +72,7 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     // check that DecodeBase58 skips whitespace, but still fails with unexpected non-whitespace at the end.\n     BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result, 3));\n     BOOST_CHECK( DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t \", result, 3));\n-    std::vector<unsigned char> expected = ParseHex(\"971a55\");\n+    constexpr std::array<unsigned char, 3> expected{ArrayFromHex(\"971a55\")};",
      "path": "src/test/base58_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "6a256b96af8c94804538eb9e78964557c032b74f",
      "in_reply_to_id": 1716685019,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'll take what I can get",
      "created_at": "2024-08-14T19:03:59Z",
      "updated_at": "2024-08-14T19:03:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717423143",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717423143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717426365",
      "pull_request_review_id": 2238985484,
      "id": 1717426365,
      "node_id": "PRRC_kwDOABII585mXdi9",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // Size should be uneven due to implicit null terminator.\n+    if (Size % 2 == 0) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 62,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b997d266e549ad6745d01a696cd9fbf1d3525944",
      "in_reply_to_id": 1717373651,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do we really need to support both?",
      "created_at": "2024-08-14T19:06:57Z",
      "updated_at": "2024-08-14T19:06:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717426365",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717426365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717427675",
      "pull_request_review_id": 2238987421,
      "id": 1717427675,
      "node_id": "PRRC_kwDOABII585mXd3b",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "8ad7e7d3fdfed4b126859dd83ab81cf8a8ae82a9",
      "in_reply_to_id": 1717386520,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems related to: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716886175",
      "created_at": "2024-08-14T19:07:54Z",
      "updated_at": "2024-08-14T19:07:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717427675",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717427675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717433775",
      "pull_request_review_id": 2238996588,
      "id": 1717433775,
      "node_id": "PRRC_kwDOABII585mXfWv",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 25,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since it's a `consteval` ctor, I _think_ taking a `const char*` parameter should behave the same but avoid having to instantiate for each differently sized `hex_str` input? But I'm still easily confused by how `consteval` behaves.\r\n\r\n```suggestion\r\n   consteval ConstevalHexLiteral(const char* hex_str) : inner{hex_str} { Validate(inner); }\r\n```\r\n",
      "created_at": "2024-08-14T19:12:44Z",
      "updated_at": "2024-08-14T19:18:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717433775",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717433775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717438506",
      "pull_request_review_id": 2239004019,
      "id": 1717438506,
      "node_id": "PRRC_kwDOABII585mXggq",
      "diff_hunk": "@@ -347,7 +347,7 @@ class CTestNet4Params : public CChainParams {\n         m_assumed_chain_state_size = 0;\n \n         const char* testnet4_genesis_msg = \"03/May/2024 000000000000000000001ebd58c244970b3aa9d783bb001011fbe8ea8e98e00e\";\n-        const CScript testnet4_genesis_script = CScript() << ParseHex(\"000000000000000000000000000000000000000000000000000000000000000000\") << OP_CHECKSIG;\n+        const CScript testnet4_genesis_script = CScript() << ToByteVector(ArrayFromHex(\"000000000000000000000000000000000000000000000000000000000000000000\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "leftover?\r\n```suggestion\r\n        const CScript testnet4_genesis_script = CScript() << VecFromHex(\"000000000000000000000000000000000000000000000000000000000000000000\") << OP_CHECKSIG;\r\n```",
      "created_at": "2024-08-14T19:16:40Z",
      "updated_at": "2024-08-14T19:33:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717438506",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717438506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 350,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717443789",
      "pull_request_review_id": 2239004019,
      "id": 1717443789,
      "node_id": "PRRC_kwDOABII585mXhzN",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 59,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This hex parsing duplication is a bit painful, will try to come up with a deduplicated alternative tomorrow",
      "created_at": "2024-08-14T19:20:52Z",
      "updated_at": "2024-08-14T19:33:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717443789",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717443789"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717446097",
      "pull_request_review_id": 2239004019,
      "id": 1717446097,
      "node_id": "PRRC_kwDOABII585mXiXR",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 41,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: \"vec\" vs \"array\" (abbreviation vs full) -> can we either name them \"VecFromHex\" and \"ArrFromHex\" or rather \"VectorFromHex\" and \"ArrayFromHex\" (or even shorter: \"HexToVector\" and \"HexToArray\"?",
      "created_at": "2024-08-14T19:22:52Z",
      "updated_at": "2024-08-14T19:33:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717446097",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717446097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717447789",
      "pull_request_review_id": 2239004019,
      "id": 1717447789,
      "node_id": "PRRC_kwDOABII585mXixt",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 31,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "super-nit (feel free to ignore): we might want to do the content checking after the size check, it's cheaper",
      "created_at": "2024-08-14T19:24:17Z",
      "updated_at": "2024-08-14T19:33:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717447789",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717447789"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717449874",
      "pull_request_review_id": 2239004019,
      "id": 1717449874,
      "node_id": "PRRC_kwDOABII585mXjSS",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 33,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "super-nit:\r\n```suggestion\r\n        if (hex_str.size() % 2) throw \"2 hex digits required per byte\";\r\n```",
      "created_at": "2024-08-14T19:25:59Z",
      "updated_at": "2024-08-14T19:33:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717449874",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717449874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717452225",
      "pull_request_review_id": 2239004019,
      "id": 1717452225,
      "node_id": "PRRC_kwDOABII585mXj3B",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // Size should be uneven due to implicit null terminator.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 61,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    // Size should be odd due to implicit null terminator.\r\n```",
      "created_at": "2024-08-14T19:27:42Z",
      "updated_at": "2024-08-14T19:33:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717452225",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717452225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717458216",
      "pull_request_review_id": 2238976235,
      "id": 1717458216,
      "node_id": "PRRC_kwDOABII585mXlUo",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 25,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717433775,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Clang unfortunately gives me: ``candidate function template not viable: no known conversion from 'const char[65]' to 'ConstevalHexLiteral' for 1st argument``",
      "created_at": "2024-08-14T19:33:23Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717458216",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717458216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717462054",
      "pull_request_review_id": 2238976235,
      "id": 1717462054,
      "node_id": "PRRC_kwDOABII585mXmQm",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 41,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717446097,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think `*FromHex` jives well with `uint256::FromHex()`.. only thing is the latter stores the bytes in reverse order. :face_in_clouds: \r\n\r\nCould go for `VectorFromHex`, but there is already some weak precedence in the type `VecDeque`.",
      "created_at": "2024-08-14T19:37:23Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717462054",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717462054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717490226",
      "pull_request_review_id": 2239084398,
      "id": 1717490226,
      "node_id": "PRRC_kwDOABII585mXtIy",
      "diff_hunk": "@@ -146,36 +146,37 @@ static const unsigned char ParseHex_expected[65] = {\n BOOST_AUTO_TEST_CASE(parse_hex)\n {\n     std::vector<unsigned char> result;\n-    std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));\n+    std::vector<unsigned char> expected(std::begin(ParseHex_expected), std::end(ParseHex_expected));\n     // Basic test vector\n     result = ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\").value();\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Spaces between bytes must be supported\n+    expected = {0x12, 0x34, 0x56, 0x78};\n     result = ParseHex(\"12 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"12 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x12 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Leading space must be supported (used in BerkeleyEnvironment::Salvage)\n+    expected = {0x89, 0x34, 0x56, 0x78};\n     result = ParseHex(\" 89 34 56 78\");\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\" 89 34 56 78\").value();\n-    BOOST_CHECK(result.size() == 4 && result[0] == 0x89 && result[1] == 0x34 && result[2] == 0x56 && result[3] == 0x78);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Mixed case and spaces are supported\n+    expected = {0xff, 0xaa};\n     result = ParseHex(\"     Ff        aA    \");\n-    BOOST_CHECK(result.size() == 2 && result[0] == 0xff && result[1] == 0xaa);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n     result = TryParseHex<uint8_t>(\"     Ff        aA    \").value();\n-    BOOST_CHECK(result.size() == 2 && result[0] == 0xff && result[1] == 0xaa);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n     // Empty string is supported\n-    result = ParseHex(\"\");\n-    BOOST_CHECK(result.size() == 0);\n-    result = TryParseHex<uint8_t>(\"\").value();\n-    BOOST_CHECK(result.size() == 0);\n+    BOOST_CHECK_EQUAL(ParseHex(\"\").size(), 0);\n+    BOOST_CHECK_EQUAL(TryParseHex<uint8_t>(\"\").value().size(), 0);",
      "path": "src/test/util_tests.cpp",
      "position": 97,
      "original_position": 45,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "c6e1d5bff44b7d382a5a91b6722743b5fe07a95d",
      "in_reply_to_id": 1717352300,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717352300\r\n\r\n> In the PR summary you mean?\r\n\r\nI do actually mean the commit message. The current commit message ddd06a0ec0a3b2c1d128fe5986a1363e7cf8e365 makes it sounds like it only switching to BOOST_CHECK_EQUAL_COLLECTIONS, but in reality is doing that and also making a seemingly unrelated test cleanup. Would suggest mentioning the other cleanup in the commit message, so for example, if someone is debugging something and wants to see if this commit is relevant, they can judge that based on the commit message.",
      "created_at": "2024-08-14T20:06:02Z",
      "updated_at": "2024-08-15T12:46:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717490226",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717490226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": 203,
      "original_start_line": 178,
      "start_side": "RIGHT",
      "line": 204,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717492122",
      "pull_request_review_id": 2239084398,
      "id": 1717492122,
      "node_id": "PRRC_kwDOABII585mXtma",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // Size should be uneven due to implicit null terminator.\n+    if (Size % 2 == 0) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 62,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b997d266e549ad6745d01a696cd9fbf1d3525944",
      "in_reply_to_id": 1717373651,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717426365\r\n\r\n> Do we really need to support both?\r\n\r\nIt seems easier to support both than to add an error message explaining that the last byte has to be null, when there is no particular reason it needs to be null. But mainly I didn't think the last byte should be silently ignored, so at least that problem is fixed now.",
      "created_at": "2024-08-14T20:08:06Z",
      "updated_at": "2024-08-15T12:46:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717492122",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717492122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717501165",
      "pull_request_review_id": 2239084398,
      "id": 1717501165,
      "node_id": "PRRC_kwDOABII585mXvzt",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 56,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b997d266e549ad6745d01a696cd9fbf1d3525944",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717382220\r\n\r\nOn second thought, while this warning message is more accurate, I don't think it is clear, because it is implying that return value will use stack space, when we should not expect that to be the case normally. Would suggest:\r\n\r\n* It may be preferable to call VecFromHex instead of this function to save stack space, or to declare the returned constexpr to avoid using stack space, if returned array is large and being used to initialize a local variable.",
      "created_at": "2024-08-14T20:17:08Z",
      "updated_at": "2024-08-15T12:46:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717501165",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717501165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 114,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717562300",
      "pull_request_review_id": 2238976235,
      "id": 1717562300,
      "node_id": "PRRC_kwDOABII585mX-u8",
      "diff_hunk": "@@ -347,7 +347,7 @@ class CTestNet4Params : public CChainParams {\n         m_assumed_chain_state_size = 0;\n \n         const char* testnet4_genesis_msg = \"03/May/2024 000000000000000000001ebd58c244970b3aa9d783bb001011fbe8ea8e98e00e\";\n-        const CScript testnet4_genesis_script = CScript() << ParseHex(\"000000000000000000000000000000000000000000000000000000000000000000\") << OP_CHECKSIG;\n+        const CScript testnet4_genesis_script = CScript() << ToByteVector(ArrayFromHex(\"000000000000000000000000000000000000000000000000000000000000000000\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717438506,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Now explained in commit message 0a82c18457ec81e911b835b2ac76ad7475384983 as suggested in https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717386520.",
      "created_at": "2024-08-14T21:15:24Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717562300",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717562300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 350,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717562892",
      "pull_request_review_id": 2238976235,
      "id": 1717562892,
      "node_id": "PRRC_kwDOABII585mX-4M",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "8ad7e7d3fdfed4b126859dd83ab81cf8a8ae82a9",
      "in_reply_to_id": 1717386520,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Now explained in commit message 0a82c18457ec81e911b835b2ac76ad7475384983",
      "created_at": "2024-08-14T21:16:05Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717562892",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717562892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717564420",
      "pull_request_review_id": 2238976235,
      "id": 1717564420,
      "node_id": "PRRC_kwDOABII585mX_QE",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 14,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": 1717088367,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Now part of b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "created_at": "2024-08-14T21:17:55Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717564420",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717564420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717565594",
      "pull_request_review_id": 2238976235,
      "id": 1717565594,
      "node_id": "PRRC_kwDOABII585mX_ia",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 33,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717449874,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm burned by old MSVC warnings (probably not current) \"implicit conversion to bool\" so I'd rather not.",
      "created_at": "2024-08-14T21:19:13Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717565594",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717565594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717568070",
      "pull_request_review_id": 2238976235,
      "id": 1717568070,
      "node_id": "PRRC_kwDOABII585mYAJG",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // - 1 comes from implicit null terminator\n+    if ((Size - 1) % 2 == 1) throw \"2 hex digits per byte is required\";\n+    std::array<Byte, (Size - 1) / 2> rv{};\n+    size_t it = 0;",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 34,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": 1717177489,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-08-14T21:21:48Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717568070",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717568070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717568246",
      "pull_request_review_id": 2238976235,
      "id": 1717568246,
      "node_id": "PRRC_kwDOABII585mYAL2",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 59,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717324499,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2024-08-14T21:22:01Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717568246",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717568246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717569863",
      "pull_request_review_id": 2238976235,
      "id": 1717569863,
      "node_id": "PRRC_kwDOABII585mYAlH",
      "diff_hunk": "@@ -87,7 +87,7 @@ bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned\n     return true;\n }\n \n-bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext) const\n+bool CCrypter::Decrypt(std::span<const unsigned char> vchCiphertext, CKeyingMaterial& vchPlaintext) const",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 23,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": 1716969813,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, slightly, `vchCiphertext` -> `chCiphertext` (already some precedence for `ch`-prefix). Also changed `vchSalt` -> `salt` in some places.",
      "created_at": "2024-08-14T21:23:51Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717569863",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717569863"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717575383",
      "pull_request_review_id": 2238976235,
      "id": 1717575383,
      "node_id": "PRRC_kwDOABII585mYB7X",
      "diff_hunk": "@@ -67,6 +68,36 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+// Non lookup table version of HexDigit().\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    // Only lowercase letters are supported, for consistency.\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Called with an invalid hex digit\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Uses a stack based container (array). Care needs to be\n+ *          taken to avoid using up too much stack memory especially in\n+ *          recursive functions or non-leaf nodes of the call graph.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, (Size - 1) / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // - 1 comes from implicit null terminator\n+    if ((Size - 1) % 2 == 1) throw \"2 hex digits per byte is required\";\n+    std::array<Byte, (Size - 1) / 2> rv{};",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 33,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716648031,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added 4 of you in b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795, hopefully you don't mind the company. :)\r\n\r\n@maflcko let me know if you prefer a different identifier to make GitHub rendering prettier.",
      "created_at": "2024-08-14T21:30:46Z",
      "updated_at": "2024-08-14T21:33:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717575383",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717575383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717578019",
      "pull_request_review_id": 2239235699,
      "id": 1717578019,
      "node_id": "PRRC_kwDOABII585mYCkj",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 31,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717447789,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done in latest.",
      "created_at": "2024-08-14T21:33:47Z",
      "updated_at": "2024-08-14T21:33:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717578019",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717578019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717580883",
      "pull_request_review_id": 2239239865,
      "id": 1717580883,
      "node_id": "PRRC_kwDOABII585mYDRT",
      "diff_hunk": "@@ -254,7 +254,11 @@ class XOnlyPubKey\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n     /** Construct an x-only pubkey from exactly 32 bytes. */\n-    explicit XOnlyPubKey(Span<const unsigned char> bytes);\n+    constexpr explicit XOnlyPubKey(Span<const unsigned char> bytes)\n+    {\n+        assert(bytes.size() == 32);",
      "path": "src/pubkey.h",
      "position": 1,
      "original_position": 7,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "240bc10e3f5f90fcc386b1a72ee2067a156abff3",
      "in_reply_to_id": 1716732991,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Further changed to just:\r\n```C++\r\nconstexpr explicit XOnlyPubKey(Span<const unsigned char> bytes) : m_keydata{bytes} {}\r\n```\r\nSince `base_blob(Span<const unsigned char>)` does the exact length assert internally.",
      "created_at": "2024-08-14T21:37:19Z",
      "updated_at": "2024-08-14T21:37:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717580883",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717580883"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717589830",
      "pull_request_review_id": 2239254641,
      "id": 1717589830,
      "node_id": "PRRC_kwDOABII585mYFdG",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 18,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716752262,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> So I guess this commit drops support for XCode on macOS Ventura 13. Not sure if doc/build-osx.md needs to be adjusted, similar to https://github.com/bitcoin/bitcoin/pull/29934/files\r\n\r\nAccording to my earlier (pending and therefore out of order) message, https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716900164, the clang version is not the issue. So simply changing to `llvm@18` in the docs might not be correct.\r\n\r\nWhat is your clang version after the XCode upgrade @stickies-v?",
      "created_at": "2024-08-14T21:49:31Z",
      "updated_at": "2024-08-14T21:49:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717589830",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717589830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717819227",
      "pull_request_review_id": 2239084398,
      "id": 1717819227,
      "node_id": "PRRC_kwDOABII585mY9db",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 26,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: Add consteval ArrayFromHex and VecFromHex\" (b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795)\r\n\r\nI can't see a benefit to defining a string_view constructor here and depending on string_view when this class is only supposed to accept null terminated string literals. This class could be simplified by dropping this constructor, dropping the string_view member and just declaring a const char* member.",
      "created_at": "2024-08-15T02:59:02Z",
      "updated_at": "2024-08-15T12:46:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717819227",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717819227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717821819",
      "pull_request_review_id": 2239084398,
      "id": 1717821819,
      "node_id": "PRRC_kwDOABII585mY-F7",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 25,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: Add consteval ArrayFromHex and VecFromHex\" (b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795)\r\n\r\nThis will do a weird thing when passed a non-null terminated string and give an error about an out of bounds array access (\"error: array subscript value ‘2’ is outside the bounds of array ‘hex’ of type ‘const char [2]’\") for:\r\n\r\n```c++\r\nconstexpr char hex[] = {'a', 'b'};\r\nVecFromHex(hex);\r\n```\r\n\r\nThis could be simplified and made less confusing by not requiring character arrays to be null terminated.",
      "created_at": "2024-08-15T03:04:15Z",
      "updated_at": "2024-08-15T12:46:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717821819",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717821819"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717827853",
      "pull_request_review_id": 2239084398,
      "id": 1717827853,
      "node_id": "PRRC_kwDOABII585mY_kN",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 22,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: Add consteval ArrayFromHex and VecFromHex\" \r\n(b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795)\r\n\r\nI don't think it makes sense to have a class that check a hex string at compile time, store the literal hex string in the binary, and then parse the hex string again. It makes the implementation unnecessarily complicated because code loops over the hex string ConstevalHexLiteral 3 different places instead of 1, duplicates checks like `throw \"2 hex digits required per byte\"` twice, and defines an extra class to implement an implicit conversion all for the benefit of storing hex instead of binary data in the compiled code and doing unnecessary parsing at runtime. It don't think there is a justification for this and would recommend going for the alternate approach suggested above using util::HexLiteral and util::Vec functions.",
      "created_at": "2024-08-15T03:17:32Z",
      "updated_at": "2024-08-15T12:46:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717827853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717827853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717828979",
      "pull_request_review_id": 2239084398,
      "id": 1717828979,
      "node_id": "PRRC_kwDOABII585mY_1z",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 49,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: Add consteval ArrayFromHex and VecFromHex\" \r\n(b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795)\r\n\r\nI think it would be safer and more explicit to use `static_cast<Byte>(...)` instead of functional cast `Byte(...)`. Not actually sure about this particular situation, but in general there are unsafe conversions that C casts allow which static_cast does not allow.",
      "created_at": "2024-08-15T03:19:57Z",
      "updated_at": "2024-08-15T12:46:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717828979",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717828979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718048796",
      "pull_request_review_id": 2239843269,
      "id": 1718048796,
      "node_id": "PRRC_kwDOABII585mZ1gc",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 33,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717449874,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In other cases we're adding and subtracting booleans, but I'm fine with both, see: https://github.com/bitcoin/bitcoin/pull/30535/files#diff-09e6cf871236bf03d32cca9405837d9b7927690b2296a2de17c9be6ea0e75959R74",
      "created_at": "2024-08-15T07:06:07Z",
      "updated_at": "2024-08-15T07:06:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718048796",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718048796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718060639",
      "pull_request_review_id": 2239861784,
      "id": 1718060639,
      "node_id": "PRRC_kwDOABII585mZ4Zf",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 33,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717449874,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's some next level terseness. Okay, will change if I re-touch.",
      "created_at": "2024-08-15T07:21:56Z",
      "updated_at": "2024-08-15T07:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718060639",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718060639"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718117883",
      "pull_request_review_id": 2239947187,
      "id": 1718117883,
      "node_id": "PRRC_kwDOABII585maGX7",
      "diff_hunk": "@@ -125,20 +125,11 @@ class base_blob\n template <unsigned int BITS>\n consteval base_blob<BITS>::base_blob(std::string_view hex_str)\n {\n-    // Non-lookup table version of HexDigit().\n-    auto from_hex = [](const char c) -> int8_t {\n-        if (c >= '0' && c <= '9') return c - '0';\n-        // Only lowercase letters are supported, for consistency.\n-        if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n-\n-        throw \"Called ctor with an invalid hex digit\";\n-    };\n-\n     if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\n     auto str_it = hex_str.rbegin();\n     for (auto& elem : m_data) {\n-        auto lo = from_hex(*(str_it++));\n-        elem = (from_hex(*(str_it++)) << 4) | lo;\n+        auto lo = ConstevalHexDigit(*(str_it++));",
      "path": "src/uint256.h",
      "position": 1,
      "original_position": 18,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "09458eadc9a4484ba37a70d1b378ed3f3c9e31d0",
      "in_reply_to_id": 1716752262,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Correct, the issue is not the clang version, but the stdlib version. `MacOSX14.0.sdk` does seem to have an issue in the iterators implementation. The minimum clang (and libc++) version is documented in `doc/dependencies.md` to be clang-16.\r\n\r\nHowever, Apple somehow ships a completely separately versioned clang and stdlib with Xcode. Apples Xcode 14 stdlib seems to be no longer supported after this commit.\r\n\r\nGiven that Xcode 15 dropped support for macOS Ventura 13, made me leave the previous comment https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716956530 about possibly extending the commit to mention that.\r\n\r\nAgain, I don't use Apple, so I don't care, but I wanted to mention it.",
      "created_at": "2024-08-15T08:27:47Z",
      "updated_at": "2024-08-15T08:27:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718117883",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718117883"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 131,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718137078",
      "pull_request_review_id": 2239975805,
      "id": 1718137078,
      "node_id": "PRRC_kwDOABII585maLD2",
      "diff_hunk": "@@ -32,20 +31,19 @@ static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, cons\n             HexStr(crypt.vchIV) + std::string(\" != \") + HexStr(correctIV));\n }\n \n-static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n-                 const std::vector<unsigned char>& correctKey = std::vector<unsigned char>(),\n-                 const std::vector<unsigned char>& correctIV=std::vector<unsigned char>())\n+static void TestPassphrase(std::span<const unsigned char> chSalt, const SecureString& passphrase, uint32_t rounds,\n+                 std::span<const unsigned char> correctKey = {}, std::span<const unsigned char> correctIV = {})\n {\n-    TestPassphraseSingle(vchSalt, passphrase, rounds, correctKey, correctIV);\n+    TestPassphraseSingle(chSalt, passphrase, rounds, correctKey, correctIV);\n     for(SecureString::const_iterator i(passphrase.begin()); i != passphrase.end(); ++i)\n-        TestPassphraseSingle(vchSalt, SecureString(i, passphrase.end()), rounds);\n+        TestPassphraseSingle(chSalt, SecureString(i, passphrase.end()), rounds);\n }\n \n-static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext, \\\n+static void TestDecrypt(const CCrypter& crypt, std::span<const unsigned char> chCiphertext, \\\n                         const std::vector<unsigned char>& vchPlaintext = std::vector<unsigned char>())\n {\n     CKeyingMaterial vchDecrypted;\n-    crypt.Decrypt(vchCiphertext, vchDecrypted);\n+    crypt.Decrypt(chCiphertext, vchDecrypted);",
      "path": "src/wallet/test/wallet_crypto_tests.cpp",
      "position": 1,
      "original_position": 39,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "9c4aad3fe4cb74bb1d9afeece78e2dd6ae1ad08e",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "style nit in 9c4aad3fe4cb74bb1d9afeece78e2dd6ae1ad08e: When renaming this, I'd suggest to use the \"fully\" correct naming style `ciphertext` (snake_case without type prefix), according to the style guide.\r\n\r\n(An alternative would be to leave it completely untouched)",
      "created_at": "2024-08-15T08:48:10Z",
      "updated_at": "2024-08-15T10:06:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718137078",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718137078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718187725",
      "pull_request_review_id": 2239975805,
      "id": 1718187725,
      "node_id": "PRRC_kwDOABII585maXbN",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 40,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "style nit in https://github.com/bitcoin/bitcoin/commit/b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795:\r\n\r\nI wonder if it makes sense to pick the default as `Byte = std::byte` now. Obviously the diff will be larger, but longer term it seems cleaner to converge to `std::byte`, so having that as default will make the future easier, no?",
      "created_at": "2024-08-15T09:32:47Z",
      "updated_at": "2024-08-15T10:06:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718187725",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718187725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718210663",
      "pull_request_review_id": 2239975805,
      "id": 1718210663,
      "node_id": "PRRC_kwDOABII585madBn",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "0a82c18457ec81e911b835b2ac76ad7475384983",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "style nit in 0a82c18457ec81e911b835b2ac76ad7475384983:\r\n\r\nI know this has been mentioned before, but performance doesn't matter here, so using just `VecFromHex` seems shorter and clearer?",
      "created_at": "2024-08-15T09:56:52Z",
      "updated_at": "2024-08-15T10:06:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718210663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718210663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718211451",
      "pull_request_review_id": 2239975805,
      "id": 1718211451,
      "node_id": "PRRC_kwDOABII585madN7",
      "diff_hunk": "@@ -3931,7 +3931,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         // If the peer is old enough to have the old alert system, send it the final alert.\n         if (greatest_common_version <= 70012) {\n-            const auto finalAlert{ParseHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\")};\n+            constexpr auto finalAlert{ArrayFromHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\")};\n             MakeAndPushMessage(pfrom, \"alert\", Span{finalAlert});",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "0a82c18457ec81e911b835b2ac76ad7475384983",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "style nit in https://github.com/bitcoin/bitcoin/commit/0a82c18457ec81e911b835b2ac76ad7475384983:\r\n\r\nSpan and array serialization is the same, so in theory you could drop this call to Span.",
      "created_at": "2024-08-15T09:57:45Z",
      "updated_at": "2024-08-15T10:06:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718211451",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718211451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3935,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718214663",
      "pull_request_review_id": 2239975805,
      "id": 1718214663,
      "node_id": "PRRC_kwDOABII585maeAH",
      "diff_hunk": "@@ -1352,12 +1352,18 @@ BOOST_AUTO_TEST_CASE(script_GetScriptAsm)\n     BOOST_CHECK_EQUAL(derSig + \"83 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"83\")) << vchPubKey));\n }\n \n-static CScript ScriptFromHex(const std::string& str)\n+static CScript ScriptFromHexStr(const std::string& str)\n {\n     std::vector<unsigned char> data = ParseHex(str);\n     return CScript(data.begin(), data.end());\n }\n \n+static CScript ScriptFromHex(ConstevalHexLiteral str)\n+{\n+    std::vector<unsigned char> data = VecFromHex(str);\n+    return CScript(data.begin(), data.end());\n+}",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "0a82c18457ec81e911b835b2ac76ad7475384983",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "style nit in https://github.com/bitcoin/bitcoin/commit/0a82c18457ec81e911b835b2ac76ad7475384983:\r\n\r\nStill not sure about this. The benefit seems limited to offer two functions that effectively do the same in tests. It is just extra stuff for test writers (and readers) to keep in mind, when reviewing or writing new tests. Just having one function (the already existing one) seems easier.\r\n\r\nThe benefit of compile-time enforcement in tests seems limited, because running this test is way faster than compiling it.\r\n\r\n",
      "created_at": "2024-08-15T10:01:31Z",
      "updated_at": "2024-08-15T10:06:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718214663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718214663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 1361,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1369,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718218266",
      "pull_request_review_id": 2240096017,
      "id": 1718218266,
      "node_id": "PRRC_kwDOABII585mae4a",
      "diff_hunk": "@@ -148,10 +148,14 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     std::vector<unsigned char> result;\n     std::vector<unsigned char> expected(std::begin(ParseHex_expected), std::end(ParseHex_expected));\n     // Basic test vector\n+    result = ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\"));",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: this is closely tied to `ParseHex_expected`, if you modify again, consider extracting all 5 usages next to it.",
      "created_at": "2024-08-15T10:05:13Z",
      "updated_at": "2024-08-15T10:51:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718218266",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718218266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718237308",
      "pull_request_review_id": 2240123641,
      "id": 1718237308,
      "node_id": "PRRC_kwDOABII585majh8",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 25,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717433775,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's strange, I don't see how a string literal would need a conversion when there's a `const char*` ctor? It seems to work fine for [`ConstevalStringLiteral`](https://github.com/bitcoin/bitcoin/blob/2f7d9aec4d049701fccfc029f44934d187467432/src/util/translation.h#L72) too, so pardon my insistence but I think perhaps this compiler error might be because of another issue? Would you mind trying this diff on 734ac5a9002493013c0f8afe763f751ac99f89c8?\r\n\r\n<details>\r\n<summary>git diff on 734ac5a900</summary>\r\n\r\n```diff\r\ndiff --git a/src/util/strencodings.h b/src/util/strencodings.h\r\nindex fbd116c77c..63f46396d3 100644\r\n--- a/src/util/strencodings.h\r\n+++ b/src/util/strencodings.h\r\n@@ -80,8 +80,7 @@ consteval uint8_t ConstevalHexDigit(const char c)\r\n \r\n struct ConstevalHexLiteral {\r\n     const std::string_view inner;\r\n-    template <size_t N>\r\n-    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\r\n+    consteval ConstevalHexLiteral(const char* hex_str) : ConstevalHexLiteral{std::string_view{hex_str}} {}\r\n     consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\r\n     consteval ConstevalHexLiteral(std::nullptr_t) = delete;\r\n \r\n\r\n```\r\n</details>\r\n",
      "created_at": "2024-08-15T10:28:02Z",
      "updated_at": "2024-08-15T10:28:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718237308",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718237308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718238341",
      "pull_request_review_id": 2240125318,
      "id": 1718238341,
      "node_id": "PRRC_kwDOABII585majyF",
      "diff_hunk": "@@ -32,20 +31,19 @@ static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, cons\n             HexStr(crypt.vchIV) + std::string(\" != \") + HexStr(correctIV));\n }\n \n-static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n-                 const std::vector<unsigned char>& correctKey = std::vector<unsigned char>(),\n-                 const std::vector<unsigned char>& correctIV=std::vector<unsigned char>())\n+static void TestPassphrase(std::span<const unsigned char> chSalt, const SecureString& passphrase, uint32_t rounds,\n+                 std::span<const unsigned char> correctKey = {}, std::span<const unsigned char> correctIV = {})\n {\n-    TestPassphraseSingle(vchSalt, passphrase, rounds, correctKey, correctIV);\n+    TestPassphraseSingle(chSalt, passphrase, rounds, correctKey, correctIV);\n     for(SecureString::const_iterator i(passphrase.begin()); i != passphrase.end(); ++i)\n-        TestPassphraseSingle(vchSalt, SecureString(i, passphrase.end()), rounds);\n+        TestPassphraseSingle(chSalt, SecureString(i, passphrase.end()), rounds);\n }\n \n-static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext, \\\n+static void TestDecrypt(const CCrypter& crypt, std::span<const unsigned char> chCiphertext, \\\n                         const std::vector<unsigned char>& vchPlaintext = std::vector<unsigned char>())\n {\n     CKeyingMaterial vchDecrypted;\n-    crypt.Decrypt(vchCiphertext, vchDecrypted);\n+    crypt.Decrypt(chCiphertext, vchDecrypted);",
      "path": "src/wallet/test/wallet_crypto_tests.cpp",
      "position": 1,
      "original_position": 39,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "9c4aad3fe4cb74bb1d9afeece78e2dd6ae1ad08e",
      "in_reply_to_id": 1718137078,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I agree. Would either use the [fully correct naming style](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c), or not do the rename at all.",
      "created_at": "2024-08-15T10:29:25Z",
      "updated_at": "2024-08-15T10:34:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718238341",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718238341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718241896",
      "pull_request_review_id": 2240096017,
      "id": 1718241896,
      "node_id": "PRRC_kwDOABII585makpo",
      "diff_hunk": "@@ -143,19 +143,28 @@ BOOST_AUTO_TEST_CASE(key_test1)\n     BOOST_CHECK(key1.Sign(hashMsg, detsig));\n     BOOST_CHECK(key1C.Sign(hashMsg, detsigc));\n     BOOST_CHECK(detsig == detsigc);\n-    BOOST_CHECK(detsig == ParseHex(\"304402205dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d022014ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6\"));\n+    constexpr auto expected_sig1{ArrayFromHex(\"304402205dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d022014ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6\")};\n+    BOOST_CHECK_EQUAL_COLLECTIONS(detsig.begin(), detsig.end(), expected_sig1.begin(), expected_sig1.end());",
      "path": "src/test/key_tests.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This was quite simple before, now it might be faster by a few nanos, but it's less readable.\r\nGiven that `HexStr` was already tested properly, could we maybe go the other way and convert `detsig` to hex string and compare against the hard coded value, i.e.\r\n```suggestion\r\n    BOOST_CHECK_EQUAL(HexStr(detsig), \"304402205dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d022014ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6\");\r\n```",
      "created_at": "2024-08-15T10:33:56Z",
      "updated_at": "2024-08-15T10:51:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718241896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718241896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 146,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718251992",
      "pull_request_review_id": 2240096017,
      "id": 1718251992,
      "node_id": "PRRC_kwDOABII585manHY",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+    // 2 hex digits required per byte + implicit null terminator\n+    requires (Size % 2 == 1)\n+{\n+    if (hex_str[Size - 1] != '\\0') throw \"null terminator required\";",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 63,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If we insist that this is an important check, it seems a bit jumpy to do the check at the beginning, after which we iterate over the elements and arrive exactly at that element - and just silently skip it.\r\nAlternatively, we could check for `\\0` when we get there, after we've processed the rest of the chars, i.e.\r\n```C++\r\n    assert(!hex_str[i]);\r\n    return rv;\r\n```",
      "created_at": "2024-08-15T10:47:14Z",
      "updated_at": "2024-08-15T10:51:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718251992",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718251992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718252997",
      "pull_request_review_id": 2240096017,
      "id": 1718252997,
      "node_id": "PRRC_kwDOABII585manXF",
      "diff_hunk": "@@ -13,9 +13,9 @@\n \n static void Bech32Encode(benchmark::Bench& bench)\n {\n-    std::vector<uint8_t> v = ParseHex(\"c97f5a67ec381b760aeaf67573bc164845ff39a3bb26a1cee401ac67243b48db\");\n+    constexpr std::array<uint8_t, 32> v{ArrayFromHex(\"c97f5a67ec381b760aeaf67573bc164845ff39a3bb26a1cee401ac67243b48db\")};",
      "path": "src/bench/bech32.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "btw, this is in the preprocessing phase of the benchmark, the performance doesn't matter here at all - only inside the `.run(` part, so I'd go with the cleanest code here, too (if this is it, just resolve the comment).",
      "created_at": "2024-08-15T10:48:34Z",
      "updated_at": "2024-08-15T10:52:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718252997",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718252997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718446549",
      "pull_request_review_id": 2240460999,
      "id": 1718446549,
      "node_id": "PRRC_kwDOABII585mbWnV",
      "diff_hunk": "@@ -148,10 +148,14 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     std::vector<unsigned char> result;\n     std::vector<unsigned char> expected(std::begin(ParseHex_expected), std::end(ParseHex_expected));\n     // Basic test vector\n+    result = ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\"));",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": 1718218266,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "To be clear, you are suggesting extracting the repeated string literal \"04678afdb0fe5548271967f1a67130b7105c...\" into a `constexpr` variable?",
      "created_at": "2024-08-15T14:01:39Z",
      "updated_at": "2024-08-15T14:01:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718446549",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718446549"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718966018",
      "pull_request_review_id": 2241288588,
      "id": 1718966018,
      "node_id": "PRRC_kwDOABII585mdVcC",
      "diff_hunk": "@@ -13,9 +13,9 @@\n \n static void Bech32Encode(benchmark::Bench& bench)\n {\n-    std::vector<uint8_t> v = ParseHex(\"c97f5a67ec381b760aeaf67573bc164845ff39a3bb26a1cee401ac67243b48db\");\n+    constexpr std::array<uint8_t, 32> v{ArrayFromHex(\"c97f5a67ec381b760aeaf67573bc164845ff39a3bb26a1cee401ac67243b48db\")};",
      "path": "src/bench/bech32.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "in_reply_to_id": 1718252997,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, this change isn't to improve benchmark performance.\r\n\r\nIMO the changed version is cleaner - the number of bytes to be converted is explicitly enforced in the type and can be connected to the calculation below.",
      "created_at": "2024-08-15T20:40:18Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718966018",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718966018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718972546",
      "pull_request_review_id": 2241288588,
      "id": 1718972546,
      "node_id": "PRRC_kwDOABII585mdXCC",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "0a82c18457ec81e911b835b2ac76ad7475384983",
      "in_reply_to_id": 1718210663,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's because part of my goal with this PR was to etch these bytes into the runtime binary. Things that can be done at compile time without too much hassle should be done at compile time IMO.\r\n\r\nIf we go the `Vec(HexLiteral` route at least it becomes shorter.",
      "created_at": "2024-08-15T20:47:04Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718972546",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718972546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718976845",
      "pull_request_review_id": 2241288588,
      "id": 1718976845,
      "node_id": "PRRC_kwDOABII585mdYFN",
      "diff_hunk": "@@ -3931,7 +3931,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         // If the peer is old enough to have the old alert system, send it the final alert.\n         if (greatest_common_version <= 70012) {\n-            const auto finalAlert{ParseHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\")};\n+            constexpr auto finalAlert{ArrayFromHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\")};\n             MakeAndPushMessage(pfrom, \"alert\", Span{finalAlert});",
      "path": "src/net_processing.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "0a82c18457ec81e911b835b2ac76ad7475384983",
      "in_reply_to_id": 1718211451,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I got lost around `SerializeMany` :), but agree, **serialize.h** does the `std::array` -> `Span` conversion internally.",
      "created_at": "2024-08-15T20:51:46Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718976845",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718976845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3935,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718978767",
      "pull_request_review_id": 2241288588,
      "id": 1718978767,
      "node_id": "PRRC_kwDOABII585mdYjP",
      "diff_hunk": "@@ -143,19 +143,28 @@ BOOST_AUTO_TEST_CASE(key_test1)\n     BOOST_CHECK(key1.Sign(hashMsg, detsig));\n     BOOST_CHECK(key1C.Sign(hashMsg, detsigc));\n     BOOST_CHECK(detsig == detsigc);\n-    BOOST_CHECK(detsig == ParseHex(\"304402205dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d022014ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6\"));\n+    constexpr auto expected_sig1{ArrayFromHex(\"304402205dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d022014ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6\")};\n+    BOOST_CHECK_EQUAL_COLLECTIONS(detsig.begin(), detsig.end(), expected_sig1.begin(), expected_sig1.end());",
      "path": "src/test/key_tests.cpp",
      "position": 1,
      "original_position": 6,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "in_reply_to_id": 1718241896,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thank you!",
      "created_at": "2024-08-15T20:53:56Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718978767",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718978767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 146,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718988155",
      "pull_request_review_id": 2241288588,
      "id": 1718988155,
      "node_id": "PRRC_kwDOABII585mda17",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 25,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": 1717821819,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As mentioned in https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1717420847, who would do that?\r\n\r\nSomeone could theoretically do\r\n```C++\r\nconstexpr char hex[] = {'a', 'b', '\\0', '\\0', '\\0'};\r\nVecFromHex(hex);\r\n```\r\nand have your version fail to compile.",
      "created_at": "2024-08-15T21:01:59Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718988155",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718988155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718993637",
      "pull_request_review_id": 2241288588,
      "id": 1718993637,
      "node_id": "PRRC_kwDOABII585mdcLl",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 26,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": 1717819227,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The intention was that the `string_view` length which is used at runtime would have a higher chance of being calculated at compile time.",
      "created_at": "2024-08-15T21:05:15Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718993637",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718993637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718996633",
      "pull_request_review_id": 2241288588,
      "id": 1718996633,
      "node_id": "PRRC_kwDOABII585mdc6Z",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 49,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": 1717828979,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for finding this! Remains from battling the compiler.",
      "created_at": "2024-08-15T21:07:43Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718996633",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718996633"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718998801",
      "pull_request_review_id": 2241288588,
      "id": 1718998801,
      "node_id": "PRRC_kwDOABII585mddcR",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+    // 2 hex digits required per byte + implicit null terminator\n+    requires (Size % 2 == 1)\n+{\n+    if (hex_str[Size - 1] != '\\0') throw \"null terminator required\";",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 63,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "734ac5a9002493013c0f8afe763f751ac99f89c8",
      "in_reply_to_id": 1718251992,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see what you mean and tried it out, but ended up preferring input validation at the top of the function.",
      "created_at": "2024-08-15T21:09:45Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718998801",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718998801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719000295",
      "pull_request_review_id": 2241288588,
      "id": 1719000295,
      "node_id": "PRRC_kwDOABII585mddzn",
      "diff_hunk": "@@ -67,6 +68,67 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : ConstevalHexLiteral{std::string_view{hex_str}} {}\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 40,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b2fbe40cdf08b56d98e38ce261bfeeaf23b5f795",
      "in_reply_to_id": 1718187725,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "See https://github.com/bitcoin/bitcoin/pull/30377/files#r1716903532",
      "created_at": "2024-08-15T21:10:51Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719000295",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719000295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719001947",
      "pull_request_review_id": 2241288588,
      "id": 1719001947,
      "node_id": "PRRC_kwDOABII585mdeNb",
      "diff_hunk": "@@ -32,20 +31,19 @@ static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, cons\n             HexStr(crypt.vchIV) + std::string(\" != \") + HexStr(correctIV));\n }\n \n-static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n-                 const std::vector<unsigned char>& correctKey = std::vector<unsigned char>(),\n-                 const std::vector<unsigned char>& correctIV=std::vector<unsigned char>())\n+static void TestPassphrase(std::span<const unsigned char> chSalt, const SecureString& passphrase, uint32_t rounds,\n+                 std::span<const unsigned char> correctKey = {}, std::span<const unsigned char> correctIV = {})\n {\n-    TestPassphraseSingle(vchSalt, passphrase, rounds, correctKey, correctIV);\n+    TestPassphraseSingle(chSalt, passphrase, rounds, correctKey, correctIV);\n     for(SecureString::const_iterator i(passphrase.begin()); i != passphrase.end(); ++i)\n-        TestPassphraseSingle(vchSalt, SecureString(i, passphrase.end()), rounds);\n+        TestPassphraseSingle(chSalt, SecureString(i, passphrase.end()), rounds);\n }\n \n-static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext, \\\n+static void TestDecrypt(const CCrypter& crypt, std::span<const unsigned char> chCiphertext, \\\n                         const std::vector<unsigned char>& vchPlaintext = std::vector<unsigned char>())\n {\n     CKeyingMaterial vchDecrypted;\n-    crypt.Decrypt(vchCiphertext, vchDecrypted);\n+    crypt.Decrypt(chCiphertext, vchDecrypted);",
      "path": "src/wallet/test/wallet_crypto_tests.cpp",
      "position": 1,
      "original_position": 39,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "9c4aad3fe4cb74bb1d9afeece78e2dd6ae1ad08e",
      "in_reply_to_id": 1718137078,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good suggestion, seems to work out well.",
      "created_at": "2024-08-15T21:12:19Z",
      "updated_at": "2024-08-15T21:16:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719001947",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719001947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719074063",
      "pull_request_review_id": 2241451762,
      "id": 1719074063,
      "node_id": "PRRC_kwDOABII585mdv0P",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 25,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "65bc6dcd573fe74d2ce175466c30ed830d17f0fc",
      "in_reply_to_id": 1717433775,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thank you for being persistent! Must have had other local changes interacting badly with it when I tried it. Got it working with only your diff, so if we end up resurrecting `ConstevalHexLiteral` I'll go with your version.",
      "created_at": "2024-08-15T22:25:05Z",
      "updated_at": "2024-08-15T22:25:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719074063",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719074063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 83,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719107583",
      "pull_request_review_id": 2241499736,
      "id": 1719107583,
      "node_id": "PRRC_kwDOABII585md3__",
      "diff_hunk": "@@ -1361,6 +1361,12 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template<size_t N>\n+CScript Script(const std::array<uint8_t, N>& array)\n+{\n+    return {array.begin(), array.end()};",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 7,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "ced7cec1c6d79159f8212d3a92a8f7583ef11884",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: add util::HexLiteral and util::Vec using statements\" (ced7cec1c6d79159f8212d3a92a8f7583ef11884)\r\n\r\nIt seems like there is a problem with this on windows, looks like because begin and end are returning `std::_Array_const_iterator` types, instead of character pointers. Following change might fix it:\r\n\r\n```diff\r\n-    return {array.begin(), array.end()};\r\n+    return {array.data(), array.data() + array.size()};\r\n```\r\nError is:\r\n\r\nhttps://github.com/bitcoin/bitcoin/actions/runs/10411271977/job/28834888600?pr=30377#step:20:2031\r\n\r\n```c++\r\nD:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,12): error C2440: 'return': cannot convert from 'initializer list' to 'CScript' [D:\\a\\bitcoin\\bitcoin\\build_msvc\\test_bitcoin\\test_bitcoin.vcxproj]\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,5): note: 'CScript::CScript': no overloaded function could convert all the argument types\r\n  D:\\a\\bitcoin\\bitcoin\\src\\script\\script.h(436,5): note: could be 'CScript::CScript(const unsigned char *,const unsigned char *)'\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,5): note: 'CScript::CScript(const unsigned char *,const unsigned char *)': cannot convert argument 1 from 'std::_Array_const_iterator<_Ty,4>' to 'const unsigned char *'\r\n          with\r\n          [\r\n              _Ty=uint8_t\r\n          ]\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,24): note: No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called\r\n  D:\\a\\bitcoin\\bitcoin\\src\\script\\script.h(435,5): note: or       'CScript::CScript(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>)'\r\n          with\r\n          [\r\n              _Ty=unsigned char\r\n          ]\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,5): note: 'CScript::CScript(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>)': cannot convert argument 1 from 'std::_Array_const_iterator<_Ty,4>' to 'std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_Ty>>>'\r\n          with\r\n          [\r\n              _Ty=unsigned char\r\n          ]\r\n          and\r\n          [\r\n              _Ty=uint8_t\r\n          ]\r\n          and\r\n          [\r\n              _Ty=unsigned char\r\n          ]\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,24): note: No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called\r\n  D:\\a\\bitcoin\\bitcoin\\src\\script\\script.h(434,5): note: or       'CScript::CScript(prevector<28,unsigned char,uint32_t,int32_t>::const_iterator,prevector<28,unsigned char,uint32_t,int32_t>::const_iterator)'\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,5): note: 'CScript::CScript(prevector<28,unsigned char,uint32_t,int32_t>::const_iterator,prevector<28,unsigned char,uint32_t,int32_t>::const_iterator)': cannot convert argument 1 from 'std::_Array_const_iterator<_Ty,4>' to 'prevector<28,unsigned char,uint32_t,int32_t>::const_iterator'\r\n          with\r\n          [\r\n              _Ty=uint8_t\r\n          ]\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,24): note: No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,5): note: while trying to match the argument list '(std::_Array_const_iterator<_Ty,4>, std::_Array_const_iterator<_Ty,4>)'\r\n          with\r\n          [\r\n              _Ty=uint8_t\r\n          ]\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,5): note: the template instantiation context (the oldest one first) is\r\n  D:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1395,9): note: see reference to function template instantiation 'CScript script_tests::Script<4>(const std::array<uint8_t,4> &)' being compiled\r\n  serfloat_tests.cpp\r\nD:\\a\\bitcoin\\bitcoin\\src\\test\\script_tests.cpp(1367,12): error C2440: 'return': cannot convert from 'initializer list' to 'CScript' [D:\\a\\bitcoin\\bitcoin\\build_msvc\\test_bitcoin\\test_bitcoin.vcxproj]\r\n```",
      "created_at": "2024-08-15T23:23:44Z",
      "updated_at": "2024-08-15T23:48:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719107583",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719107583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719324036",
      "pull_request_review_id": 2241851111,
      "id": 1719324036,
      "node_id": "PRRC_kwDOABII585mes2E",
      "diff_hunk": "@@ -1361,6 +1361,12 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template<size_t N>\n+CScript Script(const std::array<uint8_t, N>& array)\n+{\n+    return {array.begin(), array.end()};",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 7,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "ced7cec1c6d79159f8212d3a92a8f7583ef11884",
      "in_reply_to_id": 1719107583,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is https://github.com/bitcoin/bitcoin/pull/29369 related or possibly a fix?",
      "created_at": "2024-08-16T05:18:10Z",
      "updated_at": "2024-08-16T05:18:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719324036",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719324036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719345193",
      "pull_request_review_id": 2241890604,
      "id": 1719345193,
      "node_id": "PRRC_kwDOABII585meyAp",
      "diff_hunk": "@@ -369,4 +370,44 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ *\n+ * @note It may be preferable to use Vec(HexLiteral(...)) instead of\n+ * HexLiteral() to save stack space when declaring a local variable, if the hex\n+ * string is large. Alternately the variable could be declared constexpr to\n+ * avoid using stack space.\n+ */\n+template <typename Byte = uint8_t, size_t N>",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 29,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "84c830f27fd62db4a9cb93bf6d28a86f7751e504",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "style nit in 84c830f27fd62db4a9cb93bf6d28a86f7751e504: Could use `std::byte` as default? (See below for reasoning)\r\n\r\n(Reply to https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719000295)\r\n\r\nI think your link should say https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716903532\r\n\r\nThis is a newly introduced function, so I think changing it should not extend to untouched files.\r\nTo clarify, I am not saying that you should switch callers to use `std::byte`, only the default.\r\n\r\nWhat I meant is that (for now) in this pull request you make the default choice `std::byte` for `Byte` and adjust the scripted-diff to use `HexLiteral<uint8_t>`. Obviously the diff will be <strike>larger</strike> more verbose, but longer term it seems cleaner to converge to `std::byte`. This means that the future change converging to `std::byte` will be cleaning up the code by being able to drop the `<uint8_t>` and fall back on the default. Also, using the explicit `<uint8_t>` makes it easier to spot places that still use the \"legacy\" description of bytes, and it acts as a sort-of \"TODO-comment\".\r\n\r\nAlso, \"modern\" places that require (or allow) `std::byte` today already, can simply use the function without having to specify that a Byte should mean `std::byte`.\r\n\r\nThis is in symmetry with the recently introduced `TryParseHex`, which also defaults to `std::byte`.",
      "created_at": "2024-08-16T05:38:04Z",
      "updated_at": "2024-08-16T05:48:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719345193",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719345193"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719367069",
      "pull_request_review_id": 2241931571,
      "id": 1719367069,
      "node_id": "PRRC_kwDOABII585me3Wd",
      "diff_hunk": "@@ -71,7 +71,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ToByteVector(ArrayFromHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "0a82c18457ec81e911b835b2ac76ad7475384983",
      "in_reply_to_id": 1718210663,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> It's because part of my goal with this PR was to etch these bytes into the runtime binary. Things that can be done at compile time without too much hassle should be done at compile time IMO.\r\n> \r\n> If we go the `Vec(HexLiteral` route at least it becomes shorter.\r\n\r\nMakes sense, thanks for looking into it!",
      "created_at": "2024-08-16T05:55:17Z",
      "updated_at": "2024-08-16T05:55:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719367069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719367069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719742146",
      "pull_request_review_id": 2242550873,
      "id": 1719742146,
      "node_id": "PRRC_kwDOABII585mgS7C",
      "diff_hunk": "@@ -1361,6 +1361,12 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template<size_t N>\n+CScript Script(const std::array<uint8_t, N>& array)\n+{\n+    return {array.begin(), array.end()};",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 7,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "ced7cec1c6d79159f8212d3a92a8f7583ef11884",
      "in_reply_to_id": 1719107583,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, #29369 looks like a possible fix. Applied @ryanofsky's workaround for now but will have a look at that PR.",
      "created_at": "2024-08-16T11:51:20Z",
      "updated_at": "2024-08-16T11:51:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719742146",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719742146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1367,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719753108",
      "pull_request_review_id": 2242567712,
      "id": 1719753108,
      "node_id": "PRRC_kwDOABII585mgVmU",
      "diff_hunk": "@@ -369,4 +370,44 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ *\n+ * @note It may be preferable to use Vec(HexLiteral(...)) instead of\n+ * HexLiteral() to save stack space when declaring a local variable, if the hex\n+ * string is large. Alternately the variable could be declared constexpr to\n+ * avoid using stack space.\n+ */\n+template <typename Byte = uint8_t, size_t N>",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 29,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "84c830f27fd62db4a9cb93bf6d28a86f7751e504",
      "in_reply_to_id": 1719345193,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, hadn't seen your #25227 before. It seems easier to default to `std::byte` when introducing `TryParseHex` without any prior callers. But thanks to your elaboration on the effort already under way to use `std::byte`, I did some more grepping and decided it might be worth attempting. Changed defaults in latest push 01e18d94d9577f415748869376988e3f0f59ced0 and worked through the fallout. The scripted-diff ended up with a lot less work in that version.\r\n\r\n(The push right before it in 3a96b9f4b56c2ef47f41e9baa9ce36a268aa9440 applies the other more minor fixes without changing the default to `std::byte`).\r\n\r\nGood to see that you were already thinking about compile-time versions in https://github.com/bitcoin/bitcoin/pull/25227#issuecomment-1349509341.\r\n",
      "created_at": "2024-08-16T12:01:31Z",
      "updated_at": "2024-08-16T12:01:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719753108",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719753108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719761131",
      "pull_request_review_id": 2242580852,
      "id": 1719761131,
      "node_id": "PRRC_kwDOABII585mgXjr",
      "diff_hunk": "@@ -67,6 +68,66 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xA;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+struct ConstevalHexLiteral {\n+    const std::string_view inner;\n+    template <size_t N>\n+    consteval ConstevalHexLiteral(const char (&hex_str)[N]) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(const std::string_view hex_str) : inner{hex_str} { Validate(inner); }\n+    consteval ConstevalHexLiteral(std::nullptr_t) = delete;\n+\n+    static consteval void Validate(const std::string_view hex_str)\n+    {\n+        std::ranges::for_each(hex_str, ConstevalHexDigit);\n+\n+        if (hex_str.size() % 2 == 1) throw \"2 hex digits required per byte\";\n+    }\n+};\n+\n+/** Validates input at compile time, but allocates the vector at runtime in\n+ *  order to cross the compile time/runtime dynamic memory barrier.\n+ */\n+template <typename Byte = uint8_t>\n+std::vector<Byte> VecFromHex(ConstevalHexLiteral hex_str)\n+{\n+    // No need to check HexDigit() return values or that hex_str has even length\n+    // since ConstevalHexLiteral has already validated.\n+    std::vector<Byte> rv(hex_str.inner.size() / 2);\n+    auto it = hex_str.inner.begin();\n+    for (auto& elem : rv) {\n+        auto hi = HexDigit(*(it++)) << 4;\n+        elem = Byte(hi | HexDigit(*(it++)));\n+    }\n+    return rv;\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ * @warning Unlike VecFromHex which returns a vector, the returned array may use\n+ *          significant stack space if called inside a function.\n+ */\n+template <typename Byte = uint8_t, size_t Size>\n+consteval std::array<Byte, Size / 2> ArrayFromHex(const char (&hex_str)[Size])\n+{\n+    // Size should be uneven due to implicit null terminator.\n+    if (Size % 2 == 0) throw \"2 hex digits required per byte\";",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 62,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b997d266e549ad6745d01a696cd9fbf1d3525944",
      "in_reply_to_id": 1717373651,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Continued in https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1718988155\r\n\r\nResolving this one for now.",
      "created_at": "2024-08-16T12:10:07Z",
      "updated_at": "2024-08-16T12:10:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719761131",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719761131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719910914",
      "pull_request_review_id": 2242829972,
      "id": 1719910914,
      "node_id": "PRRC_kwDOABII585mg8IC",
      "diff_hunk": "@@ -253,8 +253,7 @@ class XOnlyPubKey\n      *  !IsFullyValid(). */\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n-    /** Construct an x-only pubkey from exactly 32 bytes. */",
      "path": "src/pubkey.h",
      "position": 3,
      "original_position": 4,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "1dddb4fb0ff88162e58e50e56d5e889bb5727a81",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in 1dddb4fb0ff88162e58e50e56d5e889bb5727a81: Any reason to remove the comment? Seems important to keep, otherwise a dev may be surprised when the function crashes when it isn't exactly 32 bytes.",
      "created_at": "2024-08-16T14:19:55Z",
      "updated_at": "2024-08-16T15:47:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719910914",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719910914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 256,
      "original_line": 256,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719915623",
      "pull_request_review_id": 2242829972,
      "id": 1719915623,
      "node_id": "PRRC_kwDOABII585mg9Rn",
      "diff_hunk": "@@ -253,8 +253,7 @@ class XOnlyPubKey\n      *  !IsFullyValid(). */\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n-    /** Construct an x-only pubkey from exactly 32 bytes. */\n-    explicit XOnlyPubKey(Span<const unsigned char> bytes);\n+    constexpr explicit XOnlyPubKey(Span<const unsigned char> bytes) : m_keydata{bytes} {}",
      "path": "src/pubkey.h",
      "position": 1,
      "original_position": 6,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "1dddb4fb0ff88162e58e50e56d5e889bb5727a81",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in https://github.com/bitcoin/bitcoin/commit/1dddb4fb0ff88162e58e50e56d5e889bb5727a81: Use `std::span` to avoid having to touch this again in the future for that reason?",
      "created_at": "2024-08-16T14:23:23Z",
      "updated_at": "2024-08-16T15:47:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719915623",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719915623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719917818",
      "pull_request_review_id": 2242829972,
      "id": 1719917818,
      "node_id": "PRRC_kwDOABII585mg9z6",
      "diff_hunk": "@@ -24,8 +24,8 @@ int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, cons\n     unsigned char buf[CSHA512::OUTPUT_SIZE];\n     CSHA512 di;\n \n-    di.Write((const unsigned char*)strKeyData.data(), strKeyData.size());\n-    di.Write(chSalt.data(), chSalt.size());\n+    di.Write((const unsigned char*)key_data.data(), key_data.size());",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "1dddb4fb0ff88162e58e50e56d5e889bb5727a81",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in https://github.com/bitcoin/bitcoin/commit/1dddb4fb0ff88162e58e50e56d5e889bb5727a81: Use the safe `UCharCast` while touching this, instead of the possibly unsafe pointer cast?",
      "created_at": "2024-08-16T14:25:12Z",
      "updated_at": "2024-08-16T15:47:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719917818",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719917818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719924332",
      "pull_request_review_id": 2242829972,
      "id": 1719924332,
      "node_id": "PRRC_kwDOABII585mg_Zs",
      "diff_hunk": "@@ -115,20 +113,20 @@ bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vch\n     return cKeyCrypter.Encrypt(vchPlaintext, vchCiphertext);\n }\n \n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n+bool DecryptSecret(const CKeyingMaterial& vMasterKey, std::span<const unsigned char> chCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_IV_SIZE);\n     memcpy(chIV.data(), &nIV, WALLET_CRYPTO_IV_SIZE);\n     if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n         return false;\n-    return cKeyCrypter.Decrypt(vchCiphertext, vchPlaintext);\n+    return cKeyCrypter.Decrypt(chCiphertext, vchPlaintext);",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "1dddb4fb0ff88162e58e50e56d5e889bb5727a81",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in https://github.com/bitcoin/bitcoin/commit/1dddb4fb0ff88162e58e50e56d5e889bb5727a81: Wrong rename?",
      "created_at": "2024-08-16T14:29:54Z",
      "updated_at": "2024-08-16T15:47:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1719924332",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719924332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720015406",
      "pull_request_review_id": 2242829972,
      "id": 1720015406,
      "node_id": "PRRC_kwDOABII585mhVou",
      "diff_hunk": "@@ -71,7 +74,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\")) << OP_CHECKSIG;",
      "path": "src/kernel/chainparams.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "82c9080f235f6ffbe983b1360dc5741ce95e9a7d",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in 82c9080f235f6ffbe983b1360dc5741ce95e9a7d: Follow-up nit: I think it was me who suggested to avoid array/span serialization in script, but I think it could be considered when the vector serialization is mirrored. I understand that this would be different from the `serialize.h` serialization, but the two are separate anyway (and script inherits the whole prevector functions to insert raw bytes at any point anyway).\r\n\r\nIn any case, this doesn't remove the need for `Vec` and can be done in a follow-up.",
      "created_at": "2024-08-16T15:43:03Z",
      "updated_at": "2024-08-16T15:48:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720015406",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720015406"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720368838",
      "pull_request_review_id": 2243575177,
      "id": 1720368838,
      "node_id": "PRRC_kwDOABII585mir7G",
      "diff_hunk": "@@ -253,8 +253,7 @@ class XOnlyPubKey\n      *  !IsFullyValid(). */\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n-    /** Construct an x-only pubkey from exactly 32 bytes. */",
      "path": "src/pubkey.h",
      "position": 3,
      "original_position": 4,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "1dddb4fb0ff88162e58e50e56d5e889bb5727a81",
      "in_reply_to_id": 1719910914,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Was removed it in response to https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716588998 but then I went one step further and deferred the assert to the `base_blob` `Span`-ctor, making the comment more relevant again. Brought back now.",
      "created_at": "2024-08-16T21:25:23Z",
      "updated_at": "2024-08-16T23:10:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720368838",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720368838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 256,
      "original_line": 256,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720392370",
      "pull_request_review_id": 2243575177,
      "id": 1720392370,
      "node_id": "PRRC_kwDOABII585mixqy",
      "diff_hunk": "@@ -253,8 +253,7 @@ class XOnlyPubKey\n      *  !IsFullyValid(). */\n     bool IsNull() const { return m_keydata.IsNull(); }\n \n-    /** Construct an x-only pubkey from exactly 32 bytes. */\n-    explicit XOnlyPubKey(Span<const unsigned char> bytes);\n+    constexpr explicit XOnlyPubKey(Span<const unsigned char> bytes) : m_keydata{bytes} {}",
      "path": "src/pubkey.h",
      "position": 1,
      "original_position": 6,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "1dddb4fb0ff88162e58e50e56d5e889bb5727a81",
      "in_reply_to_id": 1719915623,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Started going down the route of `std::span<const unsigned char, 32>` to enforce the constraint previously, got burnt and backed out a bit too far, `std::span` with dynamic extent and comment will do for this PR. :+1: ",
      "created_at": "2024-08-16T22:01:50Z",
      "updated_at": "2024-08-16T23:10:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720392370",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720392370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720396199",
      "pull_request_review_id": 2243575177,
      "id": 1720396199,
      "node_id": "PRRC_kwDOABII585miymn",
      "diff_hunk": "@@ -115,20 +113,20 @@ bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vch\n     return cKeyCrypter.Encrypt(vchPlaintext, vchCiphertext);\n }\n \n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n+bool DecryptSecret(const CKeyingMaterial& vMasterKey, std::span<const unsigned char> chCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_IV_SIZE);\n     memcpy(chIV.data(), &nIV, WALLET_CRYPTO_IV_SIZE);\n     if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n         return false;\n-    return cKeyCrypter.Decrypt(vchCiphertext, vchPlaintext);\n+    return cKeyCrypter.Decrypt(chCiphertext, vchPlaintext);",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 79,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "1dddb4fb0ff88162e58e50e56d5e889bb5727a81",
      "in_reply_to_id": 1719924332,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Leftover from half-way rename, fixed here and function below.",
      "created_at": "2024-08-16T22:09:29Z",
      "updated_at": "2024-08-16T23:10:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720396199",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720396199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720750629",
      "pull_request_review_id": 2244077893,
      "id": 1720750629,
      "node_id": "PRRC_kwDOABII585mkJIl",
      "diff_hunk": "@@ -1383,60 +1392,60 @@ BOOST_AUTO_TEST_CASE(script_FindAndDelete)\n     BOOST_CHECK_EQUAL(FindAndDelete(s, d), 4);\n     BOOST_CHECK(s == expect);\n \n-    s = ScriptFromHex(\"0302ff03\"); // PUSH 0x02ff03 onto stack\n-    d = ScriptFromHex(\"0302ff03\");\n+    s = ToScript(HexLiteral<uint8_t>(\"0302ff03\")); // PUSH 0x02ff03 onto stack\n+    d = ToScript(HexLiteral<uint8_t>(\"0302ff03\"));\n     expect = CScript();\n     BOOST_CHECK_EQUAL(FindAndDelete(s, d), 1);\n     BOOST_CHECK(s == expect);\n \n-    s = ScriptFromHex(\"0302ff030302ff03\"); // PUSH 0x2ff03 PUSH 0x2ff03\n-    d = ScriptFromHex(\"0302ff03\");\n+    s = ToScript(HexLiteral<uint8_t>(\"0302ff030302ff03\")); // PUSH 0x2ff03 PUSH 0x2ff03",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "super-nit: during parsing we're checking now that the inputs contain an even number of hexadecimal digits, if you edit again, consider applying that to the comments as well (similarly to other comments, like `0x02ff03`)\r\n\r\n```suggestion\r\n    s = ToScript(HexLiteral<uint8_t>(\"0302ff030302ff03\")); // PUSH 0x02ff03 PUSH 0x02ff03\r\n```",
      "created_at": "2024-08-17T09:55:22Z",
      "updated_at": "2024-08-17T12:25:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720750629",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720750629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1401,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720755562",
      "pull_request_review_id": 2244077893,
      "id": 1720755562,
      "node_id": "PRRC_kwDOABII585mkKVq",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // Data payload can be encoded in any way...\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"\"));\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"00\")) << Vec(HexLiteral<uint8_t>(\"01\"));\n     CheckIsStandard(t);\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << Vec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Given that\r\n```C++\r\nassert(Vec(HexLiteral<uint8_t>(\"01\")) == valtype{1});\r\nassert(Vec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\")) == valtype(36, 0xff));\r\n```\r\nconsider simplifying these to e.g.\r\n```suggestion\r\n    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << valtype{1} << 2 << valtype(36, 0xff);\r\n```\r\n\r\nand many more, I think it would simplify a few trivial usages, hexadecimal encoding only makes sense for bigger values.",
      "created_at": "2024-08-17T10:39:20Z",
      "updated_at": "2024-08-17T12:25:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720755562",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720755562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 873,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720757880",
      "pull_request_review_id": 2244077893,
      "id": 1720757880,
      "node_id": "PRRC_kwDOABII585mkK54",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is `Vec` needed here because the existing `ToByteVector` has a long name? Or because of some funny visual studio exception? If none, maybe we could get rid of either.",
      "created_at": "2024-08-17T10:56:37Z",
      "updated_at": "2024-08-17T12:25:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720757880",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720757880"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720759053",
      "pull_request_review_id": 2244077893,
      "id": 1720759053,
      "node_id": "PRRC_kwDOABII585mkLMN",
      "diff_hunk": "@@ -882,13 +884,13 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n \n     // Only one TxoutType::NULL_DATA permitted in all cases\n     t.vout.resize(2);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I'm not in love with the `ParseHex` -> `Vec(HexLiteral<uint8_t>` change, seems more noisy than needed.\r\nWhat's the practical problem with keeping `ParseHex` in the tests?",
      "created_at": "2024-08-17T11:05:42Z",
      "updated_at": "2024-08-17T12:25:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720759053",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720759053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 887,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720760053",
      "pull_request_review_id": 2244077893,
      "id": 1720760053,
      "node_id": "PRRC_kwDOABII585mkLb1",
      "diff_hunk": "@@ -11,74 +11,73 @@\n \n #include <boost/test/unit_test.hpp>\n \n+using util::HexLiteral;\n+\n namespace wallet {\n BOOST_FIXTURE_TEST_SUITE(wallet_crypto_tests, BasicTestingSetup)\n \n class TestCrypter\n {\n public:\n-static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n-                 const std::vector<unsigned char>& correctKey = std::vector<unsigned char>(),\n-                 const std::vector<unsigned char>& correctIV=std::vector<unsigned char>())\n+static void TestPassphraseSingle(std::span<const unsigned char> salt, const SecureString& passphrase, uint32_t rounds,\n+                 std::span<const unsigned char> correct_key = {}, std::span<const unsigned char> correct_IV = {})\n {\n     CCrypter crypt;\n-    crypt.SetKeyFromPassphrase(passphrase, vchSalt, rounds, 0);\n-\n-    if(!correctKey.empty())\n-        BOOST_CHECK_MESSAGE(memcmp(crypt.vchKey.data(), correctKey.data(), crypt.vchKey.size()) == 0, \\\n-            HexStr(crypt.vchKey) + std::string(\" != \") + HexStr(correctKey));\n-    if(!correctIV.empty())\n-        BOOST_CHECK_MESSAGE(memcmp(crypt.vchIV.data(), correctIV.data(), crypt.vchIV.size()) == 0,\n-            HexStr(crypt.vchIV) + std::string(\" != \") + HexStr(correctIV));\n+    crypt.SetKeyFromPassphrase(passphrase, salt, rounds, 0);\n+\n+    if (!correct_key.empty())\n+        BOOST_CHECK_MESSAGE(memcmp(crypt.vchKey.data(), correct_key.data(), crypt.vchKey.size()) == 0, \\\n+            HexStr(crypt.vchKey) + std::string(\" != \") + HexStr(correct_key));\n+    if (!correct_IV.empty())\n+        BOOST_CHECK_MESSAGE(memcmp(crypt.vchIV.data(), correct_IV.data(), crypt.vchIV.size()) == 0,\n+            HexStr(crypt.vchIV) + std::string(\" != \") + HexStr(correct_IV));\n }\n \n-static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n-                 const std::vector<unsigned char>& correctKey = std::vector<unsigned char>(),\n-                 const std::vector<unsigned char>& correctIV=std::vector<unsigned char>())\n+static void TestPassphrase(std::span<const unsigned char> salt, const SecureString& passphrase, uint32_t rounds,\n+                 std::span<const unsigned char> correct_key = {}, std::span<const unsigned char> correct_IV = {})\n {\n-    TestPassphraseSingle(vchSalt, passphrase, rounds, correctKey, correctIV);\n-    for(SecureString::const_iterator i(passphrase.begin()); i != passphrase.end(); ++i)\n-        TestPassphraseSingle(vchSalt, SecureString(i, passphrase.end()), rounds);\n+    TestPassphraseSingle(salt, passphrase, rounds, correct_key, correct_IV);\n+    for (SecureString::const_iterator it(passphrase.begin()); it != passphrase.end(); ++it)\n+        TestPassphraseSingle(salt, SecureString(it, passphrase.end()), rounds);\n }\n \n-static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext, \\\n-                        const std::vector<unsigned char>& vchPlaintext = std::vector<unsigned char>())\n+static void TestDecrypt(const CCrypter& crypt, std::span<const unsigned char> ciphertext,\n+                        std::span<const unsigned char> correct_plaintext = {})\n {\n-    CKeyingMaterial vchDecrypted;\n-    crypt.Decrypt(vchCiphertext, vchDecrypted);\n-    if (vchPlaintext.size())\n-        BOOST_CHECK(CKeyingMaterial(vchPlaintext.begin(), vchPlaintext.end()) == vchDecrypted);\n+    CKeyingMaterial decrypted;\n+    crypt.Decrypt(ciphertext, decrypted);\n+    if (!correct_plaintext.empty())\n+        BOOST_CHECK_EQUAL_COLLECTIONS(decrypted.begin(), decrypted.end(), correct_plaintext.begin(), correct_plaintext.end());\n }\n \n-static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchPlaintext,\n-                       const std::vector<unsigned char>& vchCiphertextCorrect = std::vector<unsigned char>())\n+static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& plaintext,\n+                       std::span<const unsigned char> correct_ciphertext = {})\n {\n-    std::vector<unsigned char> vchCiphertext;\n-    crypt.Encrypt(vchPlaintext, vchCiphertext);\n+    std::vector<unsigned char> ciphertext;\n+    crypt.Encrypt(plaintext, ciphertext);\n \n-    if (!vchCiphertextCorrect.empty())\n-        BOOST_CHECK(vchCiphertext == vchCiphertextCorrect);\n+    if (!correct_ciphertext.empty())\n+        BOOST_CHECK_EQUAL_COLLECTIONS(ciphertext.begin(), ciphertext.end(), correct_ciphertext.begin(), correct_ciphertext.end());\n \n-    const std::vector<unsigned char> vchPlaintext2(vchPlaintext.begin(), vchPlaintext.end());\n-    TestDecrypt(crypt, vchCiphertext, vchPlaintext2);\n+    TestDecrypt(crypt, ciphertext, /*correct_plaintext=*/plaintext);\n }\n \n-static void TestEncrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchPlaintextIn, \\\n-                       const std::vector<unsigned char>& vchCiphertextCorrect = std::vector<unsigned char>())\n+static void TestEncrypt(const CCrypter& crypt, std::span<const unsigned char> plaintext,\n+                       std::span<const unsigned char> correct_ciphertext = {})\n {\n-    TestEncryptSingle(crypt, CKeyingMaterial(vchPlaintextIn.begin(), vchPlaintextIn.end()), vchCiphertextCorrect);\n-    for(std::vector<unsigned char>::const_iterator i(vchPlaintextIn.begin()); i != vchPlaintextIn.end(); ++i)\n-        TestEncryptSingle(crypt, CKeyingMaterial(i, vchPlaintextIn.end()));\n+    TestEncryptSingle(crypt, CKeyingMaterial(plaintext.begin(), plaintext.end()), correct_ciphertext);\n+    for (auto it{plaintext.begin()}; it != plaintext.end(); ++it)\n+        TestEncryptSingle(crypt, CKeyingMaterial(it, plaintext.end()));\n }\n \n };\n \n BOOST_AUTO_TEST_CASE(passphrase) {\n     // These are expensive.\n \n-    TestCrypter::TestPassphrase(ParseHex(\"0000deadbeef0000\"), \"test\", 25000, \\\n-                                ParseHex(\"fc7aba077ad5f4c3a0988d8daa4810d0d4a0e3bcb53af662998898f33df0556a\"), \\\n-                                ParseHex(\"cf2f2691526dd1aa220896fb8bf7c369\"));\n+    TestCrypter::TestPassphrase(HexLiteral<uint8_t>(\"0000deadbeef0000\"), \"test\", 25000, \\",
      "path": "src/wallet/test/wallet_crypto_tests.cpp",
      "position": 1,
      "original_position": 107,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: as stated before, the trailing `\\` can likely be removed.",
      "created_at": "2024-08-17T11:14:25Z",
      "updated_at": "2024-08-17T12:25:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720760053",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720760053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720760697",
      "pull_request_review_id": 2244077893,
      "id": 1720760697,
      "node_id": "PRRC_kwDOABII585mkLl5",
      "diff_hunk": "@@ -198,22 +207,30 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     BOOST_CHECK(!TryParseHex(\"12 3\").has_value());\n }\n \n+BOOST_AUTO_TEST_CASE(consteval_hex_digit)\n+{\n+    BOOST_CHECK_EQUAL(ConstevalHexDigit('0'), 0);\n+    BOOST_CHECK_EQUAL(ConstevalHexDigit('9'), 9);\n+    BOOST_CHECK_EQUAL(ConstevalHexDigit('a'), 0xa);\n+    BOOST_CHECK_EQUAL(ConstevalHexDigit('f'), 0xf);\n+}\n+\n BOOST_AUTO_TEST_CASE(util_HexStr)\n {\n     BOOST_CHECK_EQUAL(\n-        HexStr(ParseHex_expected),\n-        \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n+        HexStr(HEX_PARSE_OUTPUT),\n+        HEX_PARSE_INPUT);\n \n     BOOST_CHECK_EQUAL(\n-        HexStr(Span{ParseHex_expected}.last(0)),\n+        HexStr(Span{HEX_PARSE_OUTPUT}.last(0)),\n         \"\");\n \n     BOOST_CHECK_EQUAL(\n-        HexStr(Span{ParseHex_expected}.first(0)),\n+        HexStr(Span{HEX_PARSE_OUTPUT}.first(0)),\n         \"\");\n \n     {\n-        const std::vector<char> in_s{ParseHex_expected, ParseHex_expected + 5};\n+        const std::vector<char> in_s{HEX_PARSE_OUTPUT, HEX_PARSE_OUTPUT + 5};",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 116,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `5` seems to be a random value, we might as well signal that with:\r\n```suggestion\r\n        const std::string out_exp{\"04678afdb0\"};\r\n        const std::vector<char> in_s{HEX_PARSE_OUTPUT, HEX_PARSE_OUTPUT + out_exp.size() / 2};\r\n```",
      "created_at": "2024-08-17T11:17:52Z",
      "updated_at": "2024-08-17T12:25:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720760697",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720760697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720769066",
      "pull_request_review_id": 2244077893,
      "id": 1720769066,
      "node_id": "PRRC_kwDOABII585mkNoq",
      "diff_hunk": "@@ -369,4 +370,44 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ *\n+ * @note It may be preferable to use Vec(HexLiteral(...)) instead of\n+ * HexLiteral() to save stack space when declaring a local variable, if the hex\n+ * string is large. Alternately the variable could be declared constexpr to\n+ * avoid using stack space.\n+ */\n+template <typename Byte = std::byte, size_t N>\n+consteval std::array<Byte, N / 2> HexLiteral(const char (&hex_str)[N])",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 30,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Given that we already seem to be using custom string overloads (e.g. https://github.com/bitcoin/bitcoin/blob/master/src/script/miniscript.cpp#L87), would it maybe make the usages less noisy if we tried something like:\r\n```C++\r\nconsteval auto operator\"\"_hex(const char* hex_str, const std::size_t len)\r\n```\r\nto be able to write `\"0000deadbeef0000\"_hex` instead of `HexLiteral<uint8_t>(\"0000deadbeef0000\")`?\r\n\r\nI haven't spent a lot of time with this to make it work since I'm not yet sure it's a good idea.",
      "created_at": "2024-08-17T12:22:28Z",
      "updated_at": "2024-08-17T12:25:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720769066",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720769066"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720779733",
      "pull_request_review_id": 2244103102,
      "id": 1720779733,
      "node_id": "PRRC_kwDOABII585mkQPV",
      "diff_hunk": "@@ -369,4 +370,44 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ *\n+ * @note It may be preferable to use Vec(HexLiteral(...)) instead of\n+ * HexLiteral() to save stack space when declaring a local variable, if the hex\n+ * string is large. Alternately the variable could be declared constexpr to\n+ * avoid using stack space.\n+ */\n+template <typename Byte = std::byte, size_t N>\n+consteval std::array<Byte, N / 2> HexLiteral(const char (&hex_str)[N])",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 30,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720769066,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As I said here: https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2292367131\r\n> I tried experimenting with user defined literals in response now but ran into issues with both making them `consteval` and accepting a `size_t`-templated char-array argument.\r\n\r\nIf we are to return a `std::array` I think we need to take the size as a template argument I think. And no compiler seems to accept `consteval` user defined literals.",
      "created_at": "2024-08-17T13:50:18Z",
      "updated_at": "2024-08-19T08:05:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720779733",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720779733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720781175",
      "pull_request_review_id": 2244103706,
      "id": 1720781175,
      "node_id": "PRRC_kwDOABII585mkQl3",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // Data payload can be encoded in any way...\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"\"));\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"00\")) << Vec(HexLiteral<uint8_t>(\"01\"));\n     CheckIsStandard(t);\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << Vec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720755562,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720755562\r\n\r\n> and many more, I think it would simplify a few trivial usages, hexadecimal encoding only makes sense for bigger values.\r\n\r\nThis would change which cscript overload is called, which could be good, but I think it would be better to do in a PR dedicated to improving cscript. That way this change can be focused on replacing runtime hex parsing with compile time parsing, and reviewers don't need to consider ways it is impacting test coverage of different CScript methods.",
      "created_at": "2024-08-17T14:02:31Z",
      "updated_at": "2024-08-17T14:35:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720781175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720781175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 873,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720781544",
      "pull_request_review_id": 2244103706,
      "id": 1720781544,
      "node_id": "PRRC_kwDOABII585mkQro",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720757880,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720757880\r\n\r\n> Is `Vec` needed here because the existing `ToByteVector` has a long name? Or because of some funny visual studio exception? If none, maybe we could get rid of either.\r\n\r\nCScript only supports << with std::vector, not std::array. It would be natural for it support std::array too, but I think that would be better be done in a followup improving CScript so this PR can be focused on replacing runtime hex parsing with compile time parsing and not make sensitive changes to the cscript implementation.",
      "created_at": "2024-08-17T14:05:43Z",
      "updated_at": "2024-08-17T14:35:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720781544",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720781544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720782497",
      "pull_request_review_id": 2244103706,
      "id": 1720782497,
      "node_id": "PRRC_kwDOABII585mkQ6h",
      "diff_hunk": "@@ -882,13 +884,13 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n \n     // Only one TxoutType::NULL_DATA permitted in all cases\n     t.vout.resize(2);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720759053,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720759053\r\n\r\n> nit: I'm not in love with the `ParseHex` -> `Vec(HexLiteral<uint8_t>` change, seems more noisy than needed. What's the practical problem with keeping `ParseHex` in the tests?\r\n\r\nI feel like we could add a `HexLiteralU` or similar convenience function that is equivalent to `HexLiteral<uint8_t>`, because `HexLiteral<uint8_t>` does seem to be needed a lot of places after the `std::byte` change (107 instances currently, which is more than I would have expected).\r\n\r\nIt would also be nice to have a followup adding std::array support to CScript so more Vec calls can be dropped, too, but we should avoid touching CScript implementation in this PR. It looks like there are 28 Vec(HexLiteral()) calls currently, and if std::array support is added to CScript 15 of them can be dropped.\r\n\r\nI think suggestion to keep ParseHex in tests would be a step backward because compile time checking of strings in tests is as much (or more) of a practical benefit there as in other parts of the code. I think most of the practical benefit is just knowing code works without having to wait for tests to run.",
      "created_at": "2024-08-17T14:12:38Z",
      "updated_at": "2024-08-17T14:33:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720782497",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720782497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 887,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720801377",
      "pull_request_review_id": 2244121930,
      "id": 1720801377,
      "node_id": "PRRC_kwDOABII585mkVhh",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // Data payload can be encoded in any way...\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"\"));\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"00\")) << Vec(HexLiteral<uint8_t>(\"01\"));\n     CheckIsStandard(t);\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << Vec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720755562,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Both of them produce a `vector`, right?\r\nEdit:\r\n* `typedef std::vector<unsigned char> valtype`\r\n* `std::vector<T> Vec(const std::array<T, N>& array)`\r\n\r\ni.e. both would call `CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND`, right?",
      "created_at": "2024-08-17T16:38:31Z",
      "updated_at": "2024-08-17T21:34:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720801377",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720801377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 873,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720801552",
      "pull_request_review_id": 2244122053,
      "id": 1720801552,
      "node_id": "PRRC_kwDOABII585mkVkQ",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720757880,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I mean both `Vec(HexLiteral(` and the existing `ToByteVector(HexLiteral(` would work here, right?",
      "created_at": "2024-08-17T16:39:47Z",
      "updated_at": "2024-08-18T09:07:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720801552",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720801552"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720836846",
      "pull_request_review_id": 2244153575,
      "id": 1720836846,
      "node_id": "PRRC_kwDOABII585mkeLu",
      "diff_hunk": "@@ -882,13 +884,13 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n \n     // Only one TxoutType::NULL_DATA permitted in all cases\n     t.vout.resize(2);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720759053,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks @ryanofsky ",
      "created_at": "2024-08-17T21:33:09Z",
      "updated_at": "2024-08-17T21:33:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720836846",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1720836846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 887,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721004385",
      "pull_request_review_id": 2244345887,
      "id": 1721004385,
      "node_id": "PRRC_kwDOABII585mlHFh",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // Data payload can be encoded in any way...\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"\"));\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"00\")) << Vec(HexLiteral<uint8_t>(\"01\"));\n     CheckIsStandard(t);\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << Vec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720755562,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720801377\r\n\r\nYes, you're right , I misread the suggestion. Using valtype to construct vectors would not change which CScript method is called, so it should be not a problem to make that change in this PR, and maybe it would be better. I do think tests would be more readable and consistent if they used HexLiteral as much as possible to represent raw bytes, but that's a subjective opinion and your approach seems fine too.",
      "created_at": "2024-08-18T15:33:51Z",
      "updated_at": "2024-08-18T15:58:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721004385",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721004385"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 873,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721008790",
      "pull_request_review_id": 2244345887,
      "id": 1721008790,
      "node_id": "PRRC_kwDOABII585mlIKW",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720757880,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1720801552\r\n\r\n> I mean both `Vec(HexLiteral(` and the existing `ToByteVector(HexLiteral(` would work here, right?\r\n\r\nRight, ToByteVector could be used here instead of Vec, and Vec was just chosen because it is shorter. Sorry I misunderstood your original question.\r\n\r\nI do think in general Vec has some benefits over ToByteVector:\r\n\r\n- `Vec` only changes the type of the container, not the type of the elements inside the container, so it seems preferable to use in cases like this where the internal type is not changing.\r\n\r\n- The name ToByteVector seems not great because it returns a vector of unsigned char rather than a vector of std::byte. If intention is to be switched to std::byte later though then I think it is a good name.\r\n\r\nBut nice thing is neither of these should be neccessary if cscript supports std::array",
      "created_at": "2024-08-18T15:58:29Z",
      "updated_at": "2024-08-18T15:58:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721008790",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721008790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721044730",
      "pull_request_review_id": 2244384999,
      "id": 1721044730,
      "node_id": "PRRC_kwDOABII585mlQ76",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720757880,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> But nice thing is neither of these should be necessary if cscript supports std::array\r\n\r\nWould it be too early for me to provide a separate PR for that?",
      "created_at": "2024-08-18T19:41:13Z",
      "updated_at": "2024-08-18T19:41:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721044730",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721044730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721337019",
      "pull_request_review_id": 2244103102,
      "id": 1721337019,
      "node_id": "PRRC_kwDOABII585mmYS7",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720757880,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I would be happy if you took the ball on that. But would appreciate if you worked on it in a personal branch (still pushing to GitHub for CI) and waited a few days more with making it into a PR.\r\n\r\n~6 pushes ago on this PR I had commit 5be34598c4683b2b44f607b28592a9e68e089761 which added targeted `std::array` support to **script.h**. It is conservative in that it doesn't publicly expose the possibility of appending raw `std::span`. IIRC MSVC had some issue with it, but could have been a different push.",
      "created_at": "2024-08-19T07:37:15Z",
      "updated_at": "2024-08-19T08:05:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721337019",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721337019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721346102",
      "pull_request_review_id": 2244828359,
      "id": 1721346102,
      "node_id": "PRRC_kwDOABII585mmag2",
      "diff_hunk": "@@ -22,6 +22,9 @@\n #include <script/script_error.h>\n #include <script/signingprovider.h>\n \n+using util::HexLiteral;\n+using util::Vec;",
      "path": "src/test/miniscript_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "9c8d091382909f44c2fc61b8c726362356db2bff",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "9c8d091382909f44c2fc61b8c726362356db2bff: Why is vec needed in this file?",
      "created_at": "2024-08-19T07:45:26Z",
      "updated_at": "2024-08-19T08:23:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721346102",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721346102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721355157",
      "pull_request_review_id": 2244103102,
      "id": 1721355157,
      "node_id": "PRRC_kwDOABII585mmcuV",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // Data payload can be encoded in any way...\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"\"));\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"00\")) << Vec(HexLiteral<uint8_t>(\"01\"));\n     CheckIsStandard(t);\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << Vec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720755562,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, when it came to short/empty hex strings I've been tempted to use something like `std::vector{0xFF}` but felt inconsistent. `valtype` is a good find, but doesn't provide so much of a win once we have full `std::array<std::byte>` support in `CSscript`:\r\n``valtype{0xFF}`` vs\r\n``HexLiteral(\"FF\")``\r\n``valtype{}`` vs\r\n``HexLiteral(\"\")``\r\n(I think switching to base 10 is or using `valtype(36, 0xff);` is too inconsistent). So keeping as-is for now.",
      "created_at": "2024-08-19T07:53:26Z",
      "updated_at": "2024-08-19T08:05:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721355157",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721355157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 873,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721360325",
      "pull_request_review_id": 2244103102,
      "id": 1721360325,
      "node_id": "PRRC_kwDOABII585mmd_F",
      "diff_hunk": "@@ -882,13 +884,13 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n \n     // Only one TxoutType::NULL_DATA permitted in all cases\n     t.vout.resize(2);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720759053,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I guess we could add an interim `HexLiteralU`, but that would decrease the motivation to adapt to `std::byte`. :)",
      "created_at": "2024-08-19T07:57:43Z",
      "updated_at": "2024-08-19T08:05:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721360325",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721360325"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 887,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721364492",
      "pull_request_review_id": 2244103102,
      "id": 1721364492,
      "node_id": "PRRC_kwDOABII585mmfAM",
      "diff_hunk": "@@ -198,22 +207,30 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     BOOST_CHECK(!TryParseHex(\"12 3\").has_value());\n }\n \n+BOOST_AUTO_TEST_CASE(consteval_hex_digit)\n+{\n+    BOOST_CHECK_EQUAL(ConstevalHexDigit('0'), 0);\n+    BOOST_CHECK_EQUAL(ConstevalHexDigit('9'), 9);\n+    BOOST_CHECK_EQUAL(ConstevalHexDigit('a'), 0xa);\n+    BOOST_CHECK_EQUAL(ConstevalHexDigit('f'), 0xf);\n+}\n+\n BOOST_AUTO_TEST_CASE(util_HexStr)\n {\n     BOOST_CHECK_EQUAL(\n-        HexStr(ParseHex_expected),\n-        \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n+        HexStr(HEX_PARSE_OUTPUT),\n+        HEX_PARSE_INPUT);\n \n     BOOST_CHECK_EQUAL(\n-        HexStr(Span{ParseHex_expected}.last(0)),\n+        HexStr(Span{HEX_PARSE_OUTPUT}.last(0)),\n         \"\");\n \n     BOOST_CHECK_EQUAL(\n-        HexStr(Span{ParseHex_expected}.first(0)),\n+        HexStr(Span{HEX_PARSE_OUTPUT}.first(0)),\n         \"\");\n \n     {\n-        const std::vector<char> in_s{ParseHex_expected, ParseHex_expected + 5};\n+        const std::vector<char> in_s{HEX_PARSE_OUTPUT, HEX_PARSE_OUTPUT + 5};",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 116,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720760697,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will do if I retouch.",
      "created_at": "2024-08-19T08:01:11Z",
      "updated_at": "2024-08-19T08:05:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721364492",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721364492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721367896",
      "pull_request_review_id": 2244103102,
      "id": 1721367896,
      "node_id": "PRRC_kwDOABII585mmf1Y",
      "diff_hunk": "@@ -11,74 +11,73 @@\n \n #include <boost/test/unit_test.hpp>\n \n+using util::HexLiteral;\n+\n namespace wallet {\n BOOST_FIXTURE_TEST_SUITE(wallet_crypto_tests, BasicTestingSetup)\n \n class TestCrypter\n {\n public:\n-static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n-                 const std::vector<unsigned char>& correctKey = std::vector<unsigned char>(),\n-                 const std::vector<unsigned char>& correctIV=std::vector<unsigned char>())\n+static void TestPassphraseSingle(std::span<const unsigned char> salt, const SecureString& passphrase, uint32_t rounds,\n+                 std::span<const unsigned char> correct_key = {}, std::span<const unsigned char> correct_IV = {})\n {\n     CCrypter crypt;\n-    crypt.SetKeyFromPassphrase(passphrase, vchSalt, rounds, 0);\n-\n-    if(!correctKey.empty())\n-        BOOST_CHECK_MESSAGE(memcmp(crypt.vchKey.data(), correctKey.data(), crypt.vchKey.size()) == 0, \\\n-            HexStr(crypt.vchKey) + std::string(\" != \") + HexStr(correctKey));\n-    if(!correctIV.empty())\n-        BOOST_CHECK_MESSAGE(memcmp(crypt.vchIV.data(), correctIV.data(), crypt.vchIV.size()) == 0,\n-            HexStr(crypt.vchIV) + std::string(\" != \") + HexStr(correctIV));\n+    crypt.SetKeyFromPassphrase(passphrase, salt, rounds, 0);\n+\n+    if (!correct_key.empty())\n+        BOOST_CHECK_MESSAGE(memcmp(crypt.vchKey.data(), correct_key.data(), crypt.vchKey.size()) == 0, \\\n+            HexStr(crypt.vchKey) + std::string(\" != \") + HexStr(correct_key));\n+    if (!correct_IV.empty())\n+        BOOST_CHECK_MESSAGE(memcmp(crypt.vchIV.data(), correct_IV.data(), crypt.vchIV.size()) == 0,\n+            HexStr(crypt.vchIV) + std::string(\" != \") + HexStr(correct_IV));\n }\n \n-static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n-                 const std::vector<unsigned char>& correctKey = std::vector<unsigned char>(),\n-                 const std::vector<unsigned char>& correctIV=std::vector<unsigned char>())\n+static void TestPassphrase(std::span<const unsigned char> salt, const SecureString& passphrase, uint32_t rounds,\n+                 std::span<const unsigned char> correct_key = {}, std::span<const unsigned char> correct_IV = {})\n {\n-    TestPassphraseSingle(vchSalt, passphrase, rounds, correctKey, correctIV);\n-    for(SecureString::const_iterator i(passphrase.begin()); i != passphrase.end(); ++i)\n-        TestPassphraseSingle(vchSalt, SecureString(i, passphrase.end()), rounds);\n+    TestPassphraseSingle(salt, passphrase, rounds, correct_key, correct_IV);\n+    for (SecureString::const_iterator it(passphrase.begin()); it != passphrase.end(); ++it)\n+        TestPassphraseSingle(salt, SecureString(it, passphrase.end()), rounds);\n }\n \n-static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext, \\\n-                        const std::vector<unsigned char>& vchPlaintext = std::vector<unsigned char>())\n+static void TestDecrypt(const CCrypter& crypt, std::span<const unsigned char> ciphertext,\n+                        std::span<const unsigned char> correct_plaintext = {})\n {\n-    CKeyingMaterial vchDecrypted;\n-    crypt.Decrypt(vchCiphertext, vchDecrypted);\n-    if (vchPlaintext.size())\n-        BOOST_CHECK(CKeyingMaterial(vchPlaintext.begin(), vchPlaintext.end()) == vchDecrypted);\n+    CKeyingMaterial decrypted;\n+    crypt.Decrypt(ciphertext, decrypted);\n+    if (!correct_plaintext.empty())\n+        BOOST_CHECK_EQUAL_COLLECTIONS(decrypted.begin(), decrypted.end(), correct_plaintext.begin(), correct_plaintext.end());\n }\n \n-static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchPlaintext,\n-                       const std::vector<unsigned char>& vchCiphertextCorrect = std::vector<unsigned char>())\n+static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& plaintext,\n+                       std::span<const unsigned char> correct_ciphertext = {})\n {\n-    std::vector<unsigned char> vchCiphertext;\n-    crypt.Encrypt(vchPlaintext, vchCiphertext);\n+    std::vector<unsigned char> ciphertext;\n+    crypt.Encrypt(plaintext, ciphertext);\n \n-    if (!vchCiphertextCorrect.empty())\n-        BOOST_CHECK(vchCiphertext == vchCiphertextCorrect);\n+    if (!correct_ciphertext.empty())\n+        BOOST_CHECK_EQUAL_COLLECTIONS(ciphertext.begin(), ciphertext.end(), correct_ciphertext.begin(), correct_ciphertext.end());\n \n-    const std::vector<unsigned char> vchPlaintext2(vchPlaintext.begin(), vchPlaintext.end());\n-    TestDecrypt(crypt, vchCiphertext, vchPlaintext2);\n+    TestDecrypt(crypt, ciphertext, /*correct_plaintext=*/plaintext);\n }\n \n-static void TestEncrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchPlaintextIn, \\\n-                       const std::vector<unsigned char>& vchCiphertextCorrect = std::vector<unsigned char>())\n+static void TestEncrypt(const CCrypter& crypt, std::span<const unsigned char> plaintext,\n+                       std::span<const unsigned char> correct_ciphertext = {})\n {\n-    TestEncryptSingle(crypt, CKeyingMaterial(vchPlaintextIn.begin(), vchPlaintextIn.end()), vchCiphertextCorrect);\n-    for(std::vector<unsigned char>::const_iterator i(vchPlaintextIn.begin()); i != vchPlaintextIn.end(); ++i)\n-        TestEncryptSingle(crypt, CKeyingMaterial(i, vchPlaintextIn.end()));\n+    TestEncryptSingle(crypt, CKeyingMaterial(plaintext.begin(), plaintext.end()), correct_ciphertext);\n+    for (auto it{plaintext.begin()}; it != plaintext.end(); ++it)\n+        TestEncryptSingle(crypt, CKeyingMaterial(it, plaintext.end()));\n }\n \n };\n \n BOOST_AUTO_TEST_CASE(passphrase) {\n     // These are expensive.\n \n-    TestCrypter::TestPassphrase(ParseHex(\"0000deadbeef0000\"), \"test\", 25000, \\\n-                                ParseHex(\"fc7aba077ad5f4c3a0988d8daa4810d0d4a0e3bcb53af662998898f33df0556a\"), \\\n-                                ParseHex(\"cf2f2691526dd1aa220896fb8bf7c369\"));\n+    TestCrypter::TestPassphrase(HexLiteral<uint8_t>(\"0000deadbeef0000\"), \"test\", 25000, \\",
      "path": "src/wallet/test/wallet_crypto_tests.cpp",
      "position": 1,
      "original_position": 107,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720760053,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "These lines are part of the scripted diff commit (67fc994bedf14e360b3e51fa1a71dc6c1684b532), and I'd rather not complicate the regexps just for that.",
      "created_at": "2024-08-19T08:03:46Z",
      "updated_at": "2024-08-19T08:05:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721367896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721367896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721377340",
      "pull_request_review_id": 2244828359,
      "id": 1721377340,
      "node_id": "PRRC_kwDOABII585mmiI8",
      "diff_hunk": "@@ -1361,6 +1361,12 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template <size_t N>\n+CScript ToScript(const std::array<uint8_t, N>& array)",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "309d8b783109eb52a5596712b19210271c8f882e",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in 309d8b783109eb52a5596712b19210271c8f882e (and the next commit):\r\n\r\nI know I've raised this before in https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1716680866, but I still think it would be cleaner to drop this function (and related changes) from this pull request, because:\r\n\r\n* It isn't strictly needed, because replacing the test-only `ScriptFromHex` wasn't a  direct goal of this pull\r\n* It is incomplete, because it adds a bit of compile-time checking for the new paths using `ToScript`, but leaves the checking out completely for the remaining `ScriptFromHex` paths. It would be better to add the check `data = *Assert(TryParseHex(str))` to `ScriptFromHex` instead and drop this function.\r\n* It seems inconsistent and harder to read when there are two functions doing the exact same thing (turn hex into a script) in the same test case. (Are we going to duplicate every test-only helper just because there is a compile-time and a run-time checked function to to the same?)\r\n* It makes the test more verbose\r\n* It makes the diff larger and review take longer\r\n\r\nWhereas the benefits are limited, because tests are deterministically executed, and this test runs faster than it compiles, so any errors are found similarly fast by the developer introducing them.",
      "created_at": "2024-08-19T08:11:54Z",
      "updated_at": "2024-08-19T08:23:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721377340",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721377340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1365,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721392784",
      "pull_request_review_id": 2244904500,
      "id": 1721392784,
      "node_id": "PRRC_kwDOABII585mml6Q",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // Data payload can be encoded in any way...\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"\"));\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"00\")) << Vec(HexLiteral<uint8_t>(\"01\"));\n     CheckIsStandard(t);\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << Vec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720755562,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> once we have full std::array<std::byte> support in CSscript:\r\n\r\nValid point.\r\n\r\n----\r\n\r\nWhat about repeated values, which are already using the vector constructor, i.e.\r\n```C++\r\nvaltype(36, 0xff)\r\n```\r\ninstead of\r\n```C++\r\nVec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"))\r\n```",
      "created_at": "2024-08-19T08:21:07Z",
      "updated_at": "2024-08-19T08:21:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721392784",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721392784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 873,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721412277",
      "pull_request_review_id": 2244938676,
      "id": 1721412277,
      "node_id": "PRRC_kwDOABII585mmqq1",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // Data payload can be encoded in any way...\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"\"));\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"00\")) << Vec(HexLiteral<uint8_t>(\"01\"));\n     CheckIsStandard(t);\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << Vec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720755562,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> What about repeated values, which are already using the vector constructor, i.e.\r\n\r\nI'd say that there is more value in a test being consistent (using the same code patterns within a single unit test), than to use the shortest possible code. However that is a style question up to the author. Personally, I'd leave this line in this pull request as-is. ",
      "created_at": "2024-08-19T08:34:47Z",
      "updated_at": "2024-08-19T08:34:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721412277",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721412277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 873,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721414782",
      "pull_request_review_id": 2244942703,
      "id": 1721414782,
      "node_id": "PRRC_kwDOABII585mmrR-",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720757880,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I agree with Ryan, that this should be a follow-up PR, and that the changes in this line of the diff should probably be kept as-is.",
      "created_at": "2024-08-19T08:36:43Z",
      "updated_at": "2024-08-19T08:36:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721414782",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721414782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721451687",
      "pull_request_review_id": 2245001000,
      "id": 1721451687,
      "node_id": "PRRC_kwDOABII585mm0Sn",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720757880,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I haven't seen https://github.com/bitcoin/bitcoin/commit/5be34598c4683b2b44f607b28592a9e68e089761\r\nIt seems to me there's a simpler solution than that, since the method contains two separate concerns (inserting size + inserting elements) - which are using different parts of the vector/array.\r\n```patch\r\ndiff --git a/src/script/script.h b/src/script/script.h\r\n--- a/src/script/script.h\t(revision d5eed066d33780b12c1f0813a2adf021eac0ca5d)\r\n+++ b/src/script/script.h\t(date 1724057506103)\r\n@@ -412,6 +412,34 @@\r\n /** Serialized script, used inside transaction inputs and outputs */\r\n class CScript : public CScriptBase\r\n {\r\n+private:\r\n+    void InsertSize(const size_t size)\r\n+    {\r\n+        if (size < OP_PUSHDATA1)\r\n+        {\r\n+            insert(end(), static_cast<unsigned char>(size));\r\n+        }\r\n+        else if (size <= 0xff)\r\n+        {\r\n+            insert(end(), OP_PUSHDATA1);\r\n+            insert(end(), static_cast<unsigned char>(size));\r\n+        }\r\n+        else if (size <= 0xffff)\r\n+        {\r\n+            insert(end(), OP_PUSHDATA2);\r\n+            uint8_t _data[2];\r\n+            WriteLE16(_data, size);\r\n+            insert(end(), _data, _data + sizeof(_data));\r\n+        }\r\n+        else\r\n+        {\r\n+            insert(end(), OP_PUSHDATA4);\r\n+            uint8_t _data[4];\r\n+            WriteLE32(_data, size);\r\n+            insert(end(), _data, _data + sizeof(_data));\r\n+        }\r\n+    }\r\n+\r\n protected:\r\n     CScript& push_int64(int64_t n)\r\n     {\r\n@@ -465,29 +493,15 @@\r\n \r\n     CScript& operator<<(const std::vector<unsigned char>& b) LIFETIMEBOUND\r\n     {\r\n-        if (b.size() < OP_PUSHDATA1)\r\n-        {\r\n-            insert(end(), (unsigned char)b.size());\r\n-        }\r\n-        else if (b.size() <= 0xff)\r\n-        {\r\n-            insert(end(), OP_PUSHDATA1);\r\n-            insert(end(), (unsigned char)b.size());\r\n-        }\r\n-        else if (b.size() <= 0xffff)\r\n-        {\r\n-            insert(end(), OP_PUSHDATA2);\r\n-            uint8_t _data[2];\r\n-            WriteLE16(_data, b.size());\r\n-            insert(end(), _data, _data + sizeof(_data));\r\n-        }\r\n-        else\r\n-        {\r\n-            insert(end(), OP_PUSHDATA4);\r\n-            uint8_t _data[4];\r\n-            WriteLE32(_data, b.size());\r\n-            insert(end(), _data, _data + sizeof(_data));\r\n-        }\r\n+        InsertSize(b.size());\r\n+        insert(end(), b.begin(), b.end());\r\n+        return *this;\r\n+    }\r\n+\r\n+    template<size_t N>\r\n+    CScript& operator<<(const std::array<unsigned char, N>& b) LIFETIMEBOUND\r\n+    {\r\n+        InsertSize(N);\r\n         insert(end(), b.begin(), b.end());\r\n         return *this;\r\n     }\r\n```\r\n\r\ni.e. for `vector`:\r\n```C++\r\nInsertSize(b.size());\r\ninsert(end(), b.begin(), b.end());\r\n```\r\nand for `array`:\r\n```C++\r\nInsertSize(N);\r\ninsert(end(), b.begin(), b.end());\r\n```\r\n\r\n> that this should be a follow-up PR\r\n\r\nI'm fine with both, I'm just providing alternatives.",
      "created_at": "2024-08-19T09:03:33Z",
      "updated_at": "2024-08-30T12:27:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721451687",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721451687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721460986",
      "pull_request_review_id": 2245016078,
      "id": 1721460986,
      "node_id": "PRRC_kwDOABII585mm2j6",
      "diff_hunk": "@@ -369,4 +370,44 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ *\n+ * @note It may be preferable to use Vec(HexLiteral(...)) instead of\n+ * HexLiteral() to save stack space when declaring a local variable, if the hex\n+ * string is large. Alternately the variable could be declared constexpr to\n+ * avoid using stack space.\n+ */\n+template <typename Byte = std::byte, size_t N>\n+consteval std::array<Byte, N / 2> HexLiteral(const char (&hex_str)[N])",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 30,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720769066,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I haven't realized `user defined literals` meant that you've already tried it, my mistake.\r\n\r\nI'm not advocating for it, but I think we can get it to compile by something like:\r\n```C++\r\nconsteval auto operator\"\" _hex(const char* hex_str, size_t _)\r\n{\r\n    constexpr std::size_t len = sizeof(hex_str);\r\n    static_assert(len % 2 == 0, \"Hex string must have an even number of characters\");\r\n\r\n    if (hex_str[len - 1] != '\\0') throw \"null terminator required\";\r\n    std::array<std::byte, len / 2> rv{};\r\n    size_t i = 0;\r\n    for (auto& elem: rv) {\r\n        auto hi = ConstevalHexDigit(hex_str[i++]) << 4;\r\n        elem = static_cast<std::byte>(hi | ConstevalHexDigit(hex_str[i++]));\r\n    }\r\n    return rv;\r\n}\r\n```\r\n\r\nbut it's kinda' ugly and might not address our problems. Please resolve the comment if this isn't helpful.",
      "created_at": "2024-08-19T09:10:58Z",
      "updated_at": "2024-08-19T09:15:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721460986",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721460986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721465852",
      "pull_request_review_id": 2245024052,
      "id": 1721465852,
      "node_id": "PRRC_kwDOABII585mm3v8",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // Data payload can be encoded in any way...\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"\"));\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"00\")) << Vec(HexLiteral<uint8_t>(\"01\"));\n     CheckIsStandard(t);\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << Vec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720755562,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> more value in a test being consistent\r\n\r\nAgree, that's why I'm suggesting this, [transaction_tests](https://github.com/bitcoin/bitcoin/blob/master/src/test/transaction_tests.cpp#L913-L915) has many non-hexadecimal pushes.",
      "created_at": "2024-08-19T09:14:12Z",
      "updated_at": "2024-08-19T09:14:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721465852",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721465852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 873,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721561190",
      "pull_request_review_id": 2240152108,
      "id": 1721561190,
      "node_id": "PRRC_kwDOABII585mnPBm",
      "diff_hunk": "@@ -36,10 +36,10 @@ FUZZ_TARGET(crypter, .init = initialize_crypter)\n         const unsigned int derivation_method = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n \n         // Limiting the value of nRounds since it is otherwise uselessly expensive and causes a timeout when fuzzing.",
      "path": "src/wallet/test/fuzz/crypter.cpp",
      "position": 1,
      "original_position": 3,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "rename nit\r\n```suggestion\r\n        // Limiting the value of rounds since it is otherwise uselessly expensive and causes a timeout when fuzzing.\r\n```",
      "created_at": "2024-08-19T10:20:16Z",
      "updated_at": "2024-08-19T13:37:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721561190",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721561190"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721597256",
      "pull_request_review_id": 2240152108,
      "id": 1721597256,
      "node_id": "PRRC_kwDOABII585mnX1I",
      "diff_hunk": "@@ -136,46 +139,52 @@ BOOST_AUTO_TEST_CASE(util_criticalsection)\n     } while(0);\n }\n \n-static const unsigned char ParseHex_expected[65] = {\n+constexpr char HEX_PARSE_INPUT[] = \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\";\n+constexpr uint8_t HEX_PARSE_OUTPUT[] = {\n     0x04, 0x67, 0x8a, 0xfd, 0xb0, 0xfe, 0x55, 0x48, 0x27, 0x19, 0x67, 0xf1, 0xa6, 0x71, 0x30, 0xb7,\n     0x10, 0x5c, 0xd6, 0xa8, 0x28, 0xe0, 0x39, 0x09, 0xa6, 0x79, 0x62, 0xe0, 0xea, 0x1f, 0x61, 0xde,\n     0xb6, 0x49, 0xf6, 0xbc, 0x3f, 0x4c, 0xef, 0x38, 0xc4, 0xf3, 0x55, 0x04, 0xe5, 0x1e, 0xc1, 0x12,\n     0xde, 0x5c, 0x38, 0x4d, 0xf7, 0xba, 0x0b, 0x8d, 0x57, 0x8a, 0x4c, 0x70, 0x2b, 0x6b, 0xf1, 0x1d,\n     0x5f\n };\n+static_assert((sizeof(HEX_PARSE_INPUT) - 1) == 2 * sizeof(HEX_PARSE_OUTPUT));\n BOOST_AUTO_TEST_CASE(parse_hex)\n {\n     std::vector<unsigned char> result;\n-    std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));\n+    std::vector<unsigned char> expected(std::begin(HEX_PARSE_OUTPUT), std::end(HEX_PARSE_OUTPUT));",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 35,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: unnecessary `std::begin`\r\n```suggestion\r\n    std::vector<unsigned char> expected(HEX_PARSE_OUTPUT, std::end(HEX_PARSE_OUTPUT));\r\n```",
      "created_at": "2024-08-19T10:47:43Z",
      "updated_at": "2024-08-19T13:37:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721597256",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721597256"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721607971",
      "pull_request_review_id": 2240152108,
      "id": 1721607971,
      "node_id": "PRRC_kwDOABII585mnacj",
      "diff_hunk": "@@ -198,22 +207,30 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n     BOOST_CHECK(!TryParseHex(\"12 3\").has_value());\n }\n \n+BOOST_AUTO_TEST_CASE(consteval_hex_digit)\n+{\n+    BOOST_CHECK_EQUAL(ConstevalHexDigit('0'), 0);\n+    BOOST_CHECK_EQUAL(ConstevalHexDigit('9'), 9);\n+    BOOST_CHECK_EQUAL(ConstevalHexDigit('a'), 0xa);\n+    BOOST_CHECK_EQUAL(ConstevalHexDigit('f'), 0xf);\n+}\n+\n BOOST_AUTO_TEST_CASE(util_HexStr)\n {\n     BOOST_CHECK_EQUAL(",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 98,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: these checks can be tidied up a bit:\r\n\r\n<details>\r\n<summary>git diff on 67fc994bed</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/util_tests.cpp b/src/test/util_tests.cpp\r\nindex 49bc4b1b50..792fdfde3e 100644\r\n--- a/src/test/util_tests.cpp\r\n+++ b/src/test/util_tests.cpp\r\n@@ -217,17 +217,9 @@ BOOST_AUTO_TEST_CASE(consteval_hex_digit)\r\n \r\n BOOST_AUTO_TEST_CASE(util_HexStr)\r\n {\r\n-    BOOST_CHECK_EQUAL(\r\n-        HexStr(HEX_PARSE_OUTPUT),\r\n-        HEX_PARSE_INPUT);\r\n-\r\n-    BOOST_CHECK_EQUAL(\r\n-        HexStr(Span{HEX_PARSE_OUTPUT}.last(0)),\r\n-        \"\");\r\n-\r\n-    BOOST_CHECK_EQUAL(\r\n-        HexStr(Span{HEX_PARSE_OUTPUT}.first(0)),\r\n-        \"\");\r\n+    BOOST_CHECK_EQUAL(HexStr(HEX_PARSE_OUTPUT), HEX_PARSE_INPUT);\r\n+    BOOST_CHECK_EQUAL(HexStr(Span{HEX_PARSE_OUTPUT}.last(0)), \"\");\r\n+    BOOST_CHECK_EQUAL(HexStr(Span{HEX_PARSE_OUTPUT}.first(0)), \"\");\r\n \r\n     {\r\n         const std::vector<char> in_s{HEX_PARSE_OUTPUT, HEX_PARSE_OUTPUT + 5};\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2024-08-19T10:56:05Z",
      "updated_at": "2024-08-19T13:37:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721607971",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721607971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 220,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721609212",
      "pull_request_review_id": 2240152108,
      "id": 1721609212,
      "node_id": "PRRC_kwDOABII585mnav8",
      "diff_hunk": "@@ -67,6 +67,7 @@ std::vector<Byte> ParseHex(std::string_view hex_str)\n {\n     return TryParseHex<Byte>(hex_str).value_or(std::vector<Byte>{});\n }\n+",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 4,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: phantom newline",
      "created_at": "2024-08-19T10:57:03Z",
      "updated_at": "2024-08-19T13:37:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721609212",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721609212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721650301",
      "pull_request_review_id": 2245321961,
      "id": 1721650301,
      "node_id": "PRRC_kwDOABII585mnkx9",
      "diff_hunk": "@@ -369,4 +370,44 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ *\n+ * @note It may be preferable to use Vec(HexLiteral(...)) instead of\n+ * HexLiteral() to save stack space when declaring a local variable, if the hex\n+ * string is large. Alternately the variable could be declared constexpr to\n+ * avoid using stack space.\n+ */\n+template <typename Byte = std::byte, size_t N>\n+consteval std::array<Byte, N / 2> HexLiteral(const char (&hex_str)[N])",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 30,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720769066,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I tried before your suggestion and then tried again when you suggested on all 3 compilers and none worked. Which I stated.\r\n\r\nThen you pasted a longer example. Have you tested and got anything remotely close to that working on any compiler, C++ or other language? :)\r\n\r\nResolving.",
      "created_at": "2024-08-19T11:33:57Z",
      "updated_at": "2024-08-19T11:33:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721650301",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721650301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721654337",
      "pull_request_review_id": 2245328653,
      "id": 1721654337,
      "node_id": "PRRC_kwDOABII585mnlxB",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720757880,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I like that my version just forwards everything in one statement, while your leaves 3, duplicated. But either one works for me.",
      "created_at": "2024-08-19T11:38:04Z",
      "updated_at": "2024-08-19T11:38:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721654337",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721654337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721677058",
      "pull_request_review_id": 2245364097,
      "id": 1721677058,
      "node_id": "PRRC_kwDOABII585mnrUC",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720757880,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In my suggestion there is no `std::span` involved and the size + data writing parts are clearly separated.\r\nBut I can also imagine a method accepting `b.size(), b.begin(), b.end()` vs `N, b.begin(), b.end()`, if you think that's cleaner.",
      "created_at": "2024-08-19T11:58:58Z",
      "updated_at": "2024-08-19T13:11:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721677058",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721677058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721678712",
      "pull_request_review_id": 2245366950,
      "id": 1721678712,
      "node_id": "PRRC_kwDOABII585mnrt4",
      "diff_hunk": "@@ -369,4 +370,44 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ *\n+ * @note It may be preferable to use Vec(HexLiteral(...)) instead of\n+ * HexLiteral() to save stack space when declaring a local variable, if the hex\n+ * string is large. Alternately the variable could be declared constexpr to\n+ * avoid using stack space.\n+ */\n+template <typename Byte = std::byte, size_t N>\n+consteval std::array<Byte, N / 2> HexLiteral(const char (&hex_str)[N])",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 30,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720769066,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The above seemed to be working (that's why I suggested it originally) - but I'm not in love with this version either - thanks for considering.",
      "created_at": "2024-08-19T12:00:32Z",
      "updated_at": "2024-08-19T12:00:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721678712",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721678712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721808875",
      "pull_request_review_id": 2245582079,
      "id": 1721808875,
      "node_id": "PRRC_kwDOABII585moLfr",
      "diff_hunk": "@@ -115,26 +114,24 @@ bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vch\n     return cKeyCrypter.Encrypt(vchPlaintext, vchCiphertext);\n }\n \n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n+bool DecryptSecret(const CKeyingMaterial& master_key, std::span<const unsigned char> ciphertext, const uint256& iv, CKeyingMaterial& plaintext)\n {\n-    CCrypter cKeyCrypter;\n-    std::vector<unsigned char> chIV(WALLET_CRYPTO_IV_SIZE);\n-    memcpy(chIV.data(), &nIV, WALLET_CRYPTO_IV_SIZE);\n-    if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n+    CCrypter key_crypter;\n+    if (!key_crypter.SetKey(master_key, {iv.data(), iv.data() + WALLET_CRYPTO_IV_SIZE}))",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 83,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "72256f9d78d2187411f55aa3f779170bed9bde1e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: Make code more tolerant of constexpr std::arrays\" (72256f9d78d2187411f55aa3f779170bed9bde1e):\r\n\r\nWould be nice to add:\r\n\r\n```c++\r\nstatic_assert(WALLET_CRYPTO_IV_SIZE <= iv.size());\r\n```\r\n\r\nSince it's not obvious `iv` size matches `WALLET_CRYPTO_IV_SIZE` (I was surprised to see it's actually twice the size).",
      "created_at": "2024-08-19T13:40:07Z",
      "updated_at": "2024-08-19T14:16:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721808875",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721808875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721816302",
      "pull_request_review_id": 2245594310,
      "id": 1721816302,
      "node_id": "PRRC_kwDOABII585moNTu",
      "diff_hunk": "@@ -36,10 +36,10 @@ FUZZ_TARGET(crypter, .init = initialize_crypter)\n         const unsigned int derivation_method = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n \n         // Limiting the value of nRounds since it is otherwise uselessly expensive and causes a timeout when fuzzing.",
      "path": "src/wallet/test/fuzz/crypter.cpp",
      "position": 1,
      "original_position": 3,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1721561190,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it's referring to:\r\nhttps://github.com/bitcoin/bitcoin/blob/master/src/wallet/crypter.cpp#L40\r\ni.e.\r\n```C++\r\nconst unsigned int nRounds\r\n```",
      "created_at": "2024-08-19T13:44:27Z",
      "updated_at": "2024-08-19T13:44:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721816302",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721816302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721830663",
      "pull_request_review_id": 2245616835,
      "id": 1721830663,
      "node_id": "PRRC_kwDOABII585moQ0H",
      "diff_hunk": "@@ -36,10 +36,10 @@ FUZZ_TARGET(crypter, .init = initialize_crypter)\n         const unsigned int derivation_method = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n \n         // Limiting the value of nRounds since it is otherwise uselessly expensive and causes a timeout when fuzzing.",
      "path": "src/wallet/test/fuzz/crypter.cpp",
      "position": 1,
      "original_position": 3,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1721561190,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If you follow the call graph, I don't see how that can be true?",
      "created_at": "2024-08-19T13:52:49Z",
      "updated_at": "2024-08-19T13:52:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721830663",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721830663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721841148",
      "pull_request_review_id": 2245633713,
      "id": 1721841148,
      "node_id": "PRRC_kwDOABII585moTX8",
      "diff_hunk": "@@ -36,10 +36,10 @@ FUZZ_TARGET(crypter, .init = initialize_crypter)\n         const unsigned int derivation_method = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n \n         // Limiting the value of nRounds since it is otherwise uselessly expensive and causes a timeout when fuzzing.",
      "path": "src/wallet/test/fuzz/crypter.cpp",
      "position": 1,
      "original_position": 3,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1721561190,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You're right, had an older version locally!",
      "created_at": "2024-08-19T13:59:16Z",
      "updated_at": "2024-08-19T13:59:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721841148",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721841148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721852296",
      "pull_request_review_id": 2245652948,
      "id": 1721852296,
      "node_id": "PRRC_kwDOABII585moWGI",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720757880,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In my suggestion there is no `std::span`\r\n\r\nYeah, I guess that introduces needless confusion, better to not mention `span`. I like your solution better now. :)\r\n\r\n> But I can also imagine a method accepting b.size(), b.begin(), b.end() vs N, b.begin(), b.end(), if you think that's cleaner.\r\n\r\nPossibly just `begin()` & `end()` and just using the difference instead of passing `size()` explicitly?",
      "created_at": "2024-08-19T14:06:50Z",
      "updated_at": "2024-08-19T20:36:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721852296",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721852296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721951966",
      "pull_request_review_id": 2245652948,
      "id": 1721951966,
      "node_id": "PRRC_kwDOABII585moube",
      "diff_hunk": "@@ -1361,6 +1361,12 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template <size_t N>\n+CScript ToScript(const std::array<uint8_t, N>& array)",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "309d8b783109eb52a5596712b19210271c8f882e",
      "in_reply_to_id": 1721377340,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> It isn't strictly needed, because replacing the test-only `ScriptFromHex` wasn't a direct goal of this pull\r\n\r\nIt represents indirect use of `ParseHex` with string literals.\r\n\r\n> It is incomplete, because it adds a bit of compile-time checking for the new paths using `ToScript`, but leaves the checking out completely for the remaining `ScriptFromHex` paths. It would be better to add the check `data = *Assert(TryParseHex(str))` to `ScriptFromHex` instead and drop this function.\r\n\r\nWill add your suggestion to `ScriptFromHex`. :+1:\r\n\r\n> It seems inconsistent and harder to read when there are two functions doing the exact same thing (turn hex into a script) in the same test case. (Are we going to duplicate every test-only helper just because there is a compile-time and a run-time checked function to to the same?)\r\n\r\nThey are not the same function (I know they were initially named very similarly though). With some adjustment one can be partially implemented using the other:\r\n\r\n```C++\r\ntemplate <typename T>\r\nCScript ToScript(const T& container)\r\n{\r\n    return {container.data(), container.data() + container.size()};\r\n}\r\n\r\nstatic CScript ScriptFromHex(const std::string& str)\r\n{\r\n    return ToScript(ParseHex(str));\r\n}\r\n```\r\n\r\n> It makes the test more verbose\r\n\r\nThis is in part due to your suggestion of `std::byte` defaults. Once that is fixed I don't think...\r\n```C++\r\ns = ToScript(HexLiteral(\"0302ff030302ff03\"));\r\n```\r\n...will be too bad.\r\n\r\n> It makes the diff larger and review take longer\r\n\r\nThis is part of why we have scripted diffs, right?\r\n\r\n> Whereas the benefits are limited, because tests are deterministically executed, and this test runs faster than it compiles, so any errors are found similarly fast by the developer introducing them.\r\n\r\nIt's down to \"what can at low cost run at compile time, should\".\r\n\r\nThat said, I am open to not touching `ScriptFromHex`-usages if you insist again (no need to motivate this time, just write :-1: ). Thank you for your patience.",
      "created_at": "2024-08-19T15:11:00Z",
      "updated_at": "2024-08-19T20:36:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1721951966",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1721951966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1365,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722229379",
      "pull_request_review_id": 2245652948,
      "id": 1722229379,
      "node_id": "PRRC_kwDOABII585mpyKD",
      "diff_hunk": "@@ -22,6 +22,9 @@\n #include <script/script_error.h>\n #include <script/signingprovider.h>\n \n+using util::HexLiteral;\n+using util::Vec;",
      "path": "src/test/miniscript_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "9c8d091382909f44c2fc61b8c726362356db2bff",
      "in_reply_to_id": 1721346102,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If I change\r\n```C++\r\nstd::vector<unsigned char> nonminpush = ParseHex(\"0000210232780000feff00ffffffffffff21ff005f00ae21ae00000000060602060406564c2102320000060900fe00005f00ae21ae00100000060606060606000000000000000000000000000000000000000000000000000000000000000000\");\r\nconst CScript nonminpush_script(nonminpush.begin(), nonminpush.end());\r\n```\r\n->\r\n```C++\r\nconst auto nonminpush = HexLiteral<uint8_t>(\"0000210232780000feff00ffffffffffff21ff005f00ae21ae00000000060602060406564c2102320000060900fe00005f00ae21ae00100000060606060606000000000000000000000000000000000000000000000000000000000000000000\");\r\nconst CScript nonminpush_script(nonminpush.begin(), nonminpush.end());\r\n```\r\n\r\nI can indeed omit `Vec()` and it compiles.. on everything except [MSVC](https://github.com/hodlinator/bitcoin/actions/runs/10455571527/job/28950830959), because the `std::array` iterators do not satisfy any `CScript` ctors. So it's still needed until your #29369 lands.",
      "created_at": "2024-08-19T19:04:49Z",
      "updated_at": "2024-08-19T20:36:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722229379",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722229379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722313302",
      "pull_request_review_id": 2245652948,
      "id": 1722313302,
      "node_id": "PRRC_kwDOABII585mqGpW",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // Data payload can be encoded in any way...\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"\"));\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"00\")) << Vec(HexLiteral<uint8_t>(\"01\"));\n     CheckIsStandard(t);\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << Vec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720755562,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> What about repeated values, which are already using the vector constructor, i.e.\r\n\r\nSee my message before yours @paplorinc:\r\n\r\n> (I think switching to base 10 is or using valtype(36, 0xff); is too inconsistent).",
      "created_at": "2024-08-19T20:28:16Z",
      "updated_at": "2024-08-19T20:36:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722313302",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722313302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 873,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722325152",
      "pull_request_review_id": 2246420625,
      "id": 1722325152,
      "node_id": "PRRC_kwDOABII585mqJig",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // Data payload can be encoded in any way...\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"\"));\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"00\")) << Vec(HexLiteral<uint8_t>(\"01\"));\n     CheckIsStandard(t);\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << Vec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720755562,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`valtype` is not the point here, rather that for repeated values we've used the vector constructor.\r\nBut we can close this comment, maybe we'll do it in another PR.",
      "created_at": "2024-08-19T20:40:37Z",
      "updated_at": "2024-08-19T20:40:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722325152",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722325152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 873,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722326803",
      "pull_request_review_id": 2246423382,
      "id": 1722326803,
      "node_id": "PRRC_kwDOABII585mqJ8T",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720757880,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm fine with any of those - having a slight preference for the one which clarifies the two separate roles of the serialization - length + values",
      "created_at": "2024-08-19T20:42:26Z",
      "updated_at": "2024-08-19T20:42:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722326803",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722326803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722329648",
      "pull_request_review_id": 2246427902,
      "id": 1722329648,
      "node_id": "PRRC_kwDOABII585mqKow",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // Data payload can be encoded in any way...\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"\"));\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"00\")) << Vec(HexLiteral<uint8_t>(\"01\"));\n     CheckIsStandard(t);\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << Vec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720755562,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes. `valtype` was not my only point, it was also the repeated values.",
      "created_at": "2024-08-19T20:45:19Z",
      "updated_at": "2024-08-19T20:45:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722329648",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722329648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 873,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722332708",
      "pull_request_review_id": 2246432706,
      "id": 1722332708,
      "node_id": "PRRC_kwDOABII585mqLYk",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // Data payload can be encoded in any way...\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"\"));\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"00\")) << Vec(HexLiteral<uint8_t>(\"01\"));\n     CheckIsStandard(t);\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << Vec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720755562,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "But aren't we already doing that throughout the test, e.g. https://github.com/bitcoin/bitcoin/blob/master/src/test/transaction_tests.cpp#L1031?",
      "created_at": "2024-08-19T20:48:33Z",
      "updated_at": "2024-08-19T20:48:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722332708",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722332708"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 873,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722336406",
      "pull_request_review_id": 2246438846,
      "id": 1722336406,
      "node_id": "PRRC_kwDOABII585mqMSW",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // Data payload can be encoded in any way...\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"\"));\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"00\")) << Vec(HexLiteral<uint8_t>(\"01\"));\n     CheckIsStandard(t);\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << Vec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720755562,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, we are. But I'd rather not change that aspect of this region in this PR. Arguably the current \"flattened out\" version is clearer for the casual reader who isn't interested in the exact number of bytes being repeated.",
      "created_at": "2024-08-19T20:52:44Z",
      "updated_at": "2024-08-19T20:52:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722336406",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722336406"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 873,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722338360",
      "pull_request_review_id": 2246442082,
      "id": 1722338360,
      "node_id": "PRRC_kwDOABII585mqMw4",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // Data payload can be encoded in any way...\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"\"));\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"00\")) << Vec(HexLiteral<uint8_t>(\"01\"));\n     CheckIsStandard(t);\n     // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n     CheckIsStandard(t);\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << Vec(HexLiteral<uint8_t>(\"01\")) << 2 << Vec(HexLiteral<uint8_t>(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 38,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720755562,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, so it's just out of scope - I can work with that. :)",
      "created_at": "2024-08-19T20:54:52Z",
      "updated_at": "2024-08-19T20:54:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722338360",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722338360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 873,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722354071",
      "pull_request_review_id": 2246468161,
      "id": 1722354071,
      "node_id": "PRRC_kwDOABII585mqQmX",
      "diff_hunk": "@@ -136,46 +139,52 @@ BOOST_AUTO_TEST_CASE(util_criticalsection)\n     } while(0);\n }\n \n-static const unsigned char ParseHex_expected[65] = {\n+constexpr char HEX_PARSE_INPUT[] = \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\";\n+constexpr uint8_t HEX_PARSE_OUTPUT[] = {\n     0x04, 0x67, 0x8a, 0xfd, 0xb0, 0xfe, 0x55, 0x48, 0x27, 0x19, 0x67, 0xf1, 0xa6, 0x71, 0x30, 0xb7,\n     0x10, 0x5c, 0xd6, 0xa8, 0x28, 0xe0, 0x39, 0x09, 0xa6, 0x79, 0x62, 0xe0, 0xea, 0x1f, 0x61, 0xde,\n     0xb6, 0x49, 0xf6, 0xbc, 0x3f, 0x4c, 0xef, 0x38, 0xc4, 0xf3, 0x55, 0x04, 0xe5, 0x1e, 0xc1, 0x12,\n     0xde, 0x5c, 0x38, 0x4d, 0xf7, 0xba, 0x0b, 0x8d, 0x57, 0x8a, 0x4c, 0x70, 0x2b, 0x6b, 0xf1, 0x1d,\n     0x5f\n };\n+static_assert((sizeof(HEX_PARSE_INPUT) - 1) == 2 * sizeof(HEX_PARSE_OUTPUT));\n BOOST_AUTO_TEST_CASE(parse_hex)\n {\n     std::vector<unsigned char> result;\n-    std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));\n+    std::vector<unsigned char> expected(std::begin(HEX_PARSE_OUTPUT), std::end(HEX_PARSE_OUTPUT));",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 35,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1721597256,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Unless someone finds a way to maintain symmetry using ranges or something, I'm keeping as-is.",
      "created_at": "2024-08-19T21:11:38Z",
      "updated_at": "2024-08-19T21:11:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722354071",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722354071"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722356732",
      "pull_request_review_id": 2246472781,
      "id": 1722356732,
      "node_id": "PRRC_kwDOABII585mqRP8",
      "diff_hunk": "@@ -11,74 +11,73 @@\n \n #include <boost/test/unit_test.hpp>\n \n+using util::HexLiteral;\n+\n namespace wallet {\n BOOST_FIXTURE_TEST_SUITE(wallet_crypto_tests, BasicTestingSetup)\n \n class TestCrypter\n {\n public:\n-static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n-                 const std::vector<unsigned char>& correctKey = std::vector<unsigned char>(),\n-                 const std::vector<unsigned char>& correctIV=std::vector<unsigned char>())\n+static void TestPassphraseSingle(std::span<const unsigned char> salt, const SecureString& passphrase, uint32_t rounds,\n+                 std::span<const unsigned char> correct_key = {}, std::span<const unsigned char> correct_IV = {})\n {\n     CCrypter crypt;\n-    crypt.SetKeyFromPassphrase(passphrase, vchSalt, rounds, 0);\n-\n-    if(!correctKey.empty())\n-        BOOST_CHECK_MESSAGE(memcmp(crypt.vchKey.data(), correctKey.data(), crypt.vchKey.size()) == 0, \\\n-            HexStr(crypt.vchKey) + std::string(\" != \") + HexStr(correctKey));\n-    if(!correctIV.empty())\n-        BOOST_CHECK_MESSAGE(memcmp(crypt.vchIV.data(), correctIV.data(), crypt.vchIV.size()) == 0,\n-            HexStr(crypt.vchIV) + std::string(\" != \") + HexStr(correctIV));\n+    crypt.SetKeyFromPassphrase(passphrase, salt, rounds, 0);\n+\n+    if (!correct_key.empty())\n+        BOOST_CHECK_MESSAGE(memcmp(crypt.vchKey.data(), correct_key.data(), crypt.vchKey.size()) == 0, \\\n+            HexStr(crypt.vchKey) + std::string(\" != \") + HexStr(correct_key));\n+    if (!correct_IV.empty())\n+        BOOST_CHECK_MESSAGE(memcmp(crypt.vchIV.data(), correct_IV.data(), crypt.vchIV.size()) == 0,\n+            HexStr(crypt.vchIV) + std::string(\" != \") + HexStr(correct_IV));\n }\n \n-static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n-                 const std::vector<unsigned char>& correctKey = std::vector<unsigned char>(),\n-                 const std::vector<unsigned char>& correctIV=std::vector<unsigned char>())\n+static void TestPassphrase(std::span<const unsigned char> salt, const SecureString& passphrase, uint32_t rounds,\n+                 std::span<const unsigned char> correct_key = {}, std::span<const unsigned char> correct_IV = {})\n {\n-    TestPassphraseSingle(vchSalt, passphrase, rounds, correctKey, correctIV);\n-    for(SecureString::const_iterator i(passphrase.begin()); i != passphrase.end(); ++i)\n-        TestPassphraseSingle(vchSalt, SecureString(i, passphrase.end()), rounds);\n+    TestPassphraseSingle(salt, passphrase, rounds, correct_key, correct_IV);\n+    for (SecureString::const_iterator it(passphrase.begin()); it != passphrase.end(); ++it)\n+        TestPassphraseSingle(salt, SecureString(it, passphrase.end()), rounds);\n }\n \n-static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext, \\\n-                        const std::vector<unsigned char>& vchPlaintext = std::vector<unsigned char>())\n+static void TestDecrypt(const CCrypter& crypt, std::span<const unsigned char> ciphertext,\n+                        std::span<const unsigned char> correct_plaintext = {})\n {\n-    CKeyingMaterial vchDecrypted;\n-    crypt.Decrypt(vchCiphertext, vchDecrypted);\n-    if (vchPlaintext.size())\n-        BOOST_CHECK(CKeyingMaterial(vchPlaintext.begin(), vchPlaintext.end()) == vchDecrypted);\n+    CKeyingMaterial decrypted;\n+    crypt.Decrypt(ciphertext, decrypted);\n+    if (!correct_plaintext.empty())\n+        BOOST_CHECK_EQUAL_COLLECTIONS(decrypted.begin(), decrypted.end(), correct_plaintext.begin(), correct_plaintext.end());\n }\n \n-static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchPlaintext,\n-                       const std::vector<unsigned char>& vchCiphertextCorrect = std::vector<unsigned char>())\n+static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& plaintext,\n+                       std::span<const unsigned char> correct_ciphertext = {})\n {\n-    std::vector<unsigned char> vchCiphertext;\n-    crypt.Encrypt(vchPlaintext, vchCiphertext);\n+    std::vector<unsigned char> ciphertext;\n+    crypt.Encrypt(plaintext, ciphertext);\n \n-    if (!vchCiphertextCorrect.empty())\n-        BOOST_CHECK(vchCiphertext == vchCiphertextCorrect);\n+    if (!correct_ciphertext.empty())\n+        BOOST_CHECK_EQUAL_COLLECTIONS(ciphertext.begin(), ciphertext.end(), correct_ciphertext.begin(), correct_ciphertext.end());\n \n-    const std::vector<unsigned char> vchPlaintext2(vchPlaintext.begin(), vchPlaintext.end());\n-    TestDecrypt(crypt, vchCiphertext, vchPlaintext2);\n+    TestDecrypt(crypt, ciphertext, /*correct_plaintext=*/plaintext);\n }\n \n-static void TestEncrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchPlaintextIn, \\\n-                       const std::vector<unsigned char>& vchCiphertextCorrect = std::vector<unsigned char>())\n+static void TestEncrypt(const CCrypter& crypt, std::span<const unsigned char> plaintext,\n+                       std::span<const unsigned char> correct_ciphertext = {})\n {\n-    TestEncryptSingle(crypt, CKeyingMaterial(vchPlaintextIn.begin(), vchPlaintextIn.end()), vchCiphertextCorrect);\n-    for(std::vector<unsigned char>::const_iterator i(vchPlaintextIn.begin()); i != vchPlaintextIn.end(); ++i)\n-        TestEncryptSingle(crypt, CKeyingMaterial(i, vchPlaintextIn.end()));\n+    TestEncryptSingle(crypt, CKeyingMaterial(plaintext.begin(), plaintext.end()), correct_ciphertext);\n+    for (auto it{plaintext.begin()}; it != plaintext.end(); ++it)\n+        TestEncryptSingle(crypt, CKeyingMaterial(it, plaintext.end()));\n }\n \n };\n \n BOOST_AUTO_TEST_CASE(passphrase) {\n     // These are expensive.\n \n-    TestCrypter::TestPassphrase(ParseHex(\"0000deadbeef0000\"), \"test\", 25000, \\\n-                                ParseHex(\"fc7aba077ad5f4c3a0988d8daa4810d0d4a0e3bcb53af662998898f33df0556a\"), \\\n-                                ParseHex(\"cf2f2691526dd1aa220896fb8bf7c369\"));\n+    TestCrypter::TestPassphrase(HexLiteral<uint8_t>(\"0000deadbeef0000\"), \"test\", 25000, \\",
      "path": "src/wallet/test/wallet_crypto_tests.cpp",
      "position": 1,
      "original_position": 107,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720760053,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Settled for fixing this in 41d97d38bfbdacdf56e730c6b082f992e4f15ec1, before the scripted-diff happens.",
      "created_at": "2024-08-19T21:14:47Z",
      "updated_at": "2024-08-19T21:14:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722356732",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722356732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722843198",
      "pull_request_review_id": 2247213617,
      "id": 1722843198,
      "node_id": "PRRC_kwDOABII585msIA-",
      "diff_hunk": "@@ -93,13 +94,11 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n         return false;\n \n     // plaintext will always be equal to or lesser than length of ciphertext\n-    int nLen = vchCiphertext.size();\n-\n-    vchPlaintext.resize(nLen);\n+    vchPlaintext.resize(vchCiphertext.size());\n \n     AES256CBCDecrypt dec(vchKey.data(), vchIV.data(), true);\n-    nLen = dec.Decrypt(vchCiphertext.data(), vchCiphertext.size(), vchPlaintext.data());\n-    if(nLen == 0)\n+    int nLen = dec.Decrypt(vchCiphertext.data(), vchCiphertext.size(), vchPlaintext.data());\n+    if (nLen == 0)",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 35,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "08a880de6c94bc84c1f43a3845e1645d3eb67607",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Content change: The de-Hungarianization commit was adding a space after `if`, which now happens in the commit before.\r\n\r\nstyle nit in 08a880de6c94bc84c1f43a3845e1645d3eb67607: Not sure about adding missing space to lines in one commit and then modifying the lines again in a rename commit. I think adding \"missing\" space can be done in the rename commit. (Same for the other clang-format changes in \"unrelated lines\" in commit 08a880de6c94bc84c1f43a3845e1645d3eb67607) (But just a style nit)",
      "created_at": "2024-08-20T07:43:47Z",
      "updated_at": "2024-08-20T08:01:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722843198",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722843198"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722846451",
      "pull_request_review_id": 2247213617,
      "id": 1722846451,
      "node_id": "PRRC_kwDOABII585msIzz",
      "diff_hunk": "@@ -114,26 +114,26 @@ bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vch\n     return cKeyCrypter.Encrypt(vchPlaintext, vchCiphertext);\n }\n \n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n+bool DecryptSecret(const CKeyingMaterial& master_key, const std::vector<unsigned char>& ciphertext, const uint256& iv, CKeyingMaterial& plaintext)\n {\n-    CCrypter cKeyCrypter;\n-    static_assert(WALLET_CRYPTO_IV_SIZE <= std::remove_reference<decltype(nIV)>::type::size());\n-    std::vector<unsigned char> chIV{nIV.begin(), nIV.begin() + WALLET_CRYPTO_IV_SIZE};\n-    if (!cKeyCrypter.SetKey(vMasterKey, chIV))\n+    CCrypter key_crypter;\n+    static_assert(WALLET_CRYPTO_IV_SIZE <= std::remove_reference<decltype(iv)>::type::size());\n+    std::vector<unsigned char> iv_prefix{iv.begin(), iv.begin() + WALLET_CRYPTO_IV_SIZE};\n+    if (!key_crypter.SetKey(master_key, iv_prefix))",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 96,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "8ad548f389f6abd16db39dadafe3fbeefaedec3a",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "style nit in 8ad548f389f6abd16db39dadafe3fbeefaedec3a: (up to you) If you want, you can add the missing `{}` after all `if`, according to the dev notes, in this commit. Feel free to ignore.",
      "created_at": "2024-08-20T07:46:13Z",
      "updated_at": "2024-08-20T08:01:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722846451",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722846451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722852311",
      "pull_request_review_id": 2247213617,
      "id": 1722852311,
      "node_id": "PRRC_kwDOABII585msKPX",
      "diff_hunk": "@@ -200,23 +203,15 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n \n BOOST_AUTO_TEST_CASE(util_HexStr)\n {\n-    BOOST_CHECK_EQUAL(\n-        HexStr(ParseHex_expected),\n-        \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n-\n-    BOOST_CHECK_EQUAL(\n-        HexStr(Span{ParseHex_expected}.last(0)),\n-        \"\");\n-\n-    BOOST_CHECK_EQUAL(\n-        HexStr(Span{ParseHex_expected}.first(0)),\n-        \"\");\n+    BOOST_CHECK_EQUAL(HexStr(HEX_PARSE_OUTPUT), HEX_PARSE_INPUT);\n+    BOOST_CHECK_EQUAL(HexStr(Span{HEX_PARSE_OUTPUT}.last(0)), \"\");\n+    BOOST_CHECK_EQUAL(HexStr(Span{HEX_PARSE_OUTPUT}.first(0)), \"\");\n \n     {\n-        const std::vector<char> in_s{ParseHex_expected, ParseHex_expected + 5};\n+        constexpr char out_exp[] = \"04678afdb0\";",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 85,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "2c68649f0932dac146b941fb6b4e2fbc52fbd8a0",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "style nit in 2c68649f0932dac146b941fb6b4e2fbc52fbd8a0: Not sure about switching string/string_views to a raw C-array in C++ code when there is no reason for it. Modern compilers can optimize away sting/string_view sizes on literals, so my preference would be to not change the type here.\r\n\r\nExample:\r\n\r\n```cpp\r\nint main() {\r\n    std::string sv{\"04678afdb0\"};\r\n    return sv.size();\r\n}\r\n```\r\n\r\nOptimized into:\r\n\r\n```cpp\r\nint main() {\r\n    return 10;\r\n}\r\n```\r\n\r\non modern compilers.",
      "created_at": "2024-08-20T07:49:48Z",
      "updated_at": "2024-08-20T08:01:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722852311",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722852311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722867989",
      "pull_request_review_id": 2247213617,
      "id": 1722867989,
      "node_id": "PRRC_kwDOABII585msOEV",
      "diff_hunk": "@@ -1361,6 +1361,12 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template <size_t N>\n+CScript ToScript(const std::array<uint8_t, N>& array)",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "309d8b783109eb52a5596712b19210271c8f882e",
      "in_reply_to_id": 1721377340,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I don't think...\r\n> \r\n> ```c++\r\n> s = ToScript(HexLiteral(\"0302ff030302ff03\"));\r\n> ```\r\n>\r\n> ...will be too bad.\r\n\r\nSure, up to you, it is just a style nit :)\r\n\r\n\r\nI still think `s = ScriptFromHex(\"0302ff030302ff03\")` is better, because it is shorter, more consistent in the test case, and comes with the same checks at roughly the same CPU cost.\r\n\r\nIf you really want to change it, maybe it can be done in the follow-up that allows `std::byte` serialization into script? This would also avoid having to touch the same lines of code twice?\r\n\r\n\r\nEdit: If you really want to keep it here, shouldn't it accept any byte container, to avoid having to touch the same lines of code twice?\r\n\r\n```cpp\r\ntemplate <typename T>\r\nCScript ToScript(const T& byte_container)\r\n{\r\n   auto container{MakeUCharSpan(byte_container)};\r\n    return {container.data(), container.data() + container.size()};\r\n}",
      "created_at": "2024-08-20T08:01:02Z",
      "updated_at": "2024-08-20T08:46:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722867989",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722867989"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1365,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722890964",
      "pull_request_review_id": 2247292013,
      "id": 1722890964,
      "node_id": "PRRC_kwDOABII585msTrU",
      "diff_hunk": "@@ -93,13 +94,11 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n         return false;\n \n     // plaintext will always be equal to or lesser than length of ciphertext\n-    int nLen = vchCiphertext.size();\n-\n-    vchPlaintext.resize(nLen);\n+    vchPlaintext.resize(vchCiphertext.size());\n \n     AES256CBCDecrypt dec(vchKey.data(), vchIV.data(), true);\n-    nLen = dec.Decrypt(vchCiphertext.data(), vchCiphertext.size(), vchPlaintext.data());\n-    if(nLen == 0)\n+    int nLen = dec.Decrypt(vchCiphertext.data(), vchCiphertext.size(), vchPlaintext.data());\n+    if (nLen == 0)",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 35,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "08a880de6c94bc84c1f43a3845e1645d3eb67607",
      "in_reply_to_id": 1722843198,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The commit is modifying the line just above the `if`, and then the second commit modifies both (and it keeps the second commit a pure rename).\r\n\r\nIs the concern that devs running `git blame` will have to exclude multiple commits?",
      "created_at": "2024-08-20T08:18:10Z",
      "updated_at": "2024-08-20T08:18:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722890964",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722890964"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722903409",
      "pull_request_review_id": 2247312123,
      "id": 1722903409,
      "node_id": "PRRC_kwDOABII585msWtx",
      "diff_hunk": "@@ -114,26 +114,26 @@ bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vch\n     return cKeyCrypter.Encrypt(vchPlaintext, vchCiphertext);\n }\n \n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n+bool DecryptSecret(const CKeyingMaterial& master_key, const std::vector<unsigned char>& ciphertext, const uint256& iv, CKeyingMaterial& plaintext)\n {\n-    CCrypter cKeyCrypter;\n-    static_assert(WALLET_CRYPTO_IV_SIZE <= std::remove_reference<decltype(nIV)>::type::size());\n-    std::vector<unsigned char> chIV{nIV.begin(), nIV.begin() + WALLET_CRYPTO_IV_SIZE};\n-    if (!cKeyCrypter.SetKey(vMasterKey, chIV))\n+    CCrypter key_crypter;\n+    static_assert(WALLET_CRYPTO_IV_SIZE <= std::remove_reference<decltype(iv)>::type::size());\n+    std::vector<unsigned char> iv_prefix{iv.begin(), iv.begin() + WALLET_CRYPTO_IV_SIZE};\n+    if (!key_crypter.SetKey(master_key, iv_prefix))",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 96,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "8ad548f389f6abd16db39dadafe3fbeefaedec3a",
      "in_reply_to_id": 1722846451,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Aha, hadn't fully internalized that braces were only allowed to be skip if the then-statement appeared on the same line.\r\n\r\nWill fix here and possibly other places if I retouch.\r\n\r\nGuess you prefer not hoisting up the `return false;` onto the same line since it disrupts `git blame`?",
      "created_at": "2024-08-20T08:26:31Z",
      "updated_at": "2024-08-20T08:26:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722903409",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722903409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722911225",
      "pull_request_review_id": 2247324332,
      "id": 1722911225,
      "node_id": "PRRC_kwDOABII585msYn5",
      "diff_hunk": "@@ -93,13 +94,11 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n         return false;\n \n     // plaintext will always be equal to or lesser than length of ciphertext\n-    int nLen = vchCiphertext.size();\n-\n-    vchPlaintext.resize(nLen);\n+    vchPlaintext.resize(vchCiphertext.size());\n \n     AES256CBCDecrypt dec(vchKey.data(), vchIV.data(), true);\n-    nLen = dec.Decrypt(vchCiphertext.data(), vchCiphertext.size(), vchPlaintext.data());\n-    if(nLen == 0)\n+    int nLen = dec.Decrypt(vchCiphertext.data(), vchCiphertext.size(), vchPlaintext.data());\n+    if (nLen == 0)",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 35,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "08a880de6c94bc84c1f43a3845e1645d3eb67607",
      "in_reply_to_id": 1722843198,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Is the concern that devs running `git blame` will have to exclude multiple commits?\r\n\r\nYes. Repeatedly modifying the same lines of code can not be avoided sometimes, but seems better to minimize, because:\r\n\r\n* (as you say) It increases the `git blame` depth, and decreases the usefulness of the `git log -S` parity search (or similar tools)\r\n* Reviewers will have to look at the same line twice, which may take more time\r\n\r\nObviously this conflicts with the desire to keep unrelated changes in  separate commits, but I think changing whitespace can almost always be done in the commit that touches the line. (At least in this change, it seems applicable)",
      "created_at": "2024-08-20T08:30:48Z",
      "updated_at": "2024-08-20T08:30:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722911225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722911225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722931351",
      "pull_request_review_id": 2247357596,
      "id": 1722931351,
      "node_id": "PRRC_kwDOABII585msdiX",
      "diff_hunk": "@@ -200,23 +203,15 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n \n BOOST_AUTO_TEST_CASE(util_HexStr)\n {\n-    BOOST_CHECK_EQUAL(\n-        HexStr(ParseHex_expected),\n-        \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n-\n-    BOOST_CHECK_EQUAL(\n-        HexStr(Span{ParseHex_expected}.last(0)),\n-        \"\");\n-\n-    BOOST_CHECK_EQUAL(\n-        HexStr(Span{ParseHex_expected}.first(0)),\n-        \"\");\n+    BOOST_CHECK_EQUAL(HexStr(HEX_PARSE_OUTPUT), HEX_PARSE_INPUT);\n+    BOOST_CHECK_EQUAL(HexStr(Span{HEX_PARSE_OUTPUT}.last(0)), \"\");\n+    BOOST_CHECK_EQUAL(HexStr(Span{HEX_PARSE_OUTPUT}.first(0)), \"\");\n \n     {\n-        const std::vector<char> in_s{ParseHex_expected, ParseHex_expected + 5};\n+        constexpr char out_exp[] = \"04678afdb0\";",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 85,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "2c68649f0932dac146b941fb6b4e2fbc52fbd8a0",
      "in_reply_to_id": 1722852311,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My goal was to make it `constexpr`. (`MakeUCharSpan` and `MakeByteSpan` used on the lines below are faux-`constexpr` since they call functions that cannot be `constexpr` as they use `reinterpret_cast`).\r\n\r\nA possible but noisier alternative, keeping `string` would be:\r\n```C++\r\nstatic constexpr std::string out_exp{\"04678afdb0\"};\r\n```\r\n`string_view` might be a good compromise:\r\n```C++\r\nconstexpr std::string_view out_exp{\"04678afdb0\"};\r\n```\r\nI general having a plain C-array is more terse and narrows what the programmer (and compiler) can expect the type to do, so I prefer it in cases like this. But will switch to `string_view` if I retouch.",
      "created_at": "2024-08-20T08:44:42Z",
      "updated_at": "2024-08-20T08:44:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722931351",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722931351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722962985",
      "pull_request_review_id": 2247410298,
      "id": 1722962985,
      "node_id": "PRRC_kwDOABII585mslQp",
      "diff_hunk": "@@ -200,23 +203,15 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n \n BOOST_AUTO_TEST_CASE(util_HexStr)\n {\n-    BOOST_CHECK_EQUAL(\n-        HexStr(ParseHex_expected),\n-        \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n-\n-    BOOST_CHECK_EQUAL(\n-        HexStr(Span{ParseHex_expected}.last(0)),\n-        \"\");\n-\n-    BOOST_CHECK_EQUAL(\n-        HexStr(Span{ParseHex_expected}.first(0)),\n-        \"\");\n+    BOOST_CHECK_EQUAL(HexStr(HEX_PARSE_OUTPUT), HEX_PARSE_INPUT);\n+    BOOST_CHECK_EQUAL(HexStr(Span{HEX_PARSE_OUTPUT}.last(0)), \"\");\n+    BOOST_CHECK_EQUAL(HexStr(Span{HEX_PARSE_OUTPUT}.first(0)), \"\");\n \n     {\n-        const std::vector<char> in_s{ParseHex_expected, ParseHex_expected + 5};\n+        constexpr char out_exp[] = \"04678afdb0\";",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 85,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "2c68649f0932dac146b941fb6b4e2fbc52fbd8a0",
      "in_reply_to_id": 1722852311,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I general having a plain C-array is more terse and narrows what the programmer (and compiler) can expect the type to do, so I prefer it in cases like this. But will switch to `string_view` if I retouch.\r\n\r\nI guess I disagree that C-arrays should be preferred. Let's recall the beginning of this pull request (https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2208857200) which fixed an issue where a raw C-pointer was passed incorrectly. (C-arrays allow silent conversion into a raw C-pointer, so at least `std::array` should be used, if you really want to use arrays).\r\n\r\nAlso, `sizeof` (which is called one line below) on the raw C-array may or may not count the null terminator, depending on how the array was constructed, which seems like another footgun.\r\n\r\nThough, your code is correct and this is just a style nit, so anything is fine here.",
      "created_at": "2024-08-20T09:05:26Z",
      "updated_at": "2024-08-20T09:05:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722962985",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722962985"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722964257",
      "pull_request_review_id": 2247412862,
      "id": 1722964257,
      "node_id": "PRRC_kwDOABII585mslkh",
      "diff_hunk": "@@ -1361,6 +1361,12 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template <size_t N>\n+CScript ToScript(const std::array<uint8_t, N>& array)",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "309d8b783109eb52a5596712b19210271c8f882e",
      "in_reply_to_id": 1721377340,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Are you suggesting adding `MakeUCharSpan` so that one could send in a raw array that would otherwise not have `.data()` and `.size()`?\r\n\r\nWouldn't the call to `MakeUCharSpan` have to be re-touched if we switch to using only `std::byte` for `CScript`?",
      "created_at": "2024-08-20T09:06:17Z",
      "updated_at": "2024-08-20T09:06:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722964257",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722964257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1365,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722968337",
      "pull_request_review_id": 2247420878,
      "id": 1722968337,
      "node_id": "PRRC_kwDOABII585msmkR",
      "diff_hunk": "@@ -1361,6 +1361,12 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template <size_t N>\n+CScript ToScript(const std::array<uint8_t, N>& array)",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "309d8b783109eb52a5596712b19210271c8f882e",
      "in_reply_to_id": 1721377340,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Are you suggesting adding `MakeUCharSpan` so that one could send in a raw array that would otherwise not have `.data()` and `.size()`?\r\n\r\nNo, just to hide the reinterpret cast behind a curtain\r\n\r\n> Wouldn't the call to MakeUCharSpan have to be re-touched if we switch to using only std::byte for CScript?\r\n\r\nYes, but that would be just two lines of code touched, as opposed to \"many\", no?",
      "created_at": "2024-08-20T09:08:57Z",
      "updated_at": "2024-08-20T09:08:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722968337",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722968337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1365,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722984822",
      "pull_request_review_id": 2247450630,
      "id": 1722984822,
      "node_id": "PRRC_kwDOABII585msql2",
      "diff_hunk": "@@ -1361,6 +1361,12 @@ static CScript ScriptFromHex(const std::string& str)\n     return CScript(data.begin(), data.end());\n }\n \n+template <size_t N>\n+CScript ToScript(const std::array<uint8_t, N>& array)",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 5,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "309d8b783109eb52a5596712b19210271c8f882e",
      "in_reply_to_id": 1721377340,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> No, just to hide the reinterpret cast behind a curtain\r\n\r\nAha, so you are concerned about the element type of the container mismatching, but still within allowable realm of `UCharCast`, got it.\r\n\r\nWait.. that will allow me to change `ToScript(HexLiteral<uint8_t>(` into `ToScript(HexLiteral(` - thanks!",
      "created_at": "2024-08-20T09:19:31Z",
      "updated_at": "2024-08-20T09:19:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1722984822",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1722984822"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1365,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723086287",
      "pull_request_review_id": 2247618781,
      "id": 1723086287,
      "node_id": "PRRC_kwDOABII585mtDXP",
      "diff_hunk": "@@ -200,23 +203,15 @@ BOOST_AUTO_TEST_CASE(parse_hex)\n \n BOOST_AUTO_TEST_CASE(util_HexStr)\n {\n-    BOOST_CHECK_EQUAL(\n-        HexStr(ParseHex_expected),\n-        \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n-\n-    BOOST_CHECK_EQUAL(\n-        HexStr(Span{ParseHex_expected}.last(0)),\n-        \"\");\n-\n-    BOOST_CHECK_EQUAL(\n-        HexStr(Span{ParseHex_expected}.first(0)),\n-        \"\");\n+    BOOST_CHECK_EQUAL(HexStr(HEX_PARSE_OUTPUT), HEX_PARSE_INPUT);\n+    BOOST_CHECK_EQUAL(HexStr(Span{HEX_PARSE_OUTPUT}.last(0)), \"\");\n+    BOOST_CHECK_EQUAL(HexStr(Span{HEX_PARSE_OUTPUT}.first(0)), \"\");\n \n     {\n-        const std::vector<char> in_s{ParseHex_expected, ParseHex_expected + 5};\n+        constexpr char out_exp[] = \"04678afdb0\";",
      "path": "src/test/util_tests.cpp",
      "position": 1,
      "original_position": 85,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "2c68649f0932dac146b941fb6b4e2fbc52fbd8a0",
      "in_reply_to_id": 1722852311,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree `sizeof` was more of a footgun.",
      "created_at": "2024-08-20T10:31:17Z",
      "updated_at": "2024-08-20T10:31:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1723086287",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723086287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723087133",
      "pull_request_review_id": 2247620156,
      "id": 1723087133,
      "node_id": "PRRC_kwDOABII585mtDkd",
      "diff_hunk": "@@ -114,26 +114,26 @@ bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vch\n     return cKeyCrypter.Encrypt(vchPlaintext, vchCiphertext);\n }\n \n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n+bool DecryptSecret(const CKeyingMaterial& master_key, const std::vector<unsigned char>& ciphertext, const uint256& iv, CKeyingMaterial& plaintext)\n {\n-    CCrypter cKeyCrypter;\n-    static_assert(WALLET_CRYPTO_IV_SIZE <= std::remove_reference<decltype(nIV)>::type::size());\n-    std::vector<unsigned char> chIV{nIV.begin(), nIV.begin() + WALLET_CRYPTO_IV_SIZE};\n-    if (!cKeyCrypter.SetKey(vMasterKey, chIV))\n+    CCrypter key_crypter;\n+    static_assert(WALLET_CRYPTO_IV_SIZE <= std::remove_reference<decltype(iv)>::type::size());\n+    std::vector<unsigned char> iv_prefix{iv.begin(), iv.begin() + WALLET_CRYPTO_IV_SIZE};\n+    if (!key_crypter.SetKey(master_key, iv_prefix))",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 96,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "8ad548f389f6abd16db39dadafe3fbeefaedec3a",
      "in_reply_to_id": 1722846451,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done in latest push without any hoisting.",
      "created_at": "2024-08-20T10:31:54Z",
      "updated_at": "2024-08-20T10:31:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1723087133",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723087133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723098790",
      "pull_request_review_id": 2247641047,
      "id": 1723098790,
      "node_id": "PRRC_kwDOABII585mtGam",
      "diff_hunk": "@@ -115,26 +118,29 @@ bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vch\n     return cKeyCrypter.Encrypt(vchPlaintext, vchCiphertext);\n }\n \n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n+bool DecryptSecret(const CKeyingMaterial& master_key, const std::span<const unsigned char> ciphertext, const uint256& iv, CKeyingMaterial& plaintext)\n {\n-    CCrypter cKeyCrypter;\n-    std::vector<unsigned char> chIV(WALLET_CRYPTO_IV_SIZE);\n-    memcpy(chIV.data(), &nIV, WALLET_CRYPTO_IV_SIZE);\n-    if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n+    CCrypter key_crypter;\n+    static_assert(WALLET_CRYPTO_IV_SIZE <= std::remove_reference<decltype(iv)>::type::size());",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 104,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "e29741857e900d933b5cf0fb22e3a63bfa1ecd6a",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `std::remove_reference_t`\r\n```suggestion\r\n    static_assert(WALLET_CRYPTO_IV_SIZE <= std::remove_reference_t<decltype(iv)>::size());\r\n```",
      "created_at": "2024-08-20T10:41:27Z",
      "updated_at": "2024-08-20T11:17:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1723098790",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723098790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723140049",
      "pull_request_review_id": 2247641047,
      "id": 1723140049,
      "node_id": "PRRC_kwDOABII585mtQfR",
      "diff_hunk": "@@ -88,19 +91,20 @@ bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned\n     return true;\n }\n \n-bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext) const\n+bool CCrypter::Decrypt(const std::vector<unsigned char>& ciphertext, CKeyingMaterial& plaintext) const\n {\n     if (!fKeySet)\n         return false;\n \n     // plaintext will always be equal to or lesser than length of ciphertext\n-    vchPlaintext.resize(vchCiphertext.size());\n+    plaintext.resize(ciphertext.size());\n \n     AES256CBCDecrypt dec(vchKey.data(), vchIV.data(), true);\n-    int nLen = dec.Decrypt(vchCiphertext.data(), vchCiphertext.size(), vchPlaintext.data());\n-    if(nLen == 0)\n+    int len = dec.Decrypt(ciphertext.data(), ciphertext.size(), plaintext.data());",
      "path": "src/wallet/crypter.cpp",
      "position": 83,
      "original_position": 77,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "bad1ffb725014886badbeecb80f1e9ef82891e6c",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit to reduce variable scope and make it slightly more readable:\r\n\r\n<details>\r\n<summary>git diff on bad1ffb725</summary>\r\n\r\n```diff\r\ndiff --git a/src/wallet/crypter.cpp b/src/wallet/crypter.cpp\r\nindex a574c8909e..a4b1fd9b3b 100644\r\n--- a/src/wallet/crypter.cpp\r\n+++ b/src/wallet/crypter.cpp\r\n@@ -100,12 +100,11 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& ciphertext, CKeyingMate\r\n     plaintext.resize(ciphertext.size());\r\n \r\n     AES256CBCDecrypt dec(vchKey.data(), vchIV.data(), true);\r\n-    int len = dec.Decrypt(ciphertext.data(), ciphertext.size(), plaintext.data());\r\n-    if (len == 0) {\r\n-        return false;\r\n+    if (int len{dec.Decrypt(ciphertext.data(), ciphertext.size(), plaintext.data())}) {\r\n+        plaintext.resize(len);\r\n+        return true;\r\n     }\r\n-    plaintext.resize(len);\r\n-    return true;\r\n+    return false;\r\n }\r\n \r\n bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2024-08-20T11:16:55Z",
      "updated_at": "2024-08-20T11:17:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1723140049",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723140049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 103,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723158537",
      "pull_request_review_id": 2247741034,
      "id": 1723158537,
      "node_id": "PRRC_kwDOABII585mtVAJ",
      "diff_hunk": "@@ -93,13 +94,11 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n         return false;\n \n     // plaintext will always be equal to or lesser than length of ciphertext\n-    int nLen = vchCiphertext.size();\n-\n-    vchPlaintext.resize(nLen);\n+    vchPlaintext.resize(vchCiphertext.size());\n \n     AES256CBCDecrypt dec(vchKey.data(), vchIV.data(), true);\n-    nLen = dec.Decrypt(vchCiphertext.data(), vchCiphertext.size(), vchPlaintext.data());\n-    if(nLen == 0)\n+    int nLen = dec.Decrypt(vchCiphertext.data(), vchCiphertext.size(), vchPlaintext.data());\n+    if (nLen == 0)",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 35,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "08a880de6c94bc84c1f43a3845e1645d3eb67607",
      "in_reply_to_id": 1722843198,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think adding \"missing\" space can be done in the rename commit.\r\n\r\nAgree, would have preferred it that way as well.\r\nBut to be fair, git can ignore whitespaces during blame: https://git-scm.com/docs/git-blame#Documentation/git-blame.txt--w\r\n",
      "created_at": "2024-08-20T11:32:40Z",
      "updated_at": "2024-08-20T11:32:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1723158537",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723158537"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723168808",
      "pull_request_review_id": 2247757776,
      "id": 1723168808,
      "node_id": "PRRC_kwDOABII585mtXgo",
      "diff_hunk": "@@ -88,19 +91,20 @@ bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned\n     return true;\n }\n \n-bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext) const\n+bool CCrypter::Decrypt(const std::vector<unsigned char>& ciphertext, CKeyingMaterial& plaintext) const\n {\n     if (!fKeySet)\n         return false;\n \n     // plaintext will always be equal to or lesser than length of ciphertext\n-    vchPlaintext.resize(vchCiphertext.size());\n+    plaintext.resize(ciphertext.size());\n \n     AES256CBCDecrypt dec(vchKey.data(), vchIV.data(), true);\n-    int nLen = dec.Decrypt(vchCiphertext.data(), vchCiphertext.size(), vchPlaintext.data());\n-    if(nLen == 0)\n+    int len = dec.Decrypt(ciphertext.data(), ciphertext.size(), plaintext.data());",
      "path": "src/wallet/crypter.cpp",
      "position": 83,
      "original_position": 77,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "bad1ffb725014886badbeecb80f1e9ef82891e6c",
      "in_reply_to_id": 1723140049,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Started changing it based on your comment, but as there is already another if-return false above in the untouched code, I think it's more consistent to keep as-is.",
      "created_at": "2024-08-20T11:41:28Z",
      "updated_at": "2024-08-20T11:43:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1723168808",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723168808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 103,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723169146",
      "pull_request_review_id": 2247757776,
      "id": 1723169146,
      "node_id": "PRRC_kwDOABII585mtXl6",
      "diff_hunk": "@@ -115,26 +118,29 @@ bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vch\n     return cKeyCrypter.Encrypt(vchPlaintext, vchCiphertext);\n }\n \n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n+bool DecryptSecret(const CKeyingMaterial& master_key, const std::span<const unsigned char> ciphertext, const uint256& iv, CKeyingMaterial& plaintext)\n {\n-    CCrypter cKeyCrypter;\n-    std::vector<unsigned char> chIV(WALLET_CRYPTO_IV_SIZE);\n-    memcpy(chIV.data(), &nIV, WALLET_CRYPTO_IV_SIZE);\n-    if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n+    CCrypter key_crypter;\n+    static_assert(WALLET_CRYPTO_IV_SIZE <= std::remove_reference<decltype(iv)>::type::size());",
      "path": "src/wallet/crypter.cpp",
      "position": 1,
      "original_position": 104,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "e29741857e900d933b5cf0fb22e3a63bfa1ecd6a",
      "in_reply_to_id": 1723098790,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, taking that!",
      "created_at": "2024-08-20T11:41:47Z",
      "updated_at": "2024-08-20T11:43:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1723169146",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723169146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723523414",
      "pull_request_review_id": 2248351160,
      "id": 1723523414,
      "node_id": "PRRC_kwDOABII585muuFW",
      "diff_hunk": "@@ -1355,10 +1355,16 @@ BOOST_AUTO_TEST_CASE(script_GetScriptAsm)\n     BOOST_CHECK_EQUAL(derSig + \"83 \" + pubKey, ScriptToAsmStr(CScript() << ToByteVector(ParseHex(derSig + \"83\")) << vchPubKey));\n }\n \n+template <typename T>\n+CScript ToScript(const T& byte_container)\n+{\n+    auto container{MakeUCharSpan(byte_container)};",
      "path": "src/test/script_tests.cpp",
      "position": 1,
      "original_position": 7,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "af751d7030ccb5c2e3e699bd90655a53529953a3",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: add util::HexLiteral and util::Vec using statements\" (af751d7030ccb5c2e3e699bd90655a53529953a3)\r\n\r\nRenaming `container` variable to `span` would seem clearer, since this is now a span not a generic container.\r\n\r\nAlso this commit message is out of date since it is no longer using util::Vec, and the commit is no longer mostly about adding using statements. I'd probably just call it \"Prepare for HexLiteral scripted-diff\"",
      "created_at": "2024-08-20T15:30:13Z",
      "updated_at": "2024-08-20T16:37:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1723523414",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723523414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723537853",
      "pull_request_review_id": 2248351160,
      "id": 1723537853,
      "node_id": "PRRC_kwDOABII585muxm9",
      "diff_hunk": "@@ -17,56 +17,62 @@ BOOST_FIXTURE_TEST_SUITE(wallet_crypto_tests, BasicTestingSetup)\n class TestCrypter\n {\n public:\n-static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n-                 const std::vector<unsigned char>& correctKey = {}, const std::vector<unsigned char>& correctIV = {})\n+static void TestPassphraseSingle(const std::vector<unsigned char>& salt, const SecureString& passphrase, uint32_t rounds,\n+                 const std::vector<unsigned char>& correct_key = {}, const std::vector<unsigned char>& correct_iv = {})\n {\n     CCrypter crypt;\n-    crypt.SetKeyFromPassphrase(passphrase, vchSalt, rounds, 0);\n-\n-    if(!correctKey.empty())\n-        BOOST_CHECK_MESSAGE(memcmp(crypt.vchKey.data(), correctKey.data(), crypt.vchKey.size()) == 0,\n-            HexStr(crypt.vchKey) + std::string(\" != \") + HexStr(correctKey));\n-    if(!correctIV.empty())\n-        BOOST_CHECK_MESSAGE(memcmp(crypt.vchIV.data(), correctIV.data(), crypt.vchIV.size()) == 0,\n-            HexStr(crypt.vchIV) + std::string(\" != \") + HexStr(correctIV));\n+    crypt.SetKeyFromPassphrase(passphrase, salt, rounds, 0);\n+\n+    if (!correct_key.empty()) {\n+        BOOST_CHECK_MESSAGE(memcmp(crypt.vchKey.data(), correct_key.data(), crypt.vchKey.size()) == 0,\n+            HexStr(crypt.vchKey) + std::string(\" != \") + HexStr(correct_key));\n+    }\n+    if (!correct_iv.empty()) {\n+        BOOST_CHECK_MESSAGE(memcmp(crypt.vchIV.data(), correct_iv.data(), crypt.vchIV.size()) == 0,\n+            HexStr(crypt.vchIV) + std::string(\" != \") + HexStr(correct_iv));\n+    }\n }\n \n-static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n-                 const std::vector<unsigned char>& correctKey = {}, const std::vector<unsigned char>& correctIV = {})\n+static void TestPassphrase(const std::vector<unsigned char>& salt, const SecureString& passphrase, uint32_t rounds,\n+                 const std::vector<unsigned char>& correct_key = {}, const std::vector<unsigned char>& correct_iv = {})\n {\n-    TestPassphraseSingle(vchSalt, passphrase, rounds, correctKey, correctIV);\n-    for(SecureString::const_iterator i(passphrase.begin()); i != passphrase.end(); ++i)\n-        TestPassphraseSingle(vchSalt, SecureString(i, passphrase.end()), rounds);\n+    TestPassphraseSingle(salt, passphrase, rounds, correct_key, correct_iv);\n+    for (SecureString::const_iterator it{passphrase.begin()}; it != passphrase.end(); ++it) {\n+        TestPassphraseSingle(salt, SecureString{it, passphrase.end()}, rounds);\n+    }\n }\n \n-static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext,\n-                        const std::vector<unsigned char>& vchCorrectPlaintext = {})\n+static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& ciphertext,\n+                        const std::vector<unsigned char>& correct_plaintext = {})\n {\n-    CKeyingMaterial vchDecrypted;\n-    crypt.Decrypt(vchCiphertext, vchDecrypted);\n-    if (vchPlaintext.size())\n-        BOOST_CHECK_EQUAL_COLLECTIONS(vchDecrypted.begin(), vchDecrypted.end(), vchCorrectPlaintext.begin(), vchCorrectPlaintext.end());\n+    CKeyingMaterial decrypted;\n+    crypt.Decrypt(ciphertext, decrypted);\n+    if (!correct_plaintext.empty()) {\n+        BOOST_CHECK_EQUAL_COLLECTIONS(decrypted.begin(), decrypted.end(), correct_plaintext.begin(), correct_plaintext.end());\n+    }\n }\n \n-static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchPlaintext,\n-                       const std::vector<unsigned char>& vchCiphertextCorrect = {})\n+static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& plaintext,\n+                       const std::vector<unsigned char>& correct_ciphertext = {})\n {\n-    std::vector<unsigned char> vchCiphertext;\n-    crypt.Encrypt(vchPlaintext, vchCiphertext);\n+    std::vector<unsigned char> ciphertext;\n+    crypt.Encrypt(plaintext, ciphertext);\n \n-    if (!vchCiphertextCorrect.empty())\n-        BOOST_CHECK_EQUAL_COLLECTIONS(vchCiphertext.begin(), vchCiphertext.end(), vchCiphertextCorrect.begin(), vchCiphertextCorrect.end());\n+    if (!correct_ciphertext.empty()) {\n+        BOOST_CHECK_EQUAL_COLLECTIONS(ciphertext.begin(), ciphertext.end(), correct_ciphertext.begin(), correct_ciphertext.end());\n+    }\n \n-    const std::vector<unsigned char> vchPlaintext2(vchPlaintext.begin(), vchPlaintext.end());\n-    TestDecrypt(crypt, vchCiphertext, vchPlaintext2);\n+    const std::vector<unsigned char> plaintext2(plaintext.begin(), plaintext.end());\n+    TestDecrypt(crypt, ciphertext, /*correct_plaintext=*/plaintext2);\n }\n \n-static void TestEncrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchPlaintextIn,\n-                       const std::vector<unsigned char>& vchCiphertextCorrect = {})\n+static void TestEncrypt(const CCrypter& crypt, const std::vector<unsigned char>& plaintext,\n+                       const std::vector<unsigned char>& correct_ciphertext = {})\n {\n-    TestEncryptSingle(crypt, CKeyingMaterial{vchPlaintextIn.begin(), vchPlaintextIn.end()}, vchCiphertextCorrect);\n-    for(std::vector<unsigned char>::const_iterator i(vchPlaintextIn.begin()); i != vchPlaintextIn.end(); ++i)\n-        TestEncryptSingle(crypt, CKeyingMaterial(i, vchPlaintextIn.end()));\n+    TestEncryptSingle(crypt, CKeyingMaterial{plaintext.begin(), plaintext.end()}, correct_ciphertext);\n+    for (auto it{plaintext.begin()}; it != plaintext.end(); ++it) {",
      "path": "src/wallet/test/wallet_crypto_tests.cpp",
      "position": 102,
      "original_position": 91,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "7713b5fb5c5bf0897037b9857a4adfbbc7e8db56",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: de-Hungarianize CCrypter\" (7713b5fb5c5bf0897037b9857a4adfbbc7e8db56)\r\n\r\nCommit message seems to suggest that this is only changing names and adding braces, but this is also switching an iterator type to auto. Might be good to mention in commit message, assuming this change wasn't intended for a different commit.",
      "created_at": "2024-08-20T15:40:14Z",
      "updated_at": "2024-08-20T16:37:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1723537853",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723537853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723595926",
      "pull_request_review_id": 2248469794,
      "id": 1723595926,
      "node_id": "PRRC_kwDOABII585mu_yW",
      "diff_hunk": "@@ -369,4 +370,44 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ *\n+ * @note It may be preferable to use Vec(HexLiteral(...)) instead of\n+ * HexLiteral() to save stack space when declaring a local variable, if the hex\n+ * string is large. Alternately the variable could be declared constexpr to\n+ * avoid using stack space.\n+ */\n+template <typename Byte = std::byte, size_t N>\n+consteval std::array<Byte, N / 2> HexLiteral(const char (&hex_str)[N])",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 30,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720769066,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see that my example above wasn't working with GCC and had a stupid `sizeof` bug.\r\n\r\nHere's an alternative using [string literal operator template](https://en.cppreference.com/w/cpp/language/user_literal#Literal_operators) which seems to be working correctly for me:\r\n```C++\r\ntemplate<size_t N>\r\nstruct _Hex {\r\n    std::array<std::byte, N / 2> hex{};\r\n    consteval _Hex(const char (&hex_str)[N]) requires (N % 2 == 1) {\r\n        if (hex_str[N - 1]) throw \"null terminator required\";\r\n        for (std::size_t i = 0; i < hex.size(); ++i) {\r\n            hex[i] = static_cast<std::byte>(\r\n                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\r\n                 ConstevalHexDigit(hex_str[2 * i + 1]));\r\n        }\r\n    }\r\n};\r\n\r\ntemplate<_Hex str>\r\nconsteval auto operator\"\" _hex() { return str.hex; }\r\n\r\ntemplate<_Hex str>\r\nconstexpr auto operator\"\" _hex_v() { return Vec(str.hex); }\r\n```\r\nused as\r\n```C++\r\nauto hex_array = \"9caaf126043eb5\"_hex;\r\nauto hex_vector = \"9caaf126043eb5\"_hex_v;\r\n```\r\n\r\n<details>\r\n<summary>string_hex test</summary>\r\n\r\n```C++\r\ndiff --git a/src/test/miner_tests.cpp b/src/test/miner_tests.cpp\r\n--- a/src/test/miner_tests.cpp\t(revision 424f8f4ef5042adf64764c65e85d5b25faf60e66)\r\n+++ b/src/test/miner_tests.cpp\t(date 1724169991324)\r\n@@ -29,6 +29,7 @@\r\n \r\n using node::BlockAssembler;\r\n using node::CBlockTemplate;\r\n+using util::ConstevalHexDigit;\r\n using util::HexLiteral;\r\n using util::Vec;\r\n \r\n@@ -660,4 +661,55 @@\r\n     TestPrioritisedMining(scriptPubKey, txFirst);\r\n }\r\n \r\n+/////////\r\n+\r\n+template<size_t N>\r\n+struct _Hex {\r\n+    std::array<std::byte, N / 2> hex;\r\n+    consteval _Hex(const char (&hex_str)[N]) requires (N % 2 == 1) {\r\n+        if (hex_str[N - 1]) throw \"null terminator required\";\r\n+        for (std::size_t i = 0; i < hex.size(); ++i) {\r\n+            hex[i] = static_cast<std::byte>(\r\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\r\n+                ConstevalHexDigit(hex_str[2 * i + 1]));\r\n+        }\r\n+    }\r\n+};\r\n+\r\n+template<_Hex str>\r\n+consteval auto operator\"\" _hex() { return str.hex; }\r\n+\r\n+template<_Hex str>\r\n+constexpr auto operator\"\" _hex_v() { return Vec(str.hex); }\r\n+\r\n+/////////\r\n+\r\n+template <typename Byte = std::byte, size_t N>\r\n+consteval std::array<Byte, N / 2> HexLiteral(const char (&hex_str)[N]) requires (N % 2 == 1) {\r\n+    if (hex_str[N - 1] != '\\0') throw \"null terminator required\";\r\n+    std::array<Byte, N / 2> rv{};\r\n+    size_t i = 0;\r\n+    for (auto& elem : rv) {\r\n+        auto hi = ConstevalHexDigit(hex_str[i++]) << 4;\r\n+        elem = static_cast<Byte>(hi | ConstevalHexDigit(hex_str[i++]));\r\n+    }\r\n+    return rv;\r\n+}\r\n+\r\n+BOOST_AUTO_TEST_CASE(string_hex)\r\n+{\r\n+    auto original = HexLiteral(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\r\n+    static_assert(std::is_same_v<decltype(original), std::array<std::byte, 65>>);\r\n+    std::cout << HexStr(original) << std::endl;\r\n+\r\n+    auto hex_value = \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\"_hex;\r\n+    static_assert(std::is_same_v<decltype(hex_value), std::array<std::byte, 65>>);\r\n+    std::cout << HexStr(hex_value) << std::endl;\r\n+\r\n+    auto hex_value2 = \"9caaf126043eb5\"_hex_v;\r\n+    static_assert(std::is_same_v<decltype(hex_value2), std::vector<std::byte>>);\r\n+    assert(hex_value2.size() == 7);\r\n+    std::cout << HexStr(hex_value2) << std::endl;\r\n+}\r\n+\r\n BOOST_AUTO_TEST_SUITE_END()\r\n```\r\n\r\n</details>\r\n\r\nSee: https://godbolt.org/z/qPz4Ex8dT",
      "created_at": "2024-08-20T16:14:43Z",
      "updated_at": "2024-08-21T17:00:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1723595926",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723595926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723616777",
      "pull_request_review_id": 2248351160,
      "id": 1723616777,
      "node_id": "PRRC_kwDOABII585mvE4J",
      "diff_hunk": "@@ -10,12 +10,13 @@\n #include <string>\n #include <vector>\n \n+using util::HexLiteral;\n \n static void Bech32Encode(benchmark::Bench& bench)\n {\n-    std::vector<uint8_t> v = ParseHex(\"c97f5a67ec381b760aeaf67573bc164845ff39a3bb26a1cee401ac67243b48db\");\n+    constexpr std::array<uint8_t, 32> v{HexLiteral<uint8_t>(\"c97f5a67ec381b760aeaf67573bc164845ff39a3bb26a1cee401ac67243b48db\")};",
      "path": "src/bench/bech32.cpp",
      "position": 1,
      "original_position": 9,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "288f995f71fd8e6f750d668e47237e64d893cc1f",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"refactor: Hand-replace some ParseHex -> util::HexLiteral\" (288f995f71fd8e6f750d668e47237e64d893cc1f)\r\n\r\nI feel like commit message could benefit from a summary of the changes it is making. Maybe would suggest:\r\n\r\n- The following scripted-diff commit will replace `ParseHex(...)` with `HexLiteral<uint8_t>(...)` but replacement will not work in cases where vectors are needed instead of arrays, and is not ideal in cases where std::byte can be used instead of uint8_t, so make replacements in these cases manually.\r\n",
      "created_at": "2024-08-20T16:28:42Z",
      "updated_at": "2024-08-20T16:37:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1723616777",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723616777"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723641345",
      "pull_request_review_id": 2248542069,
      "id": 1723641345,
      "node_id": "PRRC_kwDOABII585mvK4B",
      "diff_hunk": "@@ -369,4 +370,44 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ *\n+ * @note It may be preferable to use Vec(HexLiteral(...)) instead of\n+ * HexLiteral() to save stack space when declaring a local variable, if the hex\n+ * string is large. Alternately the variable could be declared constexpr to\n+ * avoid using stack space.\n+ */\n+template <typename Byte = std::byte, size_t N>\n+consteval std::array<Byte, N / 2> HexLiteral(const char (&hex_str)[N])",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 30,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720769066,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1723595926\r\n\r\n> Here's an alternative using [string literal operator template](https://en.cppreference.com/w/cpp/language/user_literal#Literal_operators) which seems to be working correctly for me:\r\n\r\nWow, that looks great! Assuming this works on compilers we need, it looks like a very nice solution that completely avoids problems I was [struggling with](https://github.com/bitcoin/bitcoin/pull/30377#issuecomment-2291521586) trying to get a function parameter to act like a template parameter.",
      "created_at": "2024-08-20T16:46:20Z",
      "updated_at": "2024-08-20T16:46:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1723641345",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723641345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723800889",
      "pull_request_review_id": 2248798685,
      "id": 1723800889,
      "node_id": "PRRC_kwDOABII585mvx05",
      "diff_hunk": "@@ -369,4 +370,44 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ *\n+ * @note It may be preferable to use Vec(HexLiteral(...)) instead of\n+ * HexLiteral() to save stack space when declaring a local variable, if the hex\n+ * string is large. Alternately the variable could be declared constexpr to\n+ * avoid using stack space.\n+ */\n+template <typename Byte = std::byte, size_t N>\n+consteval std::array<Byte, N / 2> HexLiteral(const char (&hex_str)[N])",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 30,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720769066,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That is awesome! Didn't realize I had to *enable* C++20 support on Godbolt. :man_facepalming:  Thank you for persisting @paplorinc! Will experiment with this.",
      "created_at": "2024-08-20T18:47:42Z",
      "updated_at": "2024-08-20T18:47:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1723800889",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723800889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1724656502",
      "pull_request_review_id": 2250150871,
      "id": 1724656502,
      "node_id": "PRRC_kwDOABII585mzCt2",
      "diff_hunk": "@@ -369,4 +370,44 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ *\n+ * @note It may be preferable to use Vec(HexLiteral(...)) instead of\n+ * HexLiteral() to save stack space when declaring a local variable, if the hex\n+ * string is large. Alternately the variable could be declared constexpr to\n+ * avoid using stack space.\n+ */\n+template <typename Byte = std::byte, size_t N>\n+consteval std::array<Byte, N / 2> HexLiteral(const char (&hex_str)[N])",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 30,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720769066,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Heh, nice. I didn't know that string literal operator templates are possible since C++20.",
      "created_at": "2024-08-21T08:31:22Z",
      "updated_at": "2024-08-21T08:31:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1724656502",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1724656502"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725043966",
      "pull_request_review_id": 2250790680,
      "id": 1725043966,
      "node_id": "PRRC_kwDOABII585m0hT-",
      "diff_hunk": "@@ -369,4 +370,44 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/** Converts from hex string literal to byte array at compile time.\n+ *\n+ * @note It may be preferable to use Vec(HexLiteral(...)) instead of\n+ * HexLiteral() to save stack space when declaring a local variable, if the hex\n+ * string is large. Alternately the variable could be declared constexpr to\n+ * avoid using stack space.\n+ */\n+template <typename Byte = std::byte, size_t N>\n+consteval std::array<Byte, N / 2> HexLiteral(const char (&hex_str)[N])",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 30,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720769066,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Even though the prior version had many ACKs, this reaches another level of awesome.\r\nInitial version using `\"\"_hex` now pushed in daba1a25a62e72e9797a134c6377d17a9274a25f with @l0rinc as main author of that commit! :tada: \r\n\r\nResolving this specific thread.",
      "created_at": "2024-08-21T13:20:20Z",
      "updated_at": "2024-08-21T13:20:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1725043966",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725043966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725284239",
      "pull_request_review_id": 2251172614,
      "id": 1725284239,
      "node_id": "PRRC_kwDOABII585m1b-P",
      "diff_hunk": "@@ -369,4 +371,57 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+} // namespace util\n+\n+/**\n+ * Converts from hex string literal to std::array<std::byte, N> at compile time.\n+ *\n+ * @note It may be preferable to use _hex_v instead of _hex to save stack space\n+ * when declaring a local variable, if the hex string is large. Alternately the\n+ * variable could be declared constexpr to avoid using stack space.\n+ */\n+template <util::detail::Hex str>\n+consteval auto operator\"\" _hex() { return str.bytes; }",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 52,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "4672a451efe65ed190b943be3cb2646344d06b56",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: Add consteval \"\"_hex[_v][_u8] literals\" (4672a451efe65ed190b943be3cb2646344d06b56)\r\n\r\nI think I'd suggest putting these in util namespace to avoid risk of name collisions, especially since the util library is used by libbitcoinkernel and can be used externally.\r\n\r\n```c++\r\nnamespace util {\r\ninline namespace hex_literals {\r\n// ...consteval auto operator\"\"_hex...\r\n} // inline namespace hex_literals\r\n} // namespace util\r\n```\r\n\r\nShould allow code to use these by adding `using namespace util::hex_literals` if I am reading https://stackoverflow.com/questions/38950008/using-string-literals-without-using-namespace-std correctly",
      "created_at": "2024-08-21T15:19:32Z",
      "updated_at": "2024-08-21T16:38:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1725284239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725284239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 413,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725291235",
      "pull_request_review_id": 2251172614,
      "id": 1725291235,
      "node_id": "PRRC_kwDOABII585m1drj",
      "diff_hunk": "@@ -369,4 +371,57 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+} // namespace util\n+\n+/**\n+ * Converts from hex string literal to std::array<std::byte, N> at compile time.\n+ *\n+ * @note It may be preferable to use _hex_v instead of _hex to save stack space\n+ * when declaring a local variable, if the hex string is large. Alternately the\n+ * variable could be declared constexpr to avoid using stack space.\n+ */\n+template <util::detail::Hex str>\n+consteval auto operator\"\" _hex() { return str.bytes; }",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 52,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "4672a451efe65ed190b943be3cb2646344d06b56",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: Add consteval \"\"_hex[_v][_u8] literals\" (4672a451efe65ed190b943be3cb2646344d06b56)\r\n\r\nI think from https://en.cppreference.com/w/cpp/language/user_literal#Literal_operators you want to get rid of the space between `\"\"` and `_hex`, because that seems to be a deprecated way of declaring literals. Though I'm not really clear why. (I found discussion about the space in https://github.com/fmtlib/fmt/issues/3607 though that didn't really clear things up either.)",
      "created_at": "2024-08-21T15:23:19Z",
      "updated_at": "2024-08-21T16:38:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1725291235",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725291235"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 413,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725358235",
      "pull_request_review_id": 2251172614,
      "id": 1725358235,
      "node_id": "PRRC_kwDOABII585m1uCb",
      "diff_hunk": "@@ -369,4 +371,57 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+} // namespace util\n+\n+/**\n+ * Converts from hex string literal to std::array<std::byte, N> at compile time.\n+ *\n+ * @note It may be preferable to use _hex_v instead of _hex to save stack space",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 47,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "4672a451efe65ed190b943be3cb2646344d06b56",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: Add consteval \"\"_hex[_v][_u8] literals\" (4672a451efe65ed190b943be3cb2646344d06b56)\r\n\r\nI think comment could also warn that difference between `_hex_v` and `_hex` suffixes is important when serializing, because vectors are always assumed to be variable-length and serialized with a size prefix, while arrays are considered fixed length and serialized without a prefix.",
      "created_at": "2024-08-21T16:06:25Z",
      "updated_at": "2024-08-21T16:38:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1725358235",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725358235"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 408,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725375903",
      "pull_request_review_id": 2251172614,
      "id": 1725375903,
      "node_id": "PRRC_kwDOABII585m1yWf",
      "diff_hunk": "@@ -3931,8 +3931,8 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         // If the peer is old enough to have the old alert system, send it the final alert.\n         if (greatest_common_version <= 70012) {\n-            const auto finalAlert{ParseHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\")};\n-            MakeAndPushMessage(pfrom, \"alert\", Span{finalAlert});\n+            constexpr auto finalAlert{\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\"_hex};\n+            MakeAndPushMessage(pfrom, \"alert\", finalAlert);",
      "path": "src/net_processing.cpp",
      "position": 16,
      "original_position": 7,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "ef20ce0586c5f9f7bdfed419ad4c3391ec22daa7",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: Add consteval \"\"_hex[_v][_u8] literals\" (4672a451efe65ed190b943be3cb2646344d06b56)\r\n\r\nI think commit message is not explaining reasons why different types of literals are being chosen, and not pointing out dangers of choosing the wrong type. For example, I think if _hex_v were used instead of _hex on this line, the code would still compile, but an improperly formatted network message would be sent.\r\n\r\nWould suggest:\r\n\r\n-  refactor: Hand-replace some ParseHex -> \"\"_hex \r\n   \r\n   A subsequent scripted-diff commit will replace ParseHex(\"...\") with \"...\"_hex_u8, but this replacement will not work in cases where vectors are needed instead of arrays, and is not ideal in cases where std::byte is accepted.<br/>\r\n  For example, it is currently necessary to use _hex_v_u8 when calling CScript operator<< because that operator does not currently support std::array or std::byte.<br/>\r\n  Conversely, it is incorrect to use _hex_v instead of _hex in net_processing.cpp for the MakeAndPushMessage argument, because if the argument is a std::vector it is considered variable-length and serialized with a size prefix, but if the argument is a std::array or Span is it considered fixed length and serialized without a prefix.<br/>\r\n  By the same logic, it is also safe to change the NUMS_H constant in pubkey.cpp from a std::vector to std::array because it is never serialized.\r\n",
      "created_at": "2024-08-21T16:20:18Z",
      "updated_at": "2024-08-21T16:43:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1725375903",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1725375903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3937,
      "original_line": 3937,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727209841",
      "pull_request_review_id": 2254756097,
      "id": 1727209841,
      "node_id": "PRRC_kwDOABII585m8yFx",
      "diff_hunk": "@@ -369,4 +371,60 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+/**\n+ * Converts from hex string literal to std::array<std::byte, N> at compile time.\n+ *\n+ * @note It may be preferable to use _hex_v instead of _hex to save stack space\n+ * when declaring a local variable, if the hex string is large. Alternately the\n+ * variable could be declared constexpr to avoid using stack space.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 49,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b8b10cea4f4331b5f587cfee6ac401fbbf0697a5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: Add consteval \"\"_hex[_v][_u8] literals\" (b8b10cea4f4331b5f587cfee6ac401fbbf0697a5)\r\n\r\nI think this comment is still missing a lot of important information. It doesn't mention that this is an alternative to ParseHex, and only mentions one of variant suffixes below, not describing the real considerations required to choose between these alternatives. The commit message does have this information, but it is unlikely someone trying use these functions will see the commit message. Would suggest improving local documentation here and probably dropping anything redundant in the commit message. I think the following would be a good comment:\r\n\r\n```c++\r\n/**\r\n * \"\"_hex is a compile-time user-defined literal returning a\r\n * `std::array<std::byte>`, equivalent to `ParseHex`. Variants include:\r\n *\r\n * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\r\n *   variable-length serialization.\r\n *\r\n * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\r\n *   incompatible.\r\n *\r\n * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\r\n *   `uint8_t`.\r\n *\r\n * @warning It may be necessary to use _v variants when serializing, or vice\r\n *   versa, because vectors are assumed to be variable-length and serialized\r\n *   with a size prefix, while arrays are considered fixed length and serialized\r\n *   with no prefix.\r\n *\r\n * @warning It may be preferable to use _v variants to save stack space when\r\n *   declaring local variables if hex strings are large. Alternately variables\r\n *   could be declared constexpr to avoid using stack space.\r\n *\r\n * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\r\n *   use `std::byte` instead of `unsigned char` and `uint8_t``.\r\n */\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "created_at": "2024-08-22T14:50:38Z",
      "updated_at": "2024-08-22T15:17:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1727209841",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727209841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 406,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727782615",
      "pull_request_review_id": 2255609564,
      "id": 1727782615,
      "node_id": "PRRC_kwDOABII585m-97X",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/** \n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ * \n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t``.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 46,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "3bf94248262c34d2a0d5f57d89ed2600656d60af",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n *   use `std::byte` instead of `unsigned char` and `uint8_t`.\r\n```",
      "created_at": "2024-08-22T20:38:06Z",
      "updated_at": "2024-08-22T20:38:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1727782615",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727782615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 407,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727788962",
      "pull_request_review_id": 2255619350,
      "id": 1727788962,
      "node_id": "PRRC_kwDOABII585m-_ei",
      "diff_hunk": "@@ -369,4 +371,60 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+/**\n+ * Converts from hex string literal to std::array<std::byte, N> at compile time.\n+ *\n+ * @note It may be preferable to use _hex_v instead of _hex to save stack space\n+ * when declaring a local variable, if the hex string is large. Alternately the\n+ * variable could be declared constexpr to avoid using stack space.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 49,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b8b10cea4f4331b5f587cfee6ac401fbbf0697a5",
      "in_reply_to_id": 1727209841,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```diff\r\n--- before\t2024-08-22 22:41:41.949431649 +0200\r\n+++ after\t2024-08-22 22:41:56.957571134 +0200\r\n@@ -1,7 +1,7 @@\r\n-/**\r\n+/** \r\n  * \"\"_hex is a compile-time user-defined literal returning a\r\n- * `std::array<std::byte>`, equivalent to `ParseHex`. Variants include:\r\n- *\r\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\r\n+ * \r\n  * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\r\n  *   variable-length serialization.\r\n  *\r\n@@ -21,5 +21,8 @@\r\n  *   could be declared constexpr to avoid using stack space.\r\n  *\r\n  * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\r\n- *   use `std::byte` instead of `unsigned char` and `uint8_t``.\r\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\r\n+ * \r\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\r\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\r\n  */\r\n```",
      "created_at": "2024-08-22T20:43:47Z",
      "updated_at": "2024-08-22T20:43:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1727788962",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727788962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 406,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727790062",
      "pull_request_review_id": 2255621082,
      "id": 1727790062,
      "node_id": "PRRC_kwDOABII585m-_vu",
      "diff_hunk": "@@ -369,4 +371,60 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+/**\n+ * Converts from hex string literal to std::array<std::byte, N> at compile time.\n+ *\n+ * @note It may be preferable to use _hex_v instead of _hex to save stack space\n+ * when declaring a local variable, if the hex string is large. Alternately the\n+ * variable could be declared constexpr to avoid using stack space.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 49,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b8b10cea4f4331b5f587cfee6ac401fbbf0697a5",
      "in_reply_to_id": 1727209841,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just spotted the whitespace at end of line.. fixing. :)\r\n\r\n(And yes this made me set my editor to remove trailing spaces by default).",
      "created_at": "2024-08-22T20:44:49Z",
      "updated_at": "2024-08-22T21:21:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1727790062",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727790062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 406,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727794829",
      "pull_request_review_id": 2255628525,
      "id": 1727794829,
      "node_id": "PRRC_kwDOABII585m_A6N",
      "diff_hunk": "@@ -369,4 +371,60 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+/**\n+ * Converts from hex string literal to std::array<std::byte, N> at compile time.\n+ *\n+ * @note It may be preferable to use _hex_v instead of _hex to save stack space\n+ * when declaring a local variable, if the hex string is large. Alternately the\n+ * variable could be declared constexpr to avoid using stack space.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 49,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "b8b10cea4f4331b5f587cfee6ac401fbbf0697a5",
      "in_reply_to_id": 1727209841,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(\"ParseHex()\" becomes a link in Doxygen).",
      "created_at": "2024-08-22T20:49:15Z",
      "updated_at": "2024-08-22T20:49:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1727794829",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1727794829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 406,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728787408",
      "pull_request_review_id": 2256959862,
      "id": 1728787408,
      "node_id": "PRRC_kwDOABII585nCzPQ",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {",
      "path": "src/util/strencodings.h",
      "position": 56,
      "original_position": 55,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there a specific reason to put `Hex` in the `detail` namespace? I think it could be useful to have `consteval` functions take a `Hex` parameter. For example, the `base_blob(string_view)` ctor can be quite elegantly deduplicated:\r\n\r\n<details>\r\n<summary>git diff on df92661444</summary>\r\n\r\n```diff\r\ndiff --git a/src/uint256.h b/src/uint256.h\r\nindex 4124a34719..3616b0f9cb 100644\r\n--- a/src/uint256.h\r\n+++ b/src/uint256.h\r\n@@ -16,6 +16,7 @@\r\n #include <cstdint>\r\n #include <cstring>\r\n #include <optional>\r\n+#include <ranges>\r\n #include <string>\r\n \r\n /** Template base class for fixed-sized opaque blobs. */\r\n@@ -41,7 +42,13 @@ public:\r\n         std::copy(vch.begin(), vch.end(), m_data.begin());\r\n     }\r\n \r\n-    consteval explicit base_blob(std::string_view hex_str);\r\n+    consteval base_blob(util::detail::Hex<WIDTH * 2 + 1> str)\r\n+    {\r\n+        std::ranges::reverse_copy(\r\n+            std::bit_cast<std::array<uint8_t, WIDTH>>(str.bytes),\r\n+            m_data.begin()\r\n+        );\r\n+    }\r\n \r\n     constexpr bool IsNull() const\r\n     {\r\n@@ -122,17 +129,6 @@ public:\r\n     }\r\n };\r\n \r\n-template <unsigned int BITS>\r\n-consteval base_blob<BITS>::base_blob(std::string_view hex_str)\r\n-{\r\n-    if (hex_str.length() != m_data.size() * 2) throw \"Hex string must fit exactly\";\r\n-    auto str_it = hex_str.rbegin();\r\n-    for (auto& elem : m_data) {\r\n-        auto lo = util::ConstevalHexDigit(*(str_it++));\r\n-        elem = (util::ConstevalHexDigit(*(str_it++)) << 4) | lo;\r\n-    }\r\n-}\r\n-\r\n namespace detail {\r\n /**\r\n  * Writes the hex string (in reverse byte order) into a new uintN_t object\r\n@@ -170,7 +166,7 @@ class uint256 : public base_blob<256> {\r\n public:\r\n     static std::optional<uint256> FromHex(std::string_view str) { return detail::FromHex<uint256>(str); }\r\n     constexpr uint256() = default;\r\n-    consteval explicit uint256(std::string_view hex_str) : base_blob<256>(hex_str) {}\r\n+    consteval explicit uint256(util::detail::Hex<65> hex_str) : base_blob<256>(hex_str) {}\r\n     constexpr explicit uint256(uint8_t v) : base_blob<256>(v) {}\r\n     constexpr explicit uint256(Span<const unsigned char> vch) : base_blob<256>(vch) {}\r\n     static const uint256 ZERO;\r\n\r\n```\r\n</details>",
      "created_at": "2024-08-23T10:58:09Z",
      "updated_at": "2024-08-23T14:56:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1728787408",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728787408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 413,
      "original_line": 413,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728947485",
      "pull_request_review_id": 2257201161,
      "id": 1728947485,
      "node_id": "PRRC_kwDOABII585nDaUd",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 36,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: Add consteval \"\"_hex[_v][_u8] literals\" (f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8)\r\n\r\n> It may be necessary to use _v variants when serializing, or vice versa, because\r\n\r\nWould make more sense as \"It could be necessary to use vector instead of array variants when serializing, or vice versa, because\"",
      "created_at": "2024-08-23T13:11:37Z",
      "updated_at": "2024-08-23T13:47:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1728947485",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728947485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 397,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728968413",
      "pull_request_review_id": 2257201161,
      "id": 1728968413,
      "node_id": "PRRC_kwDOABII585nDfbd",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 49,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: Add consteval \"\"_hex[_v][_u8] literals\" (f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8)\r\n\r\nMaybe change \"The reason\" to \"One reason\". I think even if C++ did provide a way to convert `constexpr` vectors to runtime vectors(*) it would still make sense for this to use std::array because:\r\n\r\n- Semantically this returns a fixed size array, not a variable sized one\r\n- std::array is more flexible because array values can be located on the heap, or on stack, or in static storage, while std::vector is inflexible and can basically only allocate values on a heap\r\n- Array type is simpler and doesn't add unnecessary overhead.\r\n\r\n(*) C++ doesn't provide a way to convert constexpr vectors to runtime vectors, but it could, and I assume we could even write our own `ToRuntime<constexpr_vector>()` function doing this conversion.",
      "created_at": "2024-08-23T13:22:44Z",
      "updated_at": "2024-08-23T13:48:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1728968413",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728968413"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 409,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728997258",
      "pull_request_review_id": 2257201161,
      "id": 1728997258,
      "node_id": "PRRC_kwDOABII585nDmeK",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex() { return str.bytes; }\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }\n+\n+template <util::detail::Hex str>\n+inline auto operator\"\"_hex_v_u8() { return std::vector<uint8_t>{UCharCast(str.bytes.data()), UCharCast(str.bytes.data() + str.bytes.size())}; }",
      "path": "src/util/strencodings.h",
      "position": 83,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"util: Add consteval \"\"_hex[_v][_u8] literals\" (f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8)\r\n\r\nThis could be constexpr and I think switching between consteval and constexpr just makes the definitions inconsistent and adds noise. Would suggest:\r\n\r\n```diff\r\n--- a/src/util/strencodings.h\r\n+++ b/src/util/strencodings.h\r\n@@ -431,16 +431,16 @@ struct Hex {\r\n } // namespace detail\r\n \r\n template <util::detail::Hex str>\r\n-consteval auto operator\"\"_hex() { return str.bytes; }\r\n+constexpr auto operator\"\"_hex() { return str.bytes; }\r\n \r\n template <util::detail::Hex str>\r\n-consteval auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\r\n+constexpr auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\r\n \r\n template <util::detail::Hex str>\r\n constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }\r\n \r\n template <util::detail::Hex str>\r\n-inline auto operator\"\"_hex_v_u8() { return std::vector<uint8_t>{UCharCast(str.bytes.data()), UCharCast(str.bytes.data() + str.bytes.size())}; }\r\n+constexpr inline auto operator\"\"_hex_v_u8() { return std::vector<uint8_t>{UCharCast(str.bytes.data()), UCharCast(str.bytes.data() + str.bytes.size())}; }\r\n \r\n } // inline namespace hex_literals\r\n } // namespace util\r\n\r\n```",
      "created_at": "2024-08-23T13:39:28Z",
      "updated_at": "2024-08-23T13:47:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1728997258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1728997258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 440,
      "original_line": 440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729027931",
      "pull_request_review_id": 2256959862,
      "id": 1729027931,
      "node_id": "PRRC_kwDOABII585nDt9b",
      "diff_hunk": "@@ -136,46 +139,69 @@ BOOST_AUTO_TEST_CASE(util_criticalsection)\n     } while(0);\n }\n \n-static const unsigned char ParseHex_expected[65] = {\n+constexpr char HEX_PARSE_INPUT[] = \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\";\n+constexpr uint8_t HEX_PARSE_OUTPUT[] = {\n     0x04, 0x67, 0x8a, 0xfd, 0xb0, 0xfe, 0x55, 0x48, 0x27, 0x19, 0x67, 0xf1, 0xa6, 0x71, 0x30, 0xb7,\n     0x10, 0x5c, 0xd6, 0xa8, 0x28, 0xe0, 0x39, 0x09, 0xa6, 0x79, 0x62, 0xe0, 0xea, 0x1f, 0x61, 0xde,\n     0xb6, 0x49, 0xf6, 0xbc, 0x3f, 0x4c, 0xef, 0x38, 0xc4, 0xf3, 0x55, 0x04, 0xe5, 0x1e, 0xc1, 0x12,\n     0xde, 0x5c, 0x38, 0x4d, 0xf7, 0xba, 0x0b, 0x8d, 0x57, 0x8a, 0x4c, 0x70, 0x2b, 0x6b, 0xf1, 0x1d,\n     0x5f\n };\n+static_assert((sizeof(HEX_PARSE_INPUT) - 1) == 2 * sizeof(HEX_PARSE_OUTPUT));\n BOOST_AUTO_TEST_CASE(parse_hex)\n {\n     std::vector<unsigned char> result;\n-    std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));\n+\n     // Basic test vector\n-    result = ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n+    std::vector<unsigned char> expected(std::begin(HEX_PARSE_OUTPUT), std::end(HEX_PARSE_OUTPUT));\n+    constexpr std::array<std::byte, 65> hex_literal_array{operator\"\"_hex<util::detail::Hex(HEX_PARSE_INPUT)>()};\n+    auto hex_literal_span{MakeUCharSpan(hex_literal_array)};\n+    BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\n+\n+    const std::vector<std::byte> hex_literal_vector{operator\"\"_hex_v<util::detail::Hex(HEX_PARSE_INPUT)>()};\n+    hex_literal_span = MakeUCharSpan(hex_literal_vector);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\n+\n+    constexpr std::array<uint8_t, 65> hex_literal_array_uint8{operator\"\"_hex_u8<util::detail::Hex(HEX_PARSE_INPUT)>()};",
      "path": "src/test/util_tests.cpp",
      "position": 47,
      "original_position": 47,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: could be made a bit more readable by using `auto` and implicitly constructing `Hex`:\r\n\r\n<details>\r\n<summary>git diff on df92661444</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/util_tests.cpp b/src/test/util_tests.cpp\r\nindex 644c8ffc72..050aa2a5a9 100644\r\n--- a/src/test/util_tests.cpp\r\n+++ b/src/test/util_tests.cpp\r\n@@ -154,15 +154,14 @@ BOOST_AUTO_TEST_CASE(parse_hex)\r\n \r\n     // Basic test vector\r\n     std::vector<unsigned char> expected(std::begin(HEX_PARSE_OUTPUT), std::end(HEX_PARSE_OUTPUT));\r\n-    constexpr std::array<std::byte, 65> hex_literal_array{operator\"\"_hex<util::detail::Hex(HEX_PARSE_INPUT)>()};\r\n-    auto hex_literal_span{MakeUCharSpan(hex_literal_array)};\r\n+    auto hex_literal_span{MakeUCharSpan(operator\"\"_hex<HEX_PARSE_INPUT>())};\r\n     BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\r\n \r\n-    const std::vector<std::byte> hex_literal_vector{operator\"\"_hex_v<util::detail::Hex(HEX_PARSE_INPUT)>()};\r\n+    const auto hex_literal_vector{operator\"\"_hex_v<HEX_PARSE_INPUT>()};\r\n     hex_literal_span = MakeUCharSpan(hex_literal_vector);\r\n     BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\r\n \r\n-    constexpr std::array<uint8_t, 65> hex_literal_array_uint8{operator\"\"_hex_u8<util::detail::Hex(HEX_PARSE_INPUT)>()};\r\n+    constexpr auto hex_literal_array_uint8{operator\"\"_hex_u8<HEX_PARSE_INPUT>()};\r\n     BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_array_uint8.begin(), hex_literal_array_uint8.end(), expected.begin(), expected.end());\r\n \r\n     result = operator\"\"_hex_v_u8<util::detail::Hex(HEX_PARSE_INPUT)>();\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2024-08-23T13:59:14Z",
      "updated_at": "2024-08-23T14:56:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729027931",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729027931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": 157,
      "original_start_line": 157,
      "start_side": "RIGHT",
      "line": 165,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729049664",
      "pull_request_review_id": 2257362000,
      "id": 1729049664,
      "node_id": "PRRC_kwDOABII585nDzRA",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 36,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8",
      "in_reply_to_id": 1728947485,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Might do if I re-touch.",
      "created_at": "2024-08-23T14:13:50Z",
      "updated_at": "2024-08-23T14:26:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729049664",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729049664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 397,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729053334",
      "pull_request_review_id": 2257362000,
      "id": 1729053334,
      "node_id": "PRRC_kwDOABII585nD0KW",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 49,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8",
      "in_reply_to_id": 1728968413,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, my goal was to contrast it against `ParseHex` returning a vector. Will do if I re-touch.",
      "created_at": "2024-08-23T14:16:24Z",
      "updated_at": "2024-08-23T14:26:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729053334",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729053334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": 409,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 410,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729064946",
      "pull_request_review_id": 2257362000,
      "id": 1729064946,
      "node_id": "PRRC_kwDOABII585nD2_y",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex() { return str.bytes; }\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }\n+\n+template <util::detail::Hex str>\n+inline auto operator\"\"_hex_v_u8() { return std::vector<uint8_t>{UCharCast(str.bytes.data()), UCharCast(str.bytes.data() + str.bytes.size())}; }",
      "path": "src/util/strencodings.h",
      "position": 83,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8",
      "in_reply_to_id": 1728997258,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I want to explicitly enforce compile time where possible, hence the `consteval`.\r\n\r\nIn the `\"\"_hex_v_u8` case, `constexpr` would be a lie, as `UCharCast` being called is `inline`, not `constexpr`, and calls `reinterpret_cast` which is not supported at compile time. (This means that `UCharSpanCast` and `MakeUCharSpan` are `constexpr` in name only, except for if called on a collection that is already `unsigned char` and doesn't require `reinterpret_cast`).",
      "created_at": "2024-08-23T14:24:21Z",
      "updated_at": "2024-08-23T14:26:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729064946",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729064946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 440,
      "original_line": 440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729071473",
      "pull_request_review_id": 2256959862,
      "id": 1729071473,
      "node_id": "PRRC_kwDOABII585nD4lx",
      "diff_hunk": "@@ -352,7 +356,7 @@ BOOST_AUTO_TEST_CASE(key_ellswift)\n \n BOOST_AUTO_TEST_CASE(bip341_test_h)\n {\n-    std::vector<unsigned char> G_uncompressed = ParseHex(\"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\");\n+    constexpr auto G_uncompressed{\"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"_hex};\n     HashWriter hw;\n     hw.write(MakeByteSpan(G_uncompressed));",
      "path": "src/test/key_tests.cpp",
      "position": 1,
      "original_position": 44,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in 6954b1f1143a73d4024f5564e287d8eeb34ff577: no more need for `MakeByteSpan`:\r\n\r\n```suggestion\r\n    hw.write(G_uncompressed);\r\n```",
      "created_at": "2024-08-23T14:28:50Z",
      "updated_at": "2024-08-23T14:56:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729071473",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729071473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729082336",
      "pull_request_review_id": 2256959862,
      "id": 1729082336,
      "node_id": "PRRC_kwDOABII585nD7Pg",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex() { return str.bytes; }\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }\n+\n+template <util::detail::Hex str>\n+inline auto operator\"\"_hex_v_u8() { return std::vector<uint8_t>{UCharCast(str.bytes.data()), UCharCast(str.bytes.data() + str.bytes.size())}; }",
      "path": "src/util/strencodings.h",
      "position": 83,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8",
      "in_reply_to_id": 1728997258,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since we're templating these on `Hex` instances, this string literal approach will produce quite a rather large number of template instantiations. I wonder if keeping these `consteval` would also better allow the compiler to make sure these instantiations don't end up in the binary?\r\n\r\n> I want to explicitly enforce compile time where possible, hence the consteval.\r\n\r\nGiven that they're templated on a `consteval` `Hex`, I don't think this suggestion would change anything there? It would, in my view, make it more confusing though, by hiding that these operators are in fact `consteval`. I might be missing some nuance here, though?",
      "created_at": "2024-08-23T14:36:36Z",
      "updated_at": "2024-08-23T15:00:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729082336",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729082336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 440,
      "original_line": 440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729138611",
      "pull_request_review_id": 2257496230,
      "id": 1729138611,
      "node_id": "PRRC_kwDOABII585nEI-z",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex() { return str.bytes; }\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }\n+\n+template <util::detail::Hex str>\n+inline auto operator\"\"_hex_v_u8() { return std::vector<uint8_t>{UCharCast(str.bytes.data()), UCharCast(str.bytes.data() + str.bytes.size())}; }",
      "path": "src/util/strencodings.h",
      "position": 83,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8",
      "in_reply_to_id": 1728997258,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> makes the definitions inconsistent and adds noise\r\n\r\nI agree that it's likely just a documentation change for the reader (unsurprisingly, my trivial godbolt experiment also showed the same compiled output), but the methods *are* a bit different, isn't it useful signal if we mark them as such?",
      "created_at": "2024-08-23T15:16:00Z",
      "updated_at": "2024-08-23T15:16:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729138611",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729138611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 440,
      "original_line": 440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729318481",
      "pull_request_review_id": 2257777317,
      "id": 1729318481,
      "node_id": "PRRC_kwDOABII585nE05R",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex() { return str.bytes; }\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }\n+\n+template <util::detail::Hex str>\n+inline auto operator\"\"_hex_v_u8() { return std::vector<uint8_t>{UCharCast(str.bytes.data()), UCharCast(str.bytes.data() + str.bytes.size())}; }",
      "path": "src/util/strencodings.h",
      "position": 83,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8",
      "in_reply_to_id": 1728997258,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since the `consteval`/`constexpr`/`inline` choices are not obvious, but have fairly solid reasoning behind them, I could add non-Doxygen comments like\r\n```C++\r\n// Calls non-constexpr function so can only be inline\r\ninline auto operator\"\"_hex_v_u8() { return std::vector<uint8_t>{UCharCast(...\r\n```\r\nWhat do you think?",
      "created_at": "2024-08-23T17:43:12Z",
      "updated_at": "2024-08-23T20:06:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729318481",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729318481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 440,
      "original_line": 440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729321677",
      "pull_request_review_id": 2257782391,
      "id": 1729321677,
      "node_id": "PRRC_kwDOABII585nE1rN",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex() { return str.bytes; }\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }\n+\n+template <util::detail::Hex str>\n+inline auto operator\"\"_hex_v_u8() { return std::vector<uint8_t>{UCharCast(str.bytes.data()), UCharCast(str.bytes.data() + str.bytes.size())}; }",
      "path": "src/util/strencodings.h",
      "position": 83,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8",
      "in_reply_to_id": 1728997258,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That wouldn't explain to me why the compiler seems to allow it",
      "created_at": "2024-08-23T17:46:15Z",
      "updated_at": "2024-08-23T17:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729321677",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729321677"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 440,
      "original_line": 440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729323391",
      "pull_request_review_id": 2257785050,
      "id": 1729323391,
      "node_id": "PRRC_kwDOABII585nE2F_",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {",
      "path": "src/util/strencodings.h",
      "position": 56,
      "original_position": 55,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "in_reply_to_id": 1728787408,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Interesting idea!\r\n\r\nShould move it out of the `detail` namespace. That makes the naming of `Hex` more important. Are people still happy with it?",
      "created_at": "2024-08-23T17:47:50Z",
      "updated_at": "2024-08-23T17:47:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729323391",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729323391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 413,
      "original_line": 413,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729491937",
      "pull_request_review_id": 2258065193,
      "id": 1729491937,
      "node_id": "PRRC_kwDOABII585nFfPh",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex() { return str.bytes; }\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }\n+\n+template <util::detail::Hex str>\n+inline auto operator\"\"_hex_v_u8() { return std::vector<uint8_t>{UCharCast(str.bytes.data()), UCharCast(str.bytes.data() + str.bytes.size())}; }",
      "path": "src/util/strencodings.h",
      "position": 83,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8",
      "in_reply_to_id": 1728997258,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@stickies-v:\r\n> It would, in my view, make it more confusing though, by hiding that these operators are in fact consteval. I might be missing some nuance here, though?\r\n\r\nSorry for not addressing this before, was a bit rushed in my previous post.\r\nMy understanding is the `Hex`-instantiations are `consteval`, and the operators are *instantiated* at compile time, but the last two are commonly *executed* at runtime (with a compile time baked `Hex`-value).",
      "created_at": "2024-08-23T20:38:56Z",
      "updated_at": "2024-08-23T20:38:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729491937",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729491937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 440,
      "original_line": 440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729499254",
      "pull_request_review_id": 2258077819,
      "id": 1729499254,
      "node_id": "PRRC_kwDOABII585nFhB2",
      "diff_hunk": "@@ -136,46 +139,69 @@ BOOST_AUTO_TEST_CASE(util_criticalsection)\n     } while(0);\n }\n \n-static const unsigned char ParseHex_expected[65] = {\n+constexpr char HEX_PARSE_INPUT[] = \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\";\n+constexpr uint8_t HEX_PARSE_OUTPUT[] = {\n     0x04, 0x67, 0x8a, 0xfd, 0xb0, 0xfe, 0x55, 0x48, 0x27, 0x19, 0x67, 0xf1, 0xa6, 0x71, 0x30, 0xb7,\n     0x10, 0x5c, 0xd6, 0xa8, 0x28, 0xe0, 0x39, 0x09, 0xa6, 0x79, 0x62, 0xe0, 0xea, 0x1f, 0x61, 0xde,\n     0xb6, 0x49, 0xf6, 0xbc, 0x3f, 0x4c, 0xef, 0x38, 0xc4, 0xf3, 0x55, 0x04, 0xe5, 0x1e, 0xc1, 0x12,\n     0xde, 0x5c, 0x38, 0x4d, 0xf7, 0xba, 0x0b, 0x8d, 0x57, 0x8a, 0x4c, 0x70, 0x2b, 0x6b, 0xf1, 0x1d,\n     0x5f\n };\n+static_assert((sizeof(HEX_PARSE_INPUT) - 1) == 2 * sizeof(HEX_PARSE_OUTPUT));\n BOOST_AUTO_TEST_CASE(parse_hex)\n {\n     std::vector<unsigned char> result;\n-    std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));\n+\n     // Basic test vector\n-    result = ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n+    std::vector<unsigned char> expected(std::begin(HEX_PARSE_OUTPUT), std::end(HEX_PARSE_OUTPUT));\n+    constexpr std::array<std::byte, 65> hex_literal_array{operator\"\"_hex<util::detail::Hex(HEX_PARSE_INPUT)>()};\n+    auto hex_literal_span{MakeUCharSpan(hex_literal_array)};\n+    BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\n+\n+    const std::vector<std::byte> hex_literal_vector{operator\"\"_hex_v<util::detail::Hex(HEX_PARSE_INPUT)>()};\n+    hex_literal_span = MakeUCharSpan(hex_literal_vector);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\n+\n+    constexpr std::array<uint8_t, 65> hex_literal_array_uint8{operator\"\"_hex_u8<util::detail::Hex(HEX_PARSE_INPUT)>()};",
      "path": "src/test/util_tests.cpp",
      "position": 47,
      "original_position": 47,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "in_reply_to_id": 1729027931,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will see if all compilers are fine with removing `util::detail::Hex(...)` here. Hopefully they are!\r\n\r\nI prefer documenting the full type in for these specific tests, but admit it is quite verbose.",
      "created_at": "2024-08-23T20:46:24Z",
      "updated_at": "2024-08-23T20:46:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729499254",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729499254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": 157,
      "original_start_line": 157,
      "start_side": "RIGHT",
      "line": 165,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729536195",
      "pull_request_review_id": 2258131316,
      "id": 1729536195,
      "node_id": "PRRC_kwDOABII585nFqDD",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex() { return str.bytes; }\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }\n+\n+template <util::detail::Hex str>\n+inline auto operator\"\"_hex_v_u8() { return std::vector<uint8_t>{UCharCast(str.bytes.data()), UCharCast(str.bytes.data() + str.bytes.size())}; }",
      "path": "src/util/strencodings.h",
      "position": 83,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8",
      "in_reply_to_id": 1728997258,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729064946\r\n\r\n> I want to explicitly enforce compile time where possible, hence the consteval.\r\n\r\nI don't think this is a good idea. IMO, the interface should simple and consistent, not noisy with unnecessary / unexplained differences that obscure more real and relevant differences between the functions. It's not good to expose internal implementation details unnecessarily or to tell compilers how to do their jobs unnecessarily. The consteval on the hex constructor enforces that the hex is parsed into bytes at compile time, which is the thing we care about. What happens to the bytes after that, how they are stored and converted should be up to the user and the compiler.\r\n\r\n> In the \"\"_hex_v_u8 case, constexpr would be a lie\r\n\r\nOh, that's interesting. If adding constexpr to that line would be misleading I agree it would be good to omit it, and consider adding a comment explaining the difference. I also think it would be nice to follow up and make this code consistent and working at compile or run time.\r\n\r\n>  the methods are a bit different, isn't it useful signal if we mark them as such?\r\n\r\nIf this is signaling anything it's a confusing and muddled signal. All 4 functions evaluate their argument at compile time but can execute and return values usable at both compile time and run time (modulo the reinterpret_cast bug) so they can just be marked accurately to reflect what they do.\r\n\r\nCurrent code is ok, but either trying to do something more complicated than necessary, or just not explaining clearly what it's trying to do.",
      "created_at": "2024-08-23T21:32:38Z",
      "updated_at": "2024-08-23T22:58:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729536195",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729536195"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 440,
      "original_line": 440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729584258",
      "pull_request_review_id": 2258131316,
      "id": 1729584258,
      "node_id": "PRRC_kwDOABII585nF1yC",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {",
      "path": "src/util/strencodings.h",
      "position": 56,
      "original_position": 55,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "in_reply_to_id": 1728787408,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1728787408\r\n\r\nThis is an interesting idea. I kind of think now that we have support for these suffixes, we should just add an `_rhex` reverse hex suffix and drop this constructor entirely, avoid the footgun of having two constructors where one reverses its input and the other does not.\r\n\r\nAlso, IMO if adopting this suggestion it would be a little better to keep detail namespace than to expose Hex class as something that would be reasonable to use in other places. But anything should be fine.",
      "created_at": "2024-08-23T22:51:50Z",
      "updated_at": "2024-08-23T22:58:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729584258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729584258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 413,
      "original_line": 413,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729787316",
      "pull_request_review_id": 2258441149,
      "id": 1729787316,
      "node_id": "PRRC_kwDOABII585nGnW0",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {",
      "path": "src/util/strencodings.h",
      "position": 56,
      "original_position": 55,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "in_reply_to_id": 1728787408,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure about how `_rhex` would work, if it returned `std::array<std::byte, N>` one could accidentally substitute for `_hex`. Keeping `Hex` in `detail` for now though.",
      "created_at": "2024-08-24T07:12:51Z",
      "updated_at": "2024-08-24T07:12:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729787316",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729787316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 413,
      "original_line": 413,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729787403",
      "pull_request_review_id": 2258441233,
      "id": 1729787403,
      "node_id": "PRRC_kwDOABII585nGnYL",
      "diff_hunk": "@@ -352,7 +356,7 @@ BOOST_AUTO_TEST_CASE(key_ellswift)\n \n BOOST_AUTO_TEST_CASE(bip341_test_h)\n {\n-    std::vector<unsigned char> G_uncompressed = ParseHex(\"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\");\n+    constexpr auto G_uncompressed{\"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"_hex};\n     HashWriter hw;\n     hw.write(MakeByteSpan(G_uncompressed));",
      "path": "src/test/key_tests.cpp",
      "position": 1,
      "original_position": 44,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "in_reply_to_id": 1729071473,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done!",
      "created_at": "2024-08-24T07:13:29Z",
      "updated_at": "2024-08-24T07:13:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729787403",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729787403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729787874",
      "pull_request_review_id": 2258441655,
      "id": 1729787874,
      "node_id": "PRRC_kwDOABII585nGnfi",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex() { return str.bytes; }\n+\n+template <util::detail::Hex str>\n+consteval auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }\n+\n+template <util::detail::Hex str>\n+inline auto operator\"\"_hex_v_u8() { return std::vector<uint8_t>{UCharCast(str.bytes.data()), UCharCast(str.bytes.data() + str.bytes.size())}; }",
      "path": "src/util/strencodings.h",
      "position": 83,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "f9fed4d4e6daa2bdd715b92b6bfffdbe8202a9c8",
      "in_reply_to_id": 1728997258,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As long as `Hex` is `consteval` I'm happy. Changed the literals that could be into `constexpr` and added comment about the `inline` outlier.\r\n",
      "created_at": "2024-08-24T07:17:06Z",
      "updated_at": "2024-08-24T07:17:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729787874",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729787874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 440,
      "original_line": 440,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729902294",
      "pull_request_review_id": 2258626720,
      "id": 1729902294,
      "node_id": "PRRC_kwDOABII585nHDbW",
      "diff_hunk": "@@ -136,46 +139,69 @@ BOOST_AUTO_TEST_CASE(util_criticalsection)\n     } while(0);\n }\n \n-static const unsigned char ParseHex_expected[65] = {\n+constexpr char HEX_PARSE_INPUT[] = \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\";\n+constexpr uint8_t HEX_PARSE_OUTPUT[] = {\n     0x04, 0x67, 0x8a, 0xfd, 0xb0, 0xfe, 0x55, 0x48, 0x27, 0x19, 0x67, 0xf1, 0xa6, 0x71, 0x30, 0xb7,\n     0x10, 0x5c, 0xd6, 0xa8, 0x28, 0xe0, 0x39, 0x09, 0xa6, 0x79, 0x62, 0xe0, 0xea, 0x1f, 0x61, 0xde,\n     0xb6, 0x49, 0xf6, 0xbc, 0x3f, 0x4c, 0xef, 0x38, 0xc4, 0xf3, 0x55, 0x04, 0xe5, 0x1e, 0xc1, 0x12,\n     0xde, 0x5c, 0x38, 0x4d, 0xf7, 0xba, 0x0b, 0x8d, 0x57, 0x8a, 0x4c, 0x70, 0x2b, 0x6b, 0xf1, 0x1d,\n     0x5f\n };\n+static_assert((sizeof(HEX_PARSE_INPUT) - 1) == 2 * sizeof(HEX_PARSE_OUTPUT));\n BOOST_AUTO_TEST_CASE(parse_hex)\n {\n     std::vector<unsigned char> result;\n-    std::vector<unsigned char> expected(ParseHex_expected, ParseHex_expected + sizeof(ParseHex_expected));\n+\n     // Basic test vector\n-    result = ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\");\n+    std::vector<unsigned char> expected(std::begin(HEX_PARSE_OUTPUT), std::end(HEX_PARSE_OUTPUT));\n+    constexpr std::array<std::byte, 65> hex_literal_array{operator\"\"_hex<util::detail::Hex(HEX_PARSE_INPUT)>()};\n+    auto hex_literal_span{MakeUCharSpan(hex_literal_array)};\n+    BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\n+\n+    const std::vector<std::byte> hex_literal_vector{operator\"\"_hex_v<util::detail::Hex(HEX_PARSE_INPUT)>()};\n+    hex_literal_span = MakeUCharSpan(hex_literal_vector);\n+    BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\n+\n+    constexpr std::array<uint8_t, 65> hex_literal_array_uint8{operator\"\"_hex_u8<util::detail::Hex(HEX_PARSE_INPUT)>()};",
      "path": "src/test/util_tests.cpp",
      "position": 47,
      "original_position": 47,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "in_reply_to_id": 1729027931,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Bummer, broke Win64.\r\n\r\nAiming to back out that change later today.",
      "created_at": "2024-08-24T10:02:35Z",
      "updated_at": "2024-08-24T10:02:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729902294",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729902294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": 157,
      "original_start_line": 157,
      "start_side": "RIGHT",
      "line": 165,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729995642",
      "pull_request_review_id": 2258737449,
      "id": 1729995642,
      "node_id": "PRRC_kwDOABII585nHaN6",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {",
      "path": "src/util/strencodings.h",
      "position": 56,
      "original_position": 55,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "in_reply_to_id": 1728787408,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Think there may still be something to @stickies-v intuition here. Maybe the `consteval` `base_blob`-ctor could somehow be implemented in terms of `\"\"_hex_u8` reverse-copied into `base_blob::m_data` instead of only borrowing `ConstevalHexDigit`. Don't have the stamina to reconcile `Hex<N>` with `std::string_view` right now though.",
      "created_at": "2024-08-24T13:58:19Z",
      "updated_at": "2024-08-24T13:58:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1729995642",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1729995642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 413,
      "original_line": 413,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1730008317",
      "pull_request_review_id": 2258752238,
      "id": 1730008317,
      "node_id": "PRRC_kwDOABII585nHdT9",
      "diff_hunk": "@@ -369,4 +371,80 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It could be necessary to use vector instead of array variants when\n+ *   serializing, or vice versa, because vectors are assumed to be variable-\n+ *   length and serialized with a size prefix, while arrays are considered fixed\n+ *   length and serialized with no prefix.\n+ *\n+ * @warning It may be preferable to use vector variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid `uint8_t` variants when not necessary, as the codebase\n+ *   migrates to use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note One reason \"\"_hex uses `std::array` instead of `std::vector` like\n+ *   ParseHex() does is because heap-based containers cannot cross the compile-\n+ *   time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex() { return str.bytes; }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }\n+\n+// inline because it calls non-constexpr UCharCast().",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 82,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "e63d7e54d26ddabedc5cd2cb8e1180da520fd063",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: to be fair, this comment confuses me even more",
      "created_at": "2024-08-24T14:38:30Z",
      "updated_at": "2024-08-24T14:38:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1730008317",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1730008317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 443,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1730107698",
      "pull_request_review_id": 2258914203,
      "id": 1730107698,
      "node_id": "PRRC_kwDOABII585nH1ky",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {",
      "path": "src/util/strencodings.h",
      "position": 56,
      "original_position": 55,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "in_reply_to_id": 1728787408,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I also like the suggestion, but there are other hex conversion methods in uint256 which could use some compile-time love - I'm fine with doing it in a separate PR.",
      "created_at": "2024-08-24T19:28:37Z",
      "updated_at": "2024-08-24T19:28:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1730107698",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1730107698"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 413,
      "original_line": 413,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1734398828",
      "pull_request_review_id": 2265810088,
      "id": 1734398828,
      "node_id": "PRRC_kwDOABII585nYNNs",
      "diff_hunk": "@@ -365,4 +367,79 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It could be necessary to use vector instead of array variants when\n+ *   serializing, or vice versa, because vectors are assumed to be variable-\n+ *   length and serialized with a size prefix, while arrays are considered fixed\n+ *   length and serialized with no prefix.\n+ *\n+ * @warning It may be preferable to use vector variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 42,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dae42d474d04168fba077f30bf5113721e9fc108",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "grammar nit: https://grammarist.com/usage/alternately-vs-alternatively/ \r\n```suggestion\r\n *   declaring local variables if hex strings are large. Alternatively, variables\r\n```",
      "created_at": "2024-08-28T10:20:19Z",
      "updated_at": "2024-08-28T11:17:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1734398828",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1734398828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 399,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1734481968",
      "pull_request_review_id": 2265810088,
      "id": 1734481968,
      "node_id": "PRRC_kwDOABII585nYhgw",
      "diff_hunk": "@@ -365,4 +367,79 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It could be necessary to use vector instead of array variants when\n+ *   serializing, or vice versa, because vectors are assumed to be variable-\n+ *   length and serialized with a size prefix, while arrays are considered fixed\n+ *   length and serialized with no prefix.\n+ *\n+ * @warning It may be preferable to use vector variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid `uint8_t` variants when not necessary, as the codebase\n+ *   migrates to use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note One reason \"\"_hex uses `std::array` instead of `std::vector` like\n+ *   ParseHex() does is because heap-based containers cannot cross the compile-\n+ *   time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex() { return str.bytes; }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }",
      "path": "src/util/strencodings.h",
      "position": 80,
      "original_position": 80,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dae42d474d04168fba077f30bf5113721e9fc108",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Note: the `_hex_v` operator is currently unused, except for in unit tests on this operator:\r\n\r\n<details>\r\n<summary>git diff on dae42d474d</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/util_tests.cpp b/src/test/util_tests.cpp\r\nindex 46eca2f0d8..ab521f5628 100644\r\n--- a/src/test/util_tests.cpp\r\n+++ b/src/test/util_tests.cpp\r\n@@ -158,10 +158,6 @@ BOOST_AUTO_TEST_CASE(parse_hex)\r\n     auto hex_literal_span{MakeUCharSpan(hex_literal_array)};\r\n     BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\r\n \r\n-    const std::vector<std::byte> hex_literal_vector{operator\"\"_hex_v<util::detail::Hex(HEX_PARSE_INPUT)>()};\r\n-    hex_literal_span = MakeUCharSpan(hex_literal_vector);\r\n-    BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_span.begin(), hex_literal_span.end(), expected.begin(), expected.end());\r\n-\r\n     constexpr std::array<uint8_t, 65> hex_literal_array_uint8{operator\"\"_hex_u8<util::detail::Hex(HEX_PARSE_INPUT)>()};\r\n     BOOST_CHECK_EQUAL_COLLECTIONS(hex_literal_array_uint8.begin(), hex_literal_array_uint8.end(), expected.begin(), expected.end());\r\n \r\n@@ -198,7 +194,6 @@ BOOST_AUTO_TEST_CASE(parse_hex)\r\n     // Empty string is supported\r\n     static_assert(\"\"_hex.empty());\r\n     static_assert(\"\"_hex_u8.empty());\r\n-    BOOST_CHECK_EQUAL(\"\"_hex_v.size(), 0);\r\n     BOOST_CHECK_EQUAL(\"\"_hex_v_u8.size(), 0);\r\n     BOOST_CHECK_EQUAL(ParseHex(\"\").size(), 0);\r\n     BOOST_CHECK_EQUAL(TryParseHex<uint8_t>(\"\").value().size(), 0);\r\ndiff --git a/src/util/strencodings.h b/src/util/strencodings.h\r\nindex f9076de047..2939527a82 100644\r\n--- a/src/util/strencodings.h\r\n+++ b/src/util/strencodings.h\r\n@@ -381,9 +381,6 @@ consteval uint8_t ConstevalHexDigit(const char c)\r\n  * \"\"_hex is a compile-time user-defined literal returning a\r\n  * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\r\n  *\r\n- * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\r\n- *   variable-length serialization.\r\n- *\r\n  * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\r\n  *   incompatible.\r\n  *\r\n@@ -433,9 +430,6 @@ constexpr auto operator\"\"_hex() { return str.bytes; }\r\n template <util::detail::Hex str>\r\n constexpr auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\r\n \r\n-template <util::detail::Hex str>\r\n-constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }\r\n-\r\n template <util::detail::Hex str>\r\n inline auto operator\"\"_hex_v_u8() { return std::vector<uint8_t>{UCharCast(str.bytes.data()), UCharCast(str.bytes.data() + str.bytes.size())}; }\r\n \r\n\r\n```\r\n</details>\r\n\r\nI think it might make sense the remove the operator? Since we're dealing with compile-time string literals, I think we shouldn't encourage new users to take vectors instead of arrays?",
      "created_at": "2024-08-28T11:12:10Z",
      "updated_at": "2024-08-28T11:17:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1734481968",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1734481968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 437,
      "original_line": 437,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1734485435",
      "pull_request_review_id": 2265810088,
      "id": 1734485435,
      "node_id": "PRRC_kwDOABII585nYiW7",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {",
      "path": "src/util/strencodings.h",
      "position": 56,
      "original_position": 55,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "in_reply_to_id": 1728787408,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm happy to keep things as is for now, this can be considered in follow-ups indeed.",
      "created_at": "2024-08-28T11:14:23Z",
      "updated_at": "2024-08-28T11:17:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1734485435",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1734485435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 413,
      "original_line": 413,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1734510436",
      "pull_request_review_id": 2265989110,
      "id": 1734510436,
      "node_id": "PRRC_kwDOABII585nYodk",
      "diff_hunk": "@@ -365,4 +367,79 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It could be necessary to use vector instead of array variants when\n+ *   serializing, or vice versa, because vectors are assumed to be variable-\n+ *   length and serialized with a size prefix, while arrays are considered fixed\n+ *   length and serialized with no prefix.\n+ *\n+ * @warning It may be preferable to use vector variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables",
      "path": "src/util/strencodings.h",
      "position": 1,
      "original_position": 42,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dae42d474d04168fba077f30bf5113721e9fc108",
      "in_reply_to_id": 1734398828,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks! Fixed in latest force-push.",
      "created_at": "2024-08-28T11:31:49Z",
      "updated_at": "2024-08-28T11:31:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1734510436",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1734510436"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 399,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1734529498",
      "pull_request_review_id": 2266020491,
      "id": 1734529498,
      "node_id": "PRRC_kwDOABII585nYtHa",
      "diff_hunk": "@@ -365,4 +367,79 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It could be necessary to use vector instead of array variants when\n+ *   serializing, or vice versa, because vectors are assumed to be variable-\n+ *   length and serialized with a size prefix, while arrays are considered fixed\n+ *   length and serialized with no prefix.\n+ *\n+ * @warning It may be preferable to use vector variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid `uint8_t` variants when not necessary, as the codebase\n+ *   migrates to use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note One reason \"\"_hex uses `std::array` instead of `std::vector` like\n+ *   ParseHex() does is because heap-based containers cannot cross the compile-\n+ *   time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex() { return str.bytes; }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }",
      "path": "src/util/strencodings.h",
      "position": 80,
      "original_position": 80,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dae42d474d04168fba077f30bf5113721e9fc108",
      "in_reply_to_id": 1734481968,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yup, noticed it earlier as well, but decided to keep for now. Could drop if more people agree.\r\n\r\nAs noted in the docs, `vector` is currently used to signal that a size-prefix should be added during serialization, so if the conversion to accept `std::byte` in more places happens before adaptation to accept `std::array` for size-prefixed data, `_hex_v` will become necessary.\r\n\r\nIt also feels more complete to have all `byte`/`uint8_t` and `array`/`vector` combinations.",
      "created_at": "2024-08-28T11:43:39Z",
      "updated_at": "2024-08-28T11:43:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1734529498",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1734529498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 437,
      "original_line": 437,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1734548531",
      "pull_request_review_id": 2266050779,
      "id": 1734548531,
      "node_id": "PRRC_kwDOABII585nYxwz",
      "diff_hunk": "@@ -365,4 +367,79 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It could be necessary to use vector instead of array variants when\n+ *   serializing, or vice versa, because vectors are assumed to be variable-\n+ *   length and serialized with a size prefix, while arrays are considered fixed\n+ *   length and serialized with no prefix.\n+ *\n+ * @warning It may be preferable to use vector variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid `uint8_t` variants when not necessary, as the codebase\n+ *   migrates to use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note One reason \"\"_hex uses `std::array` instead of `std::vector` like\n+ *   ParseHex() does is because heap-based containers cannot cross the compile-\n+ *   time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {\n+    std::array<std::byte, N / 2> bytes{};\n+    consteval Hex(const char (&hex_str)[N])\n+        // 2 hex digits required per byte + implicit null terminator\n+        requires(N % 2 == 1)\n+    {\n+        if (hex_str[N - 1]) throw \"null terminator required\";\n+        for (std::size_t i = 0; i < bytes.size(); ++i) {\n+            bytes[i] = static_cast<std::byte>(\n+                (ConstevalHexDigit(hex_str[2 * i]) << 4) |\n+                 ConstevalHexDigit(hex_str[2 * i + 1]));\n+        }\n+    }\n+};\n+\n+} // namespace detail\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex() { return str.bytes; }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_u8() { return std::bit_cast<std::array<uint8_t, str.bytes.size()>>(str.bytes); }\n+\n+template <util::detail::Hex str>\n+constexpr auto operator\"\"_hex_v() { return std::vector<std::byte>{str.bytes.begin(), str.bytes.end()}; }",
      "path": "src/util/strencodings.h",
      "position": 80,
      "original_position": 80,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "dae42d474d04168fba077f30bf5113721e9fc108",
      "in_reply_to_id": 1734481968,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> so if the conversion to accept std::byte in more places happens before adaptation to accept std::array for size-prefixed data, _hex_v will become necessary.\r\n\r\nThat is a good point, so we are indeed expecting to use it in the future. In that case, since it's already reviewed, let's keep it in and you can mark this as resolved.",
      "created_at": "2024-08-28T11:58:57Z",
      "updated_at": "2024-08-28T11:58:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1734548531",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1734548531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 437,
      "original_line": 437,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1735551373",
      "pull_request_review_id": 2267655396,
      "id": 1735551373,
      "node_id": "PRRC_kwDOABII585ncmmN",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {",
      "path": "src/util/strencodings.h",
      "position": 56,
      "original_position": 55,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "in_reply_to_id": 1728787408,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1728787408\r\n\r\nThe reason I think it would be good to drop this constructor later is that after this PR you can write both:\r\n\r\n```c++\r\nuint256{\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"} // bytes are reversed\r\nuint256{\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"_hex_u8} // bytes are not reversed\r\n```\r\n\r\nwhere one constructor reverses the bytes and the other constructor does not reverse the bytes, and the reverse constructor accepts an unlabeled string with no suffix. I think more ideally, we would have just one constructor, instead of two constructors with opposite behaviors.\r\n\r\nSupporting an `_rhex` suffix would be one way to have a single constructor and make the argument explicit:\r\n\r\n```c++\r\nuint256{\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"_rhex} // bytes are reversed\r\nuint256{\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"_hex} // bytes are not reversed\r\n```\r\n\r\nbut there could be other ways like adding a `constexpr` Reverse function:\r\n\r\n```c++\r\nuint256{Reverse(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"_hex)} // bytes are reversed\r\nuint256{\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"_hex} // bytes are not reversed\r\n```\r\n\r\nor supporting string prefixes instead of suffixes:\r\n\r\n```c++\r\nuint256{\"<ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"_hex)} // bytes are reversed\r\nuint256{\">ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"_hex} // bytes are not reversed\r\n```\r\n\r\nI don't feel strongly about these ideas but I think they would all simplify the uint256 class and make it more obvious when bytes are being reversed.",
      "created_at": "2024-08-29T04:28:38Z",
      "updated_at": "2024-08-29T04:28:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1735551373",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1735551373"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 413,
      "original_line": 413,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1735659755",
      "pull_request_review_id": 2267823622,
      "id": 1735659755,
      "node_id": "PRRC_kwDOABII585ndBDr",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {",
      "path": "src/util/strencodings.h",
      "position": 56,
      "original_position": 55,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "in_reply_to_id": 1728787408,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I like the `_rhex` vs `_hex` suggestion - it's easy to navigate to the definition in the source code and check the difference.\r\nIt's a lot more awkward to check it out with an in-string prefix - since it starts with a non-standard, non-hex, arbitrary character.",
      "created_at": "2024-08-29T06:49:11Z",
      "updated_at": "2024-08-29T06:49:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1735659755",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1735659755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 413,
      "original_line": 413,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1735672735",
      "pull_request_review_id": 2267844094,
      "id": 1735672735,
      "node_id": "PRRC_kwDOABII585ndEOf",
      "diff_hunk": "@@ -369,4 +371,78 @@ std::string Capitalize(std::string str);\n  */\n std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_multiplier);\n \n+namespace util {\n+/** consteval version of HexDigit() without the lookup table. */\n+consteval uint8_t ConstevalHexDigit(const char c)\n+{\n+    if (c >= '0' && c <= '9') return c - '0';\n+    if (c >= 'a' && c <= 'f') return c - 'a' + 0xa;\n+\n+    throw \"Only lowercase hex digits are allowed, for consistency\";\n+}\n+\n+/**\n+ * \"\"_hex is a compile-time user-defined literal returning a\n+ * `std::array<std::byte>`, equivalent to ParseHex(). Variants provided:\n+ *\n+ * - \"\"_hex_v: Returns `std::vector<std::byte>`, useful for heap allocation or\n+ *   variable-length serialization.\n+ *\n+ * - \"\"_hex_u8: Returns `std::array<uint8_t>`, for cases where `std::byte` is\n+ *   incompatible.\n+ *\n+ * - \"\"_hex_v_u8: Returns `std::vector<uint8_t>`, combining heap allocation with\n+ *   `uint8_t`.\n+ *\n+ * @warning It may be necessary to use _v variants when serializing, or vice\n+ *   versa, because vectors are assumed to be variable-length and serialized\n+ *   with a size prefix, while arrays are considered fixed length and serialized\n+ *   with no prefix.\n+ *\n+ * @warning It may be preferable to use _v variants to save stack space when\n+ *   declaring local variables if hex strings are large. Alternately variables\n+ *   could be declared constexpr to avoid using stack space.\n+ *\n+ * @warning Avoid _u8 variants when not necessary, as the codebase migrates to\n+ *   use `std::byte` instead of `unsigned char` and `uint8_t`.\n+ *\n+ * @note The reason \"\"_hex uses `std::array` is because a heap-based\n+ *   `std::vector` cannot cross the compile-time/runtime barrier.\n+ */\n+inline namespace hex_literals {\n+namespace detail {\n+\n+template <size_t N>\n+struct Hex {",
      "path": "src/util/strencodings.h",
      "position": 56,
      "original_position": 55,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "df92661444f46790b12d5061344d72106ef820d9",
      "in_reply_to_id": 1728787408,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Makes me think maybe `_hex[_v][_u8]` should be changed to return something else than raw `std::array`/`std::vector`. Perhaps some thin wrapper struct that can be implicitly converted to the inner type, but can be caught in the `uint256`-ctors so that `ForwardHex` is explicitly deleted (or handled, reversed), but `ReverseHex` is allowed and treated as if the `uint256(Span<const unsigned char>)`-ctor had been called.",
      "created_at": "2024-08-29T07:00:02Z",
      "updated_at": "2024-08-29T07:00:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1735672735",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1735672735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 413,
      "original_line": 413,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738593854",
      "pull_request_review_id": 2272217108,
      "id": 1738593854,
      "node_id": "PRRC_kwDOABII585noNY-",
      "diff_hunk": "@@ -851,24 +853,24 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"scriptpubkey\");\n \n     // MAX_OP_RETURN_RELAY-byte TxoutType::NULL_DATA (standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\"));\n     BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     CheckIsStandard(t);\n \n     // MAX_OP_RETURN_RELAY+1-byte TxoutType::NULL_DATA (non-standard)\n-    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << Vec(HexLiteral<uint8_t>(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\"));",
      "path": "src/test/transaction_tests.cpp",
      "position": 1,
      "original_position": 22,
      "commit_id": "8756ccd71218c8e013181473720b10d3c4a94957",
      "original_commit_id": "67fc994bedf14e360b3e51fa1a71dc6c1684b532",
      "in_reply_to_id": 1720757880,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Split this out to a separate PR: [`176d42b` (#30765)](https://github.com/bitcoin/bitcoin/pull/30765/commits/176d42b9308b439e1acd6e710a3f7bee01c56069)",
      "created_at": "2024-08-30T12:49:26Z",
      "updated_at": "2024-08-30T12:49:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30377#discussion_r1738593854",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738593854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30377"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 861,
      "side": "RIGHT"
    }
  ]
}