{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747",
    "id": 2591037188,
    "node_id": "PR_kwDOABII586acBcE",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32747",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32747.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32747.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32747",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32747/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/3e7abceecfd790bc0887f647d3f731328e19810f",
    "number": 32747,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Introduce SockMan (\"lite\"): low-level socket handling for HTTP",
    "user": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Introduces a new low-level socket manager `SockMan` as an abstract class with virtual functions for implementing higher-level networking protocols like HTTP. This is the next step in https://github.com/bitcoin/bitcoin/issues/31194\r\n\r\nThis is a minimal, alternative version of #30988 (\"Split CConnman\") without any changes to working code (P2P is not affected). It adds a stripped-down version of the `SockMan` introduced in that pull request that implements only what is needed for the HTTP server implemented in #32061 (i.e. no I2P stuff and for now, no outbound connection stuff). Exclusions from the original `SockMan` pull request can be checked with:\r\n\r\n```\r\ngit diff vasild/sockman \\\r\nsrc/common/sockman.h \\\r\nsrc/common/sockman.cpp\r\n```\r\n\r\nThe commit order has been flipped quite a bit because the original PR incrementally pulls logic out of `net` wheras this PR builds a new system from the bottom-up. Otherwise I tried to keep all the `SockMan` code in order so reviewers of the original PR would be familiar with it.\r\n\r\nIt also adds unit tests by introducing a `SocketTestingSetup` which mocks network sockets by returning a queue of `DynSock` from `CreateSock()`. HTTP server tests in #32061 will be rebased on this framework as well.\r\n\r\n",
    "labels": [],
    "created_at": "2025-06-13T18:36:49Z",
    "updated_at": "2025-07-09T23:44:16Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "2b15585ccd910c0347ac402198e37bea548e88ff",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "pinheadmz:sockman-lite",
      "ref": "sockman-lite",
      "sha": "3e7abceecfd790bc0887f647d3f731328e19810f",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 61248407,
        "node_id": "MDEwOlJlcG9zaXRvcnk2MTI0ODQwNw==",
        "name": "bitcoin",
        "full_name": "pinheadmz/bitcoin",
        "owner": {
          "login": "pinheadmz",
          "id": 2084648,
          "node_id": "MDQ6VXNlcjIwODQ2NDg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pinheadmz",
          "html_url": "https://github.com/pinheadmz",
          "followers_url": "https://api.github.com/users/pinheadmz/followers",
          "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
          "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
          "repos_url": "https://api.github.com/users/pinheadmz/repos",
          "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/pinheadmz/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/pinheadmz/bitcoin",
        "archive_url": "https://api.github.com/repos/pinheadmz/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/pinheadmz/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/pinheadmz/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/pinheadmz/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/pinheadmz/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/pinheadmz/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/pinheadmz/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/pinheadmz/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/pinheadmz/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/pinheadmz/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/pinheadmz/bitcoin/events",
        "forks_url": "https://api.github.com/repos/pinheadmz/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/pinheadmz/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/pinheadmz/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/pinheadmz/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/pinheadmz/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/pinheadmz/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/pinheadmz/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/pinheadmz/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/pinheadmz/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/pinheadmz/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/pinheadmz/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/pinheadmz/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/pinheadmz/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:pinheadmz/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/pinheadmz/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/pinheadmz/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/pinheadmz/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/pinheadmz/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/pinheadmz/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/pinheadmz/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/pinheadmz/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/pinheadmz/bitcoin/hooks",
        "svn_url": "https://github.com/pinheadmz/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 279188,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-07-03T11:02:40Z",
        "created_at": "2016-06-15T23:48:20Z",
        "updated_at": "2025-06-10T17:35:30Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "e95bfc1d537e06d223dfcaec510181aa3d3f8386",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37495,
        "stargazers_count": 84488,
        "watchers_count": 84488,
        "size": 288873,
        "default_branch": "master",
        "open_issues_count": 739,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-07-09T23:55:59Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-07-09T23:56:05Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 919,
    "deletions": 14,
    "changed_files": 10,
    "commits": 10,
    "review_comments": 10,
    "comments": 4
  },
  "events": [
    {
      "event": "commented",
      "id": 2971261595,
      "node_id": "IC_kwDOABII586xGdqb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2971261595",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-13T18:36:52Z",
      "updated_at": "2025-07-09T23:44:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32747.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [vasild](https://github.com/bitcoin/bitcoin/pull/32747#pullrequestreview-2958772275) |\n| Concept ACK | [w0xlt](https://github.com/bitcoin/bitcoin/pull/32747#pullrequestreview-2937305602) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#32015](https://github.com/bitcoin/bitcoin/pull/32015) (net: replace manual reference counting of CNode with shared_ptr by vasild)\n* [#30988](https://github.com/bitcoin/bitcoin/pull/30988) (Split CConnman by vasild)\n* [#29415](https://github.com/bitcoin/bitcoin/pull/29415) (Broadcast own transactions only via short-lived Tor or I2P connections by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->\n### LLM Linter (✨ experimental)\n\nPossible typos and grammar issues:\n\n- “an unique id” → “a unique id” [“unique” begins with a consonant sound, so “a” is correct]\n- “response datasent to it” → “response data sent to it” [missing space between “data” and “sent”]\n\n<sup>drahtbot_id_4_m</sup>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#issuecomment-2971261595",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32747"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18139663432,
      "node_id": "HRFPE_lADOABII5867bDTqzwAAAAQ5NUxI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18139663432",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d8274e91c0c8ebb4d6d4ae16ed82a5c2e7dd8bd1",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/d8274e91c0c8ebb4d6d4ae16ed82a5c2e7dd8bd1",
      "created_at": "2025-06-13T19:03:02Z"
    },
    {
      "event": "labeled",
      "id": 18139665382,
      "node_id": "LE_lADOABII5867bDTqzwAAAAQ5NVPm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18139665382",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-13T19:03:13Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2971365995,
      "node_id": "IC_kwDOABII586xG3Jr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2971365995",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-13T19:03:15Z",
      "updated_at": "2025-06-13T19:03:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `MSan, depends`: https://github.com/bitcoin/bitcoin/runs/44070031695</sub>\n<sub>LLM reason (✨ experimental): MemorySanitizer detected use of uninitialized memory during sockman_tests, causing CI failure.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#issuecomment-2971365995",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32747"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18140182279,
      "node_id": "HRFPE_lADOABII5867bDTqzwAAAAQ5PTcH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18140182279",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "55a329ac85df21a88c166519ad684f84b6124b77",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/55a329ac85df21a88c166519ad684f84b6124b77",
      "created_at": "2025-06-13T19:43:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18140539333,
      "node_id": "HRFPE_lADOABII5867bDTqzwAAAAQ5QqnF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18140539333",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2d79cd7dbe7ed06691dd7b44a5227c1a7b849c6f",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/2d79cd7dbe7ed06691dd7b44a5227c1a7b849c6f",
      "created_at": "2025-06-13T20:12:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18149846423,
      "node_id": "HRFPE_lADOABII5867bDTqzwAAAAQ50K2X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18149846423",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5f7941187a12f6d1d180ee29b72b2a5ee7a578b8",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/5f7941187a12f6d1d180ee29b72b2a5ee7a578b8",
      "created_at": "2025-06-14T14:55:11Z"
    },
    {
      "event": "unlabeled",
      "id": 18150107930,
      "node_id": "UNLE_lADOABII5867bDTqzwAAAAQ51Ksa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18150107930",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-14T15:49:34Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2975549723,
      "node_id": "IC_kwDOABII586xW0kb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2975549723",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-16T08:21:26Z",
      "updated_at": "2025-06-16T08:21:26Z",
      "author_association": "MEMBER",
      "body": "I was able to switch https://github.com/Sjors/bitcoin/pull/50 to use this instead of https://github.com/bitcoin/bitcoin/pull/30988 without have to change anything. So it makes sense to me to focus on this PR first, as it's smaller. Thoughts @vasild?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#issuecomment-2975549723",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32747"
    },
    {
      "event": "mentioned",
      "id": 18164809141,
      "node_id": "MEE_lADOABII5867bDTqzwAAAAQ6tP21",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18164809141",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-16T08:21:27Z"
    },
    {
      "event": "subscribed",
      "id": 18164809169,
      "node_id": "SE_lADOABII5867bDTqzwAAAAQ6tP3R",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18164809169",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-16T08:21:27Z"
    },
    {
      "event": "reviewed",
      "id": 2937305602,
      "node_id": "PRR_kwDOABII586vE7oC",
      "url": null,
      "actor": null,
      "commit_id": "5f7941187a12f6d1d180ee29b72b2a5ee7a578b8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK.\r\nAre the functions in this PR to replace Connam functions like `CConnman::BindListenPort`, `CConnman::InitBinds`, etc...?",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#pullrequestreview-2937305602",
      "submitted_at": "2025-06-17T23:19:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747"
    },
    {
      "event": "commented",
      "id": 2983561305,
      "node_id": "IC_kwDOABII586x1YhZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2983561305",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-18T10:04:16Z",
      "updated_at": "2025-06-18T10:04:16Z",
      "author_association": "MEMBER",
      "body": "> replace Connman functions\r\n\r\nIn this PR they are just protocol-agnostic copies of those ConnMan functions. Just the socket stuff without the Bitcoin stuff. We could still proceed with the reactor in #30988 after this is merged and actually replace the socket stuff in ConnMan with SockMan but this PR is minimized with the focus being the socket needs of the HTTP server in #32061",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#issuecomment-2983561305",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32747"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18259049739,
      "node_id": "HRFPE_lADOABII5867bDTqzwAAAARAUv0L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18259049739",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "130708803dd623c37e21bf72887ea84cf59460cc",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/130708803dd623c37e21bf72887ea84cf59460cc",
      "created_at": "2025-06-21T22:24:55Z"
    },
    {
      "event": "reviewed",
      "id": 2945433124,
      "node_id": "PRR_kwDOABII586vj74k",
      "url": null,
      "actor": null,
      "commit_id": "130708803dd623c37e21bf72887ea84cf59460cc",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK 5f7941187a12f6d1d180ee29b72b2a5ee7a578b8",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#pullrequestreview-2945433124",
      "submitted_at": "2025-06-23T10:09:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDUzNWRhYWYxNWZkNzU0MzM1MTE2ZDE3ODMzYTQ1MjYxY2RmZjRlOTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/535daaf15fd754335116d17833a45261cdff4e93",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/535daaf15fd754335116d17833a45261cdff4e93",
      "tree": {
        "sha": "93f1160eba3d4bd33803e04e6ff9abe0abfc1d5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93f1160eba3d4bd33803e04e6ff9abe0abfc1d5f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 93f1160eba3d4bd33803e04e6ff9abe0abfc1d5f\nparent 65b26507b84a870a39a43b2ad4fd78e539773fa0\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749059576 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750703116 -0700\n\nSockMan: introduce class and implement binding to listening socket\n\nIntroduce a new low-level socket managing class `SockMan`.\nUnit-test it with a new class `SocketTestingSetup` which mocks\n`CreateSock()` and will enable mock client I/O in future commits.\n\n`SockMan` and `SocketTestingSetup` are designed to be generic and\nreusbale for higher-level network protocol implementation and testing.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhZnA8ACgkQ5+KYS2KJ\nyTrgWRAA1Ux+vlIXMA5rDiFEw5G73he1kayG0pOWMnb9xIohD1tXYurdN9gqbnar\nHdBBdLwngh7RPvbcgThtX1Voe3r7LMsFzXBIMFQJNV/4I6MabXcitKcJ8XssGM5x\nakTF3rJ+RGpTCpq1y3TcahIj+woQGD7H4uvQJfGNYwimSvFCbubaAgI9GbAlXa3y\ns06XMTMceaUjyzDmxN451Jggb7IZkqy+Cn1xJkBRPAQo20fcTynKamWRtjWbg15x\n4QJOpeHrScQNvAd5Q3mm1ToNuwvWmwG/9FErI6QIwiPSF2/4bAYZVfXI3W/N6WcP\npbVPkKYVHExFsLLjL0vA9JBOB3G6C/WzY9swsELHyO8S0o+rD0127XwycxZK0UqK\nSJeyYDRorihAGw8UdFgyANCdi31wOpGigQMsMLnSFbLt5uLl0StFeuc8sXL1ktF8\n098Rl9irSZGb8qBJFP4rsGTDAkaHo3/9bqm2ysxnlnxpfiaOj0ExLKq0b3W26LNB\nEius2oL4v+Vk6JI5T0YhbqLuQE+LjFBXxuUNtKxDRG+TDXXZjaoAikM+CZUMjrst\nXHiYpTr7s+LHWGEGjXkvX2SB2+NE7aQT2xz0ZiKsgOY0/7vPKqFIzv5H17BDN5aQ\njh9TNGjpTlFU1NxGQTMJVRxCjDNdqa3ZFS0WyuJvJ+XkSOqiBz0=\n=jYb7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65b26507b84a870a39a43b2ad4fd78e539773fa0",
          "sha": "65b26507b84a870a39a43b2ad4fd78e539773fa0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/65b26507b84a870a39a43b2ad4fd78e539773fa0"
        }
      ],
      "message": "SockMan: introduce class and implement binding to listening socket\n\nIntroduce a new low-level socket managing class `SockMan`.\nUnit-test it with a new class `SocketTestingSetup` which mocks\n`CreateSock()` and will enable mock client I/O in future commits.\n\n`SockMan` and `SocketTestingSetup` are designed to be generic and\nreusbale for higher-level network protocol implementation and testing.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-23T18:25:16Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-04T17:52:56Z"
      },
      "sha": "535daaf15fd754335116d17833a45261cdff4e93"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMyYzU3ZDA4NDM5Y2ZkZTIxM2EyNGU4YWIxZmEyZjY0ZDBmZmVhYzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32c57d08439cfde213a24e8ab1fa2f64d0ffeac5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/32c57d08439cfde213a24e8ab1fa2f64d0ffeac5",
      "tree": {
        "sha": "0aa6fae9fb322968057840ab7cffb1e01037b01c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0aa6fae9fb322968057840ab7cffb1e01037b01c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0aa6fae9fb322968057840ab7cffb1e01037b01c\nparent 535daaf15fd754335116d17833a45261cdff4e93\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749059790 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750703132 -0700\n\nstyle: modernize the style of SockMan::BindListenPort()\n\nIt was copied verbatim from `CConnman::BindListenPort()` in the previous\ncommit. Modernize its variables and style and log the error messages\nfrom the caller. Also categorize the informative messages to the \"net\"\ncategory because they are quite specific to the networking layer.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhZnBwACgkQ5+KYS2KJ\nyTpq6A//XNPSMp6RVnIAhyzoefnUouNnFm1+zZJpzy2U5wY2Rg4rJAgD4AVn3riF\nX9c2IQ+PwSxXjs0tA50MM0kRLS6QQ1AMndFWljcVsjEicVAj/BDvdWDs2L3Z1YXd\nr3U/WF0vby2I2inJjbyrd/hyONzLa954aflqdVvIXjSe9Jci3spKJSLUW5fZ2S1U\nxKRt4xUtfnsA28A8K7/2/ftLLrBlKBfvOzqlbNebW/DXd8ORZy8hHlWXR3kl7SWP\n+slQHsrDJdw3vi2DnVlWvnBEwS9sf/CC6C0U6DQgyA1Ks1BdYucMupeAE3rqcfRs\nivm0DKVGHpHLTBSQEDbFEhKJJ1ZGV7u+3kdR6B10FreYoIgDTekcXjiA7bW9e/Ve\ndwWjWfD4pFIKHuezsU91qvMST2S//ud6BS51giDhQSkDq33dpNBVfLk2zY0m9Ut7\nyIqisnJGv2eKFE5jAhjcMqYDLrCKYC4vnOLuWJlOS5wV7IEylupxNz0gfZ/IFcBa\ni45ZY4BliFfMppkukNEJqFByJrKYZWgZCNlocxGaw4jAzoeKIDwkAKAvoflP1VfG\npwHIwiPJsHj07fVH8j0GQgDffDYhlNVmr7/dEmCacqa3EUFBFLCv1JP+P98z5GkD\nGVqUpEBjaAZekNo7wL5cdGnDbUV+TXJtiNGJghznyEe5JxnmLrw=\n=+72e\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/535daaf15fd754335116d17833a45261cdff4e93",
          "sha": "535daaf15fd754335116d17833a45261cdff4e93",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/535daaf15fd754335116d17833a45261cdff4e93"
        }
      ],
      "message": "style: modernize the style of SockMan::BindListenPort()\n\nIt was copied verbatim from `CConnman::BindListenPort()` in the previous\ncommit. Modernize its variables and style and log the error messages\nfrom the caller. Also categorize the informative messages to the \"net\"\ncategory because they are quite specific to the networking layer.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-23T18:25:32Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-04T17:56:30Z"
      },
      "sha": "32c57d08439cfde213a24e8ab1fa2f64d0ffeac5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNmOWQ4NjkxYTAyMjE2NWFkZmI3NGZmMGNkZTg2ZmY3NWQxOTY0ZGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f9d8691a022165adfb74ff0cde86ff75d1964de",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3f9d8691a022165adfb74ff0cde86ff75d1964de",
      "tree": {
        "sha": "3a245442da94b8e32b3c2793d15c578f43f9b14e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a245442da94b8e32b3c2793d15c578f43f9b14e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3a245442da94b8e32b3c2793d15c578f43f9b14e\nparent 32c57d08439cfde213a24e8ab1fa2f64d0ffeac5\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749060853 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750703251 -0700\n\nSockMan: implement and test AcceptConnection()\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhZnJYACgkQ5+KYS2KJ\nyTpiPw/+KBhcqqPkf/C114cyKNc4oTZXlqNWfBMu++F0/QLg4Q2Ki/anZDBl9Ory\n1n0J1zAaaPVRRWLp1sVNDWO3z7wpcKaguSMGm/H2mqxXPPPGSCJV3IdSpbJ8lKzn\nseJdJlOCKYuhrab5Crfc9PR5urS/FExCPdUfTibJL5py5ClvCTtpnYK65+sCJobq\nctmV2O192R6Nj2njbDJPu625j3X+AlhGfteOSPewsaSIg14OlJChfmZfHvHoCy76\nRS/5Tu0Ouh451WbGoweiGQfAascWEX5xf8FQ1XtHlcwLR3Nl+HTZ02KSPhzhjtml\nvxkstIrmOKXJidleBusgkkWAsTZJF0YdOJEGhWmeAKtdB6oPBWbKXOj3lsRA84TK\n9oQn2Ge/negFET1vLlZ1XJeEKkLXcq5IOq927B/+VzunvSDwOD8upd7nZz6OXQoH\n1ZgY7kKnv3/o4O0BoZfk4tVBQlrcAdNO+s3eiocI1eT6LFr8pfH6BeRNneVJMwks\nO1llIljNZD7ihbvsyAaomAc0F+6Dy6x/FcE1tUmYOVifPvdpF6MN8fiJvTibjLew\nj/BqHfyZLrJ0NP3K7chwkHRmde79id53FbS8CIi7Bgu/Eo0uQTghq1mjKzGOgJLV\nFb2Tg1BHaf5xWnKq2p4LJZ/EF2bdXOOtOtPWvPUg3ZmZdIQWLaQ=\n=Xq6r\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32c57d08439cfde213a24e8ab1fa2f64d0ffeac5",
          "sha": "32c57d08439cfde213a24e8ab1fa2f64d0ffeac5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/32c57d08439cfde213a24e8ab1fa2f64d0ffeac5"
        }
      ],
      "message": "SockMan: implement and test AcceptConnection()\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-23T18:27:31Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-04T18:14:13Z"
      },
      "sha": "3f9d8691a022165adfb74ff0cde86ff75d1964de"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVlMGUxMTE0Yjg0YmMwMDhkNWU0ZGEyNDE3Mjc0ODY3MWIyMGIyOGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e0e1114b84bc008d5e4da24172748671b20b28d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5e0e1114b84bc008d5e4da24172748671b20b28d",
      "tree": {
        "sha": "d260ec26e3c195ca51387da75d19ebdef38e9b4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d260ec26e3c195ca51387da75d19ebdef38e9b4d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d260ec26e3c195ca51387da75d19ebdef38e9b4d\nparent 3f9d8691a022165adfb74ff0cde86ff75d1964de\nauthor Vasil Dimov <vd@FreeBSD.org> 1726586947 +0200\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750703259 -0700\n\nstyle: modernize the style of SockMan::AcceptConnection()\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhZnJsACgkQ5+KYS2KJ\nyToRmBAAqyY5oI2dt5VtoeppPtIH0VQsNmsZ/yvmq/bGhjagrs97deqXCQhy9nCs\nnoJosDx/v4DcTD+Vu0lwc9vfsNmGjP+YqSIGtCwdTU/lwpj79mkQsp3qi38uHX+H\n6jaMdswtfMH0e5IMIg2ZQ6yqSnpMr4DrSWMW2mSOhuPC0f2MeoNsfcjnXjsFcsHb\n9+I/CejLCiXNDaPV73r4Pg0aps9j/Bb7GS7G+8KkCMZ+eu9s6MBY+hIoydYyq+AJ\nTAo8UfqK+NsrpYm37TceMGv54oMCPADdf6fQkPTN3pTNTqTVak92iOVYhGM7dn4W\nH/qEbXQDferc4wgMiV2Zh7Bh1kk5I24nA1ScEEex1K9ci+Rgk7EmedcfZTNk1AZB\n8LU1XDrGmY2e2v7U4i2flgdcJJvKnuo8ZppK1MaVhLCJru2+ChUd79KcF3bAsaq+\nsS9NioKsvftdjRhJl8O92GwYgkdEhPwTquhDmlw6BDCQnN3M8Al9UDMZ93irn13k\n9uAOzXCOVEGzaledA8Ucor7XSL6RvvULphVx7I66ewSaRJwanO3bayj2HkLknxT5\nkHLyhpPE3AGXErV7x5VXv0NIImAO05Dpl/EBzjQXbheIdZOW2F4tSewfJomBaXlD\nG9TzEP/j/u3JSlB72tSQqlw+NsRCbvLWFu5VX0NX43sIz/qIU7U=\n=MkDE\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f9d8691a022165adfb74ff0cde86ff75d1964de",
          "sha": "3f9d8691a022165adfb74ff0cde86ff75d1964de",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3f9d8691a022165adfb74ff0cde86ff75d1964de"
        }
      ],
      "message": "style: modernize the style of SockMan::AcceptConnection()",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-23T18:27:39Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-09-17T15:29:07Z"
      },
      "sha": "5e0e1114b84bc008d5e4da24172748671b20b28d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkzOWMyMjIwZThlZGE4YmQ0YmU3ZmNjZmMwMGJlMTgwMzdkODhmNjI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/939c2220e8eda8bd4be7fccfc00be18037d88f62",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/939c2220e8eda8bd4be7fccfc00be18037d88f62",
      "tree": {
        "sha": "78475788a2a7b0cad4d83def22bd8bc28cd5c3c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78475788a2a7b0cad4d83def22bd8bc28cd5c3c3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 78475788a2a7b0cad4d83def22bd8bc28cd5c3c3\nparent 5e0e1114b84bc008d5e4da24172748671b20b28d\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749061156 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750703259 -0700\n\nSockMan: generate sequential Ids for each newly accepted connection\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhZnJsACgkQ5+KYS2KJ\nyTq6XA//WogppgztOWXWMg8OmfYqUrScxAhsjhiCNdxA2mPFmJXDGP5jlxz7QTZ8\n7bwUxkaoPmvfmUnNYHSn2TjuIPOEnnTmvHdmrXS4NLErw/oZ9hsAmS69W8kL9cUP\n/q3y0lJcRgfsHgDk6CmaCEPn2+Ev1LDMrbVUf2Vhuixx601e3bXq/0bwP8QRlpbz\n2RcoqdRj+i3tudQrn0hz8zn9YJfWGaodpxxN+e09auQVd3UNm/X56yDx578Shbim\ngpfIfu/lxBNjD+X2uztqXryv9WhSdJdrnXQ8lsKLNZDAZvfs4yUxSN6dbpZDTdHc\nKqcNzB79meCTyQBnZOCwkSr0eVwlUyloc34MNhmtBPFR9U6/7NylSMTBKAt2myMe\nJpavNbsjdysfAQ5ynvynKo6VPP61tgJZKCWcGxXQ3Sl2rrokRbKKhZTmITZWTurD\n9BgJGA+Qe0sZgEhjXD2lRa3802goy3gh1Erh8Z3+1BSO0JZYll3pKX9LcBHqdMbj\nVE8FEjijLg9wBI/iHxndYfHUD7voknYg1oisyENjXkEpzsL4+rOOU5VG+A04aD28\n5X2km6hv3x4hHyq1zb6lMWxRG8cB0BPb4G/732OhMfI12JOsxuXpSl6a0Nn5PKxg\nIUAkPwh4dHfoUOVhHFXTcGn/5dofF81UT0mgEeJy5zIvFUelHK8=\n=2ium\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e0e1114b84bc008d5e4da24172748671b20b28d",
          "sha": "5e0e1114b84bc008d5e4da24172748671b20b28d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5e0e1114b84bc008d5e4da24172748671b20b28d"
        }
      ],
      "message": "SockMan: generate sequential Ids for each newly accepted connection\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-23T18:27:39Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-04T18:19:16Z"
      },
      "sha": "939c2220e8eda8bd4be7fccfc00be18037d88f62"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkzNTMzMmM0N2MzYzMxMzg2OWJhYWFjNGNlOGIxODdjYjNjYzRkODA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/935332c47c3c313869baaac4ce8b187cb3cc4d80",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/935332c47c3c313869baaac4ce8b187cb3cc4d80",
      "tree": {
        "sha": "ab192398e800bca45d887357fbe8843cf4d4b20f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab192398e800bca45d887357fbe8843cf4d4b20f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ab192398e800bca45d887357fbe8843cf4d4b20f\nparent 939c2220e8eda8bd4be7fccfc00be18037d88f62\nauthor Matthew Zipkin <pinheadmz@pm.me> 1750703761 -0700\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750703761 -0700\n\n[move-only] Make GetBindAddress() callable from outside net.cpp\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhZnsUACgkQ5+KYS2KJ\nyTrX8xAA10YBzR6p1XglrUwF05ox/dhwF8HHy69jD6Tfc6MQFSb2kQ3EVYXrb+G0\nUiFHrWtHN5XA+m8oO+2WucnbtzApqX0c5JNX906UeenOqk+lJRlIRlNEiyjhOgRY\nxleZD4NUXml5+kXu9xetkxBgyyH855b6IBNAmlEqUnH0L6Ellf9EJmywrFOvDRPk\nDYnN5HEAOFkI+8lFGx6Gq4o/fQkBR2H1ssa5+5r4ya1RX23GVyBjmaf7NhqxgGbA\nDn1UH5e2LH5MQ/Vzzczc9b0/ouAYZln7b2kznz1jwFbAhUx8HDCpbwJkwO+B+1kC\nY7inOHu8P1phM4kX5JjNUmPfOBQX0d2ZI4dfqI+V5175hvcWbffGPIE4psdvSkU8\nOjtWHtKbr/P/mAifLDMSieh+UKJ/sOMvuOHAYJINkoEQuJeVbStC08XtxMOMbsPq\nIviy/vYYm5pspsPYlQ+HV76LfMm60tTTXQhhiqe0rBN93HcIrtgBeMEhGlGrvwp/\n22NWsw+fqNNj5xxRxbfJumGNi0q4UbRDzBQ58j+jIdwIYFot/i2nN0Y2n6tXMnq1\n11CCN5H4KZNpfekfZQoN80xor6kKYfSITijDNKF5HIwXhUIPNwG0OvI7PqH/ho1A\nXIVCqCDZtZfOf4bLGJqURUSQk7DkeitDdhzTwykffvXfvkJNIIw=\n=ykAF\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/939c2220e8eda8bd4be7fccfc00be18037d88f62",
          "sha": "939c2220e8eda8bd4be7fccfc00be18037d88f62",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/939c2220e8eda8bd4be7fccfc00be18037d88f62"
        }
      ],
      "message": "[move-only] Make GetBindAddress() callable from outside net.cpp",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-23T18:36:01Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-23T18:36:01Z"
      },
      "sha": "935332c47c3c313869baaac4ce8b187cb3cc4d80"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGExZTg0N2Q2OGQzOGY3ZWFhZmNiMmQ2MjQ2ODkyMDdiN2UzM2VjODY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1e847d68d38f7eaafcb2d624689207b7e33ec86",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a1e847d68d38f7eaafcb2d624689207b7e33ec86",
      "tree": {
        "sha": "c1cd98c98a952d7af176af0adea2d3bc5b5127ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1cd98c98a952d7af176af0adea2d3bc5b5127ae"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c1cd98c98a952d7af176af0adea2d3bc5b5127ae\nparent 935332c47c3c313869baaac4ce8b187cb3cc4d80\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749754636 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750703955 -0700\n\nSockMan: start an I/O loop in a new thread and accept connections\n\nSocket handling methods are copied from CConnMan:\n\n`CConnman::GenerateWaitSockets()` goes to\n`SockMan::GenerateWaitSockets()`.\n\n`CConnman::ThreadSocketHandler()` and\n`CConnman::SocketHandler()` are combined into\n`SockMan::ThreadSocketHandler()`.\n\n`CConnman::SocketHandlerListening()` goes to\n`SockMan::SocketHandlerListening()`.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhZn1kACgkQ5+KYS2KJ\nyTpMYBAAob4f2vkwW4dJ6dnJTgpRko/xxzLHU3D++PwYFGh559ma9iPIs/BFHTg0\n4UfxepnuIPQy+ZmBEJs8iX790a0pJQOAHkxWqfugLVJ5ra/1cuQbfrA1KabqbwZi\nneQR4Zpq+vBh306TL2uWVunyBmP8fa9+MvSuLCSGJVzP70wCjV7AdyUJtS7wMFEf\nn033cBwAVR5G+lVp4sK2tEjS3h35fbhApPYrefoMIJ5NtXz423a9Z345xrEIwKl4\nsW0LjNBDegih1qS/dEMuKFZo1K3jg8/iwW1RYl+OnX+IeLZ7oX/9nRDEth0xBhcW\nsvtiJxt69WTF1BHwCE9agCLwaL4pd2T9yScUHJg8wp5dJjGiEAPeydEL7XBQxvGF\nHBN/r6vr7kC/4S5p+HKtoT0KYOgRzzUNR29SuiqEUB+MAzNbhLK6jqvYojuORHaa\ndRD6ejrN29KIC7Vtbzd54B8EommSBgg/xRQN/MCa3lTVG1PPbvJDyAoAGwm92mcC\nb196W4m/b0jjVGb+qtzQtUuWW/AzCMBE91RXawJ56+To5PyHZUafCMC4mf2Z14xX\njBJh+bIWJA+Muoiyj5oz/Y74f5K1vBylrH2g5OLVINL+Ne/oxRkSyMAAMsdra2Hn\ndj8Hh5o5fhPbBDvZcFzH69FlVV7YSLxnI/hLe1vyS66Xq3WwgHQ=\n=nlZ6\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/935332c47c3c313869baaac4ce8b187cb3cc4d80",
          "sha": "935332c47c3c313869baaac4ce8b187cb3cc4d80",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/935332c47c3c313869baaac4ce8b187cb3cc4d80"
        }
      ],
      "message": "SockMan: start an I/O loop in a new thread and accept connections\n\nSocket handling methods are copied from CConnMan:\n\n`CConnman::GenerateWaitSockets()` goes to\n`SockMan::GenerateWaitSockets()`.\n\n`CConnman::ThreadSocketHandler()` and\n`CConnman::SocketHandler()` are combined into\n`SockMan::ThreadSocketHandler()`.\n\n`CConnman::SocketHandlerListening()` goes to\n`SockMan::SocketHandlerListening()`.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-23T18:39:15Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-12T18:57:16Z"
      },
      "sha": "a1e847d68d38f7eaafcb2d624689207b7e33ec86"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ0M2RjOTMyMGMwZDJiZmMzYTg5NjNmZTQyZGNiY2Q1MDYyYzZmYTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d43dc9320c0d2bfc3a8963fe42dcbcd5062c6fa5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d43dc9320c0d2bfc3a8963fe42dcbcd5062c6fa5",
      "tree": {
        "sha": "3789cd2da7fa10579c7ffa4652f1d40eaaa9b5f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3789cd2da7fa10579c7ffa4652f1d40eaaa9b5f9"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3789cd2da7fa10579c7ffa4652f1d40eaaa9b5f9\nparent a1e847d68d38f7eaafcb2d624689207b7e33ec86\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749756905 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750704435 -0700\n\nSockMan: handle connected sockets: read data from socket\n\n`CConnman::SocketHandlerConnected()` copied to\n`SockMan::SocketHandlerConnected()`.\n\nTesting this requires adding a new feature to the SocketTestingSetup,\ninserting a \"request\" payload into the mock client that connects\nto us.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhZoUUACgkQ5+KYS2KJ\nyTp6DRAAk1oGfAj7hdrLphxsXd47tKVegQOgcXquWohUxQ1GFyvjUYJWaixevcSs\nhWKjuLnf6pspTnz1Kyq0/x0S9w3nixVkaRyiYJo1Qaj2yG694imTujYTlNR/wIKi\n6r5uX6UMTA2hFCgxcARmdkDE9Xz/xPX+Oz7vmpTZAaMORjm98t9U/NzjjwfNiCSL\ncF5KcU1AYDremOmZAI+rfVes8wTGLiC5A47ppw0jBeky+CB3MbSwTAgXlywgcmHz\nZl+o0Jn8noy+HS4Km5eqPNeHiVvceSoNf0srBxioTi468udI+SOuWpqsRVs5LHaI\nLkAXAi0yus6iy5zB5JOn5EMvqxFQV7aLl5l2HBvCMTBI1zFQpxMGG98gwch0Aa68\nAWfVWr1OMsmrgjM+kvFop0wVn3+N7zDG+o8MUeLC+vOJPZWpneIdgZnocSo/LPAM\nfY4tJtPbE4y189lvjfC9Mf/YTZDcbRNdv1KNqGYZXEk61x5mFiqHnVfbc+VuYelw\ni55oehfA4h4xfnMJche1YaQa/wqOKNQW5s9V6VOcfx6x1jbCb3WNYfcI1FlW6AY8\nQ0NXuDOFc3DVrnnbx14PT4bP96Q9Qqgb/DSPtKJ1zeY4swksi9oEs1DiuCdNYrFA\nqKbSo52gzrRgiRIZrMk9HiDq7toU2Ht+a0q37TrvNHtOfG8l8lE=\n=JNJa\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1e847d68d38f7eaafcb2d624689207b7e33ec86",
          "sha": "a1e847d68d38f7eaafcb2d624689207b7e33ec86",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a1e847d68d38f7eaafcb2d624689207b7e33ec86"
        }
      ],
      "message": "SockMan: handle connected sockets: read data from socket\n\n`CConnman::SocketHandlerConnected()` copied to\n`SockMan::SocketHandlerConnected()`.\n\nTesting this requires adding a new feature to the SocketTestingSetup,\ninserting a \"request\" payload into the mock client that connects\nto us.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-23T18:47:15Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-12T19:35:05Z"
      },
      "sha": "d43dc9320c0d2bfc3a8963fe42dcbcd5062c6fa5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJlODdiMDk3YTM5ZTY5NmVlYmEyYjM0NTEzNDFjNTU0MjMzYjFhYzY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e87b097a39e696eeba2b3451341c554233b1ac6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2e87b097a39e696eeba2b3451341c554233b1ac6",
      "tree": {
        "sha": "add07f17eb52bb1cf43a5ab14c370a086271f6e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/add07f17eb52bb1cf43a5ab14c370a086271f6e0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree add07f17eb52bb1cf43a5ab14c370a086271f6e0\nparent d43dc9320c0d2bfc3a8963fe42dcbcd5062c6fa5\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749824279 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750704680 -0700\n\nSockMan: handle connected sockets: write data to socket\n\nSockets-touching bits from `CConnman::SocketSendData()` copied to\n`SockMan::SendBytes()`.\n\nTesting this requires adding a new feature to the SocketTestingSetup,\nreturning the DynSock I/O pipes from the mock socket so the received\ndata can be checked.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhZojwACgkQ5+KYS2KJ\nyTryDRAA2rzOqQ7aQ/qRMq5YlanyMOQQdz8i8zREs3jk0HHsYva5UAZ6GTDMmKuL\nV8mn2yFPyOkTDjjPeGcSwXnB9o8MhScpkTJ6SKcfKRqfa4Jjqk20gIVYSI/5sPc4\nSUk7s5GzerGyHeW40/SOIjl9L+Q43lb4mClBkaESjl3MHgPQjnBhUQWmro+cqwxH\nRXCr0OsGAZNA/xRATPXnWIpuzhWVq/SZGwekeVpHe/RI9jGZ81n2kiaC6U+GhGG/\n4op2FsoE4p00Gmrk4H979rSeEJmJbO8qO1IVv/noSoUmduVxOoVymVbuys2zzFh7\nW2ny/5V/ZIMSK9kul7D6E22/mtnhRj2HW5nVg4XaFISvIeE1/Yax2SmUa5xCYqq4\n2OxlkRFe1m9SMqJMQQ9FuIwX9MpI0iSiS5j4lOBCDZvhmEDesjF1N+c3CKX+nUBq\nYMlgrJ/ld1GBqwu+XF7p3A8wF2Ww2+Bk466gpmfUgHDu81gB7/Zdm8CAMQq06sQS\nG5+HHqrpM000wLtmLquSIxRv8xbEo+W+Fyw7XWQwf/zt5quax0YeoZIkd9ob9kLE\njYTJRI1TfaqcXR4JcTV2dXmWS/NF50IMDIaS9J/t/svnP8dkNWkdhm7WFyubHVv4\nD9Htyt0M+D/QJqOyvAaTcmluBkbp3cWIUXOk3QbDF40KltodrwU=\n=nDU8\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d43dc9320c0d2bfc3a8963fe42dcbcd5062c6fa5",
          "sha": "d43dc9320c0d2bfc3a8963fe42dcbcd5062c6fa5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d43dc9320c0d2bfc3a8963fe42dcbcd5062c6fa5"
        }
      ],
      "message": "SockMan: handle connected sockets: write data to socket\n\nSockets-touching bits from `CConnman::SocketSendData()` copied to\n`SockMan::SendBytes()`.\n\nTesting this requires adding a new feature to the SocketTestingSetup,\nreturning the DynSock I/O pipes from the mock socket so the received\ndata can be checked.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-23T18:51:20Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-13T14:17:59Z"
      },
      "sha": "2e87b097a39e696eeba2b3451341c554233b1ac6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNlN2FiY2VlY2ZkNzkwYmMwODg3ZjY0N2QzZjczMTMyOGUxOTgxMGY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e7abceecfd790bc0887f647d3f731328e19810f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3e7abceecfd790bc0887f647d3f731328e19810f",
      "tree": {
        "sha": "a7f7d910becc916b8a266283bb468ac02e374853",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7f7d910becc916b8a266283bb468ac02e374853"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a7f7d910becc916b8a266283bb468ac02e374853\nparent 2e87b097a39e696eeba2b3451341c554233b1ac6\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749825814 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750704705 -0700\n\nSockMan: dispatch cyclical events from I/O loop\n\nCopy from some parts of `CConnman::SocketHandlerConnected()` and\n`CConnman::ThreadSocketHandler()` to:\n`EventIOLoopCompletedForOne(id)` and `EventIOLoopCompletedForAll()`.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhZokEACgkQ5+KYS2KJ\nyTpXkA//dbBxdJIdbbJ+eHjU046R/hOxZNhz0j4AS0kx95KAYrA1TTn3yHV391Du\ne+c9DzBzg7+3oPulrto7VsPopJ/sW/akmzZqHaygHIl7T1g70AQuQOh42tVfn3l1\ne7VXNMtb5O2fTJNjPHoWDBrsFHvSayXHoMAoXoQakiegoiE9QzwTi08VDRyEbmA/\nV3MPwx6oDeFYaa8S3PaZrpkuNUZLpfM8dUZEHChZwRS3UfnyKfTfpR5WKmCYmVSf\n2TARDvMWZPDsN6yIbMCUf4TvFjjZOWtNvdAXkDROdVUE97CRcGOTQnKaCf6UeaGz\n61bvHaZJGArOt3OcrjCnfQlI3D099olH1OPtLu2eSkuk4RO5Hpi2RsHGeAKo8Xg8\nGu9ujkLMZiinenxLE8GUx4dKBbel5DV+44emQfFB8XxTQBOBI7eAjTwf5W3gmp+e\nKkssvofHYDOHRbHvo4/3cNJJA2IFgm1rsSk0iwBA86N57vKNegbFG9rZbBruRjN5\nEeK69o2NFLceGkDkOXWrLXHJ2/UiwgGcFTuqx8Fx5Sp0BLFBaMkfxKXEPc7o17xt\nVXGDBaVUuU0tURKBAufArnKhflO1b/RgFAzSR2UpHqcqP0sVqOwag2qr0E3lOUHx\n4EShtX34JQmviPEmBu1d5BPbS64yo4Pccbzq2Xz9iEqyCZs7s60=\n=zOxq\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e87b097a39e696eeba2b3451341c554233b1ac6",
          "sha": "2e87b097a39e696eeba2b3451341c554233b1ac6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2e87b097a39e696eeba2b3451341c554233b1ac6"
        }
      ],
      "message": "SockMan: dispatch cyclical events from I/O loop\n\nCopy from some parts of `CConnman::SocketHandlerConnected()` and\n`CConnman::ThreadSocketHandler()` to:\n`EventIOLoopCompletedForOne(id)` and `EventIOLoopCompletedForAll()`.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-23T18:51:45Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-13T14:43:34Z"
      },
      "sha": "3e7abceecfd790bc0887f647d3f731328e19810f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18282616969,
      "node_id": "HRFPE_lADOABII5867bDTqzwAAAARBupiJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18282616969",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3e7abceecfd790bc0887f647d3f731328e19810f",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/3e7abceecfd790bc0887f647d3f731328e19810f",
      "created_at": "2025-06-23T23:20:31Z"
    },
    {
      "event": "reviewed",
      "id": 2951071498,
      "node_id": "PRR_kwDOABII586v5ccK",
      "url": null,
      "actor": null,
      "commit_id": "3e7abceecfd790bc0887f647d3f731328e19810f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Rebase to address review by @vasild THANKS!",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#pullrequestreview-2951071498",
      "submitted_at": "2025-06-24T00:43:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747"
    },
    {
      "event": "reviewed",
      "id": 2958772275,
      "node_id": "PRR_kwDOABII586wW0gz",
      "url": null,
      "actor": null,
      "commit_id": "3e7abceecfd790bc0887f647d3f731328e19810f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 3e7abceecfd790bc0887f647d3f731328e19810f",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#pullrequestreview-2958772275",
      "submitted_at": "2025-06-25T15:57:16Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747"
    },
    {
      "event": "review_requested",
      "id": 18319901223,
      "node_id": "RRE_lADOABII5867bDTqzwAAAARD84In",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18319901223",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-25T15:57:20Z",
      "requested_reviewer": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_request_removed",
      "id": 18437288730,
      "node_id": "RRRE_lADOABII5867bDTqzwAAAARK8rMa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18437288730",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-02T18:08:06Z",
      "requested_reviewer": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18437288752,
      "node_id": "RRE_lADOABII5867bDTqzwAAAARK8rMw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18437288752",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-02T18:08:06Z",
      "requested_reviewer": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158577472",
      "pull_request_review_id": 2945433124,
      "id": 2158577472,
      "node_id": "PRRC_kwDOABII586AqUdA",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/sockman.h>\n+#include <test/util/setup_common.h>\n+#include <util/translation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(sockman_tests, SocketTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(test_sockman)\n+{\n+    class TestSockMan : public SockMan\n+    {\n+    public:\n+        // Connections are added from the SockMan I/O thread\n+        // but the test reads them from the main thread.\n+        Mutex m_connections_mutex;\n+        std::vector<std::pair<Id, CService>> m_connections;\n+\n+        // Received data is written here by the SockMan I/O thread\n+        // and tested by the main thread.\n+        Mutex m_received_mutex;\n+        std::vector<uint8_t> m_received;\n+        std::vector<uint8_t> m_respond{'o', 'k'};\n+\n+        size_t GetConnectionsCount() EXCLUSIVE_LOCKS_REQUIRED(!m_connections_mutex)\n+        {\n+            LOCK(m_connections_mutex);\n+            return m_connections.size();\n+        }\n+\n+        std::pair<Id, CService> GetFirstConnection() EXCLUSIVE_LOCKS_REQUIRED(!m_connections_mutex)\n+        {\n+            LOCK(m_connections_mutex);\n+            return m_connections.front();\n+        }\n+\n+        std::vector<uint8_t> GetReceivedData() EXCLUSIVE_LOCKS_REQUIRED(!m_received_mutex)\n+        {\n+            LOCK(m_received_mutex);\n+            return m_received;\n+        }\n+\n+    private:\n+        virtual bool EventNewConnectionAccepted(Id id,\n+                                            const CService& me,\n+                                            const CService& them) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_connections_mutex)\n+        {\n+            LOCK(m_connections_mutex);\n+            m_connections.emplace_back(id, them);\n+            return true;\n+        }\n+\n+        // When we receive data just store it in a member variable for testing.\n+        virtual void EventGotData(Id id, std::span<const uint8_t> data) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_received_mutex)\n+        {\n+            LOCK(m_received_mutex);\n+            m_received.assign(data.begin(), data.end());\n+        };\n+        virtual void EventGotEOF(Id id) override {};\n+        virtual void EventGotPermanentReadError(Id id, const std::string& errmsg) override {};\n+\n+        // As soon as we can send data to the connected socket, send the preloaded response.\n+        // Data is sent by the SockMan I/O thread and read by the main test thread,\n+        // but the Mutex in SockMan::ConnectionSockets guards this.\n+        virtual void EventReadyToSend(Id id, bool& cancel_recv) override\n+        {\n+            cancel_recv = false;\n+            if (m_respond.size() > 0) {\n+                std::string errmsg;\n+                ssize_t sent = SendBytes(id, m_respond, /*will_send_more=*/false, errmsg);\n+                // Larger payloads may require multiple write operations in production\n+                // but since there is no actual network socket involved in the test\n+                // we should be able to simplify.\n+                BOOST_CHECK_EQUAL(sent, m_respond.size());\n+                // Only send the response once\n+                m_respond.clear();\n+            }\n+        }\n+    };\n+\n+    TestSockMan sockman;\n+\n+    // This address won't actually get used because we stubbed CreateSock()\n+    const std::optional<CService> addr_bind{Lookup(\"0.0.0.0\", 0, false)};",
      "path": "src/test/sockman_tests.cpp",
      "position": 86,
      "original_position": 90,
      "commit_id": "3e7abceecfd790bc0887f647d3f731328e19810f",
      "original_commit_id": "5f7941187a12f6d1d180ee29b72b2a5ee7a578b8",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "9299d5dbc5 `SockMan: introduce class and implement binding to listening socket`\r\n\r\nnit, ensure `Lookup()` succeeded before continuing because below `addr_bind.value()` is used unconditionally:\r\n\r\n```cpp\r\nBOOST_REQUIRE(addr.has_value());\r\n```",
      "created_at": "2025-06-20T10:15:06Z",
      "updated_at": "2025-06-23T10:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#discussion_r2158577472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158577472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158822151",
      "pull_request_review_id": 2945433124,
      "id": 2158822151,
      "node_id": "PRRC_kwDOABII586ArQMH",
      "diff_hunk": "@@ -0,0 +1,386 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://opensource.org/license/mit/.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <common/sockman.h>\n+#include <logging.h>\n+#include <netbase.h>\n+#include <util/sock.h>\n+#include <util/thread.h>\n+\n+// The set of sockets cannot be modified while waiting\n+// The sleep time needs to be small to avoid new sockets stalling\n+static constexpr auto SELECT_TIMEOUT{50ms};\n+\n+/** Get the bind address for a socket as CService. */\n+static CService GetBindAddress(const Sock& sock)\n+{\n+    CService addr_bind;\n+    struct sockaddr_storage sockaddr_bind;\n+    socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n+    if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+        addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind, sockaddr_bind_len);\n+    } else {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"getsockname failed\\n\");\n+    }\n+    return addr_bind;\n+}",
      "path": "src/common/sockman.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "3e7abceecfd790bc0887f647d3f731328e19810f",
      "original_commit_id": "5f7941187a12f6d1d180ee29b72b2a5ee7a578b8",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`GetBindAddress()` is the same as in `net.cpp`. It is nice to have this PR remove 0 lines, but I think it is better to make an exception and move the function from `net.cpp` to `netbase.{h,cpp}` and use that from both `net.cpp` and `common/sockman.cpp`.",
      "created_at": "2025-06-20T12:14:30Z",
      "updated_at": "2025-06-23T10:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#discussion_r2158822151",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2158822151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747"
        }
      },
      "start_line": null,
      "original_start_line": 17,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161187096",
      "pull_request_review_id": 2945433124,
      "id": 2161187096,
      "node_id": "PRRC_kwDOABII586A0RkY",
      "diff_hunk": "@@ -0,0 +1,386 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://opensource.org/license/mit/.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <common/sockman.h>\n+#include <logging.h>\n+#include <netbase.h>\n+#include <util/sock.h>\n+#include <util/thread.h>\n+\n+// The set of sockets cannot be modified while waiting\n+// The sleep time needs to be small to avoid new sockets stalling\n+static constexpr auto SELECT_TIMEOUT{50ms};\n+\n+/** Get the bind address for a socket as CService. */\n+static CService GetBindAddress(const Sock& sock)\n+{\n+    CService addr_bind;\n+    struct sockaddr_storage sockaddr_bind;\n+    socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n+    if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+        addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind, sockaddr_bind_len);\n+    } else {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"getsockname failed\\n\");\n+    }\n+    return addr_bind;\n+}\n+\n+bool SockMan::BindAndStartListening(const CService& to, bilingual_str& err_msg)\n+{\n+    // Create socket for listening for incoming connections\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+    if (!to.GetSockAddr(reinterpret_cast<sockaddr*>(&storage), &len)) {\n+        err_msg = Untranslated(strprintf(\"Bind address family for %s not supported\", to.ToStringAddrPort()));\n+        return false;\n+    }\n+\n+    std::unique_ptr<Sock> sock{CreateSock(to.GetSAFamily(), SOCK_STREAM, IPPROTO_TCP)};\n+    if (!sock) {\n+        err_msg = Untranslated(strprintf(\"Cannot create %s listen socket: %s\",\n+                                         to.ToStringAddrPort(),\n+                                         NetworkErrorString(WSAGetLastError())));\n+        return false;\n+    }\n+\n+    int one{1};\n+\n+    // Allow binding if the port is still in TIME_WAIT state after\n+    // the program was closed and restarted.\n+    if (sock->SetSockOpt(SOL_SOCKET, SO_REUSEADDR, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+        LogPrintLevel(BCLog::NET,\n+                      BCLog::Level::Info,\n+                      \"Cannot set SO_REUSEADDR on %s listen socket: %s, continuing anyway\\n\",\n+                      to.ToStringAddrPort(),\n+                      NetworkErrorString(WSAGetLastError()));\n+    }\n+\n+    // some systems don't have IPV6_V6ONLY but are always v6only; others do have the option\n+    // and enable it by default or not. Try to enable it, if possible.\n+    if (to.IsIPv6()) {\n+#ifdef IPV6_V6ONLY\n+        if (sock->SetSockOpt(IPPROTO_IPV6, IPV6_V6ONLY, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_V6ONLY on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+#ifdef WIN32\n+        int prot_level{PROTECTION_LEVEL_UNRESTRICTED};\n+        if (sock->SetSockOpt(IPPROTO_IPV6,\n+                             IPV6_PROTECTION_LEVEL,\n+                             reinterpret_cast<const char*>(&prot_level),\n+                             sizeof(prot_level)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_PROTECTION_LEVEL on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+    }\n+\n+    if (sock->Bind(reinterpret_cast<sockaddr*>(&storage), len) == SOCKET_ERROR) {\n+        const int err{WSAGetLastError()};\n+        if (err == WSAEADDRINUSE) {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\"),\n+                                to.ToStringAddrPort(),\n+                                CLIENT_NAME);\n+        } else {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\"),\n+                                to.ToStringAddrPort(),\n+                                NetworkErrorString(err));\n+        }\n+        return false;\n+    }\n+\n+    // Listen for incoming connections\n+    if (sock->Listen(SOMAXCONN) == SOCKET_ERROR) {\n+        err_msg = strprintf(_(\"Cannot listen on %s: %s\"), to.ToStringAddrPort(), NetworkErrorString(WSAGetLastError()));\n+        return false;\n+    }\n+\n+    m_listen.emplace_back(std::move(sock));\n+\n+    return true;\n+}\n+\n+void SockMan::StartSocketsThreads(const Options& options)\n+{\n+    m_thread_socket_handler = std::thread(\n+        &util::TraceThread, options.socket_handler_thread_name, [this] { ThreadSocketHandler(); });\n+}\n+\n+void SockMan::JoinSocketsThreads()\n+{\n+    if (m_thread_socket_handler.joinable()) {\n+        m_thread_socket_handler.join();\n+    }\n+}\n+\n+std::unique_ptr<Sock> SockMan::AcceptConnection(const Sock& listen_sock, CService& addr)\n+{\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+\n+    auto sock{listen_sock.Accept(reinterpret_cast<sockaddr*>(&storage), &len)};\n+\n+    if (!sock) {\n+        const int err{WSAGetLastError()};\n+        if (err != WSAEWOULDBLOCK) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Error,\n+                          \"Cannot accept new connection: %s\\n\",\n+                          NetworkErrorString(err));\n+        }\n+        return {};\n+    }\n+\n+    if (!addr.SetSockAddr(reinterpret_cast<sockaddr*>(&storage), len)) {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Unknown socket family\\n\");\n+    }\n+\n+    return sock;\n+}\n+\n+void SockMan::NewSockAccepted(std::unique_ptr<Sock>&& sock, const CService& me, const CService& them)\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    if (!sock->IsSelectable()) {\n+        LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", them.ToStringAddrPort());\n+        return;\n+    }\n+\n+    // According to the internet TCP_NODELAY is not carried into accepted sockets\n+    // on all platforms.  Set it again here just to be sure.\n+    const int on{1};\n+    if (sock->SetSockOpt(IPPROTO_TCP, TCP_NODELAY, &on, sizeof(on)) == SOCKET_ERROR) {\n+        LogDebug(BCLog::NET, \"connection from %s: unable to set TCP_NODELAY, continuing anyway\\n\",\n+                 them.ToStringAddrPort());\n+    }\n+\n+    const Id id{GetNewId()};\n+\n+    {\n+        LOCK(m_connected_mutex);\n+        m_connected.emplace(id, std::make_shared<ConnectionSockets>(std::move(sock)));\n+    }\n+\n+    if (!EventNewConnectionAccepted(id, me, them)) {\n+        CloseConnection(id);\n+    }\n+}\n+\n+SockMan::Id SockMan::GetNewId()\n+{\n+    return m_next_id.fetch_add(1, std::memory_order_relaxed);\n+}\n+\n+bool SockMan::CloseConnection(Id id)\n+{\n+    LOCK(m_connected_mutex);\n+    return m_connected.erase(id) > 0;\n+}\n+\n+ssize_t SockMan::SendBytes(Id id,\n+                           std::span<const unsigned char> data,\n+                           bool will_send_more,\n+                           std::string& errmsg) const\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    if (data.empty()) {\n+        return 0;\n+    }\n+\n+    auto sockets{GetConnectionSockets(id)};\n+    if (!sockets) {\n+        // Bail out immediately and just leave things in the caller's send queue.\n+        return 0;\n+    }\n+\n+    int flags{MSG_NOSIGNAL | MSG_DONTWAIT};\n+#ifdef MSG_MORE\n+    if (will_send_more) {\n+        flags |= MSG_MORE;\n+    }\n+#endif\n+\n+    const ssize_t sent{WITH_LOCK(\n+        sockets->mutex,\n+        return sockets->sock->Send(reinterpret_cast<const char*>(data.data()), data.size(), flags);)};\n+\n+    if (sent >= 0) {\n+        return sent;\n+    }\n+\n+    const int err{WSAGetLastError()};\n+    if (err == WSAEWOULDBLOCK || err == WSAEMSGSIZE || err == WSAEINTR || err == WSAEINPROGRESS) {\n+        return 0;\n+    }\n+    errmsg = NetworkErrorString(err);\n+    return -1;\n+}\n+\n+void SockMan::StopListening()\n+{\n+    m_listen.clear();\n+}\n+\n+bool SockMan::ShouldTryToSend(Id id) const { return true; }\n+\n+bool SockMan::ShouldTryToRecv(Id id) const { return true; }\n+\n+void SockMan::EventIOLoopCompletedForOne(Id id) {}\n+\n+void SockMan::EventIOLoopCompletedForAll() {}\n+\n+void SockMan::ThreadSocketHandler()\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    while (!interruptNet) {\n+        EventIOLoopCompletedForAll();\n+\n+        // Check for the readiness of the already connected sockets and the\n+        // listening sockets in one call (\"readiness\" as in poll(2) or\n+        // select(2)). If none are ready, wait for a short while and return\n+        // empty sets.\n+        auto io_readiness{GenerateWaitSockets()};\n+        if (io_readiness.events_per_sock.empty() ||\n+            // WaitMany() may as well be a static method, the context of the first Sock in the vector is not relevant.\n+            !io_readiness.events_per_sock.begin()->first->WaitMany(SELECT_TIMEOUT,\n+                                                                   io_readiness.events_per_sock)) {\n+            interruptNet.sleep_for(SELECT_TIMEOUT);\n+        }\n+\n+        // Service (send/receive) each of the already connected sockets.\n+        SocketHandlerConnected(io_readiness);\n+\n+        // Accept new connections from listening sockets.\n+        SocketHandlerListening(io_readiness.events_per_sock);",
      "path": "src/common/sockman.cpp",
      "position": 253,
      "original_position": 267,
      "commit_id": "3e7abceecfd790bc0887f647d3f731328e19810f",
      "original_commit_id": "130708803dd623c37e21bf72887ea84cf59460cc",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "_674a5ff8f1 `SockMan: handle connected sockets: read data from socket`_\r\n\r\nIn the commit message: `s/conencts/connects/`",
      "created_at": "2025-06-23T09:48:37Z",
      "updated_at": "2025-06-23T10:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#discussion_r2161187096",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161187096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 253,
      "original_line": 253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161205701",
      "pull_request_review_id": 2945433124,
      "id": 2161205701,
      "node_id": "PRRC_kwDOABII586A0WHF",
      "diff_hunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/sockman.h>\n+#include <test/util/setup_common.h>\n+#include <util/translation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(sockman_tests, SocketTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(test_sockman)\n+{\n+    class TestSockMan : public SockMan\n+    {\n+    public:\n+        // Connections are added from the SockMan I/O thread\n+        // but the test reads them from the main thread.\n+        Mutex m_connections_mutex;\n+        std::vector<std::pair<Id, CService>> m_connections;\n+\n+        // Received data is written here by the SockMan I/O thread\n+        // and tested by the main thread.\n+        Mutex m_received_mutex;\n+        std::vector<uint8_t> m_received;",
      "path": "src/test/sockman_tests.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "3e7abceecfd790bc0887f647d3f731328e19810f",
      "original_commit_id": "130708803dd623c37e21bf72887ea84cf59460cc",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "_674a5ff8f1 `SockMan: handle connected sockets: read data from socket`_\r\n\r\n`m_received` would better be per-client:\r\n```cpp\r\nstd::unordered_map<Id, std::vector<uint8_t>> m_received;\r\n```\r\nand then adjust `EventGotData()` to plug the data in the client's slot:\r\n```cpp\r\nm_received[id].assign(data.begin(), data.end());\r\n```\r\nand `GetReceivedData()` to get the data for the client:\r\n```cpp\r\nGetReceivedData(Id id)\r\n{\r\n    return m_received[id];\r\n}\r\n```",
      "created_at": "2025-06-23T09:57:18Z",
      "updated_at": "2025-06-23T10:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#discussion_r2161205701",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161205701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161216030",
      "pull_request_review_id": 2945433124,
      "id": 2161216030,
      "node_id": "PRRC_kwDOABII586A0Yoe",
      "diff_hunk": "@@ -0,0 +1,386 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://opensource.org/license/mit/.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <common/sockman.h>\n+#include <logging.h>\n+#include <netbase.h>\n+#include <util/sock.h>\n+#include <util/thread.h>\n+\n+// The set of sockets cannot be modified while waiting\n+// The sleep time needs to be small to avoid new sockets stalling\n+static constexpr auto SELECT_TIMEOUT{50ms};\n+\n+/** Get the bind address for a socket as CService. */\n+static CService GetBindAddress(const Sock& sock)\n+{\n+    CService addr_bind;\n+    struct sockaddr_storage sockaddr_bind;\n+    socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n+    if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+        addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind, sockaddr_bind_len);\n+    } else {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"getsockname failed\\n\");\n+    }\n+    return addr_bind;\n+}\n+\n+bool SockMan::BindAndStartListening(const CService& to, bilingual_str& err_msg)\n+{\n+    // Create socket for listening for incoming connections\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+    if (!to.GetSockAddr(reinterpret_cast<sockaddr*>(&storage), &len)) {\n+        err_msg = Untranslated(strprintf(\"Bind address family for %s not supported\", to.ToStringAddrPort()));\n+        return false;\n+    }\n+\n+    std::unique_ptr<Sock> sock{CreateSock(to.GetSAFamily(), SOCK_STREAM, IPPROTO_TCP)};\n+    if (!sock) {\n+        err_msg = Untranslated(strprintf(\"Cannot create %s listen socket: %s\",\n+                                         to.ToStringAddrPort(),\n+                                         NetworkErrorString(WSAGetLastError())));\n+        return false;\n+    }\n+\n+    int one{1};\n+\n+    // Allow binding if the port is still in TIME_WAIT state after\n+    // the program was closed and restarted.\n+    if (sock->SetSockOpt(SOL_SOCKET, SO_REUSEADDR, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+        LogPrintLevel(BCLog::NET,\n+                      BCLog::Level::Info,\n+                      \"Cannot set SO_REUSEADDR on %s listen socket: %s, continuing anyway\\n\",\n+                      to.ToStringAddrPort(),\n+                      NetworkErrorString(WSAGetLastError()));\n+    }\n+\n+    // some systems don't have IPV6_V6ONLY but are always v6only; others do have the option\n+    // and enable it by default or not. Try to enable it, if possible.\n+    if (to.IsIPv6()) {\n+#ifdef IPV6_V6ONLY\n+        if (sock->SetSockOpt(IPPROTO_IPV6, IPV6_V6ONLY, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_V6ONLY on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+#ifdef WIN32\n+        int prot_level{PROTECTION_LEVEL_UNRESTRICTED};\n+        if (sock->SetSockOpt(IPPROTO_IPV6,\n+                             IPV6_PROTECTION_LEVEL,\n+                             reinterpret_cast<const char*>(&prot_level),\n+                             sizeof(prot_level)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_PROTECTION_LEVEL on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+    }\n+\n+    if (sock->Bind(reinterpret_cast<sockaddr*>(&storage), len) == SOCKET_ERROR) {\n+        const int err{WSAGetLastError()};\n+        if (err == WSAEADDRINUSE) {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\"),\n+                                to.ToStringAddrPort(),\n+                                CLIENT_NAME);\n+        } else {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\"),\n+                                to.ToStringAddrPort(),\n+                                NetworkErrorString(err));\n+        }\n+        return false;\n+    }\n+\n+    // Listen for incoming connections\n+    if (sock->Listen(SOMAXCONN) == SOCKET_ERROR) {\n+        err_msg = strprintf(_(\"Cannot listen on %s: %s\"), to.ToStringAddrPort(), NetworkErrorString(WSAGetLastError()));\n+        return false;\n+    }\n+\n+    m_listen.emplace_back(std::move(sock));\n+\n+    return true;\n+}\n+\n+void SockMan::StartSocketsThreads(const Options& options)\n+{\n+    m_thread_socket_handler = std::thread(\n+        &util::TraceThread, options.socket_handler_thread_name, [this] { ThreadSocketHandler(); });\n+}\n+\n+void SockMan::JoinSocketsThreads()\n+{\n+    if (m_thread_socket_handler.joinable()) {\n+        m_thread_socket_handler.join();\n+    }\n+}\n+\n+std::unique_ptr<Sock> SockMan::AcceptConnection(const Sock& listen_sock, CService& addr)\n+{\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+\n+    auto sock{listen_sock.Accept(reinterpret_cast<sockaddr*>(&storage), &len)};\n+\n+    if (!sock) {\n+        const int err{WSAGetLastError()};\n+        if (err != WSAEWOULDBLOCK) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Error,\n+                          \"Cannot accept new connection: %s\\n\",\n+                          NetworkErrorString(err));\n+        }\n+        return {};\n+    }\n+\n+    if (!addr.SetSockAddr(reinterpret_cast<sockaddr*>(&storage), len)) {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Unknown socket family\\n\");\n+    }\n+\n+    return sock;\n+}\n+\n+void SockMan::NewSockAccepted(std::unique_ptr<Sock>&& sock, const CService& me, const CService& them)\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    if (!sock->IsSelectable()) {\n+        LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", them.ToStringAddrPort());\n+        return;\n+    }\n+\n+    // According to the internet TCP_NODELAY is not carried into accepted sockets\n+    // on all platforms.  Set it again here just to be sure.\n+    const int on{1};\n+    if (sock->SetSockOpt(IPPROTO_TCP, TCP_NODELAY, &on, sizeof(on)) == SOCKET_ERROR) {\n+        LogDebug(BCLog::NET, \"connection from %s: unable to set TCP_NODELAY, continuing anyway\\n\",\n+                 them.ToStringAddrPort());\n+    }\n+\n+    const Id id{GetNewId()};\n+\n+    {\n+        LOCK(m_connected_mutex);\n+        m_connected.emplace(id, std::make_shared<ConnectionSockets>(std::move(sock)));\n+    }\n+\n+    if (!EventNewConnectionAccepted(id, me, them)) {\n+        CloseConnection(id);\n+    }\n+}\n+\n+SockMan::Id SockMan::GetNewId()\n+{\n+    return m_next_id.fetch_add(1, std::memory_order_relaxed);\n+}\n+\n+bool SockMan::CloseConnection(Id id)\n+{\n+    LOCK(m_connected_mutex);\n+    return m_connected.erase(id) > 0;\n+}\n+\n+ssize_t SockMan::SendBytes(Id id,",
      "path": "src/common/sockman.cpp",
      "position": 177,
      "original_position": 191,
      "commit_id": "3e7abceecfd790bc0887f647d3f731328e19810f",
      "original_commit_id": "130708803dd623c37e21bf72887ea84cf59460cc",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "_3f796b69c8 `SockMan: handle connected sockets: write data to socket`_\r\n\r\nIn the commit message: `s/recevied/received/`",
      "created_at": "2025-06-23T10:02:53Z",
      "updated_at": "2025-06-23T10:09:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#discussion_r2161216030",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2161216030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162235428",
      "pull_request_review_id": 2951071498,
      "id": 2162235428,
      "node_id": "PRRC_kwDOABII586A4Rgk",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/sockman.h>\n+#include <test/util/setup_common.h>\n+#include <util/translation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(sockman_tests, SocketTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(test_sockman)\n+{\n+    class TestSockMan : public SockMan\n+    {\n+    public:\n+        // Connections are added from the SockMan I/O thread\n+        // but the test reads them from the main thread.\n+        Mutex m_connections_mutex;\n+        std::vector<std::pair<Id, CService>> m_connections;\n+\n+        // Received data is written here by the SockMan I/O thread\n+        // and tested by the main thread.\n+        Mutex m_received_mutex;\n+        std::vector<uint8_t> m_received;\n+        std::vector<uint8_t> m_respond{'o', 'k'};\n+\n+        size_t GetConnectionsCount() EXCLUSIVE_LOCKS_REQUIRED(!m_connections_mutex)\n+        {\n+            LOCK(m_connections_mutex);\n+            return m_connections.size();\n+        }\n+\n+        std::pair<Id, CService> GetFirstConnection() EXCLUSIVE_LOCKS_REQUIRED(!m_connections_mutex)\n+        {\n+            LOCK(m_connections_mutex);\n+            return m_connections.front();\n+        }\n+\n+        std::vector<uint8_t> GetReceivedData() EXCLUSIVE_LOCKS_REQUIRED(!m_received_mutex)\n+        {\n+            LOCK(m_received_mutex);\n+            return m_received;\n+        }\n+\n+    private:\n+        virtual bool EventNewConnectionAccepted(Id id,\n+                                            const CService& me,\n+                                            const CService& them) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_connections_mutex)\n+        {\n+            LOCK(m_connections_mutex);\n+            m_connections.emplace_back(id, them);\n+            return true;\n+        }\n+\n+        // When we receive data just store it in a member variable for testing.\n+        virtual void EventGotData(Id id, std::span<const uint8_t> data) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!m_received_mutex)\n+        {\n+            LOCK(m_received_mutex);\n+            m_received.assign(data.begin(), data.end());\n+        };\n+        virtual void EventGotEOF(Id id) override {};\n+        virtual void EventGotPermanentReadError(Id id, const std::string& errmsg) override {};\n+\n+        // As soon as we can send data to the connected socket, send the preloaded response.\n+        // Data is sent by the SockMan I/O thread and read by the main test thread,\n+        // but the Mutex in SockMan::ConnectionSockets guards this.\n+        virtual void EventReadyToSend(Id id, bool& cancel_recv) override\n+        {\n+            cancel_recv = false;\n+            if (m_respond.size() > 0) {\n+                std::string errmsg;\n+                ssize_t sent = SendBytes(id, m_respond, /*will_send_more=*/false, errmsg);\n+                // Larger payloads may require multiple write operations in production\n+                // but since there is no actual network socket involved in the test\n+                // we should be able to simplify.\n+                BOOST_CHECK_EQUAL(sent, m_respond.size());\n+                // Only send the response once\n+                m_respond.clear();\n+            }\n+        }\n+    };\n+\n+    TestSockMan sockman;\n+\n+    // This address won't actually get used because we stubbed CreateSock()\n+    const std::optional<CService> addr_bind{Lookup(\"0.0.0.0\", 0, false)};",
      "path": "src/test/sockman_tests.cpp",
      "position": 86,
      "original_position": 90,
      "commit_id": "3e7abceecfd790bc0887f647d3f731328e19810f",
      "original_commit_id": "5f7941187a12f6d1d180ee29b72b2a5ee7a578b8",
      "in_reply_to_id": 2158577472,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 ",
      "created_at": "2025-06-23T18:18:35Z",
      "updated_at": "2025-06-24T00:43:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#discussion_r2162235428",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162235428"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162288958",
      "pull_request_review_id": 2951071498,
      "id": 2162288958,
      "node_id": "PRRC_kwDOABII586A4ek-",
      "diff_hunk": "@@ -0,0 +1,386 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://opensource.org/license/mit/.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <common/sockman.h>\n+#include <logging.h>\n+#include <netbase.h>\n+#include <util/sock.h>\n+#include <util/thread.h>\n+\n+// The set of sockets cannot be modified while waiting\n+// The sleep time needs to be small to avoid new sockets stalling\n+static constexpr auto SELECT_TIMEOUT{50ms};\n+\n+/** Get the bind address for a socket as CService. */\n+static CService GetBindAddress(const Sock& sock)\n+{\n+    CService addr_bind;\n+    struct sockaddr_storage sockaddr_bind;\n+    socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n+    if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+        addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind, sockaddr_bind_len);\n+    } else {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"getsockname failed\\n\");\n+    }\n+    return addr_bind;\n+}",
      "path": "src/common/sockman.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "3e7abceecfd790bc0887f647d3f731328e19810f",
      "original_commit_id": "5f7941187a12f6d1d180ee29b72b2a5ee7a578b8",
      "in_reply_to_id": 2158822151,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh yes thanks, done by inserting a move-only commit",
      "created_at": "2025-06-23T18:32:08Z",
      "updated_at": "2025-06-24T00:43:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#discussion_r2162288958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162288958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747"
        }
      },
      "start_line": null,
      "original_start_line": 17,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162324748",
      "pull_request_review_id": 2951071498,
      "id": 2162324748,
      "node_id": "PRRC_kwDOABII586A4nUM",
      "diff_hunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) 2021-2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/sockman.h>\n+#include <test/util/setup_common.h>\n+#include <util/translation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(sockman_tests, SocketTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(test_sockman)\n+{\n+    class TestSockMan : public SockMan\n+    {\n+    public:\n+        // Connections are added from the SockMan I/O thread\n+        // but the test reads them from the main thread.\n+        Mutex m_connections_mutex;\n+        std::vector<std::pair<Id, CService>> m_connections;\n+\n+        // Received data is written here by the SockMan I/O thread\n+        // and tested by the main thread.\n+        Mutex m_received_mutex;\n+        std::vector<uint8_t> m_received;",
      "path": "src/test/sockman_tests.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "3e7abceecfd790bc0887f647d3f731328e19810f",
      "original_commit_id": "130708803dd623c37e21bf72887ea84cf59460cc",
      "in_reply_to_id": 2161205701,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good catch, taken. I was hoping to get away with only ever using one client in this test but this makes more sense for coverage anyway ;-)",
      "created_at": "2025-06-23T18:47:07Z",
      "updated_at": "2025-06-24T00:43:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#discussion_r2162324748",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162324748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162325395",
      "pull_request_review_id": 2951071498,
      "id": 2162325395,
      "node_id": "PRRC_kwDOABII586A4neT",
      "diff_hunk": "@@ -0,0 +1,386 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://opensource.org/license/mit/.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <common/sockman.h>\n+#include <logging.h>\n+#include <netbase.h>\n+#include <util/sock.h>\n+#include <util/thread.h>\n+\n+// The set of sockets cannot be modified while waiting\n+// The sleep time needs to be small to avoid new sockets stalling\n+static constexpr auto SELECT_TIMEOUT{50ms};\n+\n+/** Get the bind address for a socket as CService. */\n+static CService GetBindAddress(const Sock& sock)\n+{\n+    CService addr_bind;\n+    struct sockaddr_storage sockaddr_bind;\n+    socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n+    if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+        addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind, sockaddr_bind_len);\n+    } else {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"getsockname failed\\n\");\n+    }\n+    return addr_bind;\n+}\n+\n+bool SockMan::BindAndStartListening(const CService& to, bilingual_str& err_msg)\n+{\n+    // Create socket for listening for incoming connections\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+    if (!to.GetSockAddr(reinterpret_cast<sockaddr*>(&storage), &len)) {\n+        err_msg = Untranslated(strprintf(\"Bind address family for %s not supported\", to.ToStringAddrPort()));\n+        return false;\n+    }\n+\n+    std::unique_ptr<Sock> sock{CreateSock(to.GetSAFamily(), SOCK_STREAM, IPPROTO_TCP)};\n+    if (!sock) {\n+        err_msg = Untranslated(strprintf(\"Cannot create %s listen socket: %s\",\n+                                         to.ToStringAddrPort(),\n+                                         NetworkErrorString(WSAGetLastError())));\n+        return false;\n+    }\n+\n+    int one{1};\n+\n+    // Allow binding if the port is still in TIME_WAIT state after\n+    // the program was closed and restarted.\n+    if (sock->SetSockOpt(SOL_SOCKET, SO_REUSEADDR, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+        LogPrintLevel(BCLog::NET,\n+                      BCLog::Level::Info,\n+                      \"Cannot set SO_REUSEADDR on %s listen socket: %s, continuing anyway\\n\",\n+                      to.ToStringAddrPort(),\n+                      NetworkErrorString(WSAGetLastError()));\n+    }\n+\n+    // some systems don't have IPV6_V6ONLY but are always v6only; others do have the option\n+    // and enable it by default or not. Try to enable it, if possible.\n+    if (to.IsIPv6()) {\n+#ifdef IPV6_V6ONLY\n+        if (sock->SetSockOpt(IPPROTO_IPV6, IPV6_V6ONLY, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_V6ONLY on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+#ifdef WIN32\n+        int prot_level{PROTECTION_LEVEL_UNRESTRICTED};\n+        if (sock->SetSockOpt(IPPROTO_IPV6,\n+                             IPV6_PROTECTION_LEVEL,\n+                             reinterpret_cast<const char*>(&prot_level),\n+                             sizeof(prot_level)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_PROTECTION_LEVEL on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+    }\n+\n+    if (sock->Bind(reinterpret_cast<sockaddr*>(&storage), len) == SOCKET_ERROR) {\n+        const int err{WSAGetLastError()};\n+        if (err == WSAEADDRINUSE) {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\"),\n+                                to.ToStringAddrPort(),\n+                                CLIENT_NAME);\n+        } else {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\"),\n+                                to.ToStringAddrPort(),\n+                                NetworkErrorString(err));\n+        }\n+        return false;\n+    }\n+\n+    // Listen for incoming connections\n+    if (sock->Listen(SOMAXCONN) == SOCKET_ERROR) {\n+        err_msg = strprintf(_(\"Cannot listen on %s: %s\"), to.ToStringAddrPort(), NetworkErrorString(WSAGetLastError()));\n+        return false;\n+    }\n+\n+    m_listen.emplace_back(std::move(sock));\n+\n+    return true;\n+}\n+\n+void SockMan::StartSocketsThreads(const Options& options)\n+{\n+    m_thread_socket_handler = std::thread(\n+        &util::TraceThread, options.socket_handler_thread_name, [this] { ThreadSocketHandler(); });\n+}\n+\n+void SockMan::JoinSocketsThreads()\n+{\n+    if (m_thread_socket_handler.joinable()) {\n+        m_thread_socket_handler.join();\n+    }\n+}\n+\n+std::unique_ptr<Sock> SockMan::AcceptConnection(const Sock& listen_sock, CService& addr)\n+{\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+\n+    auto sock{listen_sock.Accept(reinterpret_cast<sockaddr*>(&storage), &len)};\n+\n+    if (!sock) {\n+        const int err{WSAGetLastError()};\n+        if (err != WSAEWOULDBLOCK) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Error,\n+                          \"Cannot accept new connection: %s\\n\",\n+                          NetworkErrorString(err));\n+        }\n+        return {};\n+    }\n+\n+    if (!addr.SetSockAddr(reinterpret_cast<sockaddr*>(&storage), len)) {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Unknown socket family\\n\");\n+    }\n+\n+    return sock;\n+}\n+\n+void SockMan::NewSockAccepted(std::unique_ptr<Sock>&& sock, const CService& me, const CService& them)\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    if (!sock->IsSelectable()) {\n+        LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", them.ToStringAddrPort());\n+        return;\n+    }\n+\n+    // According to the internet TCP_NODELAY is not carried into accepted sockets\n+    // on all platforms.  Set it again here just to be sure.\n+    const int on{1};\n+    if (sock->SetSockOpt(IPPROTO_TCP, TCP_NODELAY, &on, sizeof(on)) == SOCKET_ERROR) {\n+        LogDebug(BCLog::NET, \"connection from %s: unable to set TCP_NODELAY, continuing anyway\\n\",\n+                 them.ToStringAddrPort());\n+    }\n+\n+    const Id id{GetNewId()};\n+\n+    {\n+        LOCK(m_connected_mutex);\n+        m_connected.emplace(id, std::make_shared<ConnectionSockets>(std::move(sock)));\n+    }\n+\n+    if (!EventNewConnectionAccepted(id, me, them)) {\n+        CloseConnection(id);\n+    }\n+}\n+\n+SockMan::Id SockMan::GetNewId()\n+{\n+    return m_next_id.fetch_add(1, std::memory_order_relaxed);\n+}\n+\n+bool SockMan::CloseConnection(Id id)\n+{\n+    LOCK(m_connected_mutex);\n+    return m_connected.erase(id) > 0;\n+}\n+\n+ssize_t SockMan::SendBytes(Id id,\n+                           std::span<const unsigned char> data,\n+                           bool will_send_more,\n+                           std::string& errmsg) const\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    if (data.empty()) {\n+        return 0;\n+    }\n+\n+    auto sockets{GetConnectionSockets(id)};\n+    if (!sockets) {\n+        // Bail out immediately and just leave things in the caller's send queue.\n+        return 0;\n+    }\n+\n+    int flags{MSG_NOSIGNAL | MSG_DONTWAIT};\n+#ifdef MSG_MORE\n+    if (will_send_more) {\n+        flags |= MSG_MORE;\n+    }\n+#endif\n+\n+    const ssize_t sent{WITH_LOCK(\n+        sockets->mutex,\n+        return sockets->sock->Send(reinterpret_cast<const char*>(data.data()), data.size(), flags);)};\n+\n+    if (sent >= 0) {\n+        return sent;\n+    }\n+\n+    const int err{WSAGetLastError()};\n+    if (err == WSAEWOULDBLOCK || err == WSAEMSGSIZE || err == WSAEINTR || err == WSAEINPROGRESS) {\n+        return 0;\n+    }\n+    errmsg = NetworkErrorString(err);\n+    return -1;\n+}\n+\n+void SockMan::StopListening()\n+{\n+    m_listen.clear();\n+}\n+\n+bool SockMan::ShouldTryToSend(Id id) const { return true; }\n+\n+bool SockMan::ShouldTryToRecv(Id id) const { return true; }\n+\n+void SockMan::EventIOLoopCompletedForOne(Id id) {}\n+\n+void SockMan::EventIOLoopCompletedForAll() {}\n+\n+void SockMan::ThreadSocketHandler()\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    while (!interruptNet) {\n+        EventIOLoopCompletedForAll();\n+\n+        // Check for the readiness of the already connected sockets and the\n+        // listening sockets in one call (\"readiness\" as in poll(2) or\n+        // select(2)). If none are ready, wait for a short while and return\n+        // empty sets.\n+        auto io_readiness{GenerateWaitSockets()};\n+        if (io_readiness.events_per_sock.empty() ||\n+            // WaitMany() may as well be a static method, the context of the first Sock in the vector is not relevant.\n+            !io_readiness.events_per_sock.begin()->first->WaitMany(SELECT_TIMEOUT,\n+                                                                   io_readiness.events_per_sock)) {\n+            interruptNet.sleep_for(SELECT_TIMEOUT);\n+        }\n+\n+        // Service (send/receive) each of the already connected sockets.\n+        SocketHandlerConnected(io_readiness);\n+\n+        // Accept new connections from listening sockets.\n+        SocketHandlerListening(io_readiness.events_per_sock);",
      "path": "src/common/sockman.cpp",
      "position": 253,
      "original_position": 267,
      "commit_id": "3e7abceecfd790bc0887f647d3f731328e19810f",
      "original_commit_id": "130708803dd623c37e21bf72887ea84cf59460cc",
      "in_reply_to_id": 2161187096,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 ",
      "created_at": "2025-06-23T18:47:22Z",
      "updated_at": "2025-06-24T00:43:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#discussion_r2162325395",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162325395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 253,
      "original_line": 253,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162331716",
      "pull_request_review_id": 2951071498,
      "id": 2162331716,
      "node_id": "PRRC_kwDOABII586A4pBE",
      "diff_hunk": "@@ -0,0 +1,386 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://opensource.org/license/mit/.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <common/sockman.h>\n+#include <logging.h>\n+#include <netbase.h>\n+#include <util/sock.h>\n+#include <util/thread.h>\n+\n+// The set of sockets cannot be modified while waiting\n+// The sleep time needs to be small to avoid new sockets stalling\n+static constexpr auto SELECT_TIMEOUT{50ms};\n+\n+/** Get the bind address for a socket as CService. */\n+static CService GetBindAddress(const Sock& sock)\n+{\n+    CService addr_bind;\n+    struct sockaddr_storage sockaddr_bind;\n+    socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n+    if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+        addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind, sockaddr_bind_len);\n+    } else {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"getsockname failed\\n\");\n+    }\n+    return addr_bind;\n+}\n+\n+bool SockMan::BindAndStartListening(const CService& to, bilingual_str& err_msg)\n+{\n+    // Create socket for listening for incoming connections\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+    if (!to.GetSockAddr(reinterpret_cast<sockaddr*>(&storage), &len)) {\n+        err_msg = Untranslated(strprintf(\"Bind address family for %s not supported\", to.ToStringAddrPort()));\n+        return false;\n+    }\n+\n+    std::unique_ptr<Sock> sock{CreateSock(to.GetSAFamily(), SOCK_STREAM, IPPROTO_TCP)};\n+    if (!sock) {\n+        err_msg = Untranslated(strprintf(\"Cannot create %s listen socket: %s\",\n+                                         to.ToStringAddrPort(),\n+                                         NetworkErrorString(WSAGetLastError())));\n+        return false;\n+    }\n+\n+    int one{1};\n+\n+    // Allow binding if the port is still in TIME_WAIT state after\n+    // the program was closed and restarted.\n+    if (sock->SetSockOpt(SOL_SOCKET, SO_REUSEADDR, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+        LogPrintLevel(BCLog::NET,\n+                      BCLog::Level::Info,\n+                      \"Cannot set SO_REUSEADDR on %s listen socket: %s, continuing anyway\\n\",\n+                      to.ToStringAddrPort(),\n+                      NetworkErrorString(WSAGetLastError()));\n+    }\n+\n+    // some systems don't have IPV6_V6ONLY but are always v6only; others do have the option\n+    // and enable it by default or not. Try to enable it, if possible.\n+    if (to.IsIPv6()) {\n+#ifdef IPV6_V6ONLY\n+        if (sock->SetSockOpt(IPPROTO_IPV6, IPV6_V6ONLY, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_V6ONLY on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+#ifdef WIN32\n+        int prot_level{PROTECTION_LEVEL_UNRESTRICTED};\n+        if (sock->SetSockOpt(IPPROTO_IPV6,\n+                             IPV6_PROTECTION_LEVEL,\n+                             reinterpret_cast<const char*>(&prot_level),\n+                             sizeof(prot_level)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_PROTECTION_LEVEL on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+    }\n+\n+    if (sock->Bind(reinterpret_cast<sockaddr*>(&storage), len) == SOCKET_ERROR) {\n+        const int err{WSAGetLastError()};\n+        if (err == WSAEADDRINUSE) {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\"),\n+                                to.ToStringAddrPort(),\n+                                CLIENT_NAME);\n+        } else {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\"),\n+                                to.ToStringAddrPort(),\n+                                NetworkErrorString(err));\n+        }\n+        return false;\n+    }\n+\n+    // Listen for incoming connections\n+    if (sock->Listen(SOMAXCONN) == SOCKET_ERROR) {\n+        err_msg = strprintf(_(\"Cannot listen on %s: %s\"), to.ToStringAddrPort(), NetworkErrorString(WSAGetLastError()));\n+        return false;\n+    }\n+\n+    m_listen.emplace_back(std::move(sock));\n+\n+    return true;\n+}\n+\n+void SockMan::StartSocketsThreads(const Options& options)\n+{\n+    m_thread_socket_handler = std::thread(\n+        &util::TraceThread, options.socket_handler_thread_name, [this] { ThreadSocketHandler(); });\n+}\n+\n+void SockMan::JoinSocketsThreads()\n+{\n+    if (m_thread_socket_handler.joinable()) {\n+        m_thread_socket_handler.join();\n+    }\n+}\n+\n+std::unique_ptr<Sock> SockMan::AcceptConnection(const Sock& listen_sock, CService& addr)\n+{\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+\n+    auto sock{listen_sock.Accept(reinterpret_cast<sockaddr*>(&storage), &len)};\n+\n+    if (!sock) {\n+        const int err{WSAGetLastError()};\n+        if (err != WSAEWOULDBLOCK) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Error,\n+                          \"Cannot accept new connection: %s\\n\",\n+                          NetworkErrorString(err));\n+        }\n+        return {};\n+    }\n+\n+    if (!addr.SetSockAddr(reinterpret_cast<sockaddr*>(&storage), len)) {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Unknown socket family\\n\");\n+    }\n+\n+    return sock;\n+}\n+\n+void SockMan::NewSockAccepted(std::unique_ptr<Sock>&& sock, const CService& me, const CService& them)\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    if (!sock->IsSelectable()) {\n+        LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", them.ToStringAddrPort());\n+        return;\n+    }\n+\n+    // According to the internet TCP_NODELAY is not carried into accepted sockets\n+    // on all platforms.  Set it again here just to be sure.\n+    const int on{1};\n+    if (sock->SetSockOpt(IPPROTO_TCP, TCP_NODELAY, &on, sizeof(on)) == SOCKET_ERROR) {\n+        LogDebug(BCLog::NET, \"connection from %s: unable to set TCP_NODELAY, continuing anyway\\n\",\n+                 them.ToStringAddrPort());\n+    }\n+\n+    const Id id{GetNewId()};\n+\n+    {\n+        LOCK(m_connected_mutex);\n+        m_connected.emplace(id, std::make_shared<ConnectionSockets>(std::move(sock)));\n+    }\n+\n+    if (!EventNewConnectionAccepted(id, me, them)) {\n+        CloseConnection(id);\n+    }\n+}\n+\n+SockMan::Id SockMan::GetNewId()\n+{\n+    return m_next_id.fetch_add(1, std::memory_order_relaxed);\n+}\n+\n+bool SockMan::CloseConnection(Id id)\n+{\n+    LOCK(m_connected_mutex);\n+    return m_connected.erase(id) > 0;\n+}\n+\n+ssize_t SockMan::SendBytes(Id id,",
      "path": "src/common/sockman.cpp",
      "position": 177,
      "original_position": 191,
      "commit_id": "3e7abceecfd790bc0887f647d3f731328e19810f",
      "original_commit_id": "130708803dd623c37e21bf72887ea84cf59460cc",
      "in_reply_to_id": 2161216030,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 ",
      "created_at": "2025-06-23T18:51:26Z",
      "updated_at": "2025-06-24T00:43:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32747#discussion_r2162331716",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162331716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32747"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    }
  ]
}