{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521",
    "id": 2523113103,
    "node_id": "PR_kwDOABII586WY6aP",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32521",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32521.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32521.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/b1f59e8897d38476779ae47656d1a02805e88955",
    "number": 32521,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "policy: make pathological transactions packed with legacy sigops non-standard",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "The Consensus Cleanup soft fork proposal includes a limit on the number of legacy signature\r\noperations potentially executed when validating a transaction. If this change is to be implemented\r\nhere and activated by Bitcoin users in the future, we should make transactions that are not valid\r\naccording to the new rules non-standard first because it would otherwise be a trivial DoS to\r\npotentially unupgraded miners after the soft fork activates.",
    "labels": [
      {
        "id": 82428251,
        "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
        "name": "TX fees and policy",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2025-05-15T21:05:26Z",
    "updated_at": "2025-07-02T18:33:00Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "084ace5566dab469ab5ab1519e3a150f1d191a08",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "mabu44",
        "id": 192022804,
        "node_id": "U_kgDOC3IJFA",
        "avatar_url": "https://avatars.githubusercontent.com/u/192022804?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mabu44",
        "html_url": "https://github.com/mabu44",
        "followers_url": "https://api.github.com/users/mabu44/followers",
        "following_url": "https://api.github.com/users/mabu44/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mabu44/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mabu44/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mabu44/subscriptions",
        "organizations_url": "https://api.github.com/users/mabu44/orgs",
        "repos_url": "https://api.github.com/users/mabu44/repos",
        "events_url": "https://api.github.com/users/mabu44/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mabu44/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "darosior:2503_nonstd_tx_sigops",
      "ref": "2503_nonstd_tx_sigops",
      "sha": "b1f59e8897d38476779ae47656d1a02805e88955",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 168868367,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjg4NjgzNjc=",
        "name": "bitcoin",
        "full_name": "darosior/bitcoin",
        "owner": {
          "login": "darosior",
          "id": 22457751,
          "node_id": "MDQ6VXNlcjIyNDU3NzUx",
          "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/darosior",
          "html_url": "https://github.com/darosior",
          "followers_url": "https://api.github.com/users/darosior/followers",
          "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
          "organizations_url": "https://api.github.com/users/darosior/orgs",
          "repos_url": "https://api.github.com/users/darosior/repos",
          "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/darosior/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/darosior/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/darosior/bitcoin",
        "archive_url": "https://api.github.com/repos/darosior/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/darosior/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/darosior/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/darosior/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/darosior/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/darosior/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/darosior/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/darosior/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/darosior/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/darosior/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/darosior/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/darosior/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/darosior/bitcoin/events",
        "forks_url": "https://api.github.com/repos/darosior/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/darosior/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/darosior/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/darosior/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/darosior/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/darosior/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/darosior/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/darosior/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/darosior/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/darosior/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/darosior/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/darosior/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/darosior/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/darosior/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/darosior/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/darosior/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:darosior/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/darosior/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/darosior/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/darosior/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/darosior/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/darosior/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/darosior/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/darosior/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/darosior/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/darosior/bitcoin/hooks",
        "svn_url": "https://github.com/darosior/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 270057,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-07-02T16:44:06Z",
        "created_at": "2019-02-02T19:20:27Z",
        "updated_at": "2024-11-20T13:45:57Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "a92e8b10a5fb1ac25484aa17787e27b4a8632f69",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37456,
        "stargazers_count": 84381,
        "watchers_count": 84381,
        "size": 288581,
        "default_branch": "master",
        "open_issues_count": 745,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-07-02T14:06:36Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-07-02T18:48:17Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 180,
    "deletions": 0,
    "changed_files": 5,
    "commits": 3,
    "review_comments": 114,
    "comments": 24
  },
  "events": [
    {
      "event": "commented",
      "id": 2885052071,
      "node_id": "IC_kwDOABII586r9man",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2885052071",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-15T21:05:31Z",
      "updated_at": "2025-07-02T13:43:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32521.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [petertodd](https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2994130659), [instagibbs](https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3000571610), [glozow](https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2975393556), [l0rinc](https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2975960421) |\n| Stale ACK | [mabu44](https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2889699475), [maflcko](https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3000327354), [Sjors](https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3024600108) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31682](https://github.com/bitcoin/bitcoin/pull/31682) ([IBD] specialize CheckBlock's input & coinbase checks by l0rinc)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2885052071",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "labeled",
      "id": 17679193293,
      "node_id": "LE_lADOABII58621HOhzwAAAAQdwxTN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17679193293",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-15T21:05:42Z",
      "label": {
        "name": "TX fees and policy",
        "color": "5319e7"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17679232283,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAAQdw60b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17679232283",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3bbe3313896af12cf9d36ea7784b9ceaced26454",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/3bbe3313896af12cf9d36ea7784b9ceaced26454",
      "created_at": "2025-05-15T21:09:23Z"
    },
    {
      "event": "labeled",
      "id": 17679237091,
      "node_id": "LE_lADOABII58621HOhzwAAAAQdw7_j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17679237091",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-15T21:09:51Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2885059791,
      "node_id": "IC_kwDOABII586r9oTP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2885059791",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-15T21:09:53Z",
      "updated_at": "2025-05-15T21:09:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `lint`: https://github.com/bitcoin/bitcoin/runs/42319362568</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a Python linting error in `test/functional/mempool_sigoplimit.py` where a variable is redefined.\n</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2885059791",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17679619413,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAAQdyZVV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17679619413",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f13acba6f0b95b0cd7c624dd3c0be9978b3c5be1",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/f13acba6f0b95b0cd7c624dd3c0be9978b3c5be1",
      "created_at": "2025-05-15T21:48:24Z"
    },
    {
      "event": "reviewed",
      "id": 2846600393,
      "node_id": "PRR_kwDOABII586pq6zJ",
      "url": null,
      "actor": null,
      "commit_id": "f13acba6f0b95b0cd7c624dd3c0be9978b3c5be1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2846600393",
      "submitted_at": "2025-05-16T13:13:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "commented",
      "id": 2886851641,
      "node_id": "IC_kwDOABII586sEdw5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2886851641",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-16T14:16:21Z",
      "updated_at": "2025-05-16T14:16:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "While sigops aren't necessarily difficult to compute, there's a lot of them - and now even more.\r\nPlease consider the related sigop optimization PR I just pushed: https://github.com/bitcoin/bitcoin/pull/32532",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2886851641",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "reviewed",
      "id": 2850362016,
      "node_id": "PRR_kwDOABII586p5RKg",
      "url": null,
      "actor": null,
      "commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2850362016",
      "submitted_at": "2025-05-19T11:06:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "reviewed",
      "id": 2850368112,
      "node_id": "PRR_kwDOABII586p5Spw",
      "url": null,
      "actor": null,
      "commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2850368112",
      "submitted_at": "2025-05-19T11:08:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "reviewed",
      "id": 2850384136,
      "node_id": "PRR_kwDOABII586p5WkI",
      "url": null,
      "actor": null,
      "commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2850384136",
      "submitted_at": "2025-05-19T11:14:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "reviewed",
      "id": 2850427699,
      "node_id": "PRR_kwDOABII586p5hMz",
      "url": null,
      "actor": null,
      "commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2850427699",
      "submitted_at": "2025-05-19T11:31:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "reviewed",
      "id": 2850452014,
      "node_id": "PRR_kwDOABII586p5nIu",
      "url": null,
      "actor": null,
      "commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2850452014",
      "submitted_at": "2025-05-19T11:40:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17721476873,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAAQgSEcJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17721476873",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "356ac3b3733203de2bd7251e2bb9ed7a6513590c",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/356ac3b3733203de2bd7251e2bb9ed7a6513590c",
      "created_at": "2025-05-19T20:10:58Z"
    },
    {
      "event": "commented",
      "id": 2895783055,
      "node_id": "IC_kwDOABII586smiSP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2895783055",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-20T20:42:14Z",
      "updated_at": "2025-05-20T20:42:14Z",
      "author_association": "MEMBER",
      "body": "for reference, the CI failure is:\r\n\r\n```\r\n[16:36:22.725] /ci_container_base/src/test/transaction_tests.cpp:1089:20: error: use emplace_back instead of push_back [modernize-use-emplace,-warnings-as-errors]\r\n[16:36:22.725]  1089 |     tx_create.vout.push_back(CTxOut(424242, max_sigops_p2sh));\r\n[16:36:22.725]       |                    ^~~~~~~~~~~~~~~~~                       ~\r\n[16:36:22.725]       |                    emplace_back(\r\n[16:36:22.725] /ci_container_base/src/test/transaction_tests.cpp:1122:25: error: use emplace_back instead of push_back [modernize-use-emplace,-warnings-as-errors]\r\n[16:36:22.725]  1122 |     tx_create_p2pk.vout.push_back(CTxOut(212121, p2pk_script));\r\n[16:36:22.725]       |                         ^~~~~~~~~~~~~~~~~                   ~\r\n[16:36:22.725]       |                         emplace_back(\r\n[16:36:22.725] 1515 warnings generated.\r\n[16:36:22.725] \r\n[16:36:22.725] ^^^ ⚠️ Failure generated from clang-tidy",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2895783055",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "commented",
      "id": 2895784312,
      "node_id": "IC_kwDOABII586smil4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2895784312",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-20T20:42:50Z",
      "updated_at": "2025-05-20T20:42:50Z",
      "author_association": "MEMBER",
      "body": "Yeah i'm changing for `emplace_back` and addressing @Sjors' nits right now.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2895784312",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "mentioned",
      "id": 17741517118,
      "node_id": "MEE_lADOABII58621HOhzwAAAAQhehE-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17741517118",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-20T20:42:52Z"
    },
    {
      "event": "subscribed",
      "id": 17741517134,
      "node_id": "SE_lADOABII58621HOhzwAAAAQhehFO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17741517134",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-20T20:42:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17741616329,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAAQhe5TJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17741616329",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "29e8fe71440a7e27ee89527a49753be615f205c7",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/29e8fe71440a7e27ee89527a49753be615f205c7",
      "created_at": "2025-05-20T20:51:41Z"
    },
    {
      "event": "unlabeled",
      "id": 17743630895,
      "node_id": "UNLE_lADOABII58621HOhzwAAAAQhmlIv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17743630895",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T00:50:49Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2857047398,
      "node_id": "PRR_kwDOABII586qSxVm",
      "url": null,
      "actor": null,
      "commit_id": "29e8fe71440a7e27ee89527a49753be615f205c7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 29e8fe71440a7e27ee89527a49753be615f205c7",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2857047398",
      "submitted_at": "2025-05-21T09:56:28Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17755939382,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAAQiViI2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17755939382",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/80d213677962268a82d65d8915c518f0c02867d9",
      "created_at": "2025-05-21T15:13:53Z"
    },
    {
      "event": "commented",
      "id": 2898436841,
      "node_id": "IC_kwDOABII586swqLp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2898436841",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T15:45:15Z",
      "updated_at": "2025-05-21T15:45:15Z",
      "author_association": "MEMBER",
      "body": "ACK 80d213677962268a82d65d8915c518f0c02867d9",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2898436841",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "labeled",
      "id": 17761096028,
      "node_id": "LE_lADOABII58621HOhzwAAAAQipNFc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17761096028",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T21:16:55Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 17773333994,
      "node_id": "REFE_lADOABII58621HOhzwAAAAQjX43q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17773333994",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d2c9fc84e17120f186a54ef92bab76ea7e8d31b5",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2c9fc84e17120f186a54ef92bab76ea7e8d31b5",
      "created_at": "2025-05-22T14:06:31Z"
    },
    {
      "event": "unlabeled",
      "id": 17784202616,
      "node_id": "UNLE_lADOABII58621HOhzwAAAAQkBWV4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17784202616",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-23T06:34:23Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unsubscribed",
      "id": 17795020815,
      "node_id": "UE_lADOABII58621HOhzwAAAAQkqngP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17795020815",
      "actor": {
        "login": "deehochberg",
        "id": 185879065,
        "node_id": "U_kgDOCxRKGQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/185879065?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deehochberg",
        "html_url": "https://github.com/deehochberg",
        "followers_url": "https://api.github.com/users/deehochberg/followers",
        "following_url": "https://api.github.com/users/deehochberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deehochberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deehochberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deehochberg/subscriptions",
        "organizations_url": "https://api.github.com/users/deehochberg/orgs",
        "repos_url": "https://api.github.com/users/deehochberg/repos",
        "events_url": "https://api.github.com/users/deehochberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deehochberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-23T18:59:27Z"
    },
    {
      "event": "reviewed",
      "id": 2887788438,
      "node_id": "PRR_kwDOABII586sICeW",
      "url": null,
      "actor": null,
      "commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "mabu44",
        "id": 192022804,
        "node_id": "U_kgDOC3IJFA",
        "avatar_url": "https://avatars.githubusercontent.com/u/192022804?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mabu44",
        "html_url": "https://github.com/mabu44",
        "followers_url": "https://api.github.com/users/mabu44/followers",
        "following_url": "https://api.github.com/users/mabu44/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mabu44/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mabu44/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mabu44/subscriptions",
        "organizations_url": "https://api.github.com/users/mabu44/orgs",
        "repos_url": "https://api.github.com/users/mabu44/repos",
        "events_url": "https://api.github.com/users/mabu44/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mabu44/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2887788438",
      "submitted_at": "2025-06-02T10:41:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "reviewed",
      "id": 2888200491,
      "node_id": "PRR_kwDOABII586sJnEr",
      "url": null,
      "actor": null,
      "commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "mabu44",
        "id": 192022804,
        "node_id": "U_kgDOC3IJFA",
        "avatar_url": "https://avatars.githubusercontent.com/u/192022804?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mabu44",
        "html_url": "https://github.com/mabu44",
        "followers_url": "https://api.github.com/users/mabu44/followers",
        "following_url": "https://api.github.com/users/mabu44/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mabu44/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mabu44/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mabu44/subscriptions",
        "organizations_url": "https://api.github.com/users/mabu44/orgs",
        "repos_url": "https://api.github.com/users/mabu44/repos",
        "events_url": "https://api.github.com/users/mabu44/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mabu44/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2888200491",
      "submitted_at": "2025-06-02T12:49:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17938644925,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAAQtOf-9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17938644925",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "709ae501ac289acad7b7e62adc64763ccddbe338",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/709ae501ac289acad7b7e62adc64763ccddbe338",
      "created_at": "2025-06-02T16:49:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17938965915,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAAQtPuWb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17938965915",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "abd0749fae7259a292cb652fc9974c8cdcdd4d9d",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/abd0749fae7259a292cb652fc9974c8cdcdd4d9d",
      "created_at": "2025-06-02T17:05:30Z"
    },
    {
      "event": "reviewed",
      "id": 2889699475,
      "node_id": "PRR_kwDOABII586sPVCT",
      "url": null,
      "actor": null,
      "commit_id": "abd0749fae7259a292cb652fc9974c8cdcdd4d9d",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "ACK abd0749fae7259a292cb652fc9974c8cdcdd4d9d\r\nReviewed the code, compiled it, and ran the new tests. Additionally, made modifications to both the code and the tests to intentionally cause the tests to fail in expected ways.",
      "user": {
        "login": "mabu44",
        "id": 192022804,
        "node_id": "U_kgDOC3IJFA",
        "avatar_url": "https://avatars.githubusercontent.com/u/192022804?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mabu44",
        "html_url": "https://github.com/mabu44",
        "followers_url": "https://api.github.com/users/mabu44/followers",
        "following_url": "https://api.github.com/users/mabu44/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mabu44/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mabu44/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mabu44/subscriptions",
        "organizations_url": "https://api.github.com/users/mabu44/orgs",
        "repos_url": "https://api.github.com/users/mabu44/repos",
        "events_url": "https://api.github.com/users/mabu44/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mabu44/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2889699475",
      "submitted_at": "2025-06-02T19:35:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "review_requested",
      "id": 17941678397,
      "node_id": "RRE_lADOABII58621HOhzwAAAAQtaEk9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17941678397",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T19:35:44Z",
      "requested_reviewer": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2933483080,
      "node_id": "IC_kwDOABII586u2WZI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2933483080",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T05:21:26Z",
      "updated_at": "2025-06-03T05:21:26Z",
      "author_association": "MEMBER",
      "body": "re-ACK abd0749fae",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2933483080",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "commented",
      "id": 2994130659,
      "node_id": "IC_kwDOABII586yds7j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2994130659",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-22T11:17:10Z",
      "updated_at": "2025-06-22T11:17:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2994130659",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "commented",
      "id": 3000327354,
      "node_id": "IC_kwDOABII586y1Vy6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3000327354",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-24T12:47:27Z",
      "updated_at": "2025-06-24T12:47:27Z",
      "author_association": "MEMBER",
      "body": "review ACK abd0749fae7259a292cb652fc9974c8cdcdd4d9d 🌘\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: review ACK abd0749fae7259a292cb652fc9974c8cdcdd4d9d 🌘\r\nq0sc0viVRqyP5OWHaiE6g7Q9ZX/OB0XgbdfLMkuwT8D5RvFxF+7q4cmgZTEVG2knPSvhzE0UEp7iGeVpYsZbCw==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3000327354",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "review_requested",
      "id": 18294785058,
      "node_id": "RRE_lADOABII58621HOhzwAAAARCdEQi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18294785058",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-24T13:16:41Z",
      "requested_reviewer": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18294788977,
      "node_id": "RRE_lADOABII58621HOhzwAAAARCdFNx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18294788977",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-24T13:16:53Z",
      "requested_reviewer": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 3000460860,
      "node_id": "IC_kwDOABII586y12Y8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3000460860",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-24T13:17:44Z",
      "updated_at": "2025-06-24T13:17:44Z",
      "author_association": "MEMBER",
      "body": "OP or commit message should probably explicitly link https://github.com/bitcoin/bips/blob/master/bip-0054.md#specification ",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3000460860",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "commented",
      "id": 3000571610,
      "node_id": "IC_kwDOABII586y2Rba",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3000571610",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-24T13:47:21Z",
      "updated_at": "2025-06-24T13:47:21Z",
      "author_association": "MEMBER",
      "body": "concept and approach ACK\r\n\r\nI have a preference for breaking out the new checks into its own function since if we intend it to someday soon(TM) be a consensus rule it would have to be pulled out anyways. https://github.com/instagibbs/bitcoin/commit/5d63372f75c4a2403c4032b63e5c604ee96c5a40",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3000571610",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "commented",
      "id": 3006215185,
      "node_id": "IC_kwDOABII586zLzQR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3006215185",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-25T21:35:52Z",
      "updated_at": "2025-06-25T21:35:52Z",
      "author_association": "MEMBER",
      "body": "> I have a preference for breaking out the new checks into its own function since if we intend it to someday soon(TM) be a consensus rule it would have to be pulled out anyways. [instagibbs@5d63372](https://github.com/instagibbs/bitcoin/commit/5d63372f75c4a2403c4032b63e5c604ee96c5a40)\r\n\r\nIf we do this the separate function could be much simpler than that (no solver etc). I'll have a go at it tomorrow morning, inspired by the consensus implementation i have on a private branch.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3006215185",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18337894696,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAARFBhEo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18337894696",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "df5ff9e4f41afce7d12a863b9db45656bbb10c4f",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/df5ff9e4f41afce7d12a863b9db45656bbb10c4f",
      "created_at": "2025-06-26T14:39:23Z"
    },
    {
      "event": "commented",
      "id": 3008736607,
      "node_id": "IC_kwDOABII586zVa1f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3008736607",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-26T14:40:00Z",
      "updated_at": "2025-06-26T14:40:00Z",
      "author_association": "MEMBER",
      "body": "Extracted the BIP54-specific sigop counting into a separate function that can be moved into `consensus/tx_verify.cpp` with no modification if/when this is implemented in consensus, as suggested by @instagibbs.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3008736607",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "mentioned",
      "id": 18337907024,
      "node_id": "MEE_lADOABII58621HOhzwAAAARFBkFQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18337907024",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-26T14:40:03Z"
    },
    {
      "event": "subscribed",
      "id": 18337907056,
      "node_id": "SE_lADOABII58621HOhzwAAAARFBkFw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18337907056",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-26T14:40:03Z"
    },
    {
      "event": "commented",
      "id": 3008785284,
      "node_id": "IC_kwDOABII586zVmuE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3008785284",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-26T14:54:39Z",
      "updated_at": "2025-06-26T14:54:39Z",
      "author_association": "MEMBER",
      "body": "Although it's more readable, the downside of this approach is that we're looping over tx.vin twice and, probably much worse, calling `AccessCoin` twice.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3008785284",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "commented",
      "id": 3008910090,
      "node_id": "IC_kwDOABII586zWFMK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3008910090",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-26T15:33:53Z",
      "updated_at": "2025-06-26T15:34:11Z",
      "author_association": "MEMBER",
      "body": "Coins are already accessed multiple times in checking an unconfirmed transaction (which should cache them anyways), doing once more shouldn't introduce any noticeable overhead and i like the upside of facilitating review of a future consensus-touching PR. But if many feel strongly i'm happy to revert the previous approach, and i'm sure Greg would be fine too as he Approach ACK'd the previous approach. Let me know!",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3008910090",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "reviewed",
      "id": 2962634873,
      "node_id": "PRR_kwDOABII586wljh5",
      "url": null,
      "actor": null,
      "commit_id": "7add4522d224a272042f74049a51ce0ef659c956",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2962634873",
      "submitted_at": "2025-06-26T15:54:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18339615760,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAARFIFQQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18339615760",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "created_at": "2025-06-26T16:24:14Z"
    },
    {
      "event": "reviewed",
      "id": 2965729639,
      "node_id": "PRR_kwDOABII586wxXFn",
      "url": null,
      "actor": null,
      "commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nRegardless of whether the soft-fork will be accepted, it's important to guard against this early.\r\n\r\nHowever, the current implementation introduces a significant slowdown and I think we could make the testing more solid by explicitly validating that we didn't soft-fork yet.\r\nTherefore it's an Approach NACK from me, please see the detailed explanation below.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2965729639",
      "submitted_at": "2025-06-27T12:21:42Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "commented",
      "id": 3013114686,
      "node_id": "IC_kwDOABII586zmHs-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3013114686",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-27T13:34:52Z",
      "updated_at": "2025-06-30T06:52:11Z",
      "author_association": "MEMBER",
      "body": "> doing once more shouldn't introduce any noticeable overhead \r\n\r\nLooking at `CCoinsViewCache::AccessCoin()`, it calls `FetchCoin`. This either returns a previously cached coin, or fetches it from its base (possibly on disk) and then adds it to the cache.\r\n\r\nSo the worst case overhead for a _second_ `AccessCoin()` call is having to perform another `try_emplace` on this cache.\r\n\r\nThe `CCoinsCaching` bench @l0rinc points to tests `AreInputsStandard` using a very small dummy coin cache. That's probably representative because `MemPoolAccept` creates a fresh cache specifically for a single transaction or package.\r\n\r\nI ran the bench on 27e54beff7d1c9ac68bee379bb6d971a775b9841:\r\n\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              207.29 |        4,824,125.44 |    0.4% |    110.93 | `CCoinsCaching`\r\n```\r\n\r\nas well the previous approach 005d6434ae9ebb1a66b235631489d1b0b9bb6469:\r\n\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              159.59 |        6,265,865.26 |    0.5% |    111.08 | `CCoinsCaching`\r\n```\r\n\r\nSo there does does seem to be a significant slowdown.\r\n\r\nFor comparison, not doing the new check at all:\r\n\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              129.58 |        7,717,122.10 |    0.4% |    109.35 | `CCoinsCaching`\r\n```\r\n\r\n---\r\n\r\nThe bigger question is whether this slow down is a problem. @instagibbs thinks it's not: https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2172077826\r\n\r\nWe can distinguish between the typical and the worst case.\r\n\r\nFor the latter this is obviously an improvement. Consider validating a standard standard transaction, where the last signature check fails. The `VerifyScriptBench` verifies a single signature and take 12k ns/op. So clearly the sigops counting part of verification is trivial relative to the signature checks. Even for a single signature transaction. Since the extra check introduced by the PR reduces the max number of signatures we have to validate, it's clearly a big improvement for the worst case.\r\n\r\nBut what about the typical case?\r\n\r\n#28592 proposed to increase the transaction relay rate to 35tx/second for outbound peers, so that's one every 30 milliseconds. This is controlled through `INVENTORY_BROADCAST_PER_SECOND`. But we might receive (many) more candidate transactions than we relay.\r\n\r\nOr we can look at the other steps involved in receiving a transaction, validating it, storing in the mempool and relaying.\r\n\r\nAfaik it's free to send us consensus invalid transactions with too many sigops. This change slightly increases the time it takes us to determine that. But does it matter?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3013114686",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "mentioned",
      "id": 18357966088,
      "node_id": "MEE_lADOABII58621HOhzwAAAARGOFUI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18357966088",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-27T13:34:53Z"
    },
    {
      "event": "subscribed",
      "id": 18357966117,
      "node_id": "SE_lADOABII58621HOhzwAAAARGOFUl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18357966117",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-27T13:34:53Z"
    },
    {
      "event": "mentioned",
      "id": 18380118555,
      "node_id": "MEE_lADOABII58621HOhzwAAAARHilob",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18380118555",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T06:47:50Z"
    },
    {
      "event": "subscribed",
      "id": 18380118583,
      "node_id": "SE_lADOABII58621HOhzwAAAARHilo3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18380118583",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T06:47:50Z"
    },
    {
      "event": "commented",
      "id": 3018377738,
      "node_id": "IC_kwDOABII586z6MoK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3018377738",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T09:07:33Z",
      "updated_at": "2025-06-30T11:49:28Z",
      "author_association": "MEMBER",
      "body": "@Sjors `AreInputsStandard` is always called with a warm cache. ~~The benchmark is not.~~ Additional `AccessCoin` calls to fetch coins from the cache do not introduce any meaningful cost.\r\n\r\n@Sjors @l0rinc please let's avoid rushing to performance conclusions on the basis of a microbenchmark that is not representative of how functions are actually used in reality. This PR does not introduce any meaningful slowdown.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3018377738",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "mentioned",
      "id": 18382450036,
      "node_id": "MEE_lADOABII58621HOhzwAAAARHre10",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18382450036",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T09:07:34Z"
    },
    {
      "event": "subscribed",
      "id": 18382450060,
      "node_id": "SE_lADOABII58621HOhzwAAAARHre2M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18382450060",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T09:07:34Z"
    },
    {
      "event": "mentioned",
      "id": 18382450086,
      "node_id": "MEE_lADOABII58621HOhzwAAAARHre2m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18382450086",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T09:07:34Z"
    },
    {
      "event": "subscribed",
      "id": 18382450103,
      "node_id": "SE_lADOABII58621HOhzwAAAARHre23",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18382450103",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T09:07:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18382477785,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAARHrlnZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18382477785",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "created_at": "2025-06-30T09:08:58Z"
    },
    {
      "event": "commented",
      "id": 3018644831,
      "node_id": "IC_kwDOABII586z7N1f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3018644831",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T10:35:08Z",
      "updated_at": "2025-06-30T10:35:08Z",
      "author_association": "MEMBER",
      "body": "> `AreInputsStandard` is always called with a warm cache. The benchmark is not.\r\n\r\nThe `bench.run` call does not clear `coins`, so it's warm after the first iteration. However it's not measuring loading coins from disk. If that's only determined by the disk seek time [0], you're looking at 80 to 160 nanoseconds. My understanding is that our UTXO cache is mostly there to prevent writes, which are much slower than reads.\r\n\r\n[0] https://en.wikipedia.org/wiki/Hard_disk_drive_performance_characteristics",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3018644831",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "commented",
      "id": 3019305155,
      "node_id": "IC_kwDOABII586z9vDD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3019305155",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T14:06:29Z",
      "updated_at": "2025-06-30T14:06:29Z",
      "author_association": "MEMBER",
      "body": "> The `bench.run` call does not clear `coins`, so it's warm after the first iteration.\r\n\r\nActually the benchmark does populate the cache first through `SetupDummyInputs` (otherwise it couldn't work since it is using a dummy backend). But the main point really is that this micro benchmark is meaningless to demonstrate a slow down in transaction processing. `AreInputsStandard` should represent a fraction of a percent of the total work performed when processing a transaction. Unless we make it 10'000 times slower i don't think this needs to be discussed at all, or only to point out this approach only result in a 70% slower `AreInputsStandard` (i.e. only a ~100 additional ns spent there) and is therefore worth taking for the future gains of a simpler consensus patch.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3019305155",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "reviewed",
      "id": 2971492745,
      "node_id": "PRR_kwDOABII586xHWGJ",
      "url": null,
      "actor": null,
      "commit_id": "dfb4bc73be2db8f98a1701eae4d3d3a9e2f7314e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2971492745",
      "submitted_at": "2025-06-30T14:38:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "commented",
      "id": 3019784087,
      "node_id": "IC_kwDOABII586z_j-X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3019784087",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T16:05:53Z",
      "updated_at": "2025-06-30T16:11:35Z",
      "author_association": "MEMBER",
      "body": "From inline discussion: https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174917931\r\n\r\n> I think it's good to keep the [`CCoinsCaching`] benchmark but its results should not be over interpreted. It is focused on a tiny portion of the total work performed when processing a transaction. I locally have benchmarks of `ProcessTransaction` which i may share in the future. To give you an idea, they suggest (as can be expected from just reading the code) that total work in processing a transaction is _several_ orders of magnitude higher than the work done in `AreInputsStandard`. And that's not even in the worst case.\r\n\r\nOk, that's what I wanted to know. Would definitely be useful as a PR, but shouldn't block this.\r\n\r\nI was thinking because the standardness checks are cascading, i.e. we perform the cheapest checks first, perhaps there would be an attack that targets these weaker tests. However it's always free to create a huge standard transaction with an invalid signature and hit a node with that. So at least in the adversarial context the performance of these cheap checks isn't very important.\r\n\r\n(I still need to review the changes since my last review, but in general the helper function seems like an improvement).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3019784087",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "reviewed",
      "id": 2975300052,
      "node_id": "PRR_kwDOABII586xV3nU",
      "url": null,
      "actor": null,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2975300052",
      "submitted_at": "2025-07-01T12:57:16Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "review_requested",
      "id": 18410567825,
      "node_id": "RRE_lADOABII58621HOhzwAAAARJWviR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18410567825",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-01T12:57:22Z",
      "requested_reviewer": {
        "login": "mabu44",
        "id": 192022804,
        "node_id": "U_kgDOC3IJFA",
        "avatar_url": "https://avatars.githubusercontent.com/u/192022804?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mabu44",
        "html_url": "https://github.com/mabu44",
        "followers_url": "https://api.github.com/users/mabu44/followers",
        "following_url": "https://api.github.com/users/mabu44/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mabu44/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mabu44/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mabu44/subscriptions",
        "organizations_url": "https://api.github.com/users/mabu44/orgs",
        "repos_url": "https://api.github.com/users/mabu44/repos",
        "events_url": "https://api.github.com/users/mabu44/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mabu44/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18410568273,
      "node_id": "RRE_lADOABII58621HOhzwAAAARJWvpR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18410568273",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-01T12:57:23Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18410568608,
      "node_id": "RRE_lADOABII58621HOhzwAAAARJWvug",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18410568608",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-01T12:57:24Z",
      "requested_reviewer": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18410569273,
      "node_id": "RRE_lADOABII58621HOhzwAAAARJWv45",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18410569273",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-01T12:57:25Z",
      "requested_reviewer": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2975393556,
      "node_id": "PRR_kwDOABII586xWOcU",
      "url": null,
      "actor": null,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Strong concept ACK. However, it seems that \"this might be a soft fork in the future\" is only a secondary motivation (and a bit of a presumptuous one). The primary motivation should be the same as what's in BIP 54: to avoid long validation times.\r\n\r\nGenerally, a PR that restricts default policy should have a corresponding post on the mailing list. I'm not that concerned that there is someone who needs to relay pathological transactions, but it would feel weird for Core to merge this without any attempt to notify or solicit discussion in the public.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2975393556",
      "submitted_at": "2025-07-01T13:14:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "reviewed",
      "id": 2975960421,
      "node_id": "PRR_kwDOABII586xYY1l",
      "url": null,
      "actor": null,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Have a few remaining concerns, but removing my nack. Thanks for the explanations.\r\nConcept ACK",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2975960421",
      "submitted_at": "2025-07-01T15:28:53Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "commented",
      "id": 3024553755,
      "node_id": "IC_kwDOABII5860Rwcb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3024553755",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-01T15:37:15Z",
      "updated_at": "2025-07-01T15:37:15Z",
      "author_association": "MEMBER",
      "body": "> a PR that restricts default policy should have a corresponding post on the mailing list\r\n\r\nIndeed.\r\n\r\n> The primary motivation should be the same as what's in BIP 54: to avoid long validation times.\r\n\r\nThat's not necessarily true though. Transactions that exceed this limit, but are still below the maximum standardness size, are very expensive to make. It's not obvious that such an expense is worth it just to slow down a few nodes on the network once. But once the proposed soft fork is active, there's zero cost to the attacker.\r\n\r\nImo the argument for this change is that it makes the proposed BIP54 soft fork safer for miners, while not harming anyone and while not introducing an economic incentive to bypass the mempool.\r\n\r\nIt also doesn't preclude alternative consensus proposals that fix slow block validation, though afaik there haven't been any.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3024553755",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "commented",
      "id": 3024571708,
      "node_id": "IC_kwDOABII5860R008",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3024571708",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-01T15:42:23Z",
      "updated_at": "2025-07-01T15:42:23Z",
      "author_association": "MEMBER",
      "body": "@glozow\r\n\r\nI agree this needs a ML post. Will take care of this tomorrow.\r\n\r\nHowever the motivation for this PR is not to reduce validation times, as it only marginally reduces the worst case for standard transactions. I don't think it's fair to qualify the motivation given in OP of \"presumptuous\" and it's certainly not a secondary motivation: if a soft fork is activated and such transactions are still standard it would be trivial to DoS any unupgraded miner into producing a block invalid according to the new rules. This seems to me to be a pretty strong motivation, which comes at virtually no cost since this only makes non-standard some far-fetched pathological transactions (which is the reason why this limit was picked in the first place).",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3024571708",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "mentioned",
      "id": 18414242537,
      "node_id": "MEE_lADOABII58621HOhzwAAAARJkwrp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18414242537",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-01T15:42:24Z"
    },
    {
      "event": "subscribed",
      "id": 18414242571,
      "node_id": "SE_lADOABII58621HOhzwAAAARJkwsL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18414242571",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-01T15:42:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18414256110,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAARJkz_u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18414256110",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "65b7deda12338b17f342c1d37f44e7c6da850771",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/65b7deda12338b17f342c1d37f44e7c6da850771",
      "created_at": "2025-07-01T15:43:13Z"
    },
    {
      "event": "commented",
      "id": 3024600108,
      "node_id": "IC_kwDOABII5860R7ws",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3024600108",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-01T15:51:09Z",
      "updated_at": "2025-07-01T15:51:09Z",
      "author_association": "MEMBER",
      "body": "re-ACK 65b7deda12338b17f342c1d37f44e7c6da850771\r\n\r\n([more future](https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177518858), [less signing](https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2175236097))",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3024600108",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "review_requested",
      "id": 18414413992,
      "node_id": "RRE_lADOABII58621HOhzwAAAARJlaio",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18414413992",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-01T15:51:15Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18414414238,
      "node_id": "RRE_lADOABII58621HOhzwAAAARJlame",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18414414238",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-01T15:51:16Z",
      "requested_reviewer": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 3027077942,
      "node_id": "IC_kwDOABII5860bYs2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3027077942",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-02T09:10:34Z",
      "updated_at": "2025-07-02T09:10:34Z",
      "author_association": "MEMBER",
      "body": "[Posted](https://gnusha.org/pi/bitcoindev/49dyqqkf5NqGlGdinp6SELIoxzE_ONh3UIj6-EB8S804Id5yROq-b1uGK8DUru66eIlWuhb5R3nhRRutwuYjemiuOOBS2FQ4KWDnEh0wLuA=@protonmail.com/T/#u) about this to the mailing list this morning.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3027077942",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "reviewed",
      "id": 2979121208,
      "node_id": "PRR_kwDOABII586xkcg4",
      "url": null,
      "actor": null,
      "commit_id": "65b7deda12338b17f342c1d37f44e7c6da850771",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2979121208",
      "submitted_at": "2025-07-02T13:26:26Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18432561679,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAARKqpIP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18432561679",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "29b9f7f20751d7b456ea7e94f56125ab5cd132fb",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/29b9f7f20751d7b456ea7e94f56125ab5cd132fb",
      "created_at": "2025-07-02T13:42:50Z"
    },
    {
      "event": "reviewed",
      "id": 2979233079,
      "node_id": "PRR_kwDOABII586xk303",
      "url": null,
      "actor": null,
      "commit_id": "29b9f7f20751d7b456ea7e94f56125ab5cd132fb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2979233079",
      "submitted_at": "2025-07-02T13:44:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18434271209,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAARKxKfp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18434271209",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c4c3b752bc5144305d1dcf01acdee9f898a77241",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/c4c3b752bc5144305d1dcf01acdee9f898a77241",
      "created_at": "2025-07-02T15:09:38Z"
    },
    {
      "event": "labeled",
      "id": 18434275509,
      "node_id": "LE_lADOABII58621HOhzwAAAARKxLi1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18434275509",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-02T15:09:53Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQwODllM2ZiOWJiZjYwOGZjMmNhMWM0MWFiYzczNmZmZjI3YWZjOWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d089e3fb9bbf608fc2ca1c41abc736fff27afc9a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d089e3fb9bbf608fc2ca1c41abc736fff27afc9a",
      "tree": {
        "sha": "faa3ef2d6dcf51e320966316d91f8c6a7eeafa1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/faa3ef2d6dcf51e320966316d91f8c6a7eeafa1a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa33592898838cf92ae3bdb3ca9a522b5f9cce3d",
          "sha": "fa33592898838cf92ae3bdb3ca9a522b5f9cce3d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fa33592898838cf92ae3bdb3ca9a522b5f9cce3d"
        }
      ],
      "message": "policy: make pathological transactions packed with legacy sigops non-standard.\n\nThe Consensus Cleanup soft fork proposal includes a limit on the number of legacy signature\noperations potentially executed when validating a transaction. If this change is to be implemented\nhere and activated by Bitcoin users in the future, we should prevent the ability for someone to\nbroadcast a transaction through the p2p network that is not valid according to the new rules. This\nis because if it was possible it would be a trivial DoS to potentially unupgraded miners after the\nsoft fork activates.\n\nWe do not know for sure whether users will activate the Consensus Cleanup. However if they do such\ntransactions must have been made non-standard long in advance, due to the time it takes for most\nnodes on the network to upgrade. In addition this limit may only be ran into by pathological\ntransactions which pad the Script with sigops but do not use actual signatures whem spending, as\notherwise they would run into the standard transaction size limit.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-07-02T16:43:42Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-03-19T21:25:06Z"
      },
      "sha": "d089e3fb9bbf608fc2ca1c41abc736fff27afc9a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA5OTIzMjA5OWIxZjZiZWMyY2Q3MDMzODYyNDcyYzIwZmQwYzg0M2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/099232099b1f6bec2cd7033862472c20fd0c843f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/099232099b1f6bec2cd7033862472c20fd0c843f",
      "tree": {
        "sha": "4056fe42c40ee17789cf2029e146ab73c23e67a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4056fe42c40ee17789cf2029e146ab73c23e67a2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d089e3fb9bbf608fc2ca1c41abc736fff27afc9a",
          "sha": "d089e3fb9bbf608fc2ca1c41abc736fff27afc9a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d089e3fb9bbf608fc2ca1c41abc736fff27afc9a"
        }
      ],
      "message": "qa: unit test standardness of inputs packed with legacy sigops\n\nCheck bounds and different output types.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-07-02T16:43:42Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-03-19T21:35:14Z"
      },
      "sha": "099232099b1f6bec2cd7033862472c20fd0c843f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIxZjU5ZTg4OTdkMzg0NzY3NzlhZTQ3NjU2ZDFhMDI4MDVlODg5NTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1f59e8897d38476779ae47656d1a02805e88955",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b1f59e8897d38476779ae47656d1a02805e88955",
      "tree": {
        "sha": "a95c35f96609c262a5d29ad18932bd4212fab238",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a95c35f96609c262a5d29ad18932bd4212fab238"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/099232099b1f6bec2cd7033862472c20fd0c843f",
          "sha": "099232099b1f6bec2cd7033862472c20fd0c843f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/099232099b1f6bec2cd7033862472c20fd0c843f"
        }
      ],
      "message": "qa: functional test a transaction running into the legacy sigop limit\n\nIt's useful to have an end-to-end test in addition to the unit test to sanity check the RPC error as\nwell as making sure the transaction is otherwise fully standard.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-07-02T16:43:42Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-03-20T13:44:10Z"
      },
      "sha": "b1f59e8897d38476779ae47656d1a02805e88955"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18435916076,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAARK3cEs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18435916076",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/b1f59e8897d38476779ae47656d1a02805e88955",
      "created_at": "2025-07-02T16:44:08Z"
    },
    {
      "event": "unlabeled",
      "id": 18437695729,
      "node_id": "UNLE_lADOABII58621HOhzwAAAARK-Ojx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18437695729",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-02T18:33:00Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093026925",
      "pull_request_review_id": 2846600393,
      "id": 2093026925,
      "node_id": "PRRC_kwDOABII5858wQ5t",
      "diff_hunk": "@@ -176,6 +183,38 @@ def create_bare_multisig_tx(utxo_to_spend=None):\n         # Transactions are tiny in weight\n         assert_greater_than(2000, tx_parent.get_weight() + tx_child.get_weight())\n \n+    def test_legacy_sigops_stdness(self):\n+        self.log.info(\"Test a transaction with too many legacy sigops in its inputs is non-standard.\")\n+\n+        # Restart with the default settings\n+        self.restart_node(0)\n+\n+        # Create a P2SH script with 15 sigops.\n+        _, dummy_pubkey = generate_keypair()\n+        packed_redeem_script = [dummy_pubkey]\n+        for _ in range(MAX_STD_P2SH_SIGOPS - 1):\n+            packed_redeem_script += [OP_2DUP, OP_CHECKSIG, OP_DROP]\n+        packed_redeem_script = CScript(packed_redeem_script + [OP_CHECKSIG, OP_NOT])\n+        packed_p2sh_script = script_to_p2sh_script(packed_redeem_script)\n+\n+        # Create enough outputs to reach the sigops limit when spending them all at once.\n+        outpoints = []\n+        for _ in range(int(MAX_STD_LEGACY_SIGOPS / MAX_STD_P2SH_SIGOPS) + 1):\n+            res = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=packed_p2sh_script, amount=1_000)\n+            txid = int.from_bytes(bytes.fromhex(res[\"txid\"]), byteorder=\"big\")\n+            outpoints.append(COutPoint(txid, res[\"sent_vout\"]))\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spending all these outputs at once accounts for 2505 legacy sigops and is non-standard.\n+        tx = CTransaction()",
      "path": "test/functional/mempool_sigoplimit.py",
      "position": null,
      "original_position": 51,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "f13acba6f0b95b0cd7c624dd3c0be9978b3c5be1",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "might be worth getting this one mined to show it's consensus-valid still",
      "created_at": "2025-05-16T13:13:45Z",
      "updated_at": "2025-05-16T13:13:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2093026925",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093026925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095459011",
      "pull_request_review_id": 2850362016,
      "id": 2095459011,
      "node_id": "PRRC_kwDOABII58585irD",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": null,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`MAX_TX_LEGACY_SIGOPS`?",
      "created_at": "2025-05-19T11:06:14Z",
      "updated_at": "2025-05-19T11:06:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2095459011",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095459011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095462982",
      "pull_request_review_id": 2850368112,
      "id": 2095462982,
      "node_id": "PRRC_kwDOABII58585jpG",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase()) {\n         return true; // Coinbases don't use vin normally\n     }\n \n+    unsigned int sigops{0};\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`GetSigOpCount(/*fAccurate=*/true)`\r\n\r\nAnd the `fAccurate` is terribly vague, it's useful to explain:\r\n\r\n```h\r\n// Unlike the block wide sigop limit, the BIP54 per\r\n// transaction limit uses \"accurate\" BIP16 style accounting.\r\n```",
      "created_at": "2025-05-19T11:08:44Z",
      "updated_at": "2025-05-19T11:35:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2095462982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095462982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095472966",
      "pull_request_review_id": 2850384136,
      "id": 2095472966,
      "node_id": "PRRC_kwDOABII58585mFG",
      "diff_hunk": "@@ -209,9 +215,15 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n             if (stack.empty())\n                 return false;\n             CScript subscript(stack.back().begin(), stack.back().end());\n-            if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n+            const auto p2sh_sigops{subscript.GetSigOpCount(true)};\n+            if (p2sh_sigops > MAX_P2SH_SIGOPS) {\n                 return false;\n             }\n+            sigops += p2sh_sigops;\n+        }\n+\n+        if (sigops > MAX_LEGACY_SIGOPS) {",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Although there are no `break` or `continue` statements in the loop, it would feel a bit more robust to move this check below the loop (although an early break is more efficient).",
      "created_at": "2025-05-19T11:14:18Z",
      "updated_at": "2025-05-19T11:15:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2095472966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095472966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095501048",
      "pull_request_review_id": 2850427699,
      "id": 2095501048,
      "node_id": "PRRC_kwDOABII58585s74",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could add: `The per transaction sigop limit introduced in BIP54 does not cover the witness.`",
      "created_at": "2025-05-19T11:31:03Z",
      "updated_at": "2025-05-19T11:31:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2095501048",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095501048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095516997",
      "pull_request_review_id": 2850452014,
      "id": 2095516997,
      "node_id": "PRRC_kwDOABII58585w1F",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase()) {\n         return true; // Coinbases don't use vin normally\n     }\n \n+    unsigned int sigops{0};\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(true);\n+        sigops += prev.scriptPubKey.GetSigOpCount(true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```cpp\r\n// Unlike the block wide sigop limit, the BIP54 per\r\n// transaction limit includes the prevout scriptPubKey.\r\n```",
      "created_at": "2025-05-19T11:40:49Z",
      "updated_at": "2025-05-19T11:41:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2095516997",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095516997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096403730",
      "pull_request_review_id": 2851861223,
      "id": 2096403730,
      "node_id": "PRRC_kwDOABII58589JUS",
      "diff_hunk": "@@ -209,9 +215,15 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n             if (stack.empty())\n                 return false;\n             CScript subscript(stack.back().begin(), stack.back().end());\n-            if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n+            const auto p2sh_sigops{subscript.GetSigOpCount(true)};\n+            if (p2sh_sigops > MAX_P2SH_SIGOPS) {\n                 return false;\n             }\n+            sigops += p2sh_sigops;\n+        }\n+\n+        if (sigops > MAX_LEGACY_SIGOPS) {",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095472966,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I understand the slight additional complexity concern but for a transaction submitted to us with no PoW i think we should discard it as soon as we know we won't accept it. I really don't think we should keep doing unnecessary work by iterating, solving scripts and counting.",
      "created_at": "2025-05-19T20:00:34Z",
      "updated_at": "2025-05-19T20:00:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2096403730",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096403730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096405194",
      "pull_request_review_id": 2851863588,
      "id": 2096405194,
      "node_id": "PRRC_kwDOABII58589JrK",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095501048,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Don't you think it would be confusing to point here since this function does not concern itself with the witness? Especially as it's pointed right before.",
      "created_at": "2025-05-19T20:01:50Z",
      "updated_at": "2025-05-19T20:01:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2096405194",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096405194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096415934",
      "pull_request_review_id": 2851881539,
      "id": 2096415934,
      "node_id": "PRRC_kwDOABII58589MS-",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase()) {\n         return true; // Coinbases don't use vin normally\n     }\n \n+    unsigned int sigops{0};\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(true);\n+        sigops += prev.scriptPubKey.GetSigOpCount(true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095516997,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, added a sentence to this effect.",
      "created_at": "2025-05-19T20:11:08Z",
      "updated_at": "2025-05-19T20:11:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2096415934",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096415934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096416043",
      "pull_request_review_id": 2851881679,
      "id": 2096416043,
      "node_id": "PRRC_kwDOABII58589MUr",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase()) {\n         return true; // Coinbases don't use vin normally\n     }\n \n+    unsigned int sigops{0};\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095462982,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-05-19T20:11:12Z",
      "updated_at": "2025-05-19T20:11:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2096416043",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096416043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096416080",
      "pull_request_review_id": 2851881743,
      "id": 2096416080,
      "node_id": "PRRC_kwDOABII58589MVQ",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": null,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095459011,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's actually what i had initially but i reduced it to `MAX_LEGACY_SIGOPS` in an attempt to avoid too long variable names. With the comment expliciting it's about transaction inputs, i think it should be fine as-is.",
      "created_at": "2025-05-19T20:11:14Z",
      "updated_at": "2025-05-19T20:11:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2096416080",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096416080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096416254",
      "pull_request_review_id": 2851882463,
      "id": 2096416254,
      "node_id": "PRRC_kwDOABII58589MX-",
      "diff_hunk": "@@ -176,6 +183,38 @@ def create_bare_multisig_tx(utxo_to_spend=None):\n         # Transactions are tiny in weight\n         assert_greater_than(2000, tx_parent.get_weight() + tx_child.get_weight())\n \n+    def test_legacy_sigops_stdness(self):\n+        self.log.info(\"Test a transaction with too many legacy sigops in its inputs is non-standard.\")\n+\n+        # Restart with the default settings\n+        self.restart_node(0)\n+\n+        # Create a P2SH script with 15 sigops.\n+        _, dummy_pubkey = generate_keypair()\n+        packed_redeem_script = [dummy_pubkey]\n+        for _ in range(MAX_STD_P2SH_SIGOPS - 1):\n+            packed_redeem_script += [OP_2DUP, OP_CHECKSIG, OP_DROP]\n+        packed_redeem_script = CScript(packed_redeem_script + [OP_CHECKSIG, OP_NOT])\n+        packed_p2sh_script = script_to_p2sh_script(packed_redeem_script)\n+\n+        # Create enough outputs to reach the sigops limit when spending them all at once.\n+        outpoints = []\n+        for _ in range(int(MAX_STD_LEGACY_SIGOPS / MAX_STD_P2SH_SIGOPS) + 1):\n+            res = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=packed_p2sh_script, amount=1_000)\n+            txid = int.from_bytes(bytes.fromhex(res[\"txid\"]), byteorder=\"big\")\n+            outpoints.append(COutPoint(txid, res[\"sent_vout\"]))\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spending all these outputs at once accounts for 2505 legacy sigops and is non-standard.\n+        tx = CTransaction()",
      "path": "test/functional/mempool_sigoplimit.py",
      "position": null,
      "original_position": 51,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "f13acba6f0b95b0cd7c624dd3c0be9978b3c5be1",
      "in_reply_to_id": 2093026925,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Expanded the test to check the original, non-standard, one can still be mined.",
      "created_at": "2025-05-19T20:11:22Z",
      "updated_at": "2025-05-19T20:11:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2096416254",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096416254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2097218973",
      "pull_request_review_id": 2853046198,
      "id": 2097218973,
      "node_id": "PRRC_kwDOABII5859AQWd",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095501048,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Well that's what confused me. My first thought was: why does this work if we're not checking the witness?\r\n\r\nBut maybe the sigops related comment needs to go above the \"only the non-witness\" portion.\r\n\r\nOr something like:\r\n\r\n```cpp\r\n* Note that only the non-witness portion of the transaction is checked here.\r\n* This is fine because the per transaction sigop limit introduced in BIP54 \r\n* does not cover the witness.\r\n```\r\n\r\n(and then drop the \"We also check the total\")",
      "created_at": "2025-05-20T07:39:42Z",
      "updated_at": "2025-05-20T07:41:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2097218973",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2097218973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2097226712",
      "pull_request_review_id": 2853058249,
      "id": 2097226712,
      "node_id": "PRRC_kwDOABII5859ASPY",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": null,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095459011,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think the 3 character savings is worth making people jump to the documentation. `MAX_TX_` vs `MAX_BLOCK_` seems like a good convention to keep. ",
      "created_at": "2025-05-20T07:43:42Z",
      "updated_at": "2025-05-20T07:43:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2097226712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2097226712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2098849030",
      "pull_request_review_id": 2855554462,
      "id": 2098849030,
      "node_id": "PRRC_kwDOABII5859GeUG",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095501048,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fine, but went for a more compressed version:\r\n```suggestion\r\n * We also check the total number of legacy sigops across the whole transaction, as per BIP54.\r\n```\r\n\r\nLooks good?",
      "created_at": "2025-05-20T20:47:13Z",
      "updated_at": "2025-05-20T20:47:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2098849030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2098849030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2098855504",
      "pull_request_review_id": 2855563435,
      "id": 2098855504,
      "node_id": "PRRC_kwDOABII5859Gf5Q",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": null,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095459011,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fine, done.",
      "created_at": "2025-05-20T20:51:45Z",
      "updated_at": "2025-05-20T20:51:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2098855504",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2098855504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099616827",
      "pull_request_review_id": 2856689903,
      "id": 2099616827,
      "node_id": "PRRC_kwDOABII5859JZw7",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095501048,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sounds fine, forgot to push this?\r\n\r\n(maybe say \"non-witness\" instead of \"legacy\")",
      "created_at": "2025-05-21T07:54:43Z",
      "updated_at": "2025-05-21T07:55:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2099616827",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099616827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099855247",
      "pull_request_review_id": 2857047398,
      "id": 2099855247,
      "node_id": "PRRC_kwDOABII5859KT-P",
      "diff_hunk": "@@ -176,6 +184,42 @@ def create_bare_multisig_tx(utxo_to_spend=None):\n         # Transactions are tiny in weight\n         assert_greater_than(2000, tx_parent.get_weight() + tx_child.get_weight())\n \n+    def test_legacy_sigops_stdness(self):\n+        self.log.info(\"Test a transaction with too many legacy sigops in its inputs is non-standard.\")\n+\n+        # Restart with the default settings\n+        self.restart_node(0)\n+\n+        # Create a P2SH script with 15 sigops.\n+        _, dummy_pubkey = generate_keypair()\n+        packed_redeem_script = [dummy_pubkey]\n+        for _ in range(MAX_STD_P2SH_SIGOPS - 1):\n+            packed_redeem_script += [OP_2DUP, OP_CHECKSIG, OP_DROP]\n+        packed_redeem_script = CScript(packed_redeem_script + [OP_CHECKSIG, OP_NOT])\n+        packed_p2sh_script = script_to_p2sh_script(packed_redeem_script)\n+\n+        # Create enough outputs to reach the sigops limit when spending them all at once.\n+        outpoints = []\n+        for _ in range(int(MAX_STD_LEGACY_SIGOPS / MAX_STD_P2SH_SIGOPS) + 1):\n+            res = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=packed_p2sh_script, amount=1_000)\n+            txid = int.from_bytes(bytes.fromhex(res[\"txid\"]), byteorder=\"big\")\n+            outpoints.append(COutPoint(txid, res[\"sent_vout\"]))\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spending all these outputs at once accounts for 2505 legacy sigops and is non-standard.\n+        nonstd_tx = CTransaction()\n+        nonstd_tx.vin = [CTxIn(op, CScript([b\"\", packed_redeem_script])) for op in outpoints]\n+        nonstd_tx.vout = [CTxOut(0, CScript([OP_RETURN, b\"\"]))]\n+        assert_raises_rpc_error(-26, \"bad-txns-nonstandard-inputs\", self.nodes[0].sendrawtransaction, nonstd_tx.serialize().hex())\n+\n+        # Spending one less accounts for 2490 legacy sigops and is standard.\n+        std_tx = deepcopy(nonstd_tx)\n+        std_tx.vin.pop()\n+        self.nodes[0].sendrawtransaction(std_tx.serialize().hex())\n+\n+        # Make sure the original, non-standard, transaction can be mined.\n+        self.generateblock(self.nodes[0], output=\"raw(42)\", transactions=[nonstd_tx.serialize().hex()])",
      "path": "test/functional/mempool_sigoplimit.py",
      "position": 77,
      "original_position": 70,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "29e8fe71440a7e27ee89527a49753be615f205c7",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "29e8fe71440a7e27ee89527a49753be615f205c7: note to other reviewers, yes `generateblocks` checks for errors, as you can see if you duplicate `nonstd_tx.serialize().hex()`",
      "created_at": "2025-05-21T09:46:40Z",
      "updated_at": "2025-05-21T09:57:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2099855247",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099855247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 219,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099858669",
      "pull_request_review_id": 2857047398,
      "id": 2099858669,
      "node_id": "PRRC_kwDOABII5859KUzt",
      "diff_hunk": "@@ -22,6 +22,12 @@\n     sha256,\n )\n \n+# Maximum number of potentially executed legacy signature operations in validating a transaction.\n+MAX_STD_LEGACY_SIGOPS = 2_500",
      "path": "test/functional/test_framework/script_util.py",
      "position": 5,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "29e8fe71440a7e27ee89527a49753be615f205c7",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "29e8fe71440a7e27ee89527a49753be615f205c7: `MAX_TX_LEGACY_SIGOPS` would be consistent with the c++ code",
      "created_at": "2025-05-21T09:48:33Z",
      "updated_at": "2025-05-21T09:56:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2099858669",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099858669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099863081",
      "pull_request_review_id": 2857047398,
      "id": 2099863081,
      "node_id": "PRRC_kwDOABII5859KV4p",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);",
      "path": "src/test/transaction_tests.cpp",
      "position": 23,
      "original_position": 26,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a139a538c298621674ba622e63971704cbb7ceff: what's this magic `424242` value?",
      "created_at": "2025-05-21T09:50:32Z",
      "updated_at": "2025-05-21T09:56:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2099863081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099863081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1075,
      "original_line": 1075,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099865784",
      "pull_request_review_id": 2857047398,
      "id": 2099865784,
      "node_id": "PRRC_kwDOABII5859KWi4",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)",
      "path": "src/test/transaction_tests.cpp",
      "position": 31,
      "original_position": 34,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a139a538c298621674ba622e63971704cbb7ceff: it seems more clear if you define it as an integer instead of `auto`.",
      "created_at": "2025-05-21T09:51:58Z",
      "updated_at": "2025-05-21T09:57:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2099865784",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099865784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1083,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099872077",
      "pull_request_review_id": 2857047398,
      "id": 2099872077,
      "node_id": "PRRC_kwDOABII5859KYFN",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+",
      "path": "src/test/transaction_tests.cpp",
      "position": 67,
      "original_position": 73,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a139a538c298621674ba622e63971704cbb7ceff: could insert a segwit spend to show that it doesn't count.",
      "created_at": "2025-05-21T09:55:02Z",
      "updated_at": "2025-05-21T09:56:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2099872077",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099872077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1119,
      "original_line": 1119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100286223",
      "pull_request_review_id": 2857715376,
      "id": 2100286223,
      "node_id": "PRRC_kwDOABII5859L9MP",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);",
      "path": "src/test/transaction_tests.cpp",
      "position": 23,
      "original_position": 26,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": 2099863081,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The value of a transaction output.",
      "created_at": "2025-05-21T13:21:55Z",
      "updated_at": "2025-05-21T13:21:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100286223",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100286223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1075,
      "original_line": 1075,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100412156",
      "pull_request_review_id": 2857911090,
      "id": 2100412156,
      "node_id": "PRRC_kwDOABII5859Mb78",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);",
      "path": "src/test/transaction_tests.cpp",
      "position": 23,
      "original_position": 26,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": 2099863081,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah ok, any reason for the `+ i`?",
      "created_at": "2025-05-21T14:13:22Z",
      "updated_at": "2025-05-21T14:13:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100412156",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100412156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1075,
      "original_line": 1075,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551171",
      "pull_request_review_id": 2858138124,
      "id": 2100551171,
      "node_id": "PRRC_kwDOABII5859M94D",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095501048,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed to \"non-witness\" and actually pushed it this time. :)",
      "created_at": "2025-05-21T15:13:29Z",
      "updated_at": "2025-05-21T15:13:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100551171",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551433",
      "pull_request_review_id": 2858138518,
      "id": 2100551433,
      "node_id": "PRRC_kwDOABII5859M98J",
      "diff_hunk": "@@ -22,6 +22,12 @@\n     sha256,\n )\n \n+# Maximum number of potentially executed legacy signature operations in validating a transaction.\n+MAX_STD_LEGACY_SIGOPS = 2_500",
      "path": "test/functional/test_framework/script_util.py",
      "position": 5,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "29e8fe71440a7e27ee89527a49753be615f205c7",
      "in_reply_to_id": 2099858669,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Meh. Then it would not make it consistent with MAX_STD_P2SH_SIGOPS, and having in the name that's it's a standardness rule is useful. I don't think it's worth changing.",
      "created_at": "2025-05-21T15:13:37Z",
      "updated_at": "2025-05-21T15:13:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100551433",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551433"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551574",
      "pull_request_review_id": 2858138720,
      "id": 2100551574,
      "node_id": "PRRC_kwDOABII5859M9-W",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)",
      "path": "src/test/transaction_tests.cpp",
      "position": 31,
      "original_position": 34,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": 2099865784,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-05-21T15:13:40Z",
      "updated_at": "2025-05-21T15:13:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100551574",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551574"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1083,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551654",
      "pull_request_review_id": 2858138836,
      "id": 2100551654,
      "node_id": "PRRC_kwDOABII5859M9_m",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+",
      "path": "src/test/transaction_tests.cpp",
      "position": 67,
      "original_position": 73,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": 2099872077,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good call, done.",
      "created_at": "2025-05-21T15:13:42Z",
      "updated_at": "2025-05-21T15:13:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100551654",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1119,
      "original_line": 1119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100561289",
      "pull_request_review_id": 2858158749,
      "id": 2100561289,
      "node_id": "PRRC_kwDOABII5859NAWJ",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);",
      "path": "src/test/transaction_tests.cpp",
      "position": 23,
      "original_position": 26,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": 2099863081,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just varying the amounts because why not.",
      "created_at": "2025-05-21T15:18:24Z",
      "updated_at": "2025-05-21T15:18:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100561289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100561289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1075,
      "original_line": 1075,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100618966",
      "pull_request_review_id": 2858285512,
      "id": 2100618966,
      "node_id": "PRRC_kwDOABII5859NObW",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);",
      "path": "src/test/transaction_tests.cpp",
      "position": 23,
      "original_position": 26,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": 2099863081,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's confusing, but otherwise harmless.",
      "created_at": "2025-05-21T15:42:29Z",
      "updated_at": "2025-05-21T15:42:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100618966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100618966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1075,
      "original_line": 1075,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120745163",
      "pull_request_review_id": 2887788438,
      "id": 2120745163,
      "node_id": "PRRC_kwDOABII585-aADL",
      "diff_hunk": "@@ -183,16 +183,26 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of non-witness sigops across the whole transaction, as per BIP54.\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase()) {\n         return true; // Coinbases don't use vin normally\n     }\n \n+    unsigned int sigops{0};\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey actually count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev.scriptPubKey.GetSigOpCount(/*fAccurate=*/true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "in_reply_to_id": null,
      "user": {
        "login": "mabu44",
        "id": 192022804,
        "node_id": "U_kgDOC3IJFA",
        "avatar_url": "https://avatars.githubusercontent.com/u/192022804?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mabu44",
        "html_url": "https://github.com/mabu44",
        "followers_url": "https://api.github.com/users/mabu44/followers",
        "following_url": "https://api.github.com/users/mabu44/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mabu44/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mabu44/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mabu44/subscriptions",
        "organizations_url": "https://api.github.com/users/mabu44/orgs",
        "repos_url": "https://api.github.com/users/mabu44/repos",
        "events_url": "https://api.github.com/users/mabu44/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mabu44/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Moving these lines directly before the check on sigops (e.g. to line 228) can improve performances because we avoid performing the calculation when a \"return false\" is executed for another reason in the block between lines 206 and 227.",
      "created_at": "2025-06-02T10:40:29Z",
      "updated_at": "2025-06-02T10:41:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2120745163",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120745163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121017491",
      "pull_request_review_id": 2888200491,
      "id": 2121017491,
      "node_id": "PRRC_kwDOABII585-bCiT",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), false);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "in_reply_to_id": null,
      "user": {
        "login": "mabu44",
        "id": 192022804,
        "node_id": "U_kgDOC3IJFA",
        "avatar_url": "https://avatars.githubusercontent.com/u/192022804?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mabu44",
        "html_url": "https://github.com/mabu44",
        "followers_url": "https://api.github.com/users/mabu44/followers",
        "following_url": "https://api.github.com/users/mabu44/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mabu44/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mabu44/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mabu44/subscriptions",
        "organizations_url": "https://api.github.com/users/mabu44/orgs",
        "repos_url": "https://api.github.com/users/mabu44/repos",
        "events_url": "https://api.github.com/users/mabu44/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mabu44/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The third parameter should be 0, not false. For all the occurrences of the AddCoins function.",
      "created_at": "2025-06-02T12:34:02Z",
      "updated_at": "2025-06-02T12:51:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2121017491",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121017491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121277977",
      "pull_request_review_id": 2888610058,
      "id": 2121277977,
      "node_id": "PRRC_kwDOABII585-cCIZ",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), false);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "in_reply_to_id": 2121017491,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "See `AddCoins`'s declaration in `src/coins.h`:\r\n```cpp\r\nvoid AddCoins(CCoinsViewCache& cache, const CTransaction& tx, int nHeight, bool check = false);\r\n```",
      "created_at": "2025-06-02T14:12:13Z",
      "updated_at": "2025-06-02T14:12:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2121277977",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121277977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121610418",
      "pull_request_review_id": 2889105473,
      "id": 2121610418,
      "node_id": "PRRC_kwDOABII585-dTSy",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), false);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "in_reply_to_id": 2121017491,
      "user": {
        "login": "mabu44",
        "id": 192022804,
        "node_id": "U_kgDOC3IJFA",
        "avatar_url": "https://avatars.githubusercontent.com/u/192022804?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mabu44",
        "html_url": "https://github.com/mabu44",
        "followers_url": "https://api.github.com/users/mabu44/followers",
        "following_url": "https://api.github.com/users/mabu44/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mabu44/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mabu44/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mabu44/subscriptions",
        "organizations_url": "https://api.github.com/users/mabu44/orgs",
        "repos_url": "https://api.github.com/users/mabu44/repos",
        "events_url": "https://api.github.com/users/mabu44/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mabu44/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nHeight is indeed an int. Am I missing something?",
      "created_at": "2025-06-02T16:13:01Z",
      "updated_at": "2025-06-02T16:13:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2121610418",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121610418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121670967",
      "pull_request_review_id": 2889204712,
      "id": 2121670967,
      "node_id": "PRRC_kwDOABII585-diE3",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), false);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "in_reply_to_id": 2121017491,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Wow my bad.",
      "created_at": "2025-06-02T16:42:17Z",
      "updated_at": "2025-06-02T16:42:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2121670967",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121670967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121686616",
      "pull_request_review_id": 2889228221,
      "id": 2121686616,
      "node_id": "PRRC_kwDOABII585-dl5Y",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), false);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "in_reply_to_id": 2121017491,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-06-02T16:49:31Z",
      "updated_at": "2025-06-02T16:49:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2121686616",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121686616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121720547",
      "pull_request_review_id": 2889284486,
      "id": 2121720547,
      "node_id": "PRRC_kwDOABII585-duLj",
      "diff_hunk": "@@ -183,16 +183,26 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of non-witness sigops across the whole transaction, as per BIP54.\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase()) {\n         return true; // Coinbases don't use vin normally\n     }\n \n+    unsigned int sigops{0};\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey actually count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev.scriptPubKey.GetSigOpCount(/*fAccurate=*/true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "in_reply_to_id": 2120745163,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-06-02T17:05:40Z",
      "updated_at": "2025-06-02T17:05:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2121720547",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121720547"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2169392812",
      "pull_request_review_id": 2962634873,
      "id": 2169392812,
      "node_id": "PRRC_kwDOABII586BTk6s",
      "diff_hunk": "@@ -168,6 +168,33 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& coin{inputs.AccessCoin(tx.vin[i].prevout)};\n+        assert(!coin.IsSpent());\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += coin.out.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "7add4522d224a272042f74049a51ce0ef659c956",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "TIL. We could use this one in the other standardness check, right?",
      "created_at": "2025-06-26T15:54:34Z",
      "updated_at": "2025-06-26T15:54:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2169392812",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2169392812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2169429571",
      "pull_request_review_id": 2962694670,
      "id": 2169429571,
      "node_id": "PRRC_kwDOABII586BTt5D",
      "diff_hunk": "@@ -168,6 +168,33 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& coin{inputs.AccessCoin(tx.vin[i].prevout)};\n+        assert(!coin.IsSpent());\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += coin.out.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "7add4522d224a272042f74049a51ce0ef659c956",
      "in_reply_to_id": 2169392812,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah.",
      "created_at": "2025-06-26T16:15:39Z",
      "updated_at": "2025-06-26T16:15:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2169429571",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2169429571"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171446494",
      "pull_request_review_id": 2965729639,
      "id": 2171446494,
      "node_id": "PRRC_kwDOABII586BbaTe",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems wasteful to iterate and parse `tx.vin[i].scriptSig` twice, we should already know the last item that the `scriptSig` pushed onto the stack after the first iteration - can we optimize that?",
      "created_at": "2025-06-27T09:50:24Z",
      "updated_at": "2025-06-27T12:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171446494",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171446494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171450864",
      "pull_request_review_id": 2965729639,
      "id": 2171450864,
      "node_id": "PRRC_kwDOABII586BbbXw",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Note: since this magic value is referencing a soft-fork that may or may not be applied, we could mention it here for context: https://github.com/bitcoin/bips/blob/master/bip-0054.md#specification\r\n\r\nQ: How often do we expect mined blocks to contradict this new policy rule?\r\nAsking because of https://b10c.me/observations/11-invalid-blocks-783426-and-784121, claiming:\r\n> On April 1st, 2023, F2Pool mined an invalid block at height 783426. Bitcoin Core nodes rejected the block with the reason bad-blk-sigops and the note too many sigops. On April 6th, 2023, F2Pool mined another bad-blk-sigops block at height 784121\r\n\r\n and https://bitcoin.stackexchange.com/questions/121355/sigop-count-and-its-influence-on-transaction-selection which claims:\r\n> Over the last 10,000 blocks (between heights 815316 and 825316), only 62 were constrained by the sigop limit, despite an abnormally large number of high sigop transactions during that period.",
      "created_at": "2025-06-27T09:51:52Z",
      "updated_at": "2025-06-27T12:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171450864",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171450864"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171470960",
      "pull_request_review_id": 2965729639,
      "id": 2171470960,
      "node_id": "PRRC_kwDOABII586BbgRw",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Similarly to the discussion on https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2095472966, it seems to me we could fail early by exiting if the first one is already too big:\r\n```suggestion\r\n        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\r\n        if (sigops > MAX_TX_LEGACY_SIGOPS) {\r\n            return false;\r\n        }\r\n```\r\nor inversely, if this isn't performance critical, we can do the check at the very end instead, to speed up the happy path by not doing intermediary checks. \r\n```C++\r\n        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\r\n        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\r\n    }\r\n\r\n    return sigops <= MAX_TX_LEGACY_SIGOPS;\r\n}\r\n```\r\n\r\nIs there any advantage to this in-between solution?",
      "created_at": "2025-06-27T09:59:08Z",
      "updated_at": "2025-06-27T12:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171470960",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171470960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171487154",
      "pull_request_review_id": 2965729639,
      "id": 2171487154,
      "node_id": "PRRC_kwDOABII586BbkOy",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have a similar concern to https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3008785284, the benchmarks indicate a ~**66%** slower standardness check for me locally (similar slowdown shown by https://corecheck.dev/bitcoin/bitcoin/pulls/32521):\r\n\r\n```bash\r\n# latest commit, rebased: 811115c75da74ef50aa37cfcb807e4ac1a767604\r\n%  build/bin/bench_bitcoin -filter='CCoinsCaching' --min-time=10000 # ran 3 times\r\n```\r\n\r\n> Before (without `CheckSigopsBIP54`):\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              141.29 |        7,077,842.70 |    0.4% |     10.94 | `CCoinsCaching`\r\n|              141.16 |        7,083,924.08 |    0.2% |     10.98 | `CCoinsCaching`\r\n|              140.31 |        7,127,285.74 |    0.3% |     10.97 | `CCoinsCaching`\r\n\r\n> After:\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              212.20 |        4,712,429.73 |    0.3% |     11.00 | `CCoinsCaching`\r\n|              214.75 |        4,656,677.68 |    0.3% |     10.98 | `CCoinsCaching`\r\n|              211.30 |        4,732,499.91 |    0.1% |     11.00 | `CCoinsCaching`\r\n",
      "created_at": "2025-06-27T10:05:52Z",
      "updated_at": "2025-06-27T12:23:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171487154",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171487154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171492254",
      "pull_request_review_id": 2965729639,
      "id": 2171492254,
      "node_id": "PRRC_kwDOABII586Bblee",
      "diff_hunk": "",
      "path": "src/policy/policy.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: multiple typos in commit message 27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "created_at": "2025-06-27T10:08:04Z",
      "updated_at": "2025-06-27T12:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171492254",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171492254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171495102",
      "pull_request_review_id": 2965729639,
      "id": 2171495102,
      "node_id": "PRRC_kwDOABII586BbmK-",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2c636ba74cf0b7526b10d07c610b51adf0d57f9e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: if we want better error messages showing both sides on a failure, we could do:\r\n```suggestion\r\n    BOOST_CHECK_GT((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS, MAX_TX_LEGACY_SIGOPS);\r\n```",
      "created_at": "2025-06-27T10:09:16Z",
      "updated_at": "2025-06-27T12:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171495102",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171495102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1096,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171503978",
      "pull_request_review_id": 2965729639,
      "id": 2171503978,
      "node_id": "PRRC_kwDOABII586BboVq",
      "diff_hunk": "@@ -24,16 +25,23 @@\n     OP_IF,\n     OP_RETURN,\n     OP_TRUE,\n+    OP_2DUP,\n+    OP_DROP,\n+    OP_NOT,",
      "path": "test/functional/mempool_sigoplimit.py",
      "position": null,
      "original_position": 14,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: these were in alphabetic order before:\r\n```python\r\nfrom test_framework.script import (\r\n    CScript,\r\n    OP_2DUP,\r\n    OP_CHECKMULTISIG,\r\n    OP_CHECKSIG,\r\n    OP_DROP,\r\n    OP_ENDIF,\r\n    OP_FALSE,\r\n    OP_IF,\r\n    OP_NOT,\r\n    OP_RETURN,\r\n    OP_TRUE,\r\n)\r\n```\r\n\r\nTo reduce further possible merge conflicts, please consider keeping the import section sorted",
      "created_at": "2025-06-27T10:12:17Z",
      "updated_at": "2025-06-27T12:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171503978",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171503978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171603715",
      "pull_request_review_id": 2965729639,
      "id": 2171603715,
      "node_id": "PRRC_kwDOABII586BcAsD",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "similarly to other `emplace_back` calls here, we don't need the explicit constructor (it also avoids constructing a temporary):\r\n```suggestion\r\n        tx_max_sigops.vin.emplace_back(prev_txid, i);\r\n```",
      "created_at": "2025-06-27T10:45:07Z",
      "updated_at": "2025-06-27T12:24:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171603715",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171603715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171607771",
      "pull_request_review_id": 2965729639,
      "id": 2171607771,
      "node_id": "PRRC_kwDOABII586BcBrb",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+\n+    // The transaction now still contains exactly 2500 sigops, the check should pass.\n+    AddCoins(coins, CTransaction(tx_create_segwit), 0, false);\n+    BOOST_REQUIRE(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Add one more P2PK input. We'll reach the limit.\n+    tx_create_p2pk.vout.emplace_back(212121, p2pk_script);\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    ++p2pk_inputs_count;\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));",
      "path": "src/test/transaction_tests.cpp",
      "position": 94,
      "original_position": 107,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 this is where the test fails correctly without the `!CheckSigopsBIP54(tx, mapInputs)` check.\r\n\r\n-----\r\n\r\nWould it make sense to add a coinbase tx and vouts to this test to make it more realistic so that it passes `CheckTransaction` as well? Otherwise it's harder to tell if it fails for the right reasons...\r\n\r\nAnd to make sure this only affects policy and not consensus: do we already have tests that check that e.g. 3000 sigops could still be mined? If not, can we add a clause here to make sure that we haven't accidentally changed the consensus, i.e. that we could still mine these non-standard blocks?\r\n```C++\r\n    TxValidationState state;\r\n    BOOST_CHECK(CheckTransaction(CTransaction(tx_max_sigops), state));\r\n    BOOST_CHECK(state.IsValid());\r\n```",
      "created_at": "2025-06-27T10:47:51Z",
      "updated_at": "2025-06-27T12:24:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171607771",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171607771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1146,
      "original_line": 1146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171712231",
      "pull_request_review_id": 2965729639,
      "id": 2171712231,
      "node_id": "PRRC_kwDOABII586BcbLn",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};",
      "path": "src/test/transaction_tests.cpp",
      "position": 12,
      "original_position": 15,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In most docs I saw (e.g. https://learnmeabitcoin.com/technical/script/p2sh/#scriptsig), P2SH starts with an `OP_0` - I understand that this corresponds to an empty vector, but maybe we can simplify it in the tests:\r\n```suggestion\r\n    CScript max_sigops_redeem_script{CScript() << OP_0 << key.GetPubKey()};\r\n```\r\n\r\n<details>\r\n<summary>validation</summary>\r\n\r\n```C++\r\n    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\r\n    CScript max_sigops_redeem_script2{CScript() << OP_0 << key.GetPubKey()};\r\n    assert(max_sigops_redeem_script == max_sigops_redeem_script2);\r\n    assert(ScriptToAsmStr(max_sigops_redeem_script) == ScriptToAsmStr(max_sigops_redeem_script2));\r\n```\r\n\r\n</details>",
      "created_at": "2025-06-27T11:31:37Z",
      "updated_at": "2025-06-27T12:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171712231",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171712231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1064,
      "original_line": 1064,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171873609",
      "pull_request_review_id": 2965729639,
      "id": 2171873609,
      "node_id": "PRRC_kwDOABII586BdClJ",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's not immediately obvious that this is reducing the size of the existing inputs (especially since in other cases we did `reserve`), in this case maybe we could:\r\n```suggestion\r\n    tx_max_sigops.vin.pop_back();\r\n    // assert(tx_max_sigops.vin.size() == p2sh_inputs_count);\r\n```\r\nor add a comment here\r\n```suggestion\r\n    // Drop the extra input\r\n    tx_max_sigops.vin.resize(p2sh_inputs_count);\r\n```\r\nor do the deletion explicitly:\r\n```suggestion\r\n    tx_max_sigops.vin.erase(tx_max_sigops.vin.begin() + p2sh_inputs_count, tx_max_sigops.vin.end());\r\n```",
      "created_at": "2025-06-27T12:12:55Z",
      "updated_at": "2025-06-27T12:25:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171873609",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171873609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172077826",
      "pull_request_review_id": 2966641403,
      "id": 2172077826,
      "node_id": "PRRC_kwDOABII586Bd0cC",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171487154,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For policy no way does this slowdown matter. That said, since we're already doing the computation in both policy and consensus contexts, maybe we can just reuse it? https://github.com/instagibbs/bitcoin/tree/2025-06-patho-bip54\r\n\r\nit compiles",
      "created_at": "2025-06-27T13:42:23Z",
      "updated_at": "2025-06-27T13:42:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2172077826",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172077826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2173661408",
      "pull_request_review_id": 2969149872,
      "id": 2173661408,
      "node_id": "PRRC_kwDOABII586Bj3Dg",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171487154,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Doing a differential perf flame graph on b3bb4031 vs 1ba50d81 (master vs rebased `darosior:2503_nonstd_tx_sigops`) indicates the slowdown is indeed caused by both `AccessCoin` and the extra `CScript::GetSigOpCount` calls:\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/24ef8b91-bd9c-4fc0-be1a-1c7564d2a418\" />\r\n\r\n<details>\r\n<summary>Details</summary>\r\n\r\n```bash\r\nCOMMITS=\"b3bb4031ab32a1306c610f8683b25b8459b21dbc 1ba50d81b251c705aae872a2a9b37778ffa50c62\"; \\\r\nCC=gcc; CXX=g++; \\\r\nBASE=/mnt/my_storage; FG=$BASE/FlameGraph; LOG_DIR=\"$BASE/logs\"; OUT=$BASE/flamegraphs/bench-$(date +%s); mkdir -p \"$OUT\" \"$LOG_DIR\"; \\\r\nFILTER=\"CCoinsCaching\"; MIN_TIME=10000; \\\r\nexport CC CXX; \\\r\nflame_prepare(){ commit=$1; \\\r\n  git fetch -q origin \"$commit\" && git checkout -q \"$commit\" && \\\r\n  rm -rf build && \\\r\n  cmake -B build -G Ninja -DBUILD_BENCH=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\r\n    -DCMAKE_C_FLAGS=\"-g3 -ggdb -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer\" \\\r\n    -DCMAKE_CXX_FLAGS=\"-g3 -ggdb -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer\" && \\\r\n  ninja -C build bench_bitcoin; }; \\\r\nflame_execute(){ tag=${1:0:8}; \\\r\n  echo 100000 | sudo tee /proc/sys/kernel/perf_event_max_sample_rate >/dev/null; \\\r\n  echo 0 | sudo tee /proc/sys/kernel/kptr_restrict >/dev/null; \\\r\n  echo -1 | sudo tee /proc/sys/kernel/perf_event_paranoid >/dev/null; \\\r\n  perf record -F 99 -e cycles -g --call-graph fp -o \"$OUT/bench_$tag.data\" -- \\\r\n    build/bin/bench_bitcoin -filter=\"$FILTER\" --min-time=$MIN_TIME && \\\r\n  perf report --stdio -i \"$OUT/bench_$tag.data\" > \"$LOG_DIR/bench-report-$tag-$(date +%s).txt\" && \\\r\n  perf script -i \"$OUT/bench_$tag.data\" 2>/dev/null | \"$FG/stackcollapse-perf.pl\" > \"$OUT/bench_$tag.folded\" && \\\r\n  rm -f \"$OUT/bench_$tag.data\" && \\\r\n  \"$FG/flamegraph.pl\" --title \"Bench $FILTER $tag\" \"$OUT/bench_$tag.folded\" > \"$OUT/bench_$tag.svg\"; }; \\\r\nflame_diff(){ first=${1:0:8}; second=${2:0:8}; \\\r\n  \"$FG/difffolded.pl\" -n \"$OUT/bench_${first}.folded\" \"$OUT/bench_${second}.folded\" > \"$OUT/bench_${first}-${second}.folded\" && \\\r\n  \"$FG/flamegraph.pl\" --title \"Bench $FILTER $first-$second\" --colors hot --negate \\\r\n    \"$OUT/bench_${first}-${second}.folded\" > \"$OUT/bench_${first}-${second}.svg\"; }; \\\r\nA=${COMMITS%% *}; B=${COMMITS##* }; \\\r\nflame_prepare $A && flame_execute $A && \\\r\nflame_prepare $B && flame_execute $B && \\\r\nflame_diff $A $B && flame_diff $B $A; \\\r\necho \"Benchmark flamegraphs at: $OUT\"\r\n```\r\n\r\n> bench_b3bb4031.svg\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/b971e818-98b1-439c-b1d4-086476f66223\" />\r\n\r\n> bench_1ba50d81.svg\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/18555447-f657-4661-96c1-134460826a4e\" />\r\n\r\n</details>\r\n\r\n----\r\n\r\nComparing the current version with the [previous one](https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3013114686) mentioned by @Sjors indicates that it is indeed `AccessCoin` hashing that's causing the excessive slowdown:\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/73fa4ec0-014d-4419-a79b-64995c3600cc\" />\r\n\r\n\r\n----\r\n\r\nThe version @instagibbs posted (but given that `transaction_tests/max_standard_legacy_sigops` still fails it might not be reflective of a final solution yet) seems to be different enough to make comparison a bit harder to interpret:\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8bfd6ea0-3467-467d-b049-c27442963fea\" />\r\n\r\n\r\n----\r\n\r\n\r\nNote that [merging](https://github.com/l0rinc/bitcoin/commit/f2c6940781a8107075079bcaecc552294f07692c) the previous version of this pr with https://github.com/bitcoin/bitcoin/pull/32532 (optimizing the sigop operations) brings back the exact original performance of `AreInputsStandard`:\r\n\r\n> % build/bin/bench_bitcoin -filter='CCoinsCaching'\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              140.14 |        7,135,491.69 |    0.3% |      0.01 | `CCoinsCaching`\r\n|              140.99 |        7,092,774.75 |    0.4% |     11.01 | `CCoinsCaching`\r\n|              141.05 |        7,089,910.08 |    0.3% |     11.02 | `CCoinsCaching`\r\n\r\nThe differential flames also show that the additional script checks don't really change the outcome:\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/2a4c19d2-5e4e-4df9-9fb7-1809fdcc0f25\" />\r\n\r\nHowever, the optimizations in #32532 would also enable completely [eliminating the expensive `Solver` for all standard templates](https://github.com/l0rinc/bitcoin/commit/e52d051ec45b387c7ccccae64aba02b921704215), making standardness checks >2x faster on average:\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|               59.77 |       16,731,162.36 |    0.1% |     10.99 | `CCoinsCaching`\r\n|               59.73 |       16,740,845.93 |    0.1% |     10.99 | `CCoinsCaching`\r\n|               59.47 |       16,815,024.70 |    0.1% |     11.00 | `CCoinsCaching`\r\n\r\nThe differential flames confirm the lack of `Solver` calls:\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/9f252ee6-a8e2-4fd2-842d-c5e3cf3ed3de\" />\r\n",
      "created_at": "2025-06-29T08:56:54Z",
      "updated_at": "2025-06-29T11:33:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2173661408",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2173661408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174491505",
      "pull_request_review_id": 2970315718,
      "id": 2174491505,
      "node_id": "PRRC_kwDOABII586BnBtx",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think there is any point in trying to micro-optimize this.",
      "created_at": "2025-06-30T08:14:30Z",
      "updated_at": "2025-06-30T08:14:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174491505",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174491505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174500469",
      "pull_request_review_id": 2970330473,
      "id": 2174500469,
      "node_id": "PRRC_kwDOABII586BnD51",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Asking because of\r\n\r\nThis is unrelated. Most sigops counted here are not counted in the old rule. In any case this change cannot lead to miners creating invalid blocks.",
      "created_at": "2025-06-30T08:19:24Z",
      "updated_at": "2025-06-30T08:19:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174500469",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174500469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174503497",
      "pull_request_review_id": 2970334928,
      "id": 2174503497,
      "node_id": "PRRC_kwDOABII586BnEpJ",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171470960,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "~~Don't think that matters much, but i'll take your suggestion.~~ We are already exiting early. I don't think there is a need to duplicate the check after each increment to the `sigops` variable. I'll leave it like that.",
      "created_at": "2025-06-30T08:20:55Z",
      "updated_at": "2025-06-30T08:31:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174503497",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174503497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174515133",
      "pull_request_review_id": 2970353023,
      "id": 2174515133,
      "node_id": "PRRC_kwDOABII586BnHe9",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171487154,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In real usage `AreInputsStandard` is always called with a warm up cache so what you check here is not representative.",
      "created_at": "2025-06-30T08:27:00Z",
      "updated_at": "2025-06-30T08:27:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174515133",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174515133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174523500",
      "pull_request_review_id": 2970365632,
      "id": 2174523500,
      "node_id": "PRRC_kwDOABII586BnJhs",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In any case this change cannot lead to miners creating invalid blocks.\r\n\r\nI know, what I was asking is how we expect the non-standardness of blocks to change because of this PR, i.e. how many blocks are usually mined that contradict the new rules and how we expect this PR to change that in time.",
      "created_at": "2025-06-30T08:31:00Z",
      "updated_at": "2025-06-30T08:31:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174523500",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174523500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174531192",
      "pull_request_review_id": 2970377505,
      "id": 2174531192,
      "node_id": "PRRC_kwDOABII586BnLZ4",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The current implementation is ~66% slower, nothing \"micro\" about that. Very often we can make code simpler (i.e. having fewer moving parts) AND faster at the same time. This repeats work currently, so it's not as simple as it can get - what I'm suggesting is to explore that since the redundancy has a measurable cost.",
      "created_at": "2025-06-30T08:34:55Z",
      "updated_at": "2025-06-30T08:34:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174531192",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174531192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174535364",
      "pull_request_review_id": 2970383868,
      "id": 2174535364,
      "node_id": "PRRC_kwDOABII586BnMbE",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171470960,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We're doing needless work in this case - calling the second sigop count calculation when we already know that we could exit early. This was the argument you gave against `return sigops <= MAX_TX_LEGACY_SIGOPS`. I would be fine with either, but this in-between needs a proper explanation in my opinion.",
      "created_at": "2025-06-30T08:37:05Z",
      "updated_at": "2025-06-30T08:37:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174535364",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174535364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174536803",
      "pull_request_review_id": 2970386120,
      "id": 2174536803,
      "node_id": "PRRC_kwDOABII586BnMxj",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171487154,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you update the benchmark to make it representative?",
      "created_at": "2025-06-30T08:37:54Z",
      "updated_at": "2025-06-30T08:37:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174536803",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174536803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174547626",
      "pull_request_review_id": 2970403018,
      "id": 2174547626,
      "node_id": "PRRC_kwDOABII586BnPaq",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171603715,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, dropped all unnecessary temporaries in `emplace_back`s from my unit test.",
      "created_at": "2025-06-30T08:43:35Z",
      "updated_at": "2025-06-30T08:43:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174547626",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174547626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174547674",
      "pull_request_review_id": 2970403107,
      "id": 2174547674,
      "node_id": "PRRC_kwDOABII586BnPba",
      "diff_hunk": "@@ -24,16 +25,23 @@\n     OP_IF,\n     OP_RETURN,\n     OP_TRUE,\n+    OP_2DUP,\n+    OP_DROP,\n+    OP_NOT,",
      "path": "test/functional/mempool_sigoplimit.py",
      "position": null,
      "original_position": 14,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171503978,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, done.",
      "created_at": "2025-06-30T08:43:36Z",
      "updated_at": "2025-06-30T08:43:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174547674",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174547674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174547736",
      "pull_request_review_id": 2970403202,
      "id": 2174547736,
      "node_id": "PRRC_kwDOABII586BnPcY",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2c636ba74cf0b7526b10d07c610b51adf0d57f9e",
      "in_reply_to_id": 2171495102,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure. I updated all usage of `BOOST_CHECK` that was checking for anything else than a boolean return value in my unit test to instead use `BOOST_CHECK_GT`, `BOOST_CHECK_LT` and `BOOST_CHECK_EQUAL`.",
      "created_at": "2025-06-30T08:43:38Z",
      "updated_at": "2025-06-30T08:43:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174547736",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174547736"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1096,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174554324",
      "pull_request_review_id": 2970413733,
      "id": 2174554324,
      "node_id": "PRRC_kwDOABII586BnRDU",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+\n+    // The transaction now still contains exactly 2500 sigops, the check should pass.\n+    AddCoins(coins, CTransaction(tx_create_segwit), 0, false);\n+    BOOST_REQUIRE(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Add one more P2PK input. We'll reach the limit.\n+    tx_create_p2pk.vout.emplace_back(212121, p2pk_script);\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    ++p2pk_inputs_count;\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));",
      "path": "src/test/transaction_tests.cpp",
      "position": 94,
      "original_position": 107,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171607771,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Otherwise it's harder to tell if it fails for the right reasons...\r\n\r\nThis is demonstrated through bounds checking. We check that `AreInputsStandard` passes, and check that it then fails by adding one more identical input.\r\n\r\n> i.e. that we could still mine these non-standard blocks?\r\n\r\nWe would not mine blocks with such transactions anymore, this is the whole point of this PR.",
      "created_at": "2025-06-30T08:47:09Z",
      "updated_at": "2025-06-30T08:47:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174554324",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174554324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1146,
      "original_line": 1146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174574795",
      "pull_request_review_id": 2970444883,
      "id": 2174574795,
      "node_id": "PRRC_kwDOABII586BnWDL",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};",
      "path": "src/test/transaction_tests.cpp",
      "position": 12,
      "original_position": 15,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171712231,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is unrelated. My code above is building the P2SH redeem script, i.e. the program being executed. You are referring to a specific instance of a scriptSig spending a multisig wrapped into a P2SH. The example you link pushes 2 signatures plus an empty push because of the off-by-one CHECKMULTISIG bug.\r\n\r\nBesides, your code suggestion is strictly functionally equivalent as `OP_0` pushes an empty vector on the stack. This diff will also result in the very same program since `OP_0` is `0x00` and pushing an empty vector will write a `0x00` size.",
      "created_at": "2025-06-30T08:57:27Z",
      "updated_at": "2025-06-30T08:57:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174574795",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174574795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1064,
      "original_line": 1064,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174575315",
      "pull_request_review_id": 2970445636,
      "id": 2174575315,
      "node_id": "PRRC_kwDOABII586BnWLT",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">  non-standardness of blocks to change because of this PR\r\n\r\nI don't get what you are asking here. I don't think there is such a thing as \"non-standardness of blocks\".",
      "created_at": "2025-06-30T08:57:42Z",
      "updated_at": "2025-06-30T08:57:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174575315",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174575315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174579276",
      "pull_request_review_id": 2970451837,
      "id": 2174579276,
      "node_id": "PRRC_kwDOABII586BnXJM",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171873609,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a comment, thanks.",
      "created_at": "2025-06-30T08:59:37Z",
      "updated_at": "2025-06-30T08:59:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174579276",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174579276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174599172",
      "pull_request_review_id": 2970483220,
      "id": 2174599172,
      "node_id": "PRRC_kwDOABII586BncAE",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171487154,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is still a micro benchmark, because the input standardness check is just a tiny fraction of stuff that gets actually checked when processing a new transaction. This could probably just be deleted, or replaced with a more comprehensive check of ProcessTransaction/ProcessNewPackage.",
      "created_at": "2025-06-30T09:09:58Z",
      "updated_at": "2025-06-30T09:09:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174599172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174599172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174849258",
      "pull_request_review_id": 2970873775,
      "id": 2174849258,
      "node_id": "PRRC_kwDOABII586BoZDq",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> non-standardness of blocks\r\n\r\ni.e. mined blocks that contain non-standard transactions - what's the accepted term for that?\r\n\r\n> I don't get what you are asking here\r\n\r\nDo we have data on how many main-chain transactions historically exceed the new threshold of 2500 legacy sigops?\r\nI’d like to confirm that the new policy would block no real-world traffic and is purely a preventive DoS measure ahead of any future BIP-54 soft-fork activation.",
      "created_at": "2025-06-30T11:26:57Z",
      "updated_at": "2025-06-30T11:26:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174849258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174849258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174859753",
      "pull_request_review_id": 2970889839,
      "id": 2174859753,
      "node_id": "PRRC_kwDOABII586Bobnp",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+\n+    // The transaction now still contains exactly 2500 sigops, the check should pass.\n+    AddCoins(coins, CTransaction(tx_create_segwit), 0, false);\n+    BOOST_REQUIRE(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Add one more P2PK input. We'll reach the limit.\n+    tx_create_p2pk.vout.emplace_back(212121, p2pk_script);\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    ++p2pk_inputs_count;\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));",
      "path": "src/test/transaction_tests.cpp",
      "position": 94,
      "original_position": 107,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171607771,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> We would not mine blocks with such transactions anymore, this is the whole point of this PR.\r\n\r\nI don't see how this PR is doing that currently.\r\nI understand that the point is to starve the miners of those pathological transactions before a future soft-fork makes the limit consensus-critical - but for now we have to make absolutely sure we don't accidentally do that and that it can still be mined, right? My question was if we can add that to the end of the test (which we can remove after we actually soft-fork).",
      "created_at": "2025-06-30T11:32:43Z",
      "updated_at": "2025-06-30T11:32:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174859753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174859753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1146,
      "original_line": 1146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174862347",
      "pull_request_review_id": 2970894121,
      "id": 2174862347,
      "node_id": "PRRC_kwDOABII586BocQL",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};",
      "path": "src/test/transaction_tests.cpp",
      "position": 12,
      "original_position": 15,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171712231,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> your code suggestion is strictly functionally equivalent\r\n\r\nYes, that's why I have suggested it:\r\n>  I understand that this corresponds to an empty vector, but maybe we can simplify it in the test",
      "created_at": "2025-06-30T11:34:24Z",
      "updated_at": "2025-06-30T11:34:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174862347",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174862347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1064,
      "original_line": 1064,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174901563",
      "pull_request_review_id": 2970953969,
      "id": 2174901563,
      "node_id": "PRRC_kwDOABII586Bol07",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> The current implementation is ~66% slower\r\n\r\nThis is suggesting this PR makes transaction processing slower. It does not. The cost of adding an additional iteration through inputs is trivial compared to the total amount of work we do when processing a transaction. This seems silly to even state it. I don't know why you would fixate on this. Please let's spend our time on more important issues than removing the number of `for` loops used by the program.\r\n\r\n> This repeats work currently\r\n\r\nI'm aware. This was done for a good reason in response to a justified request from another reviewer https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3008736607.",
      "created_at": "2025-06-30T11:56:44Z",
      "updated_at": "2025-06-30T11:56:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174901563",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174901563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174904635",
      "pull_request_review_id": 2970958111,
      "id": 2174904635,
      "node_id": "PRRC_kwDOABII586Bomk7",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171470960,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not planning on addressing this, as i think it would unnecessarily duplicate the check for no clear benefit.",
      "created_at": "2025-06-30T11:58:13Z",
      "updated_at": "2025-06-30T11:58:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174904635",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174904635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174917931",
      "pull_request_review_id": 2970978319,
      "id": 2174917931,
      "node_id": "PRRC_kwDOABII586Bop0r",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171487154,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Exactly. I think it's good to keep the benchmark but its results should not be over interpreted. It is focused on a tiny portion of the total work performed when processing a transaction. I locally have benchmarks of `ProcessTransaction` which i may share in the future. To give you an idea, they suggest (as can be expected from just reading the code) that total work in processing a transaction is *several* orders of magnitude higher than the work done in `AreInputsStandard`. And that's not even in the worst case.",
      "created_at": "2025-06-30T12:05:20Z",
      "updated_at": "2025-06-30T12:05:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174917931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174917931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174918740",
      "pull_request_review_id": 2970979648,
      "id": 2174918740,
      "node_id": "PRRC_kwDOABII586BoqBU",
      "diff_hunk": "",
      "path": "src/policy/policy.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171492254,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will address if i need to retouch.",
      "created_at": "2025-06-30T12:05:51Z",
      "updated_at": "2025-06-30T12:05:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174918740",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174918740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174930831",
      "pull_request_review_id": 2970998887,
      "id": 2174930831,
      "node_id": "PRRC_kwDOABII586Bos-P",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+\n+    // The transaction now still contains exactly 2500 sigops, the check should pass.\n+    AddCoins(coins, CTransaction(tx_create_segwit), 0, false);\n+    BOOST_REQUIRE(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Add one more P2PK input. We'll reach the limit.\n+    tx_create_p2pk.vout.emplace_back(212121, p2pk_script);\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    ++p2pk_inputs_count;\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));",
      "path": "src/test/transaction_tests.cpp",
      "position": 94,
      "original_position": 107,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171607771,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I don't see how this PR is doing that currently.\r\n\r\nWe only create block templates from the mempool. This PR prevents these transactions from being included in our mempool. As a result, we would never mine a block which include such transactions.\r\n\r\n> but for now we have to make absolutely sure we don't accidentally do that and that it can still be mined, right?\r\n\r\nI think what you are trying to say here is \"that we would still accept a block containing them\". That is, that we haven't accidentally made it invalid by consensus. This PR makes sure this is not the case by isolating these new checks: only a function that is never called during block validation is modified. You can verify this through code review. Further, this PR bundles a functional test which checks newly-non-standard transactions are still accepted in blocks.",
      "created_at": "2025-06-30T12:12:55Z",
      "updated_at": "2025-06-30T12:12:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174930831",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174930831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1146,
      "original_line": 1146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174931525",
      "pull_request_review_id": 2970999894,
      "id": 2174931525,
      "node_id": "PRRC_kwDOABII586BotJF",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};",
      "path": "src/test/transaction_tests.cpp",
      "position": 12,
      "original_position": 15,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171712231,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I won't be making this change.",
      "created_at": "2025-06-30T12:13:18Z",
      "updated_at": "2025-06-30T12:13:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174931525",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174931525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1064,
      "original_line": 1064,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174984218",
      "pull_request_review_id": 2971084083,
      "id": 2174984218,
      "node_id": "PRRC_kwDOABII586Bo6Aa",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+\n+    // The transaction now still contains exactly 2500 sigops, the check should pass.\n+    AddCoins(coins, CTransaction(tx_create_segwit), 0, false);\n+    BOOST_REQUIRE(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Add one more P2PK input. We'll reach the limit.\n+    tx_create_p2pk.vout.emplace_back(212121, p2pk_script);\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    ++p2pk_inputs_count;\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));",
      "path": "src/test/transaction_tests.cpp",
      "position": 94,
      "original_position": 107,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171607771,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think what you are trying to say here is \"that we would still accept a block containing them\".\r\n\r\nI wasn't just \"trying\", it's what I said.\r\n\r\n> You can verify this through code review\r\n\r\nI'd like a unit test to verify that instead, that's what I've been asking if we can extend the unit test to makes sure we still accept these non-standard transactions.\r\n\r\n> functional test which checks newly-non-standard transactions are still accepted in blocks\r\n\r\nYes, that's what I was asking to add to the unit test as well. \r\nhttps://github.com/bitcoin/bitcoin/pull/32521/files#diff-7a25310a1ae3883aca989cd736212222e6abca6eea25e7d59ea7059b38d76ea0R220\r\n> Make sure the original, non-standard, transaction can be mined\r\n\r\nI can accept if you think that's not necessary, but not sure I understand why it's difficult request...",
      "created_at": "2025-06-30T12:42:37Z",
      "updated_at": "2025-06-30T12:42:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174984218",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174984218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1146,
      "original_line": 1146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174984440",
      "pull_request_review_id": 2971084456,
      "id": 2174984440,
      "node_id": "PRRC_kwDOABII586Bo6D4",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171487154,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You can also add a warmup round if you think that's more representative:\r\n```C++\r\n    bench.warmup(1).run([&] {\r\n        bool success{AreInputsStandard(tx_1, coins)};\r\n        assert(success);\r\n    });\r\n```\r\n\r\nThough that doesn't change the numbers for me:\r\n\r\nBefore:\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              140.41 |        7,122,118.63 |    0.4% |      1.10 | `CCoinsCaching`\r\n\r\nAfter:\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              210.86 |        4,742,579.56 |    0.3% |      1.10 | `CCoinsCaching`\r\n\r\n---\r\n\r\nOr we could iterate over a known block to make it more representative, something like:\r\n```C++\r\n#include <bench/bench.h>\r\n#include <bench/data/block413567.raw.h>\r\n#include <coins.h>\r\n#include <policy/policy.h>\r\n#include <primitives/transaction.h>\r\n#include <script/signingprovider.h>\r\n#include <streams.h>\r\n\r\n#include <cassert>\r\n#include <vector>\r\n\r\nstatic void CCoinsCaching(benchmark::Bench& bench)\r\n{\r\n    CCoinsView coins_dummy;\r\n    CCoinsViewCache coins(&coins_dummy);\r\n\r\n    DataStream stream{benchmark::data::block413567};\r\n    CBlock block;\r\n    stream >> TX_WITH_WITNESS(block);\r\n\r\n    for (const auto& tx : block.vtx) {\r\n        if (tx->IsCoinBase()) continue;\r\n        for (const CTxIn& in : tx->vin) {\r\n            // TODO: Add a matching Coin for in.prevout to `coins`\r\n        }\r\n    }\r\n\r\n    bench.warmup(1).run([&] { // we don't even need warmup round anymore\r\n        for (const auto& tx : block.vtx) {\r\n            if (tx->IsCoinBase()) continue;\r\n            assert(AreInputsStandard(*tx, coins));\r\n        }\r\n    });\r\n}\r\n\r\nBENCHMARK(CCoinsCaching, benchmark::PriorityLevel::HIGH);\r\n```\r\n\r\n-----\r\n\r\nOr maybe we could customize [the `ProcessTransactionBench` I added to a different PR](https://github.com/bitcoin/bitcoin/pull/31682/commits/0118f63caa6d154385896bd7f938cb9dc1dbbcaa) to the current scenario so that it's more representative. Or yours, if you think that's better, I don't mind either way.\r\n\r\n",
      "created_at": "2025-06-30T12:42:46Z",
      "updated_at": "2025-06-30T12:42:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174984440",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174984440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174993741",
      "pull_request_review_id": 2971099545,
      "id": 2174993741,
      "node_id": "PRRC_kwDOABII586Bo8VN",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> this PR makes transaction processing slower. It does not\r\n\r\n> This seems silly to even state it. \r\n\r\nIt's not silly, others have added a dedicated benchmark for this exact method.\r\nAnd I don't appreciate this patronizing tone.",
      "created_at": "2025-06-30T12:47:41Z",
      "updated_at": "2025-06-30T15:53:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174993741",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174993741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175160806",
      "pull_request_review_id": 2971369405,
      "id": 2175160806,
      "node_id": "PRRC_kwDOABII586BplHm",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+\n+    // The transaction now still contains exactly 2500 sigops, the check should pass.\n+    AddCoins(coins, CTransaction(tx_create_segwit), 0, false);\n+    BOOST_REQUIRE(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Add one more P2PK input. We'll reach the limit.\n+    tx_create_p2pk.vout.emplace_back(212121, p2pk_script);\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    ++p2pk_inputs_count;\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));",
      "path": "src/test/transaction_tests.cpp",
      "position": 94,
      "original_position": 107,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171607771,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "More accurate error/standardness failure reporting can be done later through #29060.",
      "created_at": "2025-06-30T14:02:42Z",
      "updated_at": "2025-06-30T14:02:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2175160806",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175160806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1146,
      "original_line": 1146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175175517",
      "pull_request_review_id": 2971395036,
      "id": 2175175517,
      "node_id": "PRRC_kwDOABII586Bpotd",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Apologies if that came across as patronizing, this was not my intention. That said, you should expect to receive pushback if you insistently derail a PR with irrelevant concerns.",
      "created_at": "2025-06-30T14:10:04Z",
      "updated_at": "2025-06-30T14:10:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2175175517",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175175517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175176935",
      "pull_request_review_id": 2971397633,
      "id": 2175176935,
      "node_id": "PRRC_kwDOABII586BppDn",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the code is fine as-is, i don't plan on doing anything else here so will resolve this thread.",
      "created_at": "2025-06-30T14:10:49Z",
      "updated_at": "2025-06-30T14:10:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2175176935",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175176935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175235373",
      "pull_request_review_id": 2971491569,
      "id": 2175235373,
      "node_id": "PRRC_kwDOABII586Bp3Ut",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+\n+    // The transaction now still contains exactly 2500 sigops, the check should pass.\n+    AddCoins(coins, CTransaction(tx_create_segwit), 0, false);\n+    BOOST_REQUIRE(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Add one more P2PK input. We'll reach the limit.\n+    tx_create_p2pk.vout.emplace_back(212121, p2pk_script);\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    ++p2pk_inputs_count;\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));",
      "path": "src/test/transaction_tests.cpp",
      "position": 94,
      "original_position": 107,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171607771,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That this does not touch consensus can be ensured through code review and is also validated through a functional test. I don't think anything else is necessary to do here, so i'm going to resolve this thread.",
      "created_at": "2025-06-30T14:37:50Z",
      "updated_at": "2025-06-30T14:37:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2175235373",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175235373"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1146,
      "original_line": 1146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175236097",
      "pull_request_review_id": 2971492745,
      "id": 2175236097,
      "node_id": "PRRC_kwDOABII586Bp3gB",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(prev_txid, i, max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK_LT(p2sh_inputs_count * MAX_P2SH_SIGOPS, MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(prev_txid, p2sh_inputs_count, max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK_GT((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS, MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count); // Drop the extra input.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(prev_txid, i);\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK_EQUAL(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1, MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(prev_txid, i);\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "dfb4bc73be2db8f98a1701eae4d3d3a9e2f7314e",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could we just skip signing them?",
      "created_at": "2025-06-30T14:38:11Z",
      "updated_at": "2025-06-30T14:38:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2175236097",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175236097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175476610",
      "pull_request_review_id": 2971927535,
      "id": 2175476610,
      "node_id": "PRRC_kwDOABII586BqyOC",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Right, I wrote a little kernel application to count the sigops per transactions here: https://github.com/TheCharlatan/bitcoin/tree/sigop_stats . Just ran it, but I'm currently away from home and only have access to a pruned node. Still, did not find any offending transactions the last two days.",
      "created_at": "2025-06-30T16:29:38Z",
      "updated_at": "2025-06-30T16:29:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2175476610",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175476610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177518858",
      "pull_request_review_id": 2975300052,
      "id": 2177518858,
      "node_id": "PRRC_kwDOABII586Byk0K",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since it's a brand new helper function and you're not moving code, let's embrace the future:\r\n\r\n```diff\r\ndiff --git a/src/policy/policy.cpp b/src/policy/policy.cpp\r\nindex 48dfa14a8f..327aa5a5cf 100644\r\n--- a/src/policy/policy.cpp\r\n+++ b/src/policy/policy.cpp\r\n@@ -176,15 +176,15 @@ static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inpu\r\n     Assert(!tx.IsCoinBase());\r\n\r\n     unsigned int sigops{0};\r\n-    for (unsigned i{0}; i < tx.vin.size(); ++i) {\r\n-        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\r\n+    for (const CTxIn& input : tx.vin) {\r\n+        const auto& prev_txo{inputs.AccessCoin(input.prevout).out};\r\n\r\n         // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\r\n         // This means sigops in the spent scriptpubkey count toward the limit.\r\n         // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\r\n         // method of accounting was introduced by BIP16, and BIP54 reuses it.\r\n-        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\r\n-        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\r\n+        sigops += input.scriptSig.GetSigOpCount(/*fAccurate=*/true);\r\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(input.scriptSig);\r\n\r\n         if (sigops > MAX_TX_LEGACY_SIGOPS) {\r\n             return false;\r\n```",
      "created_at": "2025-07-01T12:46:33Z",
      "updated_at": "2025-07-01T12:57:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177518858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177518858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177796421",
      "pull_request_review_id": 2975788930,
      "id": 2177796421,
      "node_id": "PRRC_kwDOABII586BzolF",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems to me the first historical tx that violates this new rule is https://mempool.space/tx/659135664894e50040830edb516a76f704fd2be409ecd8d1ea9916c002ab28a2 with 2585 sigops.",
      "created_at": "2025-07-01T14:42:26Z",
      "updated_at": "2025-07-01T14:42:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177796421",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177796421"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177807221",
      "pull_request_review_id": 2975807420,
      "id": 2177807221,
      "node_id": "PRRC_kwDOABII586BzrN1",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Apologies if that came across as patronizing\r\n\r\n> if you insistently derail a PR with irrelevant concerns\r\n\r\nno, they're not irrelevant or silly, I expect better arguments than these",
      "created_at": "2025-07-01T14:46:54Z",
      "updated_at": "2025-07-01T14:46:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177807221",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177807221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177826383",
      "pull_request_review_id": 2975833604,
      "id": 2177826383,
      "node_id": "PRRC_kwDOABII586Bzv5P",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can we please ask a different reviewer for an opinion on this one thing to break the tie before anyone's feelings get hurt?",
      "created_at": "2025-07-01T14:52:59Z",
      "updated_at": "2025-07-01T14:52:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177826383",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177826383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177844858",
      "pull_request_review_id": 2975861553,
      "id": 2177844858,
      "node_id": "PRRC_kwDOABII586Bz0Z6",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@l0rinc We should certainly not gratuitously make changes the worsen performance, but I think there have been reasonable arguments given here:\r\n* It results in simpler code changes, specifically ones that impact consensus logic less.\r\n* The slowdown in negligible compared the overall cost of transaction validation. It's good to be aware that there is a slowdown, but also reasonable to dismiss it on the basis that it's entirely justifiable in the presence of a much more important concern (reducing risk of consensus bugs).",
      "created_at": "2025-07-01T15:00:48Z",
      "updated_at": "2025-07-01T15:00:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177844858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177844858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177851038",
      "pull_request_review_id": 2975871143,
      "id": 2177851038,
      "node_id": "PRRC_kwDOABII586Bz16e",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Do we have data on how many main-chain transactions historically exceed the new threshold of 2500 legacy sigops?\r\nI’d like to confirm that the new policy would block no real-world traffic and is purely a preventive DoS measure ahead of any future BIP-54 soft-fork activation.\r\n\r\nI don't think past usage is necessarily the best predictor, i think in this case it's more convincing to reason through what real-world traffic would necessarily look like. The BIP [goes through this reasoning](https://github.com/bitcoin/bips/blob/master/bip-0054.md#user-content-fn-7-abe3aa40a2d627aa574c937177928bde) to justify the 2'500 value: \"A non-pathological transaction would have a public key per signature operation and at least one signature per input. Per standardness a single P2SH input may not have more than 15 signature operations. Even by using 1-of-15 `CHECKMULTISIG`s a transaction would bump against the maximum standard transaction size before running into the newly introduced limit. To run against the newly introduced limit but not the transaction size a transaction would need to spend P2SH inputs with a redeem script similar to `CHECKSIG DROP CHECKSIG DROP ...`. This type of redeem script serves no purpose beyond increasing its validation cost, which is exactly what this proposal aims to mitigate.\"\r\n\r\nThat said, past usage is still an interesting data point. I had previously looked into it and vaguely remembered it did not invalidate any currently standard usage. It's fair to ask that i have this data handy, so i went ahead and harvested it for you. You can reproduce my finding simply by running through the historical chain with this minimal patch applied on top of this PR:\r\n```diff\r\ndiff --git a/src/policy/policy.cpp b/src/policy/policy.cpp\r\nindex 48dfa14a8f7..6586159e8c1 100644\r\n--- a/src/policy/policy.cpp\r\n+++ b/src/policy/policy.cpp\r\n@@ -171,7 +171,7 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\r\n /**\r\n  * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\r\n  */\r\n-static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\r\n+bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\r\n {\r\n     Assert(!tx.IsCoinBase());\r\n \r\ndiff --git a/src/policy/policy.h b/src/policy/policy.h\r\nindex dab39aa4f8b..8b7a6e99d5f 100644\r\n--- a/src/policy/policy.h\r\n+++ b/src/policy/policy.h\r\n@@ -153,6 +153,7 @@ static constexpr decltype(CTransaction::version) TX_MAX_STANDARD_VERSION{3};\r\n * @return True if all outputs (scriptPubKeys) use only standard transaction forms\r\n */\r\n bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_datacarrier_bytes, bool permit_bare_multisig, const CFeeRate& dust_relay_fee, std::string& reason);\r\n+bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs);\r\n /**\r\n * Check for standard transaction types\r\n * @param[in] mapInputs       Map of previous transactions that have outputs we're spending\r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex 13dbe83f806..5853d59cb27 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -2671,6 +2671,10 @@ bool Chainstate::ConnectBlock(const CBlock& block, BlockValidationState& state,\r\n \r\n         if (!tx.IsCoinBase())\r\n         {\r\n+            if (!CheckSigopsBIP54(tx, view)) {\r\n+                LogInfo(\"Transaction %s is invalid according to BIP54 sigops rule.\", tx.GetHash().ToString());\r\n+            }\r\n+\r\n             std::vector<CScriptCheck> vChecks;\r\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\r\n             TxValidationState tx_state;\r\n```\r\n\r\nThere are 92 historical transactions that would have bumped into this limit, all either pathological or/and DoSy, all already non-standard by current rules. The last transaction that would have bumped into this limit occurred a decade ago. Here is the list of all historical transactions that would have bumped into this limit, with for each a link to Blockstream's block explorer so you can inspect them.\r\n\r\n| txid |\r\n| -----|\r\n| [659135664894e50040830edb516a76f704fd2be409ecd8d1ea9916c002ab28a2](https://blockstream.info/tx/659135664894e50040830edb516a76f704fd2be409ecd8d1ea9916c002ab28a2?expand) |\r\n| [bea1c2b87fee95a203c5b5d9f3e5d0f472385c34cb5af02d0560aab973169683](https://blockstream.info/tx/bea1c2b87fee95a203c5b5d9f3e5d0f472385c34cb5af02d0560aab973169683?expand) |\r\n| [24b16a13c972522241b65fbb83d09d4bc02ceb33487f41d1f2f620b047307179](https://blockstream.info/tx/24b16a13c972522241b65fbb83d09d4bc02ceb33487f41d1f2f620b047307179?expand) |\r\n| [53666009e036171b1aee099bc9cd3cb551969a53315410d13ad5390b8b4f3bd0](https://blockstream.info/tx/53666009e036171b1aee099bc9cd3cb551969a53315410d13ad5390b8b4f3bd0?expand) |\r\n| [ffc178be118bc2f9eaf016d1c942aec18441a6c5ec17c9d92d1da7962f0479f6](https://blockstream.info/tx/ffc178be118bc2f9eaf016d1c942aec18441a6c5ec17c9d92d1da7962f0479f6?expand) |\r\n| [2f1654561297114e434c4aea5ca715e4e3f10be0be8c1c9db2b6f68ea76dae09](https://blockstream.info/tx/2f1654561297114e434c4aea5ca715e4e3f10be0be8c1c9db2b6f68ea76dae09?expand) |\r\n| [62fc8d091a7c597783981f00b889d72d24ad5e3e224dbe1c2a317aabef89217e](https://blockstream.info/tx/62fc8d091a7c597783981f00b889d72d24ad5e3e224dbe1c2a317aabef89217e?expand) |\r\n| [d939315b180d3d73b5e316eb57a18f8137a3f5943aef21a811660d25f1080a3f](https://blockstream.info/tx/d939315b180d3d73b5e316eb57a18f8137a3f5943aef21a811660d25f1080a3f?expand) |\r\n| [8a6bfaa78828a81147e4848372d491aa4e9048631982a670ad3a61402a4ec327](https://blockstream.info/tx/8a6bfaa78828a81147e4848372d491aa4e9048631982a670ad3a61402a4ec327?expand) |\r\n| [02cc78789cc070125817189ec378daa750355c8b22bbce982ed96aa549facb1f](https://blockstream.info/tx/02cc78789cc070125817189ec378daa750355c8b22bbce982ed96aa549facb1f?expand) |\r\n| [b97a16ae2e8ae2a804ed7965373b42055f811653f4628e4bef999145d4b593bc](https://blockstream.info/tx/b97a16ae2e8ae2a804ed7965373b42055f811653f4628e4bef999145d4b593bc?expand) |\r\n| [c51ffaf08188859669571f897f119b6d39ea48a9334212f554bf4927401b71f3](https://blockstream.info/tx/c51ffaf08188859669571f897f119b6d39ea48a9334212f554bf4927401b71f3?expand) |\r\n| [33ccdda65abdda8025adb03841410dda5fa8948bd38b7fbaf3fed521daf5c4d3](https://blockstream.info/tx/33ccdda65abdda8025adb03841410dda5fa8948bd38b7fbaf3fed521daf5c4d3?expand) |\r\n| [bb41a757f405890fb0f5856228e23b715702d714d59bf2b1feb70d8b2b4e3e08](https://blockstream.info/tx/bb41a757f405890fb0f5856228e23b715702d714d59bf2b1feb70d8b2b4e3e08?expand) |\r\n| [ba588134ecc93fdbfa06f795c9bf7a05b09ca9ca9095659e401325d501a90363](https://blockstream.info/tx/ba588134ecc93fdbfa06f795c9bf7a05b09ca9ca9095659e401325d501a90363?expand) |\r\n| [ba6c6d2389f765f7873f5a9a7c11bf806afd784d15b0b8dff011fe95d1d5e841](https://blockstream.info/tx/ba6c6d2389f765f7873f5a9a7c11bf806afd784d15b0b8dff011fe95d1d5e841?expand) |\r\n| [dd49dc50b54b4bc1232e4b68cfdd3d349e49d3d7fe817d1041fff6dd583a6eaf](https://blockstream.info/tx/dd49dc50b54b4bc1232e4b68cfdd3d349e49d3d7fe817d1041fff6dd583a6eaf?expand) |\r\n| [3d724f03e8bcc9e2e3ea79ebe4c6cffca86d85e510742cd6d3ac29d420787a34](https://blockstream.info/tx/3d724f03e8bcc9e2e3ea79ebe4c6cffca86d85e510742cd6d3ac29d420787a34?expand) |\r\n| [8bcf8e8d8265922956bda9b651d2a0e993072c9dca306f3a132dcdb95c7cee6e](https://blockstream.info/tx/8bcf8e8d8265922956bda9b651d2a0e993072c9dca306f3a132dcdb95c7cee6e?expand) |\r\n| [ba31c8833b7417fec9a84536f32fcb52d432acb66d99b9be6f3899686a269b2b](https://blockstream.info/tx/ba31c8833b7417fec9a84536f32fcb52d432acb66d99b9be6f3899686a269b2b?expand) |\r\n| [9cc0a350d50fa252264636e62d586c7121d0a5656bc7e6b27354325684bec007](https://blockstream.info/tx/9cc0a350d50fa252264636e62d586c7121d0a5656bc7e6b27354325684bec007?expand) |\r\n| [dd5e32971010ef0c9f4cda8977830d727a6828165c69005a3fab67415c755b7d](https://blockstream.info/tx/dd5e32971010ef0c9f4cda8977830d727a6828165c69005a3fab67415c755b7d?expand) |\r\n| [66be4e766df2c23e08f4cf8c3e6cfa202b20967616ace38e1cbc1f20ee78db2e](https://blockstream.info/tx/66be4e766df2c23e08f4cf8c3e6cfa202b20967616ace38e1cbc1f20ee78db2e?expand) |\r\n| [e229a83deafec5f49e4990dba914fd815d05809f5eefbd979d55fb64f93827a3](https://blockstream.info/tx/e229a83deafec5f49e4990dba914fd815d05809f5eefbd979d55fb64f93827a3?expand) |\r\n| [901e3695838925dd020a085e8f078c393e64179dcf0a43134a1547d21acab49a](https://blockstream.info/tx/901e3695838925dd020a085e8f078c393e64179dcf0a43134a1547d21acab49a?expand) |\r\n| [49ab4d05adbc3294fbbd63d3b876fb97a87a3f5090aa6b1d87f31ab1c4564235](https://blockstream.info/tx/49ab4d05adbc3294fbbd63d3b876fb97a87a3f5090aa6b1d87f31ab1c4564235?expand) |\r\n| [c4f4357657ba403455167b2897acfcb922c2a0973c34e58733ca352394e6c629](https://blockstream.info/tx/c4f4357657ba403455167b2897acfcb922c2a0973c34e58733ca352394e6c629?expand) |\r\n| [6c3ee29a9b584fbeae60169f0abce573a7b768bf21398d4dfad9011aa7132530](https://blockstream.info/tx/6c3ee29a9b584fbeae60169f0abce573a7b768bf21398d4dfad9011aa7132530?expand) |\r\n| [5dc2bdc5ce29c52840f10203fd93ffed82da4cf49eddf93437dd1329baa9ade5](https://blockstream.info/tx/5dc2bdc5ce29c52840f10203fd93ffed82da4cf49eddf93437dd1329baa9ade5?expand) |\r\n| [f40fd92f5e8cecf956caec4b6abe0b88decafde0ae71d16a72c41cb1a3da0d60](https://blockstream.info/tx/f40fd92f5e8cecf956caec4b6abe0b88decafde0ae71d16a72c41cb1a3da0d60?expand) |\r\n| [92b68e4a19ef47c0dd022727a9c4b8ceb9466ce752ad8995ffbc5948bdfabf57](https://blockstream.info/tx/92b68e4a19ef47c0dd022727a9c4b8ceb9466ce752ad8995ffbc5948bdfabf57?expand) |\r\n| [1b604a075075197c82d33555ea48ae27e3d2724bc4c3f31650eff79692971fb7](https://blockstream.info/tx/1b604a075075197c82d33555ea48ae27e3d2724bc4c3f31650eff79692971fb7?expand) |\r\n| [5d8875ed1707cfee2221741b3144e575aec4e0d6412eeffe1e0fa07335f61311](https://blockstream.info/tx/5d8875ed1707cfee2221741b3144e575aec4e0d6412eeffe1e0fa07335f61311?expand) |\r\n| [14dd70e399f1d88efdb1c1ed799da731e3250d318bfdadc18073092aa7fd02c2](https://blockstream.info/tx/14dd70e399f1d88efdb1c1ed799da731e3250d318bfdadc18073092aa7fd02c2?expand) |\r\n| [bb75a8d10cfbe88bb6aba7b28be497ea83f41767f4ee26217e311c615ea0132f](https://blockstream.info/tx/bb75a8d10cfbe88bb6aba7b28be497ea83f41767f4ee26217e311c615ea0132f?expand) |\r\n| [a684223716324923178a55737db81383c28f055b844d8196c988c70ee7075a9a](https://blockstream.info/tx/a684223716324923178a55737db81383c28f055b844d8196c988c70ee7075a9a?expand) |\r\n| [fa9120afe1bb09b7154ba82a022cbdcc29fc5be2699b346ebb7ffdc46807b2f7](https://blockstream.info/tx/fa9120afe1bb09b7154ba82a022cbdcc29fc5be2699b346ebb7ffdc46807b2f7?expand) |\r\n| [5e640a7861695fa660343abde52cfe10b5a97dd8fc6ad3c5e4b2b4bb1c8c3dd9](https://blockstream.info/tx/5e640a7861695fa660343abde52cfe10b5a97dd8fc6ad3c5e4b2b4bb1c8c3dd9?expand) |\r\n| [7e7e69b4de5ef05750d27a863bdcb2d9dbc4a732c2a719f435ae5a9a4690b30f](https://blockstream.info/tx/7e7e69b4de5ef05750d27a863bdcb2d9dbc4a732c2a719f435ae5a9a4690b30f?expand) |\r\n| [d85ce71f583095a76fb17b5bb2a1cbf369e2a2867ca38103aa310cbb2aaf2921](https://blockstream.info/tx/d85ce71f583095a76fb17b5bb2a1cbf369e2a2867ca38103aa310cbb2aaf2921?expand) |\r\n| [905df97982a2904d6d1b3dfc272435a24d705f4c7e1fc4052798b9904ad5e597](https://blockstream.info/tx/905df97982a2904d6d1b3dfc272435a24d705f4c7e1fc4052798b9904ad5e597?expand) |\r\n| [5b0a05f12f33d2dc1507e5c18ceea6bb368afc51f00890965efcc3cb4025997d](https://blockstream.info/tx/5b0a05f12f33d2dc1507e5c18ceea6bb368afc51f00890965efcc3cb4025997d?expand) |\r\n| [cb550c9a1c63498f7ecb7bafc6f915318f16bb54069ff6257b4e069b97b367c8](https://blockstream.info/tx/cb550c9a1c63498f7ecb7bafc6f915318f16bb54069ff6257b4e069b97b367c8?expand) |\r\n| [66b614e736c884c1a064f7b0d6a9b0abd97e7bb73ac7e4b1b92b493d558a0711](https://blockstream.info/tx/66b614e736c884c1a064f7b0d6a9b0abd97e7bb73ac7e4b1b92b493d558a0711?expand) |\r\n| [9fdbcf0ef9d8d00f66e47917f67cc5d78aec1ac786e2abb8d2facb4e4790aad6](https://blockstream.info/tx/9fdbcf0ef9d8d00f66e47917f67cc5d78aec1ac786e2abb8d2facb4e4790aad6?expand) |\r\n| [9c667c64fcbb484b44dcce638f69130bbf1a4dd0fbb4423f58ceff92af4219ec](https://blockstream.info/tx/9c667c64fcbb484b44dcce638f69130bbf1a4dd0fbb4423f58ceff92af4219ec?expand) |\r\n| [2e7c454cfc348aa220f53b5ba21a55efa3d36353265f085e34053c4efa575fda](https://blockstream.info/tx/2e7c454cfc348aa220f53b5ba21a55efa3d36353265f085e34053c4efa575fda?expand) |\r\n| [484c8f9d1adf16a576bce52721a5e4edd5239df346d94fd730f6d7b681ab3652](https://blockstream.info/tx/484c8f9d1adf16a576bce52721a5e4edd5239df346d94fd730f6d7b681ab3652?expand) |\r\n| [e3d3d1ecec5d6b57792c793c413fc9b19189f5b932db8887d46f06abc101d24e](https://blockstream.info/tx/e3d3d1ecec5d6b57792c793c413fc9b19189f5b932db8887d46f06abc101d24e?expand) |\r\n| [b23c99c30339cb93eb04790bc5213f7732365488fe2549802bb472084b6ec508](https://blockstream.info/tx/b23c99c30339cb93eb04790bc5213f7732365488fe2549802bb472084b6ec508?expand) |\r\n| [92f217ec13ab309240adc0798804b3418666344a5cbfff73fb7be8192dad5261](https://blockstream.info/tx/92f217ec13ab309240adc0798804b3418666344a5cbfff73fb7be8192dad5261?expand) |\r\n| [22e861ee83c3d23a4823a3786460119425d8183783068f7ec519646592fac8c2](https://blockstream.info/tx/22e861ee83c3d23a4823a3786460119425d8183783068f7ec519646592fac8c2?expand) |\r\n| [fa5a58f787f569f5b8fab9dadb2447161fac45b36fb6c2c0f548ed0209b60663](https://blockstream.info/tx/fa5a58f787f569f5b8fab9dadb2447161fac45b36fb6c2c0f548ed0209b60663?expand) |\r\n| [767885bc144bdc0414217547f0169352a065083750371cabe5acbd0e0dd60436](https://blockstream.info/tx/767885bc144bdc0414217547f0169352a065083750371cabe5acbd0e0dd60436?expand) |\r\n| [461308024d89ea4231911df4ef24e65e60af2a9204c8282a6b67f4214c1714e7](https://blockstream.info/tx/461308024d89ea4231911df4ef24e65e60af2a9204c8282a6b67f4214c1714e7?expand) |\r\n| [9db4e0838c55ef20c5eff271fc3bf09a404fff68f9cdad7df8eae732500b983d](https://blockstream.info/tx/9db4e0838c55ef20c5eff271fc3bf09a404fff68f9cdad7df8eae732500b983d?expand) |\r\n| [6e278c0ca05bf8e0317f991dae8a9efa141b5a310a4c18838b4e082e356ef649](https://blockstream.info/tx/6e278c0ca05bf8e0317f991dae8a9efa141b5a310a4c18838b4e082e356ef649?expand) |\r\n| [9c972a02db30f9ee91cc02b30733d70d4e2d759b5d3c73b240e5026a8a2640c4](https://blockstream.info/tx/9c972a02db30f9ee91cc02b30733d70d4e2d759b5d3c73b240e5026a8a2640c4?expand) |\r\n| [d38417fcc27d3422fe05f76f6e658202d7fa394d0c9f5b419fef97610c3c49f1](https://blockstream.info/tx/d38417fcc27d3422fe05f76f6e658202d7fa394d0c9f5b419fef97610c3c49f1?expand) |\r\n| [e32477636e47e1da5fb49090a3a87a3b8ff637d069a70cd5b41595da225e65b4](https://blockstream.info/tx/e32477636e47e1da5fb49090a3a87a3b8ff637d069a70cd5b41595da225e65b4?expand) |\r\n| [a7e0a86944e9750a3fe372dd318da7b81c4f4c4ab228741ba0cf7fb6d56d6640](https://blockstream.info/tx/a7e0a86944e9750a3fe372dd318da7b81c4f4c4ab228741ba0cf7fb6d56d6640?expand) |\r\n| [f62f2c6a16b5da61eaae36d30d43bb8dd8932cd89b40d83623fa185b671c67f9](https://blockstream.info/tx/f62f2c6a16b5da61eaae36d30d43bb8dd8932cd89b40d83623fa185b671c67f9?expand) |\r\n| [856a2117b6d81acbe6add60a114307d9572dff027079151d50ee77a7b0c70404](https://blockstream.info/tx/856a2117b6d81acbe6add60a114307d9572dff027079151d50ee77a7b0c70404?expand) |\r\n| [763e13f873afa5f24cd33fc570a178c65e0a79c05c88c147335834fc9e8f837b](https://blockstream.info/tx/763e13f873afa5f24cd33fc570a178c65e0a79c05c88c147335834fc9e8f837b?expand) |\r\n| [c3f2c2df5388b79949c01d66e83d8bc3b9ccd4f85dbd91465a16fb8e21bf8e1b](https://blockstream.info/tx/c3f2c2df5388b79949c01d66e83d8bc3b9ccd4f85dbd91465a16fb8e21bf8e1b?expand) |\r\n| [e245f6c3c6b02dc81ea1b6694735565cc535f603708783be027d0e6a94ac3bd5](https://blockstream.info/tx/e245f6c3c6b02dc81ea1b6694735565cc535f603708783be027d0e6a94ac3bd5?expand) |\r\n| [02313ac62ca8f03930cdc5d2e437fabc05aea60a31ace18a39678c90b45d32bd](https://blockstream.info/tx/02313ac62ca8f03930cdc5d2e437fabc05aea60a31ace18a39678c90b45d32bd?expand) |\r\n| [01d23d32bccc04b8ca5a934be16da08ae6a760ccaad2f62dc2f337eee7643517](https://blockstream.info/tx/01d23d32bccc04b8ca5a934be16da08ae6a760ccaad2f62dc2f337eee7643517?expand) |\r\n| [d985c42bcd704aac88b9152aede1cca9bbb6baee55c8577f84c42d600cfec8e4](https://blockstream.info/tx/d985c42bcd704aac88b9152aede1cca9bbb6baee55c8577f84c42d600cfec8e4?expand) |\r\n| [6bb39576292c69016d0e0c1fe7871640aab12dd95874d67c46cf3424822f8dfd](https://blockstream.info/tx/6bb39576292c69016d0e0c1fe7871640aab12dd95874d67c46cf3424822f8dfd?expand) |\r\n| [79e30d460594694231f163dd79a69808904819e2f39bf3e31b7ddc4baa030a04](https://blockstream.info/tx/79e30d460594694231f163dd79a69808904819e2f39bf3e31b7ddc4baa030a04?expand) |\r\n| [26ed04bd772c7d3d621329bda8eefec9f81108d46ef0bd3b690000465f5254b3](https://blockstream.info/tx/26ed04bd772c7d3d621329bda8eefec9f81108d46ef0bd3b690000465f5254b3?expand) |\r\n| [bf40393fedc45a1b347957124ef9bb8ae6a44feecee10ef2cc78064fabf8125f](https://blockstream.info/tx/bf40393fedc45a1b347957124ef9bb8ae6a44feecee10ef2cc78064fabf8125f?expand) |\r\n| [446c0a1d563c93285e93f085192340a82c9aef7a543d41a86b65e215794845ef](https://blockstream.info/tx/446c0a1d563c93285e93f085192340a82c9aef7a543d41a86b65e215794845ef?expand) |\r\n| [1cf52f9ef89fa43bb4f042cbd4f80e9f090061e466cbe14c6b7ba525df0e572e](https://blockstream.info/tx/1cf52f9ef89fa43bb4f042cbd4f80e9f090061e466cbe14c6b7ba525df0e572e?expand) |\r\n| [54bf51be42ff45cdf8217b07bb233466e18d23fd66483b12449cd9b99c3a0545](https://blockstream.info/tx/54bf51be42ff45cdf8217b07bb233466e18d23fd66483b12449cd9b99c3a0545?expand) |\r\n| [b5ca68205e6d55e87bd6163b28467da737227c6cbcc91cb9f6dc7b400163a12b](https://blockstream.info/tx/b5ca68205e6d55e87bd6163b28467da737227c6cbcc91cb9f6dc7b400163a12b?expand) |\r\n| [9f8cc4496cff3216608c2f2177ab360bd2d4f58cae6490d5bc23312cf30e72e0](https://blockstream.info/tx/9f8cc4496cff3216608c2f2177ab360bd2d4f58cae6490d5bc23312cf30e72e0?expand) |\r\n| [4eba5deb2bbf3abf067f524484763287911e8d68fb54fa09e1287cf6cd6d1276](https://blockstream.info/tx/4eba5deb2bbf3abf067f524484763287911e8d68fb54fa09e1287cf6cd6d1276?expand) |\r\n| [e3de81a5817a3c825cf44fbf8185e15d446393615568966a6e3fc22cba609c7d](https://blockstream.info/tx/e3de81a5817a3c825cf44fbf8185e15d446393615568966a6e3fc22cba609c7d?expand) |\r\n| [1e700d8ce85b17d713cad1a8cae932d26740e7c8ab09d2201ddfe9d1acb4706c](https://blockstream.info/tx/1e700d8ce85b17d713cad1a8cae932d26740e7c8ab09d2201ddfe9d1acb4706c?expand) |\r\n| [b8ba939da1babf863746175b59cbfb3b967354f04db41bd13cb11da58e43d2a8](https://blockstream.info/tx/b8ba939da1babf863746175b59cbfb3b967354f04db41bd13cb11da58e43d2a8?expand) |\r\n| [22df2138a28c9d339813854a38181ffc5ac6f37d171d5b5bd6b0b79bf8d3c641](https://blockstream.info/tx/22df2138a28c9d339813854a38181ffc5ac6f37d171d5b5bd6b0b79bf8d3c641?expand) |\r\n| [1d93bfe18bc05b13169837b6bc868a92da3c87938531d6f3b58eee4b8822ecbf](https://blockstream.info/tx/1d93bfe18bc05b13169837b6bc868a92da3c87938531d6f3b58eee4b8822ecbf?expand) |\r\n| [e0c5e2dc3a39e733cf1bdb1a55bbcb3c2469f283becf2f99a0de771ec48f6278](https://blockstream.info/tx/e0c5e2dc3a39e733cf1bdb1a55bbcb3c2469f283becf2f99a0de771ec48f6278?expand) |\r\n| [c1e00054cc3fef88c2fdec2967e96fdb4c645bcf3f08b0580b51e47ecbfab71a](https://blockstream.info/tx/c1e00054cc3fef88c2fdec2967e96fdb4c645bcf3f08b0580b51e47ecbfab71a?expand) |\r\n| [9a567fde7c65bf85bbc2b109277933431ebc8a35de321a4b6436601d68aa4521](https://blockstream.info/tx/9a567fde7c65bf85bbc2b109277933431ebc8a35de321a4b6436601d68aa4521?expand) |\r\n| [6a9263e48a076bfc37deb93d01bf354305f4ac929be6b0ca05c078381a562c0c](https://blockstream.info/tx/6a9263e48a076bfc37deb93d01bf354305f4ac929be6b0ca05c078381a562c0c?expand) |\r\n| [0683fb9cfcd4a211c14ef7cd2d03739160ff9ba1cb5396be227e475e932a8e9b](https://blockstream.info/tx/0683fb9cfcd4a211c14ef7cd2d03739160ff9ba1cb5396be227e475e932a8e9b?expand) |\r\n| [2290263dddf8f06f099fcfb130a85f8f00b6cc1e05565a4c028d2187c8592d15](https://blockstream.info/tx/2290263dddf8f06f099fcfb130a85f8f00b6cc1e05565a4c028d2187c8592d15?expand) |\r\n| [d27ca813c97eef5c6e9ed4bd2fe08a7e34aa8ac0c2af353826c73a4e2711a797](https://blockstream.info/tx/d27ca813c97eef5c6e9ed4bd2fe08a7e34aa8ac0c2af353826c73a4e2711a797?expand) |\r\n| [b28d67131d00bda9dac0da484dd1352c55ec6a869ea04a7e85b71d2ddf2356d9](https://blockstream.info/tx/b28d67131d00bda9dac0da484dd1352c55ec6a869ea04a7e85b71d2ddf2356d9?expand) |",
      "created_at": "2025-07-01T15:03:48Z",
      "updated_at": "2025-07-01T15:04:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177851038",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177851038"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177866217",
      "pull_request_review_id": 2975896634,
      "id": 2177866217,
      "node_id": "PRRC_kwDOABII586Bz5np",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for the response, @sipa.\r\n\r\nIs it unreasonable to ask for a benchmark showing that the slowdown is indeed negligible in the worst case (given that it's meant to avoid an attack)?\r\nBenchmarks were added for this exact scenario, if they're not representative (I can agree with that) - let's make them representative first. My hunch is also that the slowdown is minor, but I would prefer more than a \"just trust me bro™\" here...",
      "created_at": "2025-07-01T15:11:40Z",
      "updated_at": "2025-07-01T15:11:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177866217",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177866217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177894356",
      "pull_request_review_id": 2975939634,
      "id": 2177894356,
      "node_id": "PRRC_kwDOABII586B0AfU",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Is it unreasonable to ask for a benchmark showing that the slowdown is indeed negligible in the worst case (given that it's meant to avoid an attack)?\r\n\r\nTransactions can easily take milliseconds to verify. A single signature check can take 10s of microseconds, and a single transaction input can do hundreds of those. The worst case is likely way worse than that still, but it is not even necessary to spend time coming up with a worst case to conclude that validation times is orders of magnitudes removed from the slowdown involved here.\r\n\r\nIt's not unreasonable to ask for benchmarks when things aren't obvious. But come on, it's reasonable to get a bit of familiarity of the orders of magnitude involved here, before demanding that a benchmark prove it.\r\n\r\n> Benchmarks were added for this exact scenario\r\n\r\nThe presence of a benchmark is not an indication that the thing being tested is so performance critical that any slowdown is a problem. It may just have been added for someone to get an idea of the order of magnitude.",
      "created_at": "2025-07-01T15:22:32Z",
      "updated_at": "2025-07-01T15:23:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177894356",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177894356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177901518",
      "pull_request_review_id": 2975950690,
      "id": 2177901518,
      "node_id": "PRRC_kwDOABII586B0CPO",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I'm already running such a script, that's how I knew about the first coinjoin posted earlier.\r\n\r\nThanks for posting the result, I have one last question in this regard: I have of course read the bip-0054 reasoning, but given that this is meant to avoid an attack, I still wanted to understand how long it takes on a typical device to validate the remaining 2'500 signatures in the worst case? I'm asking because based on https://github.com/bitcoin/bitcoin/issues/32832 I want to know if I would still consider that to be too high. Maybe it would make sense to add another benchmark that measures [how long it takes to validate such a tx](https://mempool.space/api/tx/659135664894e50040830edb516a76f704fd2be409ecd8d1ea9916c002ab28a2) - which we could run on affected platforms.",
      "created_at": "2025-07-01T15:25:51Z",
      "updated_at": "2025-07-01T15:25:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177901518",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177901518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177904988",
      "pull_request_review_id": 2975956680,
      "id": 2177904988,
      "node_id": "PRRC_kwDOABII586B0DFc",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for the explanation, please resolve this comment.",
      "created_at": "2025-07-01T15:27:35Z",
      "updated_at": "2025-07-01T15:27:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177904988",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177904988"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177915783",
      "pull_request_review_id": 2975974327,
      "id": 2177915783,
      "node_id": "PRRC_kwDOABII586B0FuH",
      "diff_hunk": "",
      "path": "src/policy/policy.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171492254,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As i am retouching i re-read this commit message and i didn't find any such typo. Could you be more precise? (Although i only plan on addressing if i retouch again.)",
      "created_at": "2025-07-01T15:33:32Z",
      "updated_at": "2025-07-01T15:44:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177915783",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177915783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177922559",
      "pull_request_review_id": 2975985125,
      "id": 2177922559,
      "node_id": "PRRC_kwDOABII586B0HX_",
      "diff_hunk": "",
      "path": "src/policy/policy.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171492254,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In addition, this limit may only be run into by pathological\r\ntransactions which pad the Script with sigops but do not use actual signatures when spending, as\r\notherwise they would run into the standard transaction size limit.",
      "created_at": "2025-07-01T15:37:18Z",
      "updated_at": "2025-07-01T15:37:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177922559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177922559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177930662",
      "pull_request_review_id": 2975997918,
      "id": 2177930662,
      "node_id": "PRRC_kwDOABII586B0JWm",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2177518858,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, makes sense.",
      "created_at": "2025-07-01T15:41:49Z",
      "updated_at": "2025-07-01T15:41:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177930662",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177930662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177930774",
      "pull_request_review_id": 2975998084,
      "id": 2177930774,
      "node_id": "PRRC_kwDOABII586B0JYW",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(prev_txid, i, max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK_LT(p2sh_inputs_count * MAX_P2SH_SIGOPS, MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(prev_txid, p2sh_inputs_count, max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK_GT((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS, MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count); // Drop the extra input.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(prev_txid, i);\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK_EQUAL(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1, MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(prev_txid, i);\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "dfb4bc73be2db8f98a1701eae4d3d3a9e2f7314e",
      "in_reply_to_id": 2175236097,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Right, the witnesses are never inspected by `AreInputsStandard`. Dropped the unnecessary signing logic, to get a neat 13 lines reduction in the diff.",
      "created_at": "2025-07-01T15:41:53Z",
      "updated_at": "2025-07-01T15:41:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177930774",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177930774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177952812",
      "pull_request_review_id": 2976030083,
      "id": 2177952812,
      "node_id": "PRRC_kwDOABII586B0Ows",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good to know you are verifying my findings. I hadn't seen your message before leaving my comment, looks like you already confirmed the first one, good.\r\n\r\nRegarding how expensive transaction processing can be, yes this is interesting and something i have spent a fair bit of time looking into. However it's fairly tangential to this PR so let's discuss it separately. I DM'd you about this elsewhere.",
      "created_at": "2025-07-01T15:51:16Z",
      "updated_at": "2025-07-01T15:51:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2177952812",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2177952812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2178057885",
      "pull_request_review_id": 2976179516,
      "id": 2178057885,
      "node_id": "PRRC_kwDOABII586B0oad",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171487154,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the benchmark is fine as it stands, for the purpose it serves (which is not to measure transaction processing time). I don't think more needs to be done here and will resolve this thread.",
      "created_at": "2025-07-01T16:37:14Z",
      "updated_at": "2025-07-01T16:37:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2178057885",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2178057885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2179856066",
      "pull_request_review_id": 2978845296,
      "id": 2179856066,
      "node_id": "PRRC_kwDOABII586B7fbC",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I can confirm that I got the exact same result. I can also confirm that we didn't have any such block in the past decade.\r\n\r\nNote that the biggest sigop per tx was 19971.\r\n\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/b0a45fc6-98cb-4566-937f-e91234823505\" />\r\n\r\nsigops vs heights:\r\n```\r\nFound 2585 sigops in transaction 659135664894e50040830edb516a76f704fd2be409ecd8d1ea9916c002ab28a2 in block 228538\r\nFound 4020 sigops in transaction bea1c2b87fee95a203c5b5d9f3e5d0f472385c34cb5af02d0560aab973169683 in block 332118\r\nFound 3480 sigops in transaction 24b16a13c972522241b65fbb83d09d4bc02ceb33487f41d1f2f620b047307179 in block 332122\r\nFound 3480 sigops in transaction 53666009e036171b1aee099bc9cd3cb551969a53315410d13ad5390b8b4f3bd0 in block 332122\r\nFound 8040 sigops in transaction ffc178be118bc2f9eaf016d1c942aec18441a6c5ec17c9d92d1da7962f0479f6 in block 332122\r\nFound 12060 sigops in transaction 2f1654561297114e434c4aea5ca715e4e3f10be0be8c1c9db2b6f68ea76dae09 in block 332126\r\nFound 7960 sigops in transaction 62fc8d091a7c597783981f00b889d72d24ad5e3e224dbe1c2a317aabef89217e in block 332131\r\nFound 8040 sigops in transaction d939315b180d3d73b5e316eb57a18f8137a3f5943aef21a811660d25f1080a3f in block 332131\r\nFound 8040 sigops in transaction 8a6bfaa78828a81147e4848372d491aa4e9048631982a670ad3a61402a4ec327 in block 332136\r\nFound 8040 sigops in transaction 02cc78789cc070125817189ec378daa750355c8b22bbce982ed96aa549facb1f in block 332136\r\nFound 4020 sigops in transaction b97a16ae2e8ae2a804ed7965373b42055f811653f4628e4bef999145d4b593bc in block 333529\r\nFound 19971 sigops in transaction c51ffaf08188859669571f897f119b6d39ea48a9334212f554bf4927401b71f3 in block 340463\r\nFound 3980 sigops in transaction 33ccdda65abdda8025adb03841410dda5fa8948bd38b7fbaf3fed521daf5c4d3 in block 346402\r\nFound 5569 sigops in transaction bb41a757f405890fb0f5856228e23b715702d714d59bf2b1feb70d8b2b4e3e08 in block 364292\r\nFound 3116 sigops in transaction ba588134ecc93fdbfa06f795c9bf7a05b09ca9ca9095659e401325d501a90363 in block 364295\r\nFound 3418 sigops in transaction ba6c6d2389f765f7873f5a9a7c11bf806afd784d15b0b8dff011fe95d1d5e841 in block 364306\r\nFound 5000 sigops in transaction dd49dc50b54b4bc1232e4b68cfdd3d349e49d3d7fe817d1041fff6dd583a6eaf in block 364312\r\nFound 5000 sigops in transaction 3d724f03e8bcc9e2e3ea79ebe4c6cffca86d85e510742cd6d3ac29d420787a34 in block 364320\r\nFound 5000 sigops in transaction 8bcf8e8d8265922956bda9b651d2a0e993072c9dca306f3a132dcdb95c7cee6e in block 364321\r\nFound 3600 sigops in transaction ba31c8833b7417fec9a84536f32fcb52d432acb66d99b9be6f3899686a269b2b in block 364329\r\nFound 3390 sigops in transaction 9cc0a350d50fa252264636e62d586c7121d0a5656bc7e6b27354325684bec007 in block 364340\r\nFound 3390 sigops in transaction dd5e32971010ef0c9f4cda8977830d727a6828165c69005a3fab67415c755b7d in block 364349\r\nFound 3390 sigops in transaction 66be4e766df2c23e08f4cf8c3e6cfa202b20967616ace38e1cbc1f20ee78db2e in block 364355\r\nFound 3390 sigops in transaction e229a83deafec5f49e4990dba914fd815d05809f5eefbd979d55fb64f93827a3 in block 364360\r\nFound 3390 sigops in transaction 901e3695838925dd020a085e8f078c393e64179dcf0a43134a1547d21acab49a in block 364367\r\nFound 3390 sigops in transaction 49ab4d05adbc3294fbbd63d3b876fb97a87a3f5090aa6b1d87f31ab1c4564235 in block 364372\r\nFound 3390 sigops in transaction c4f4357657ba403455167b2897acfcb922c2a0973c34e58733ca352394e6c629 in block 364378\r\nFound 3390 sigops in transaction 6c3ee29a9b584fbeae60169f0abce573a7b768bf21398d4dfad9011aa7132530 in block 364380\r\nFound 3390 sigops in transaction 5dc2bdc5ce29c52840f10203fd93ffed82da4cf49eddf93437dd1329baa9ade5 in block 364384\r\nFound 3390 sigops in transaction f40fd92f5e8cecf956caec4b6abe0b88decafde0ae71d16a72c41cb1a3da0d60 in block 364386\r\nFound 3390 sigops in transaction 92b68e4a19ef47c0dd022727a9c4b8ceb9466ce752ad8995ffbc5948bdfabf57 in block 364388\r\nFound 3600 sigops in transaction 1b604a075075197c82d33555ea48ae27e3d2724bc4c3f31650eff79692971fb7 in block 364407\r\nFound 5569 sigops in transaction 5d8875ed1707cfee2221741b3144e575aec4e0d6412eeffe1e0fa07335f61311 in block 364422\r\nFound 5569 sigops in transaction 14dd70e399f1d88efdb1c1ed799da731e3250d318bfdadc18073092aa7fd02c2 in block 364423\r\nFound 5000 sigops in transaction bb75a8d10cfbe88bb6aba7b28be497ea83f41767f4ee26217e311c615ea0132f in block 364429\r\nFound 5569 sigops in transaction a684223716324923178a55737db81383c28f055b844d8196c988c70ee7075a9a in block 364449\r\nFound 3411 sigops in transaction fa9120afe1bb09b7154ba82a022cbdcc29fc5be2699b346ebb7ffdc46807b2f7 in block 364459\r\nFound 5000 sigops in transaction 5e640a7861695fa660343abde52cfe10b5a97dd8fc6ad3c5e4b2b4bb1c8c3dd9 in block 364566\r\nFound 2853 sigops in transaction 7e7e69b4de5ef05750d27a863bdcb2d9dbc4a732c2a719f435ae5a9a4690b30f in block 364576\r\nFound 3651 sigops in transaction d85ce71f583095a76fb17b5bb2a1cbf369e2a2867ca38103aa310cbb2aaf2921 in block 364582\r\nFound 3651 sigops in transaction 905df97982a2904d6d1b3dfc272435a24d705f4c7e1fc4052798b9904ad5e597 in block 364587\r\nFound 5160 sigops in transaction 5b0a05f12f33d2dc1507e5c18ceea6bb368afc51f00890965efcc3cb4025997d in block 364610\r\nFound 5569 sigops in transaction cb550c9a1c63498f7ecb7bafc6f915318f16bb54069ff6257b4e069b97b367c8 in block 364639\r\nFound 4691 sigops in transaction 66b614e736c884c1a064f7b0d6a9b0abd97e7bb73ac7e4b1b92b493d558a0711 in block 364669\r\nFound 7350 sigops in transaction 9fdbcf0ef9d8d00f66e47917f67cc5d78aec1ac786e2abb8d2facb4e4790aad6 in block 364773\r\nFound 7350 sigops in transaction 9c667c64fcbb484b44dcce638f69130bbf1a4dd0fbb4423f58ceff92af4219ec in block 364784\r\nFound 4386 sigops in transaction 2e7c454cfc348aa220f53b5ba21a55efa3d36353265f085e34053c4efa575fda in block 378197\r\nFound 2728 sigops in transaction 484c8f9d1adf16a576bce52721a5e4edd5239df346d94fd730f6d7b681ab3652 in block 378214\r\nFound 3314 sigops in transaction e3d3d1ecec5d6b57792c793c413fc9b19189f5b932db8887d46f06abc101d24e in block 378390\r\nFound 2810 sigops in transaction b23c99c30339cb93eb04790bc5213f7732365488fe2549802bb472084b6ec508 in block 378402\r\nFound 3524 sigops in transaction 92f217ec13ab309240adc0798804b3418666344a5cbfff73fb7be8192dad5261 in block 378423\r\nFound 3513 sigops in transaction 22e861ee83c3d23a4823a3786460119425d8183783068f7ec519646592fac8c2 in block 378509\r\nFound 3792 sigops in transaction fa5a58f787f569f5b8fab9dadb2447161fac45b36fb6c2c0f548ed0209b60663 in block 378523\r\nFound 2621 sigops in transaction 767885bc144bdc0414217547f0169352a065083750371cabe5acbd0e0dd60436 in block 378791\r\nFound 3844 sigops in transaction 461308024d89ea4231911df4ef24e65e60af2a9204c8282a6b67f4214c1714e7 in block 378800\r\nFound 4294 sigops in transaction 9db4e0838c55ef20c5eff271fc3bf09a404fff68f9cdad7df8eae732500b983d in block 378804\r\nFound 4141 sigops in transaction 6e278c0ca05bf8e0317f991dae8a9efa141b5a310a4c18838b4e082e356ef649 in block 378893\r\nFound 3991 sigops in transaction 9c972a02db30f9ee91cc02b30733d70d4e2d759b5d3c73b240e5026a8a2640c4 in block 378907\r\nFound 4746 sigops in transaction d38417fcc27d3422fe05f76f6e658202d7fa394d0c9f5b419fef97610c3c49f1 in block 378934\r\nFound 4667 sigops in transaction e32477636e47e1da5fb49090a3a87a3b8ff637d069a70cd5b41595da225e65b4 in block 378969\r\nFound 3250 sigops in transaction a7e0a86944e9750a3fe372dd318da7b81c4f4c4ab228741ba0cf7fb6d56d6640 in block 379006\r\nFound 4199 sigops in transaction f62f2c6a16b5da61eaae36d30d43bb8dd8932cd89b40d83623fa185b671c67f9 in block 379045\r\nFound 2575 sigops in transaction 856a2117b6d81acbe6add60a114307d9572dff027079151d50ee77a7b0c70404 in block 379112\r\nFound 4233 sigops in transaction 763e13f873afa5f24cd33fc570a178c65e0a79c05c88c147335834fc9e8f837b in block 379114\r\nFound 4603 sigops in transaction c3f2c2df5388b79949c01d66e83d8bc3b9ccd4f85dbd91465a16fb8e21bf8e1b in block 379169\r\nFound 3856 sigops in transaction e245f6c3c6b02dc81ea1b6694735565cc535f603708783be027d0e6a94ac3bd5 in block 379220\r\nFound 3895 sigops in transaction 02313ac62ca8f03930cdc5d2e437fabc05aea60a31ace18a39678c90b45d32bd in block 379223\r\nFound 4377 sigops in transaction 01d23d32bccc04b8ca5a934be16da08ae6a760ccaad2f62dc2f337eee7643517 in block 379246\r\nFound 4680 sigops in transaction d985c42bcd704aac88b9152aede1cca9bbb6baee55c8577f84c42d600cfec8e4 in block 379277\r\nFound 4909 sigops in transaction 6bb39576292c69016d0e0c1fe7871640aab12dd95874d67c46cf3424822f8dfd in block 379378\r\nFound 4625 sigops in transaction 79e30d460594694231f163dd79a69808904819e2f39bf3e31b7ddc4baa030a04 in block 379385\r\nFound 2976 sigops in transaction 26ed04bd772c7d3d621329bda8eefec9f81108d46ef0bd3b690000465f5254b3 in block 379387\r\nFound 4663 sigops in transaction bf40393fedc45a1b347957124ef9bb8ae6a44feecee10ef2cc78064fabf8125f in block 379402\r\nFound 4507 sigops in transaction 446c0a1d563c93285e93f085192340a82c9aef7a543d41a86b65e215794845ef in block 379417\r\nFound 3847 sigops in transaction 1cf52f9ef89fa43bb4f042cbd4f80e9f090061e466cbe14c6b7ba525df0e572e in block 379418\r\nFound 4925 sigops in transaction 54bf51be42ff45cdf8217b07bb233466e18d23fd66483b12449cd9b99c3a0545 in block 379478\r\nFound 4027 sigops in transaction b5ca68205e6d55e87bd6163b28467da737227c6cbcc91cb9f6dc7b400163a12b in block 379490\r\nFound 4348 sigops in transaction 9f8cc4496cff3216608c2f2177ab360bd2d4f58cae6490d5bc23312cf30e72e0 in block 379537\r\nFound 4617 sigops in transaction 4eba5deb2bbf3abf067f524484763287911e8d68fb54fa09e1287cf6cd6d1276 in block 379538\r\nFound 4124 sigops in transaction e3de81a5817a3c825cf44fbf8185e15d446393615568966a6e3fc22cba609c7d in block 379546\r\nFound 4297 sigops in transaction 1e700d8ce85b17d713cad1a8cae932d26740e7c8ab09d2201ddfe9d1acb4706c in block 379576\r\nFound 4227 sigops in transaction b8ba939da1babf863746175b59cbfb3b967354f04db41bd13cb11da58e43d2a8 in block 379998\r\nFound 2758 sigops in transaction 22df2138a28c9d339813854a38181ffc5ac6f37d171d5b5bd6b0b79bf8d3c641 in block 380015\r\nFound 4654 sigops in transaction 1d93bfe18bc05b13169837b6bc868a92da3c87938531d6f3b58eee4b8822ecbf in block 380027\r\nFound 4423 sigops in transaction e0c5e2dc3a39e733cf1bdb1a55bbcb3c2469f283becf2f99a0de771ec48f6278 in block 380040\r\nFound 2688 sigops in transaction c1e00054cc3fef88c2fdec2967e96fdb4c645bcf3f08b0580b51e47ecbfab71a in block 381615\r\nFound 2580 sigops in transaction 9a567fde7c65bf85bbc2b109277933431ebc8a35de321a4b6436601d68aa4521 in block 381805\r\nFound 2537 sigops in transaction 6a9263e48a076bfc37deb93d01bf354305f4ac929be6b0ca05c078381a562c0c in block 381813\r\nFound 2541 sigops in transaction 0683fb9cfcd4a211c14ef7cd2d03739160ff9ba1cb5396be227e475e932a8e9b in block 381841\r\nFound 2508 sigops in transaction 2290263dddf8f06f099fcfb130a85f8f00b6cc1e05565a4c028d2187c8592d15 in block 381941\r\nFound 2704 sigops in transaction d27ca813c97eef5c6e9ed4bd2fe08a7e34aa8ac0c2af353826c73a4e2711a797 in block 382491\r\nFound 2609 sigops in transaction b28d67131d00bda9dac0da484dd1352c55ec6a869ea04a7e85b71d2ddf2356d9 in block 382505\r\n```",
      "created_at": "2025-07-02T11:51:07Z",
      "updated_at": "2025-07-02T13:08:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2179856066",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2179856066"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2179860454",
      "pull_request_review_id": 2978852002,
      "id": 2179860454,
      "node_id": "PRRC_kwDOABII586B7gfm",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> bumped into this limit, all either pathological or/and DoSy, all already non-standard by current rules\r\n\r\nQuestion: is the reason against such massive coinjoins that they currently take too long to validate? Wouldn't forking based on that prohibit such transactions in a few decades when we could expect them not to be dosy anymore?",
      "created_at": "2025-07-02T11:53:32Z",
      "updated_at": "2025-07-02T12:03:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2179860454",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2179860454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2179916095",
      "pull_request_review_id": 2978936607,
      "id": 2179916095,
      "node_id": "PRRC_kwDOABII586B7uE_",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, the maximum standard size was initially introduced because of quadratic hashing. It is also desirable for other reasons (see for instance [here](https://delvingbitcoin.org/t/non-confiscatory-transaction-weight-limit/1732/8?u=antoinep)). I don't expect the worst case with large legacy transactions to be reasonable even in a decade from now. Also, such large transactions can be done with Segwit v0 or v1 inputs instead and those concerns are moot.",
      "created_at": "2025-07-02T12:22:51Z",
      "updated_at": "2025-07-02T12:22:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2179916095",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2179916095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180035747",
      "pull_request_review_id": 2979121208,
      "id": 2180035747,
      "node_id": "PRRC_kwDOABII586B8LSj",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_txo{inputs.AccessCoin(txin.prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "65b7deda12338b17f342c1d37f44e7c6da850771",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's not what's in the current BIP, nor what is implemented here...",
      "created_at": "2025-07-02T13:13:30Z",
      "updated_at": "2025-07-02T13:26:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2180035747",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180035747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180069882",
      "pull_request_review_id": 2979174352,
      "id": 2180069882,
      "node_id": "PRRC_kwDOABII586B8Tn6",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_txo{inputs.AccessCoin(txin.prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "65b7deda12338b17f342c1d37f44e7c6da850771",
      "in_reply_to_id": 2180035747,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "when the script is executed*?",
      "created_at": "2025-07-02T13:27:34Z",
      "updated_at": "2025-07-02T13:27:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2180069882",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180069882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180101377",
      "pull_request_review_id": 2979224196,
      "id": 2180101377,
      "node_id": "PRRC_kwDOABII586B8bUB",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_txo{inputs.AccessCoin(txin.prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "65b7deda12338b17f342c1d37f44e7c6da850771",
      "in_reply_to_id": 2180035747,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah it's just a typo when/where:\r\n```suggestion\r\n        // Unlike the existing block wide sigop limit, BIP54 counts sigops where they are actually executed.\r\n```",
      "created_at": "2025-07-02T13:41:54Z",
      "updated_at": "2025-07-02T13:41:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2180101377",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180101377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180103816",
      "pull_request_review_id": 2979228097,
      "id": 2180103816,
      "node_id": "PRRC_kwDOABII586B8b6I",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_txo{inputs.AccessCoin(txin.prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "65b7deda12338b17f342c1d37f44e7c6da850771",
      "in_reply_to_id": 2180035747,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, thanks for spotting the typo.",
      "created_at": "2025-07-02T13:43:01Z",
      "updated_at": "2025-07-02T13:43:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2180103816",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180103816"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180105702",
      "pull_request_review_id": 2979231014,
      "id": 2180105702,
      "node_id": "PRRC_kwDOABII586B8cXm",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_txo{inputs.AccessCoin(txin.prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "65b7deda12338b17f342c1d37f44e7c6da850771",
      "in_reply_to_id": 2180035747,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think that's still ambiguous as it does read like a taproot sigops budget sense where the opcode itself must be executed to count",
      "created_at": "2025-07-02T13:43:52Z",
      "updated_at": "2025-07-02T13:43:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2180105702",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180105702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180106942",
      "pull_request_review_id": 2979233079,
      "id": 2180106942,
      "node_id": "PRRC_kwDOABII586B8cq-",
      "diff_hunk": "@@ -163,6 +163,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_txo{inputs.AccessCoin(txin.prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops where they are actually executed.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "29b9f7f20751d7b456ea7e94f56125ab5cd132fb",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is still wrong. If you bury a sigop in (false) OP_IF, they are still counted even though not actually executed",
      "created_at": "2025-07-02T13:44:26Z",
      "updated_at": "2025-07-02T13:44:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2180106942",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180106942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180297022",
      "pull_request_review_id": 2979539728,
      "id": 2180297022,
      "node_id": "PRRC_kwDOABII586B9LE-",
      "diff_hunk": "@@ -163,6 +163,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_txo{inputs.AccessCoin(txin.prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops where they are actually executed.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "29b9f7f20751d7b456ea7e94f56125ab5cd132fb",
      "in_reply_to_id": 2180106942,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm aware. \"Where\" refers to the scripts. This is in opposition to the current sigops counting which, as you know, counts sigops in unexecuted scripts.\r\n\r\nI think the wording is clear as such, but if you have a better one please suggest it.",
      "created_at": "2025-07-02T15:03:37Z",
      "updated_at": "2025-07-02T15:03:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2180297022",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180297022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180298687",
      "pull_request_review_id": 2979542267,
      "id": 2180298687,
      "node_id": "PRRC_kwDOABII586B9Le_",
      "diff_hunk": "@@ -163,6 +163,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_txo{inputs.AccessCoin(txin.prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops where they are actually executed.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "29b9f7f20751d7b456ea7e94f56125ab5cd132fb",
      "in_reply_to_id": 2180106942,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        // Unlike the existing block wide sigop limit which counts sigops present in the block itself (including the scriptPubKey which is not executed until spending later), BIP54 counts sigops in the block where they are potentially executed (only).\r\n```",
      "created_at": "2025-07-02T15:04:16Z",
      "updated_at": "2025-07-02T15:04:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2180298687",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180298687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180310701",
      "pull_request_review_id": 2979561305,
      "id": 2180310701,
      "node_id": "PRRC_kwDOABII586B9Oat",
      "diff_hunk": "@@ -163,6 +163,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (const auto& txin: tx.vin) {\n+        const auto& prev_txo{inputs.AccessCoin(txin.prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops where they are actually executed.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "b1f59e8897d38476779ae47656d1a02805e88955",
      "original_commit_id": "29b9f7f20751d7b456ea7e94f56125ab5cd132fb",
      "in_reply_to_id": 2180106942,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taken, thanks.",
      "created_at": "2025-07-02T15:09:52Z",
      "updated_at": "2025-07-02T15:09:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2180310701",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2180310701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    }
  ]
}