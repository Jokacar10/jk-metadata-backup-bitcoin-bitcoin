{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521",
    "id": 2523113103,
    "node_id": "PR_kwDOABII586WY6aP",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32521",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32521.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32521.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
    "number": 32521,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "policy: make pathological transactions packed with legacy sigops non-standard",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "The Consensus Cleanup soft fork proposal includes a limit on the number of legacy signature\r\noperations potentially executed when validating a transaction. If this change is to be implemented\r\nhere and activated by Bitcoin users in the future, we should make transactions that are not valid\r\naccording to the new rules non-standard first because it would otherwise be a trivial DoS to\r\npotentially unupgraded miners after the soft fork activates.",
    "labels": [
      {
        "id": 82428251,
        "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
        "name": "TX fees and policy",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2025-05-15T21:05:26Z",
    "updated_at": "2025-06-30T14:38:11Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "418d646d4220a983ba0d4d1f6eafcfe07c15dbac",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "darosior:2503_nonstd_tx_sigops",
      "ref": "2503_nonstd_tx_sigops",
      "sha": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 168868367,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjg4NjgzNjc=",
        "name": "bitcoin",
        "full_name": "darosior/bitcoin",
        "owner": {
          "login": "darosior",
          "id": 22457751,
          "node_id": "MDQ6VXNlcjIyNDU3NzUx",
          "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/darosior",
          "html_url": "https://github.com/darosior",
          "followers_url": "https://api.github.com/users/darosior/followers",
          "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
          "organizations_url": "https://api.github.com/users/darosior/orgs",
          "repos_url": "https://api.github.com/users/darosior/repos",
          "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/darosior/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/darosior/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/darosior/bitcoin",
        "archive_url": "https://api.github.com/repos/darosior/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/darosior/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/darosior/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/darosior/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/darosior/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/darosior/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/darosior/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/darosior/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/darosior/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/darosior/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/darosior/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/darosior/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/darosior/bitcoin/events",
        "forks_url": "https://api.github.com/repos/darosior/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/darosior/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/darosior/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/darosior/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/darosior/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/darosior/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/darosior/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/darosior/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/darosior/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/darosior/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/darosior/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/darosior/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/darosior/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/darosior/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/darosior/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/darosior/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:darosior/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/darosior/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/darosior/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/darosior/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/darosior/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/darosior/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/darosior/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/darosior/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/darosior/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/darosior/bitcoin/hooks",
        "svn_url": "https://github.com/darosior/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 266020,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-06-30T09:08:56Z",
        "created_at": "2019-02-02T19:20:27Z",
        "updated_at": "2024-11-20T13:45:57Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "b3bb4031ab32a1306c610f8683b25b8459b21dbc",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37451,
        "stargazers_count": 84364,
        "watchers_count": 84364,
        "size": 284543,
        "default_branch": "master",
        "open_issues_count": 750,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-06-30T13:41:24Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-06-30T14:30:04Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 191,
    "deletions": 0,
    "changed_files": 5,
    "commits": 3,
    "review_comments": 85,
    "comments": 19
  },
  "events": [
    {
      "event": "commented",
      "id": 2885052071,
      "node_id": "IC_kwDOABII586r9man",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2885052071",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-15T21:05:31Z",
      "updated_at": "2025-06-27T12:21:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32521.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [petertodd](https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2994130659), [instagibbs](https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3000571610) |\n| Approach NACK | [l0rinc](https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2965729639) |\n| Stale ACK | [mabu44](https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2889699475), [Sjors](https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2933483080), [maflcko](https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3000327354) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31682](https://github.com/bitcoin/bitcoin/pull/31682) ([IBD] specialize CheckBlock's input & coinbase checks by l0rinc)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2885052071",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "labeled",
      "id": 17679193293,
      "node_id": "LE_lADOABII58621HOhzwAAAAQdwxTN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17679193293",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-15T21:05:42Z",
      "label": {
        "name": "TX fees and policy",
        "color": "5319e7"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17679232283,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAAQdw60b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17679232283",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3bbe3313896af12cf9d36ea7784b9ceaced26454",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/3bbe3313896af12cf9d36ea7784b9ceaced26454",
      "created_at": "2025-05-15T21:09:23Z"
    },
    {
      "event": "labeled",
      "id": 17679237091,
      "node_id": "LE_lADOABII58621HOhzwAAAAQdw7_j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17679237091",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-15T21:09:51Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2885059791,
      "node_id": "IC_kwDOABII586r9oTP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2885059791",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-15T21:09:53Z",
      "updated_at": "2025-05-15T21:09:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `lint`: https://github.com/bitcoin/bitcoin/runs/42319362568</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a Python linting error in `test/functional/mempool_sigoplimit.py` where a variable is redefined.\n</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2885059791",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17679619413,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAAQdyZVV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17679619413",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f13acba6f0b95b0cd7c624dd3c0be9978b3c5be1",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/f13acba6f0b95b0cd7c624dd3c0be9978b3c5be1",
      "created_at": "2025-05-15T21:48:24Z"
    },
    {
      "event": "reviewed",
      "id": 2846600393,
      "node_id": "PRR_kwDOABII586pq6zJ",
      "url": null,
      "actor": null,
      "commit_id": "f13acba6f0b95b0cd7c624dd3c0be9978b3c5be1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2846600393",
      "submitted_at": "2025-05-16T13:13:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "commented",
      "id": 2886851641,
      "node_id": "IC_kwDOABII586sEdw5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2886851641",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-16T14:16:21Z",
      "updated_at": "2025-05-16T14:16:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "While sigops aren't necessarily difficult to compute, there's a lot of them - and now even more.\r\nPlease consider the related sigop optimization PR I just pushed: https://github.com/bitcoin/bitcoin/pull/32532",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2886851641",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "reviewed",
      "id": 2850362016,
      "node_id": "PRR_kwDOABII586p5RKg",
      "url": null,
      "actor": null,
      "commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2850362016",
      "submitted_at": "2025-05-19T11:06:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "reviewed",
      "id": 2850368112,
      "node_id": "PRR_kwDOABII586p5Spw",
      "url": null,
      "actor": null,
      "commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2850368112",
      "submitted_at": "2025-05-19T11:08:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "reviewed",
      "id": 2850384136,
      "node_id": "PRR_kwDOABII586p5WkI",
      "url": null,
      "actor": null,
      "commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2850384136",
      "submitted_at": "2025-05-19T11:14:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "reviewed",
      "id": 2850427699,
      "node_id": "PRR_kwDOABII586p5hMz",
      "url": null,
      "actor": null,
      "commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2850427699",
      "submitted_at": "2025-05-19T11:31:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "reviewed",
      "id": 2850452014,
      "node_id": "PRR_kwDOABII586p5nIu",
      "url": null,
      "actor": null,
      "commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2850452014",
      "submitted_at": "2025-05-19T11:40:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17721476873,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAAQgSEcJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17721476873",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "356ac3b3733203de2bd7251e2bb9ed7a6513590c",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/356ac3b3733203de2bd7251e2bb9ed7a6513590c",
      "created_at": "2025-05-19T20:10:58Z"
    },
    {
      "event": "commented",
      "id": 2895783055,
      "node_id": "IC_kwDOABII586smiSP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2895783055",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-20T20:42:14Z",
      "updated_at": "2025-05-20T20:42:14Z",
      "author_association": "MEMBER",
      "body": "for reference, the CI failure is:\r\n\r\n```\r\n[16:36:22.725] /ci_container_base/src/test/transaction_tests.cpp:1089:20: error: use emplace_back instead of push_back [modernize-use-emplace,-warnings-as-errors]\r\n[16:36:22.725]  1089 |     tx_create.vout.push_back(CTxOut(424242, max_sigops_p2sh));\r\n[16:36:22.725]       |                    ^~~~~~~~~~~~~~~~~                       ~\r\n[16:36:22.725]       |                    emplace_back(\r\n[16:36:22.725] /ci_container_base/src/test/transaction_tests.cpp:1122:25: error: use emplace_back instead of push_back [modernize-use-emplace,-warnings-as-errors]\r\n[16:36:22.725]  1122 |     tx_create_p2pk.vout.push_back(CTxOut(212121, p2pk_script));\r\n[16:36:22.725]       |                         ^~~~~~~~~~~~~~~~~                   ~\r\n[16:36:22.725]       |                         emplace_back(\r\n[16:36:22.725] 1515 warnings generated.\r\n[16:36:22.725] \r\n[16:36:22.725] ^^^ ⚠️ Failure generated from clang-tidy",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2895783055",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "commented",
      "id": 2895784312,
      "node_id": "IC_kwDOABII586smil4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2895784312",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-20T20:42:50Z",
      "updated_at": "2025-05-20T20:42:50Z",
      "author_association": "MEMBER",
      "body": "Yeah i'm changing for `emplace_back` and addressing @Sjors' nits right now.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2895784312",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "mentioned",
      "id": 17741517118,
      "node_id": "MEE_lADOABII58621HOhzwAAAAQhehE-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17741517118",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-20T20:42:52Z"
    },
    {
      "event": "subscribed",
      "id": 17741517134,
      "node_id": "SE_lADOABII58621HOhzwAAAAQhehFO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17741517134",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-20T20:42:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17741616329,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAAQhe5TJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17741616329",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "29e8fe71440a7e27ee89527a49753be615f205c7",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/29e8fe71440a7e27ee89527a49753be615f205c7",
      "created_at": "2025-05-20T20:51:41Z"
    },
    {
      "event": "unlabeled",
      "id": 17743630895,
      "node_id": "UNLE_lADOABII58621HOhzwAAAAQhmlIv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17743630895",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T00:50:49Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2857047398,
      "node_id": "PRR_kwDOABII586qSxVm",
      "url": null,
      "actor": null,
      "commit_id": "29e8fe71440a7e27ee89527a49753be615f205c7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 29e8fe71440a7e27ee89527a49753be615f205c7",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2857047398",
      "submitted_at": "2025-05-21T09:56:28Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17755939382,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAAQiViI2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17755939382",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/80d213677962268a82d65d8915c518f0c02867d9",
      "created_at": "2025-05-21T15:13:53Z"
    },
    {
      "event": "commented",
      "id": 2898436841,
      "node_id": "IC_kwDOABII586swqLp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2898436841",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T15:45:15Z",
      "updated_at": "2025-05-21T15:45:15Z",
      "author_association": "MEMBER",
      "body": "ACK 80d213677962268a82d65d8915c518f0c02867d9",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2898436841",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "labeled",
      "id": 17761096028,
      "node_id": "LE_lADOABII58621HOhzwAAAAQipNFc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17761096028",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T21:16:55Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 17773333994,
      "node_id": "REFE_lADOABII58621HOhzwAAAAQjX43q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17773333994",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d2c9fc84e17120f186a54ef92bab76ea7e8d31b5",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2c9fc84e17120f186a54ef92bab76ea7e8d31b5",
      "created_at": "2025-05-22T14:06:31Z"
    },
    {
      "event": "unlabeled",
      "id": 17784202616,
      "node_id": "UNLE_lADOABII58621HOhzwAAAAQkBWV4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17784202616",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-23T06:34:23Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unsubscribed",
      "id": 17795020815,
      "node_id": "UE_lADOABII58621HOhzwAAAAQkqngP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17795020815",
      "actor": {
        "login": "deehochberg",
        "id": 185879065,
        "node_id": "U_kgDOCxRKGQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/185879065?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deehochberg",
        "html_url": "https://github.com/deehochberg",
        "followers_url": "https://api.github.com/users/deehochberg/followers",
        "following_url": "https://api.github.com/users/deehochberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deehochberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deehochberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deehochberg/subscriptions",
        "organizations_url": "https://api.github.com/users/deehochberg/orgs",
        "repos_url": "https://api.github.com/users/deehochberg/repos",
        "events_url": "https://api.github.com/users/deehochberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deehochberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-23T18:59:27Z"
    },
    {
      "event": "reviewed",
      "id": 2887788438,
      "node_id": "PRR_kwDOABII586sICeW",
      "url": null,
      "actor": null,
      "commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "mabu44",
        "id": 192022804,
        "node_id": "U_kgDOC3IJFA",
        "avatar_url": "https://avatars.githubusercontent.com/u/192022804?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mabu44",
        "html_url": "https://github.com/mabu44",
        "followers_url": "https://api.github.com/users/mabu44/followers",
        "following_url": "https://api.github.com/users/mabu44/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mabu44/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mabu44/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mabu44/subscriptions",
        "organizations_url": "https://api.github.com/users/mabu44/orgs",
        "repos_url": "https://api.github.com/users/mabu44/repos",
        "events_url": "https://api.github.com/users/mabu44/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mabu44/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2887788438",
      "submitted_at": "2025-06-02T10:41:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "reviewed",
      "id": 2888200491,
      "node_id": "PRR_kwDOABII586sJnEr",
      "url": null,
      "actor": null,
      "commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "mabu44",
        "id": 192022804,
        "node_id": "U_kgDOC3IJFA",
        "avatar_url": "https://avatars.githubusercontent.com/u/192022804?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mabu44",
        "html_url": "https://github.com/mabu44",
        "followers_url": "https://api.github.com/users/mabu44/followers",
        "following_url": "https://api.github.com/users/mabu44/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mabu44/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mabu44/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mabu44/subscriptions",
        "organizations_url": "https://api.github.com/users/mabu44/orgs",
        "repos_url": "https://api.github.com/users/mabu44/repos",
        "events_url": "https://api.github.com/users/mabu44/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mabu44/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2888200491",
      "submitted_at": "2025-06-02T12:49:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17938644925,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAAQtOf-9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17938644925",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "709ae501ac289acad7b7e62adc64763ccddbe338",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/709ae501ac289acad7b7e62adc64763ccddbe338",
      "created_at": "2025-06-02T16:49:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17938965915,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAAQtPuWb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17938965915",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "abd0749fae7259a292cb652fc9974c8cdcdd4d9d",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/abd0749fae7259a292cb652fc9974c8cdcdd4d9d",
      "created_at": "2025-06-02T17:05:30Z"
    },
    {
      "event": "reviewed",
      "id": 2889699475,
      "node_id": "PRR_kwDOABII586sPVCT",
      "url": null,
      "actor": null,
      "commit_id": "abd0749fae7259a292cb652fc9974c8cdcdd4d9d",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "ACK abd0749fae7259a292cb652fc9974c8cdcdd4d9d\r\nReviewed the code, compiled it, and ran the new tests. Additionally, made modifications to both the code and the tests to intentionally cause the tests to fail in expected ways.",
      "user": {
        "login": "mabu44",
        "id": 192022804,
        "node_id": "U_kgDOC3IJFA",
        "avatar_url": "https://avatars.githubusercontent.com/u/192022804?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mabu44",
        "html_url": "https://github.com/mabu44",
        "followers_url": "https://api.github.com/users/mabu44/followers",
        "following_url": "https://api.github.com/users/mabu44/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mabu44/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mabu44/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mabu44/subscriptions",
        "organizations_url": "https://api.github.com/users/mabu44/orgs",
        "repos_url": "https://api.github.com/users/mabu44/repos",
        "events_url": "https://api.github.com/users/mabu44/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mabu44/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2889699475",
      "submitted_at": "2025-06-02T19:35:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "review_requested",
      "id": 17941678397,
      "node_id": "RRE_lADOABII58621HOhzwAAAAQtaEk9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17941678397",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T19:35:44Z",
      "requested_reviewer": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2933483080,
      "node_id": "IC_kwDOABII586u2WZI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2933483080",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T05:21:26Z",
      "updated_at": "2025-06-03T05:21:26Z",
      "author_association": "MEMBER",
      "body": "re-ACK abd0749fae",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2933483080",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "commented",
      "id": 2994130659,
      "node_id": "IC_kwDOABII586yds7j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2994130659",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-22T11:17:10Z",
      "updated_at": "2025-06-22T11:17:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-2994130659",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "commented",
      "id": 3000327354,
      "node_id": "IC_kwDOABII586y1Vy6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3000327354",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-24T12:47:27Z",
      "updated_at": "2025-06-24T12:47:27Z",
      "author_association": "MEMBER",
      "body": "review ACK abd0749fae7259a292cb652fc9974c8cdcdd4d9d 🌘\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: review ACK abd0749fae7259a292cb652fc9974c8cdcdd4d9d 🌘\r\nq0sc0viVRqyP5OWHaiE6g7Q9ZX/OB0XgbdfLMkuwT8D5RvFxF+7q4cmgZTEVG2knPSvhzE0UEp7iGeVpYsZbCw==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3000327354",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "review_requested",
      "id": 18294785058,
      "node_id": "RRE_lADOABII58621HOhzwAAAARCdEQi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18294785058",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-24T13:16:41Z",
      "requested_reviewer": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18294788977,
      "node_id": "RRE_lADOABII58621HOhzwAAAARCdFNx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18294788977",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-24T13:16:53Z",
      "requested_reviewer": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 3000460860,
      "node_id": "IC_kwDOABII586y12Y8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3000460860",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-24T13:17:44Z",
      "updated_at": "2025-06-24T13:17:44Z",
      "author_association": "MEMBER",
      "body": "OP or commit message should probably explicitly link https://github.com/bitcoin/bips/blob/master/bip-0054.md#specification ",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3000460860",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "commented",
      "id": 3000571610,
      "node_id": "IC_kwDOABII586y2Rba",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3000571610",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-24T13:47:21Z",
      "updated_at": "2025-06-24T13:47:21Z",
      "author_association": "MEMBER",
      "body": "concept and approach ACK\r\n\r\nI have a preference for breaking out the new checks into its own function since if we intend it to someday soon(TM) be a consensus rule it would have to be pulled out anyways. https://github.com/instagibbs/bitcoin/commit/5d63372f75c4a2403c4032b63e5c604ee96c5a40",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3000571610",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "commented",
      "id": 3006215185,
      "node_id": "IC_kwDOABII586zLzQR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3006215185",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-25T21:35:52Z",
      "updated_at": "2025-06-25T21:35:52Z",
      "author_association": "MEMBER",
      "body": "> I have a preference for breaking out the new checks into its own function since if we intend it to someday soon(TM) be a consensus rule it would have to be pulled out anyways. [instagibbs@5d63372](https://github.com/instagibbs/bitcoin/commit/5d63372f75c4a2403c4032b63e5c604ee96c5a40)\r\n\r\nIf we do this the separate function could be much simpler than that (no solver etc). I'll have a go at it tomorrow morning, inspired by the consensus implementation i have on a private branch.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3006215185",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18337894696,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAARFBhEo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18337894696",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "df5ff9e4f41afce7d12a863b9db45656bbb10c4f",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/df5ff9e4f41afce7d12a863b9db45656bbb10c4f",
      "created_at": "2025-06-26T14:39:23Z"
    },
    {
      "event": "commented",
      "id": 3008736607,
      "node_id": "IC_kwDOABII586zVa1f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3008736607",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-26T14:40:00Z",
      "updated_at": "2025-06-26T14:40:00Z",
      "author_association": "MEMBER",
      "body": "Extracted the BIP54-specific sigop counting into a separate function that can be moved into `consensus/tx_verify.cpp` with no modification if/when this is implemented in consensus, as suggested by @instagibbs.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3008736607",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "mentioned",
      "id": 18337907024,
      "node_id": "MEE_lADOABII58621HOhzwAAAARFBkFQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18337907024",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-26T14:40:03Z"
    },
    {
      "event": "subscribed",
      "id": 18337907056,
      "node_id": "SE_lADOABII58621HOhzwAAAARFBkFw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18337907056",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-26T14:40:03Z"
    },
    {
      "event": "commented",
      "id": 3008785284,
      "node_id": "IC_kwDOABII586zVmuE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3008785284",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-26T14:54:39Z",
      "updated_at": "2025-06-26T14:54:39Z",
      "author_association": "MEMBER",
      "body": "Although it's more readable, the downside of this approach is that we're looping over tx.vin twice and, probably much worse, calling `AccessCoin` twice.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3008785284",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "commented",
      "id": 3008910090,
      "node_id": "IC_kwDOABII586zWFMK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3008910090",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-26T15:33:53Z",
      "updated_at": "2025-06-26T15:34:11Z",
      "author_association": "MEMBER",
      "body": "Coins are already accessed multiple times in checking an unconfirmed transaction (which should cache them anyways), doing once more shouldn't introduce any noticeable overhead and i like the upside of facilitating review of a future consensus-touching PR. But if many feel strongly i'm happy to revert the previous approach, and i'm sure Greg would be fine too as he Approach ACK'd the previous approach. Let me know!",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3008910090",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "reviewed",
      "id": 2962634873,
      "node_id": "PRR_kwDOABII586wljh5",
      "url": null,
      "actor": null,
      "commit_id": "7add4522d224a272042f74049a51ce0ef659c956",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2962634873",
      "submitted_at": "2025-06-26T15:54:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI3ZTU0YmVmZjdkMWM5YWM2OGJlZTM3OWJiNmQ5NzFhNzc1Yjk4NDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "tree": {
        "sha": "51e566bc6d7e4e07283122ece604f47b1a854573",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51e566bc6d7e4e07283122ece604f47b1a854573"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4272966d023484bc371b010563af62cc4478b9c9",
          "sha": "4272966d023484bc371b010563af62cc4478b9c9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4272966d023484bc371b010563af62cc4478b9c9"
        }
      ],
      "message": "policy: make pathological transactions packed with legacy sigops non-standard.\n\nThe Consensus Cleanup soft fork proposal includes a limit on the number of legacy signature\noperations potentially executed when validating a transaction. If this change is to be implemented\nhere and activated by Bitcoin users in the future, we should prevent the ability for someone to\nbroadcast a transaction through the p2p network that is not valid according to the new rules. This\nis because if it was possible it would be a trivial DoS to potentially unupgraded miners after the\nsoft fork activates.\n\nWe do not know for sure whether users will activate the Consensus Cleanup. However if they do such\ntransactions must have been made non-standard long in advance, due to the time it takes for most\nnodes on the network to upgrade. In addition this limit may only be ran into by pathological\ntransactions which pad the Script with sigops but do not use actual signatures whem spending, as\notherwise they would run into the standard transaction size limit.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-06-26T16:24:03Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-03-19T21:25:06Z"
      },
      "sha": "27e54beff7d1c9ac68bee379bb6d971a775b9841"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18339615760,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAARFIFQQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18339615760",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "created_at": "2025-06-26T16:24:14Z"
    },
    {
      "event": "reviewed",
      "id": 2965729639,
      "node_id": "PRR_kwDOABII586wxXFn",
      "url": null,
      "actor": null,
      "commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nRegardless of whether the soft-fork will be accepted, it's important to guard against this early.\r\n\r\nHowever, the current implementation introduces a significant slowdown and I think we could make the testing more solid by explicitly validating that we didn't soft-fork yet.\r\nTherefore it's an Approach NACK from me, please see the detailed explanation below.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2965729639",
      "submitted_at": "2025-06-27T12:21:42Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    },
    {
      "event": "commented",
      "id": 3013114686,
      "node_id": "IC_kwDOABII586zmHs-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3013114686",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-27T13:34:52Z",
      "updated_at": "2025-06-30T06:52:11Z",
      "author_association": "MEMBER",
      "body": "> doing once more shouldn't introduce any noticeable overhead \r\n\r\nLooking at `CCoinsViewCache::AccessCoin()`, it calls `FetchCoin`. This either returns a previously cached coin, or fetches it from its base (possibly on disk) and then adds it to the cache.\r\n\r\nSo the worst case overhead for a _second_ `AccessCoin()` call is having to perform another `try_emplace` on this cache.\r\n\r\nThe `CCoinsCaching` bench @l0rinc points to tests `AreInputsStandard` using a very small dummy coin cache. That's probably representative because `MemPoolAccept` creates a fresh cache specifically for a single transaction or package.\r\n\r\nI ran the bench on 27e54beff7d1c9ac68bee379bb6d971a775b9841:\r\n\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              207.29 |        4,824,125.44 |    0.4% |    110.93 | `CCoinsCaching`\r\n```\r\n\r\nas well the previous approach 005d6434ae9ebb1a66b235631489d1b0b9bb6469:\r\n\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              159.59 |        6,265,865.26 |    0.5% |    111.08 | `CCoinsCaching`\r\n```\r\n\r\nSo there does does seem to be a significant slowdown.\r\n\r\nFor comparison, not doing the new check at all:\r\n\r\n```\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              129.58 |        7,717,122.10 |    0.4% |    109.35 | `CCoinsCaching`\r\n```\r\n\r\n---\r\n\r\nThe bigger question is whether this slow down is a problem. @instagibbs thinks it's not: https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2172077826\r\n\r\nWe can distinguish between the typical and the worst case.\r\n\r\nFor the latter this is obviously an improvement. Consider validating a standard standard transaction, where the last signature check fails. The `VerifyScriptBench` verifies a single signature and take 12k ns/op. So clearly the sigops counting part of verification is trivial relative to the signature checks. Even for a single signature transaction. Since the extra check introduced by the PR reduces the max number of signatures we have to validate, it's clearly a big improvement for the worst case.\r\n\r\nBut what about the typical case?\r\n\r\n#28592 proposed to increase the transaction relay rate to 35tx/second for outbound peers, so that's one every 30 milliseconds. This is controlled through `INVENTORY_BROADCAST_PER_SECOND`. But we might receive (many) more candidate transactions than we relay.\r\n\r\nOr we can look at the other steps involved in receiving a transaction, validating it, storing in the mempool and relaying.\r\n\r\nAfaik it's free to send us consensus invalid transactions with too many sigops. This change slightly increases the time it takes us to determine that. But does it matter?",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3013114686",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "mentioned",
      "id": 18357966088,
      "node_id": "MEE_lADOABII58621HOhzwAAAARGOFUI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18357966088",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-27T13:34:53Z"
    },
    {
      "event": "subscribed",
      "id": 18357966117,
      "node_id": "SE_lADOABII58621HOhzwAAAARGOFUl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18357966117",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-27T13:34:53Z"
    },
    {
      "event": "mentioned",
      "id": 18380118555,
      "node_id": "MEE_lADOABII58621HOhzwAAAARHilob",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18380118555",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T06:47:50Z"
    },
    {
      "event": "subscribed",
      "id": 18380118583,
      "node_id": "SE_lADOABII58621HOhzwAAAARHilo3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18380118583",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T06:47:50Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRmYjRiYzczYmUyZGI4Zjk4YTE3MDFlYWU0ZDNkM2E5ZTJmNzMxNGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dfb4bc73be2db8f98a1701eae4d3d3a9e2f7314e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dfb4bc73be2db8f98a1701eae4d3d3a9e2f7314e",
      "tree": {
        "sha": "d906297e7b7401c7798b80eb4ab98ba585ad37a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d906297e7b7401c7798b80eb4ab98ba585ad37a4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27e54beff7d1c9ac68bee379bb6d971a775b9841",
          "sha": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/27e54beff7d1c9ac68bee379bb6d971a775b9841"
        }
      ],
      "message": "qa: unit test standardness of inputs packed with legacy sigops\n\nCheck bounds and different output types.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-06-30T09:00:24Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-03-19T21:35:14Z"
      },
      "sha": "dfb4bc73be2db8f98a1701eae4d3d3a9e2f7314e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNlZWIxZWJiMmY0NjM5MTlhNDRiMGJmM2JhMjRmOWI3ZjgxNGJiNWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "tree": {
        "sha": "ad64bef3654827c3afcdeae430b6f9fafe95ab87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad64bef3654827c3afcdeae430b6f9fafe95ab87"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dfb4bc73be2db8f98a1701eae4d3d3a9e2f7314e",
          "sha": "dfb4bc73be2db8f98a1701eae4d3d3a9e2f7314e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dfb4bc73be2db8f98a1701eae4d3d3a9e2f7314e"
        }
      ],
      "message": "qa: functional test a transaction running into the legacy sigop limit\n\nIt's useful to have an end-to-end test in addition to the unit test to sanity check the RPC error as\nwell as making sure the transaction is otherwise fully standard.",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-06-30T09:00:24Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-03-20T13:44:10Z"
      },
      "sha": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e"
    },
    {
      "event": "commented",
      "id": 3018377738,
      "node_id": "IC_kwDOABII586z6MoK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3018377738",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T09:07:33Z",
      "updated_at": "2025-06-30T11:49:28Z",
      "author_association": "MEMBER",
      "body": "@Sjors `AreInputsStandard` is always called with a warm cache. ~~The benchmark is not.~~ Additional `AccessCoin` calls to fetch coins from the cache do not introduce any meaningful cost.\r\n\r\n@Sjors @l0rinc please let's avoid rushing to performance conclusions on the basis of a microbenchmark that is not representative of how functions are actually used in reality. This PR does not introduce any meaningful slowdown.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3018377738",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "mentioned",
      "id": 18382450036,
      "node_id": "MEE_lADOABII58621HOhzwAAAARHre10",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18382450036",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T09:07:34Z"
    },
    {
      "event": "subscribed",
      "id": 18382450060,
      "node_id": "SE_lADOABII58621HOhzwAAAARHre2M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18382450060",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T09:07:34Z"
    },
    {
      "event": "mentioned",
      "id": 18382450086,
      "node_id": "MEE_lADOABII58621HOhzwAAAARHre2m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18382450086",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T09:07:34Z"
    },
    {
      "event": "subscribed",
      "id": 18382450103,
      "node_id": "SE_lADOABII58621HOhzwAAAARHre23",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18382450103",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T09:07:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18382477785,
      "node_id": "HRFPE_lADOABII58621HOhzwAAAARHrlnZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18382477785",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "commit_url": "https://api.github.com/repos/darosior/bitcoin/commits/ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "created_at": "2025-06-30T09:08:58Z"
    },
    {
      "event": "commented",
      "id": 3018644831,
      "node_id": "IC_kwDOABII586z7N1f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3018644831",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T10:35:08Z",
      "updated_at": "2025-06-30T10:35:08Z",
      "author_association": "MEMBER",
      "body": "> `AreInputsStandard` is always called with a warm cache. The benchmark is not.\r\n\r\nThe `bench.run` call does not clear `coins`, so it's warm after the first iteration. However it's not measuring loading coins from disk. If that's only determined by the disk seek time [0], you're looking at 80 to 160 nanoseconds. My understanding is that our UTXO cache is mostly there to prevent writes, which are much slower than reads.\r\n\r\n[0] https://en.wikipedia.org/wiki/Hard_disk_drive_performance_characteristics",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3018644831",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "commented",
      "id": 3019305155,
      "node_id": "IC_kwDOABII586z9vDD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3019305155",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-30T14:06:29Z",
      "updated_at": "2025-06-30T14:06:29Z",
      "author_association": "MEMBER",
      "body": "> The `bench.run` call does not clear `coins`, so it's warm after the first iteration.\r\n\r\nActually the benchmark does populate the cache first through `SetupDummyInputs` (otherwise it couldn't work since it is using a dummy backend). But the main point really is that this micro benchmark is meaningless to demonstrate a slow down in transaction processing. `AreInputsStandard` should represent a fraction of a percent of the total work performed when processing a transaction. Unless we make it 10'000 times slower i don't think this needs to be discussed at all, or only to point out this approach only result in a 70% slower `AreInputsStandard` (i.e. only a ~100 additional ns spent there) and is therefore worth taking for the future gains of a simpler consensus patch.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3019305155",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32521"
    },
    {
      "event": "reviewed",
      "id": 2971492745,
      "node_id": "PRR_kwDOABII586xHWGJ",
      "url": null,
      "actor": null,
      "commit_id": "dfb4bc73be2db8f98a1701eae4d3d3a9e2f7314e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#pullrequestreview-2971492745",
      "submitted_at": "2025-06-30T14:38:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093026925",
      "pull_request_review_id": 2846600393,
      "id": 2093026925,
      "node_id": "PRRC_kwDOABII5858wQ5t",
      "diff_hunk": "@@ -176,6 +183,38 @@ def create_bare_multisig_tx(utxo_to_spend=None):\n         # Transactions are tiny in weight\n         assert_greater_than(2000, tx_parent.get_weight() + tx_child.get_weight())\n \n+    def test_legacy_sigops_stdness(self):\n+        self.log.info(\"Test a transaction with too many legacy sigops in its inputs is non-standard.\")\n+\n+        # Restart with the default settings\n+        self.restart_node(0)\n+\n+        # Create a P2SH script with 15 sigops.\n+        _, dummy_pubkey = generate_keypair()\n+        packed_redeem_script = [dummy_pubkey]\n+        for _ in range(MAX_STD_P2SH_SIGOPS - 1):\n+            packed_redeem_script += [OP_2DUP, OP_CHECKSIG, OP_DROP]\n+        packed_redeem_script = CScript(packed_redeem_script + [OP_CHECKSIG, OP_NOT])\n+        packed_p2sh_script = script_to_p2sh_script(packed_redeem_script)\n+\n+        # Create enough outputs to reach the sigops limit when spending them all at once.\n+        outpoints = []\n+        for _ in range(int(MAX_STD_LEGACY_SIGOPS / MAX_STD_P2SH_SIGOPS) + 1):\n+            res = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=packed_p2sh_script, amount=1_000)\n+            txid = int.from_bytes(bytes.fromhex(res[\"txid\"]), byteorder=\"big\")\n+            outpoints.append(COutPoint(txid, res[\"sent_vout\"]))\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spending all these outputs at once accounts for 2505 legacy sigops and is non-standard.\n+        tx = CTransaction()",
      "path": "test/functional/mempool_sigoplimit.py",
      "position": null,
      "original_position": 51,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "f13acba6f0b95b0cd7c624dd3c0be9978b3c5be1",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "might be worth getting this one mined to show it's consensus-valid still",
      "created_at": "2025-05-16T13:13:45Z",
      "updated_at": "2025-05-16T13:13:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2093026925",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093026925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095459011",
      "pull_request_review_id": 2850362016,
      "id": 2095459011,
      "node_id": "PRRC_kwDOABII58585irD",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": null,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`MAX_TX_LEGACY_SIGOPS`?",
      "created_at": "2025-05-19T11:06:14Z",
      "updated_at": "2025-05-19T11:06:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2095459011",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095459011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095462982",
      "pull_request_review_id": 2850368112,
      "id": 2095462982,
      "node_id": "PRRC_kwDOABII58585jpG",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase()) {\n         return true; // Coinbases don't use vin normally\n     }\n \n+    unsigned int sigops{0};\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`GetSigOpCount(/*fAccurate=*/true)`\r\n\r\nAnd the `fAccurate` is terribly vague, it's useful to explain:\r\n\r\n```h\r\n// Unlike the block wide sigop limit, the BIP54 per\r\n// transaction limit uses \"accurate\" BIP16 style accounting.\r\n```",
      "created_at": "2025-05-19T11:08:44Z",
      "updated_at": "2025-05-19T11:35:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2095462982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095462982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095472966",
      "pull_request_review_id": 2850384136,
      "id": 2095472966,
      "node_id": "PRRC_kwDOABII58585mFG",
      "diff_hunk": "@@ -209,9 +215,15 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n             if (stack.empty())\n                 return false;\n             CScript subscript(stack.back().begin(), stack.back().end());\n-            if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n+            const auto p2sh_sigops{subscript.GetSigOpCount(true)};\n+            if (p2sh_sigops > MAX_P2SH_SIGOPS) {\n                 return false;\n             }\n+            sigops += p2sh_sigops;\n+        }\n+\n+        if (sigops > MAX_LEGACY_SIGOPS) {",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Although there are no `break` or `continue` statements in the loop, it would feel a bit more robust to move this check below the loop (although an early break is more efficient).",
      "created_at": "2025-05-19T11:14:18Z",
      "updated_at": "2025-05-19T11:15:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2095472966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095472966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095501048",
      "pull_request_review_id": 2850427699,
      "id": 2095501048,
      "node_id": "PRRC_kwDOABII58585s74",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could add: `The per transaction sigop limit introduced in BIP54 does not cover the witness.`",
      "created_at": "2025-05-19T11:31:03Z",
      "updated_at": "2025-05-19T11:31:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2095501048",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095501048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095516997",
      "pull_request_review_id": 2850452014,
      "id": 2095516997,
      "node_id": "PRRC_kwDOABII58585w1F",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase()) {\n         return true; // Coinbases don't use vin normally\n     }\n \n+    unsigned int sigops{0};\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(true);\n+        sigops += prev.scriptPubKey.GetSigOpCount(true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```cpp\r\n// Unlike the block wide sigop limit, the BIP54 per\r\n// transaction limit includes the prevout scriptPubKey.\r\n```",
      "created_at": "2025-05-19T11:40:49Z",
      "updated_at": "2025-05-19T11:41:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2095516997",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2095516997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096403730",
      "pull_request_review_id": 2851861223,
      "id": 2096403730,
      "node_id": "PRRC_kwDOABII58589JUS",
      "diff_hunk": "@@ -209,9 +215,15 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n             if (stack.empty())\n                 return false;\n             CScript subscript(stack.back().begin(), stack.back().end());\n-            if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n+            const auto p2sh_sigops{subscript.GetSigOpCount(true)};\n+            if (p2sh_sigops > MAX_P2SH_SIGOPS) {\n                 return false;\n             }\n+            sigops += p2sh_sigops;\n+        }\n+\n+        if (sigops > MAX_LEGACY_SIGOPS) {",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095472966,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I understand the slight additional complexity concern but for a transaction submitted to us with no PoW i think we should discard it as soon as we know we won't accept it. I really don't think we should keep doing unnecessary work by iterating, solving scripts and counting.",
      "created_at": "2025-05-19T20:00:34Z",
      "updated_at": "2025-05-19T20:00:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2096403730",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096403730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096405194",
      "pull_request_review_id": 2851863588,
      "id": 2096405194,
      "node_id": "PRRC_kwDOABII58589JrK",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095501048,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Don't you think it would be confusing to point here since this function does not concern itself with the witness? Especially as it's pointed right before.",
      "created_at": "2025-05-19T20:01:50Z",
      "updated_at": "2025-05-19T20:01:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2096405194",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096405194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096415934",
      "pull_request_review_id": 2851881539,
      "id": 2096415934,
      "node_id": "PRRC_kwDOABII58589MS-",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase()) {\n         return true; // Coinbases don't use vin normally\n     }\n \n+    unsigned int sigops{0};\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(true);\n+        sigops += prev.scriptPubKey.GetSigOpCount(true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095516997,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, added a sentence to this effect.",
      "created_at": "2025-05-19T20:11:08Z",
      "updated_at": "2025-05-19T20:11:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2096415934",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096415934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096416043",
      "pull_request_review_id": 2851881679,
      "id": 2096416043,
      "node_id": "PRRC_kwDOABII58589MUr",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase()) {\n         return true; // Coinbases don't use vin normally\n     }\n \n+    unsigned int sigops{0};\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095462982,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-05-19T20:11:12Z",
      "updated_at": "2025-05-19T20:11:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2096416043",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096416043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096416080",
      "pull_request_review_id": 2851881743,
      "id": 2096416080,
      "node_id": "PRRC_kwDOABII58589MVQ",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": null,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095459011,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's actually what i had initially but i reduced it to `MAX_LEGACY_SIGOPS` in an attempt to avoid too long variable names. With the comment expliciting it's about transaction inputs, i think it should be fine as-is.",
      "created_at": "2025-05-19T20:11:14Z",
      "updated_at": "2025-05-19T20:11:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2096416080",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096416080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096416254",
      "pull_request_review_id": 2851882463,
      "id": 2096416254,
      "node_id": "PRRC_kwDOABII58589MX-",
      "diff_hunk": "@@ -176,6 +183,38 @@ def create_bare_multisig_tx(utxo_to_spend=None):\n         # Transactions are tiny in weight\n         assert_greater_than(2000, tx_parent.get_weight() + tx_child.get_weight())\n \n+    def test_legacy_sigops_stdness(self):\n+        self.log.info(\"Test a transaction with too many legacy sigops in its inputs is non-standard.\")\n+\n+        # Restart with the default settings\n+        self.restart_node(0)\n+\n+        # Create a P2SH script with 15 sigops.\n+        _, dummy_pubkey = generate_keypair()\n+        packed_redeem_script = [dummy_pubkey]\n+        for _ in range(MAX_STD_P2SH_SIGOPS - 1):\n+            packed_redeem_script += [OP_2DUP, OP_CHECKSIG, OP_DROP]\n+        packed_redeem_script = CScript(packed_redeem_script + [OP_CHECKSIG, OP_NOT])\n+        packed_p2sh_script = script_to_p2sh_script(packed_redeem_script)\n+\n+        # Create enough outputs to reach the sigops limit when spending them all at once.\n+        outpoints = []\n+        for _ in range(int(MAX_STD_LEGACY_SIGOPS / MAX_STD_P2SH_SIGOPS) + 1):\n+            res = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=packed_p2sh_script, amount=1_000)\n+            txid = int.from_bytes(bytes.fromhex(res[\"txid\"]), byteorder=\"big\")\n+            outpoints.append(COutPoint(txid, res[\"sent_vout\"]))\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spending all these outputs at once accounts for 2505 legacy sigops and is non-standard.\n+        tx = CTransaction()",
      "path": "test/functional/mempool_sigoplimit.py",
      "position": null,
      "original_position": 51,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "f13acba6f0b95b0cd7c624dd3c0be9978b3c5be1",
      "in_reply_to_id": 2093026925,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Expanded the test to check the original, non-standard, one can still be mined.",
      "created_at": "2025-05-19T20:11:22Z",
      "updated_at": "2025-05-19T20:11:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2096416254",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2096416254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2097218973",
      "pull_request_review_id": 2853046198,
      "id": 2097218973,
      "node_id": "PRRC_kwDOABII5859AQWd",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095501048,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Well that's what confused me. My first thought was: why does this work if we're not checking the witness?\r\n\r\nBut maybe the sigops related comment needs to go above the \"only the non-witness\" portion.\r\n\r\nOr something like:\r\n\r\n```cpp\r\n* Note that only the non-witness portion of the transaction is checked here.\r\n* This is fine because the per transaction sigop limit introduced in BIP54 \r\n* does not cover the witness.\r\n```\r\n\r\n(and then drop the \"We also check the total\")",
      "created_at": "2025-05-20T07:39:42Z",
      "updated_at": "2025-05-20T07:41:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2097218973",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2097218973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2097226712",
      "pull_request_review_id": 2853058249,
      "id": 2097226712,
      "node_id": "PRRC_kwDOABII5859ASPY",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": null,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095459011,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think the 3 character savings is worth making people jump to the documentation. `MAX_TX_` vs `MAX_BLOCK_` seems like a good convention to keep. ",
      "created_at": "2025-05-20T07:43:42Z",
      "updated_at": "2025-05-20T07:43:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2097226712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2097226712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2098849030",
      "pull_request_review_id": 2855554462,
      "id": 2098849030,
      "node_id": "PRRC_kwDOABII5859GeUG",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095501048,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fine, but went for a more compressed version:\r\n```suggestion\r\n * We also check the total number of legacy sigops across the whole transaction, as per BIP54.\r\n```\r\n\r\nLooks good?",
      "created_at": "2025-05-20T20:47:13Z",
      "updated_at": "2025-05-20T20:47:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2098849030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2098849030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2098855504",
      "pull_request_review_id": 2855563435,
      "id": 2098855504,
      "node_id": "PRRC_kwDOABII5859Gf5Q",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": null,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095459011,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fine, done.",
      "created_at": "2025-05-20T20:51:45Z",
      "updated_at": "2025-05-20T20:51:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2098855504",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2098855504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099616827",
      "pull_request_review_id": 2856689903,
      "id": 2099616827,
      "node_id": "PRRC_kwDOABII5859JZw7",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095501048,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sounds fine, forgot to push this?\r\n\r\n(maybe say \"non-witness\" instead of \"legacy\")",
      "created_at": "2025-05-21T07:54:43Z",
      "updated_at": "2025-05-21T07:55:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2099616827",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099616827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099855247",
      "pull_request_review_id": 2857047398,
      "id": 2099855247,
      "node_id": "PRRC_kwDOABII5859KT-P",
      "diff_hunk": "@@ -176,6 +184,42 @@ def create_bare_multisig_tx(utxo_to_spend=None):\n         # Transactions are tiny in weight\n         assert_greater_than(2000, tx_parent.get_weight() + tx_child.get_weight())\n \n+    def test_legacy_sigops_stdness(self):\n+        self.log.info(\"Test a transaction with too many legacy sigops in its inputs is non-standard.\")\n+\n+        # Restart with the default settings\n+        self.restart_node(0)\n+\n+        # Create a P2SH script with 15 sigops.\n+        _, dummy_pubkey = generate_keypair()\n+        packed_redeem_script = [dummy_pubkey]\n+        for _ in range(MAX_STD_P2SH_SIGOPS - 1):\n+            packed_redeem_script += [OP_2DUP, OP_CHECKSIG, OP_DROP]\n+        packed_redeem_script = CScript(packed_redeem_script + [OP_CHECKSIG, OP_NOT])\n+        packed_p2sh_script = script_to_p2sh_script(packed_redeem_script)\n+\n+        # Create enough outputs to reach the sigops limit when spending them all at once.\n+        outpoints = []\n+        for _ in range(int(MAX_STD_LEGACY_SIGOPS / MAX_STD_P2SH_SIGOPS) + 1):\n+            res = self.wallet.send_to(from_node=self.nodes[0], scriptPubKey=packed_p2sh_script, amount=1_000)\n+            txid = int.from_bytes(bytes.fromhex(res[\"txid\"]), byteorder=\"big\")\n+            outpoints.append(COutPoint(txid, res[\"sent_vout\"]))\n+        self.generate(self.nodes[0], 1)\n+\n+        # Spending all these outputs at once accounts for 2505 legacy sigops and is non-standard.\n+        nonstd_tx = CTransaction()\n+        nonstd_tx.vin = [CTxIn(op, CScript([b\"\", packed_redeem_script])) for op in outpoints]\n+        nonstd_tx.vout = [CTxOut(0, CScript([OP_RETURN, b\"\"]))]\n+        assert_raises_rpc_error(-26, \"bad-txns-nonstandard-inputs\", self.nodes[0].sendrawtransaction, nonstd_tx.serialize().hex())\n+\n+        # Spending one less accounts for 2490 legacy sigops and is standard.\n+        std_tx = deepcopy(nonstd_tx)\n+        std_tx.vin.pop()\n+        self.nodes[0].sendrawtransaction(std_tx.serialize().hex())\n+\n+        # Make sure the original, non-standard, transaction can be mined.\n+        self.generateblock(self.nodes[0], output=\"raw(42)\", transactions=[nonstd_tx.serialize().hex()])",
      "path": "test/functional/mempool_sigoplimit.py",
      "position": 77,
      "original_position": 70,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "29e8fe71440a7e27ee89527a49753be615f205c7",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "29e8fe71440a7e27ee89527a49753be615f205c7: note to other reviewers, yes `generateblocks` checks for errors, as you can see if you duplicate `nonstd_tx.serialize().hex()`",
      "created_at": "2025-05-21T09:46:40Z",
      "updated_at": "2025-05-21T09:57:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2099855247",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099855247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 221,
      "original_line": 221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099858669",
      "pull_request_review_id": 2857047398,
      "id": 2099858669,
      "node_id": "PRRC_kwDOABII5859KUzt",
      "diff_hunk": "@@ -22,6 +22,12 @@\n     sha256,\n )\n \n+# Maximum number of potentially executed legacy signature operations in validating a transaction.\n+MAX_STD_LEGACY_SIGOPS = 2_500",
      "path": "test/functional/test_framework/script_util.py",
      "position": 5,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "29e8fe71440a7e27ee89527a49753be615f205c7",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "29e8fe71440a7e27ee89527a49753be615f205c7: `MAX_TX_LEGACY_SIGOPS` would be consistent with the c++ code",
      "created_at": "2025-05-21T09:48:33Z",
      "updated_at": "2025-05-21T09:56:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2099858669",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099858669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099863081",
      "pull_request_review_id": 2857047398,
      "id": 2099863081,
      "node_id": "PRRC_kwDOABII5859KV4p",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);",
      "path": "src/test/transaction_tests.cpp",
      "position": 26,
      "original_position": 26,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a139a538c298621674ba622e63971704cbb7ceff: what's this magic `424242` value?",
      "created_at": "2025-05-21T09:50:32Z",
      "updated_at": "2025-05-21T09:56:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2099863081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099863081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1073,
      "original_line": 1073,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099865784",
      "pull_request_review_id": 2857047398,
      "id": 2099865784,
      "node_id": "PRRC_kwDOABII5859KWi4",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)",
      "path": "src/test/transaction_tests.cpp",
      "position": 34,
      "original_position": 34,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a139a538c298621674ba622e63971704cbb7ceff: it seems more clear if you define it as an integer instead of `auto`.",
      "created_at": "2025-05-21T09:51:58Z",
      "updated_at": "2025-05-21T09:57:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2099865784",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099865784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1081,
      "original_line": 1081,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099872077",
      "pull_request_review_id": 2857047398,
      "id": 2099872077,
      "node_id": "PRRC_kwDOABII5859KYFN",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+",
      "path": "src/test/transaction_tests.cpp",
      "position": 73,
      "original_position": 73,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a139a538c298621674ba622e63971704cbb7ceff: could insert a segwit spend to show that it doesn't count.",
      "created_at": "2025-05-21T09:55:02Z",
      "updated_at": "2025-05-21T09:56:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2099872077",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2099872077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1120,
      "original_line": 1120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100286223",
      "pull_request_review_id": 2857715376,
      "id": 2100286223,
      "node_id": "PRRC_kwDOABII5859L9MP",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);",
      "path": "src/test/transaction_tests.cpp",
      "position": 26,
      "original_position": 26,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": 2099863081,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The value of a transaction output.",
      "created_at": "2025-05-21T13:21:55Z",
      "updated_at": "2025-05-21T13:21:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100286223",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100286223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1073,
      "original_line": 1073,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100412156",
      "pull_request_review_id": 2857911090,
      "id": 2100412156,
      "node_id": "PRRC_kwDOABII5859Mb78",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);",
      "path": "src/test/transaction_tests.cpp",
      "position": 26,
      "original_position": 26,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": 2099863081,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah ok, any reason for the `+ i`?",
      "created_at": "2025-05-21T14:13:22Z",
      "updated_at": "2025-05-21T14:13:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100412156",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100412156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1073,
      "original_line": 1073,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551171",
      "pull_request_review_id": 2858138124,
      "id": 2100551171,
      "node_id": "PRRC_kwDOABII5859M94D",
      "diff_hunk": "@@ -183,16 +183,22 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of sigops across the whole transaction.",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "e3eceb84926087770dde83a5da724668b1a3c8f2",
      "in_reply_to_id": 2095501048,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed to \"non-witness\" and actually pushed it this time. :)",
      "created_at": "2025-05-21T15:13:29Z",
      "updated_at": "2025-05-21T15:13:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100551171",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551433",
      "pull_request_review_id": 2858138518,
      "id": 2100551433,
      "node_id": "PRRC_kwDOABII5859M98J",
      "diff_hunk": "@@ -22,6 +22,12 @@\n     sha256,\n )\n \n+# Maximum number of potentially executed legacy signature operations in validating a transaction.\n+MAX_STD_LEGACY_SIGOPS = 2_500",
      "path": "test/functional/test_framework/script_util.py",
      "position": 5,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "29e8fe71440a7e27ee89527a49753be615f205c7",
      "in_reply_to_id": 2099858669,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Meh. Then it would not make it consistent with MAX_STD_P2SH_SIGOPS, and having in the name that's it's a standardness rule is useful. I don't think it's worth changing.",
      "created_at": "2025-05-21T15:13:37Z",
      "updated_at": "2025-05-21T15:13:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100551433",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551433"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551574",
      "pull_request_review_id": 2858138720,
      "id": 2100551574,
      "node_id": "PRRC_kwDOABII5859M9-W",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)",
      "path": "src/test/transaction_tests.cpp",
      "position": 34,
      "original_position": 34,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": 2099865784,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-05-21T15:13:40Z",
      "updated_at": "2025-05-21T15:13:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100551574",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551574"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1081,
      "original_line": 1081,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551654",
      "pull_request_review_id": 2858138836,
      "id": 2100551654,
      "node_id": "PRRC_kwDOABII5859M9_m",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+",
      "path": "src/test/transaction_tests.cpp",
      "position": 73,
      "original_position": 73,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": 2099872077,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good call, done.",
      "created_at": "2025-05-21T15:13:42Z",
      "updated_at": "2025-05-21T15:13:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100551654",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100551654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1120,
      "original_line": 1120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100561289",
      "pull_request_review_id": 2858158749,
      "id": 2100561289,
      "node_id": "PRRC_kwDOABII5859NAWJ",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);",
      "path": "src/test/transaction_tests.cpp",
      "position": 26,
      "original_position": 26,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": 2099863081,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just varying the amounts because why not.",
      "created_at": "2025-05-21T15:18:24Z",
      "updated_at": "2025-05-21T15:18:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100561289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100561289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1073,
      "original_line": 1073,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100618966",
      "pull_request_review_id": 2858285512,
      "id": 2100618966,
      "node_id": "PRRC_kwDOABII5859NObW",
      "diff_hunk": "@@ -1048,4 +1048,90 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const auto p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);",
      "path": "src/test/transaction_tests.cpp",
      "position": 26,
      "original_position": 26,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "a139a538c298621674ba622e63971704cbb7ceff",
      "in_reply_to_id": 2099863081,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's confusing, but otherwise harmless.",
      "created_at": "2025-05-21T15:42:29Z",
      "updated_at": "2025-05-21T15:42:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2100618966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100618966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1073,
      "original_line": 1073,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120745163",
      "pull_request_review_id": 2887788438,
      "id": 2120745163,
      "node_id": "PRRC_kwDOABII585-aADL",
      "diff_hunk": "@@ -183,16 +183,26 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of non-witness sigops across the whole transaction, as per BIP54.\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase()) {\n         return true; // Coinbases don't use vin normally\n     }\n \n+    unsigned int sigops{0};\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey actually count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev.scriptPubKey.GetSigOpCount(/*fAccurate=*/true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "in_reply_to_id": null,
      "user": {
        "login": "mabu44",
        "id": 192022804,
        "node_id": "U_kgDOC3IJFA",
        "avatar_url": "https://avatars.githubusercontent.com/u/192022804?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mabu44",
        "html_url": "https://github.com/mabu44",
        "followers_url": "https://api.github.com/users/mabu44/followers",
        "following_url": "https://api.github.com/users/mabu44/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mabu44/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mabu44/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mabu44/subscriptions",
        "organizations_url": "https://api.github.com/users/mabu44/orgs",
        "repos_url": "https://api.github.com/users/mabu44/repos",
        "events_url": "https://api.github.com/users/mabu44/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mabu44/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Moving these lines directly before the check on sigops (e.g. to line 228) can improve performances because we avoid performing the calculation when a \"return false\" is executed for another reason in the block between lines 206 and 227.",
      "created_at": "2025-06-02T10:40:29Z",
      "updated_at": "2025-06-02T10:41:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2120745163",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120745163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121017491",
      "pull_request_review_id": 2888200491,
      "id": 2121017491,
      "node_id": "PRRC_kwDOABII585-bCiT",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), false);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "in_reply_to_id": null,
      "user": {
        "login": "mabu44",
        "id": 192022804,
        "node_id": "U_kgDOC3IJFA",
        "avatar_url": "https://avatars.githubusercontent.com/u/192022804?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mabu44",
        "html_url": "https://github.com/mabu44",
        "followers_url": "https://api.github.com/users/mabu44/followers",
        "following_url": "https://api.github.com/users/mabu44/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mabu44/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mabu44/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mabu44/subscriptions",
        "organizations_url": "https://api.github.com/users/mabu44/orgs",
        "repos_url": "https://api.github.com/users/mabu44/repos",
        "events_url": "https://api.github.com/users/mabu44/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mabu44/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The third parameter should be 0, not false. For all the occurrences of the AddCoins function.",
      "created_at": "2025-06-02T12:34:02Z",
      "updated_at": "2025-06-02T12:51:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2121017491",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121017491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121277977",
      "pull_request_review_id": 2888610058,
      "id": 2121277977,
      "node_id": "PRRC_kwDOABII585-cCIZ",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), false);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "in_reply_to_id": 2121017491,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "See `AddCoins`'s declaration in `src/coins.h`:\r\n```cpp\r\nvoid AddCoins(CCoinsViewCache& cache, const CTransaction& tx, int nHeight, bool check = false);\r\n```",
      "created_at": "2025-06-02T14:12:13Z",
      "updated_at": "2025-06-02T14:12:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2121277977",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121277977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121610418",
      "pull_request_review_id": 2889105473,
      "id": 2121610418,
      "node_id": "PRRC_kwDOABII585-dTSy",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), false);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "in_reply_to_id": 2121017491,
      "user": {
        "login": "mabu44",
        "id": 192022804,
        "node_id": "U_kgDOC3IJFA",
        "avatar_url": "https://avatars.githubusercontent.com/u/192022804?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mabu44",
        "html_url": "https://github.com/mabu44",
        "followers_url": "https://api.github.com/users/mabu44/followers",
        "following_url": "https://api.github.com/users/mabu44/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mabu44/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mabu44/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mabu44/subscriptions",
        "organizations_url": "https://api.github.com/users/mabu44/orgs",
        "repos_url": "https://api.github.com/users/mabu44/repos",
        "events_url": "https://api.github.com/users/mabu44/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mabu44/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nHeight is indeed an int. Am I missing something?",
      "created_at": "2025-06-02T16:13:01Z",
      "updated_at": "2025-06-02T16:13:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2121610418",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121610418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121670967",
      "pull_request_review_id": 2889204712,
      "id": 2121670967,
      "node_id": "PRRC_kwDOABII585-diE3",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), false);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "in_reply_to_id": 2121017491,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Wow my bad.",
      "created_at": "2025-06-02T16:42:17Z",
      "updated_at": "2025-06-02T16:42:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2121670967",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121670967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121686616",
      "pull_request_review_id": 2889228221,
      "id": 2121686616,
      "node_id": "PRRC_kwDOABII585-dl5Y",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), false);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "in_reply_to_id": 2121017491,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-06-02T16:49:31Z",
      "updated_at": "2025-06-02T16:49:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2121686616",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121686616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121720547",
      "pull_request_review_id": 2889284486,
      "id": 2121720547,
      "node_id": "PRRC_kwDOABII585-duLj",
      "diff_hunk": "@@ -183,16 +183,26 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n  *    as potential new upgrade hooks.\n  *\n  * Note that only the non-witness portion of the transaction is checked here.\n+ *\n+ * We also check the total number of non-witness sigops across the whole transaction, as per BIP54.\n  */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase()) {\n         return true; // Coinbases don't use vin normally\n     }\n \n+    unsigned int sigops{0};\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey actually count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev.scriptPubKey.GetSigOpCount(/*fAccurate=*/true);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "80d213677962268a82d65d8915c518f0c02867d9",
      "in_reply_to_id": 2120745163,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-06-02T17:05:40Z",
      "updated_at": "2025-06-02T17:05:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2121720547",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121720547"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2169392812",
      "pull_request_review_id": 2962634873,
      "id": 2169392812,
      "node_id": "PRRC_kwDOABII586BTk6s",
      "diff_hunk": "@@ -168,6 +168,33 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& coin{inputs.AccessCoin(tx.vin[i].prevout)};\n+        assert(!coin.IsSpent());\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += coin.out.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "7add4522d224a272042f74049a51ce0ef659c956",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "TIL. We could use this one in the other standardness check, right?",
      "created_at": "2025-06-26T15:54:34Z",
      "updated_at": "2025-06-26T15:54:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2169392812",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2169392812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2169429571",
      "pull_request_review_id": 2962694670,
      "id": 2169429571,
      "node_id": "PRRC_kwDOABII586BTt5D",
      "diff_hunk": "@@ -168,6 +168,33 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& coin{inputs.AccessCoin(tx.vin[i].prevout)};\n+        assert(!coin.IsSpent());\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += coin.out.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "7add4522d224a272042f74049a51ce0ef659c956",
      "in_reply_to_id": 2169392812,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah.",
      "created_at": "2025-06-26T16:15:39Z",
      "updated_at": "2025-06-26T16:15:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2169429571",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2169429571"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171446494",
      "pull_request_review_id": 2965729639,
      "id": 2171446494,
      "node_id": "PRRC_kwDOABII586BbaTe",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": 20,
      "original_position": 20,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems wasteful to iterate and parse `tx.vin[i].scriptSig` twice, we should already know the last item that the `scriptSig` pushed onto the stack after the first iteration - can we optimize that?",
      "created_at": "2025-06-27T09:50:24Z",
      "updated_at": "2025-06-27T12:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171446494",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171446494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171450864",
      "pull_request_review_id": 2965729639,
      "id": 2171450864,
      "node_id": "PRRC_kwDOABII586BbbXw",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Note: since this magic value is referencing a soft-fork that may or may not be applied, we could mention it here for context: https://github.com/bitcoin/bips/blob/master/bip-0054.md#specification\r\n\r\nQ: How often do we expect mined blocks to contradict this new policy rule?\r\nAsking because of https://b10c.me/observations/11-invalid-blocks-783426-and-784121, claiming:\r\n> On April 1st, 2023, F2Pool mined an invalid block at height 783426. Bitcoin Core nodes rejected the block with the reason bad-blk-sigops and the note too many sigops. On April 6th, 2023, F2Pool mined another bad-blk-sigops block at height 784121\r\n\r\n and https://bitcoin.stackexchange.com/questions/121355/sigop-count-and-its-influence-on-transaction-selection which claims:\r\n> Over the last 10,000 blocks (between heights 815316 and 825316), only 62 were constrained by the sigop limit, despite an abnormally large number of high sigop transactions during that period.",
      "created_at": "2025-06-27T09:51:52Z",
      "updated_at": "2025-06-27T12:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171450864",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171450864"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171470960",
      "pull_request_review_id": 2965729639,
      "id": 2171470960,
      "node_id": "PRRC_kwDOABII586BbgRw",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);",
      "path": "src/policy/policy.cpp",
      "position": 19,
      "original_position": 19,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Similarly to the discussion on https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2095472966, it seems to me we could fail early by exiting if the first one is already too big:\r\n```suggestion\r\n        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\r\n        if (sigops > MAX_TX_LEGACY_SIGOPS) {\r\n            return false;\r\n        }\r\n```\r\nor inversely, if this isn't performance critical, we can do the check at the very end instead, to speed up the happy path by not doing intermediary checks. \r\n```C++\r\n        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\r\n        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\r\n    }\r\n\r\n    return sigops <= MAX_TX_LEGACY_SIGOPS;\r\n}\r\n```\r\n\r\nIs there any advantage to this in-between solution?",
      "created_at": "2025-06-27T09:59:08Z",
      "updated_at": "2025-06-27T12:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171470960",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171470960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 186,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171487154",
      "pull_request_review_id": 2965729639,
      "id": 2171487154,
      "node_id": "PRRC_kwDOABII586BbkOy",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have a similar concern to https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3008785284, the benchmarks indicate a ~**66%** slower standardness check for me locally (similar slowdown shown by https://corecheck.dev/bitcoin/bitcoin/pulls/32521):\r\n\r\n```bash\r\n# latest commit, rebased: 811115c75da74ef50aa37cfcb807e4ac1a767604\r\n%  build/bin/bench_bitcoin -filter='CCoinsCaching' --min-time=10000 # ran 3 times\r\n```\r\n\r\n> Before (without `CheckSigopsBIP54`):\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              141.29 |        7,077,842.70 |    0.4% |     10.94 | `CCoinsCaching`\r\n|              141.16 |        7,083,924.08 |    0.2% |     10.98 | `CCoinsCaching`\r\n|              140.31 |        7,127,285.74 |    0.3% |     10.97 | `CCoinsCaching`\r\n\r\n> After:\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              212.20 |        4,712,429.73 |    0.3% |     11.00 | `CCoinsCaching`\r\n|              214.75 |        4,656,677.68 |    0.3% |     10.98 | `CCoinsCaching`\r\n|              211.30 |        4,732,499.91 |    0.1% |     11.00 | `CCoinsCaching`\r\n",
      "created_at": "2025-06-27T10:05:52Z",
      "updated_at": "2025-06-27T12:23:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171487154",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171487154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171492254",
      "pull_request_review_id": 2965729639,
      "id": 2171492254,
      "node_id": "PRRC_kwDOABII586Bblee",
      "diff_hunk": "",
      "path": "src/policy/policy.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: multiple typos in commit message 27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "created_at": "2025-06-27T10:08:04Z",
      "updated_at": "2025-06-27T12:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171492254",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171492254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171495102",
      "pull_request_review_id": 2965729639,
      "id": 2171495102,
      "node_id": "PRRC_kwDOABII586BbmK-",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2c636ba74cf0b7526b10d07c610b51adf0d57f9e",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: if we want better error messages showing both sides on a failure, we could do:\r\n```suggestion\r\n    BOOST_CHECK_GT((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS, MAX_TX_LEGACY_SIGOPS);\r\n```",
      "created_at": "2025-06-27T10:09:16Z",
      "updated_at": "2025-06-27T12:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171495102",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171495102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1096,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171503978",
      "pull_request_review_id": 2965729639,
      "id": 2171503978,
      "node_id": "PRRC_kwDOABII586BboVq",
      "diff_hunk": "@@ -24,16 +25,23 @@\n     OP_IF,\n     OP_RETURN,\n     OP_TRUE,\n+    OP_2DUP,\n+    OP_DROP,\n+    OP_NOT,",
      "path": "test/functional/mempool_sigoplimit.py",
      "position": null,
      "original_position": 14,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: these were in alphabetic order before:\r\n```python\r\nfrom test_framework.script import (\r\n    CScript,\r\n    OP_2DUP,\r\n    OP_CHECKMULTISIG,\r\n    OP_CHECKSIG,\r\n    OP_DROP,\r\n    OP_ENDIF,\r\n    OP_FALSE,\r\n    OP_IF,\r\n    OP_NOT,\r\n    OP_RETURN,\r\n    OP_TRUE,\r\n)\r\n```\r\n\r\nTo reduce further possible merge conflicts, please consider keeping the import section sorted",
      "created_at": "2025-06-27T10:12:17Z",
      "updated_at": "2025-06-27T12:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171503978",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171503978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171603715",
      "pull_request_review_id": 2965729639,
      "id": 2171603715,
      "node_id": "PRRC_kwDOABII586BcAsD",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "similarly to other `emplace_back` calls here, we don't need the explicit constructor (it also avoids constructing a temporary):\r\n```suggestion\r\n        tx_max_sigops.vin.emplace_back(prev_txid, i);\r\n```",
      "created_at": "2025-06-27T10:45:07Z",
      "updated_at": "2025-06-27T12:24:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171603715",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171603715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171607771",
      "pull_request_review_id": 2965729639,
      "id": 2171607771,
      "node_id": "PRRC_kwDOABII586BcBrb",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+\n+    // The transaction now still contains exactly 2500 sigops, the check should pass.\n+    AddCoins(coins, CTransaction(tx_create_segwit), 0, false);\n+    BOOST_REQUIRE(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Add one more P2PK input. We'll reach the limit.\n+    tx_create_p2pk.vout.emplace_back(212121, p2pk_script);\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    ++p2pk_inputs_count;\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));",
      "path": "src/test/transaction_tests.cpp",
      "position": 107,
      "original_position": 107,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 this is where the test fails correctly without the `!CheckSigopsBIP54(tx, mapInputs)` check.\r\n\r\n-----\r\n\r\nWould it make sense to add a coinbase tx and vouts to this test to make it more realistic so that it passes `CheckTransaction` as well? Otherwise it's harder to tell if it fails for the right reasons...\r\n\r\nAnd to make sure this only affects policy and not consensus: do we already have tests that check that e.g. 3000 sigops could still be mined? If not, can we add a clause here to make sure that we haven't accidentally changed the consensus, i.e. that we could still mine these non-standard blocks?\r\n```C++\r\n    TxValidationState state;\r\n    BOOST_CHECK(CheckTransaction(CTransaction(tx_max_sigops), state));\r\n    BOOST_CHECK(state.IsValid());\r\n```",
      "created_at": "2025-06-27T10:47:51Z",
      "updated_at": "2025-06-27T12:24:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171607771",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171607771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1154,
      "original_line": 1154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171712231",
      "pull_request_review_id": 2965729639,
      "id": 2171712231,
      "node_id": "PRRC_kwDOABII586BcbLn",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};",
      "path": "src/test/transaction_tests.cpp",
      "position": 15,
      "original_position": 15,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In most docs I saw (e.g. https://learnmeabitcoin.com/technical/script/p2sh/#scriptsig), P2SH starts with an `OP_0` - I understand that this corresponds to an empty vector, but maybe we can simplify it in the tests:\r\n```suggestion\r\n    CScript max_sigops_redeem_script{CScript() << OP_0 << key.GetPubKey()};\r\n```\r\n\r\n<details>\r\n<summary>validation</summary>\r\n\r\n```C++\r\n    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\r\n    CScript max_sigops_redeem_script2{CScript() << OP_0 << key.GetPubKey()};\r\n    assert(max_sigops_redeem_script == max_sigops_redeem_script2);\r\n    assert(ScriptToAsmStr(max_sigops_redeem_script) == ScriptToAsmStr(max_sigops_redeem_script2));\r\n```\r\n\r\n</details>",
      "created_at": "2025-06-27T11:31:37Z",
      "updated_at": "2025-06-27T12:21:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171712231",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171712231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1062,
      "original_line": 1062,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171873609",
      "pull_request_review_id": 2965729639,
      "id": 2171873609,
      "node_id": "PRRC_kwDOABII586BdClJ",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's not immediately obvious that this is reducing the size of the existing inputs (especially since in other cases we did `reserve`), in this case maybe we could:\r\n```suggestion\r\n    tx_max_sigops.vin.pop_back();\r\n    // assert(tx_max_sigops.vin.size() == p2sh_inputs_count);\r\n```\r\nor add a comment here\r\n```suggestion\r\n    // Drop the extra input\r\n    tx_max_sigops.vin.resize(p2sh_inputs_count);\r\n```\r\nor do the deletion explicitly:\r\n```suggestion\r\n    tx_max_sigops.vin.erase(tx_max_sigops.vin.begin() + p2sh_inputs_count, tx_max_sigops.vin.end());\r\n```",
      "created_at": "2025-06-27T12:12:55Z",
      "updated_at": "2025-06-27T12:25:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2171873609",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2171873609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172077826",
      "pull_request_review_id": 2966641403,
      "id": 2172077826,
      "node_id": "PRRC_kwDOABII586Bd0cC",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171487154,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For policy no way does this slowdown matter. That said, since we're already doing the computation in both policy and consensus contexts, maybe we can just reuse it? https://github.com/instagibbs/bitcoin/tree/2025-06-patho-bip54\r\n\r\nit compiles",
      "created_at": "2025-06-27T13:42:23Z",
      "updated_at": "2025-06-27T13:42:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2172077826",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172077826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2173661408",
      "pull_request_review_id": 2969149872,
      "id": 2173661408,
      "node_id": "PRRC_kwDOABII586Bj3Dg",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171487154,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Doing a differential perf flame graph on b3bb4031 vs 1ba50d81 (master vs rebased `darosior:2503_nonstd_tx_sigops`) indicates the slowdown is indeed caused by both `AccessCoin` and the extra `CScript::GetSigOpCount` calls:\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/24ef8b91-bd9c-4fc0-be1a-1c7564d2a418\" />\r\n\r\n<details>\r\n<summary>Details</summary>\r\n\r\n```bash\r\nCOMMITS=\"b3bb4031ab32a1306c610f8683b25b8459b21dbc 1ba50d81b251c705aae872a2a9b37778ffa50c62\"; \\\r\nCC=gcc; CXX=g++; \\\r\nBASE=/mnt/my_storage; FG=$BASE/FlameGraph; LOG_DIR=\"$BASE/logs\"; OUT=$BASE/flamegraphs/bench-$(date +%s); mkdir -p \"$OUT\" \"$LOG_DIR\"; \\\r\nFILTER=\"CCoinsCaching\"; MIN_TIME=10000; \\\r\nexport CC CXX; \\\r\nflame_prepare(){ commit=$1; \\\r\n  git fetch -q origin \"$commit\" && git checkout -q \"$commit\" && \\\r\n  rm -rf build && \\\r\n  cmake -B build -G Ninja -DBUILD_BENCH=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\r\n    -DCMAKE_C_FLAGS=\"-g3 -ggdb -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer\" \\\r\n    -DCMAKE_CXX_FLAGS=\"-g3 -ggdb -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer\" && \\\r\n  ninja -C build bench_bitcoin; }; \\\r\nflame_execute(){ tag=${1:0:8}; \\\r\n  echo 100000 | sudo tee /proc/sys/kernel/perf_event_max_sample_rate >/dev/null; \\\r\n  echo 0 | sudo tee /proc/sys/kernel/kptr_restrict >/dev/null; \\\r\n  echo -1 | sudo tee /proc/sys/kernel/perf_event_paranoid >/dev/null; \\\r\n  perf record -F 99 -e cycles -g --call-graph fp -o \"$OUT/bench_$tag.data\" -- \\\r\n    build/bin/bench_bitcoin -filter=\"$FILTER\" --min-time=$MIN_TIME && \\\r\n  perf report --stdio -i \"$OUT/bench_$tag.data\" > \"$LOG_DIR/bench-report-$tag-$(date +%s).txt\" && \\\r\n  perf script -i \"$OUT/bench_$tag.data\" 2>/dev/null | \"$FG/stackcollapse-perf.pl\" > \"$OUT/bench_$tag.folded\" && \\\r\n  rm -f \"$OUT/bench_$tag.data\" && \\\r\n  \"$FG/flamegraph.pl\" --title \"Bench $FILTER $tag\" \"$OUT/bench_$tag.folded\" > \"$OUT/bench_$tag.svg\"; }; \\\r\nflame_diff(){ first=${1:0:8}; second=${2:0:8}; \\\r\n  \"$FG/difffolded.pl\" -n \"$OUT/bench_${first}.folded\" \"$OUT/bench_${second}.folded\" > \"$OUT/bench_${first}-${second}.folded\" && \\\r\n  \"$FG/flamegraph.pl\" --title \"Bench $FILTER $first-$second\" --colors hot --negate \\\r\n    \"$OUT/bench_${first}-${second}.folded\" > \"$OUT/bench_${first}-${second}.svg\"; }; \\\r\nA=${COMMITS%% *}; B=${COMMITS##* }; \\\r\nflame_prepare $A && flame_execute $A && \\\r\nflame_prepare $B && flame_execute $B && \\\r\nflame_diff $A $B && flame_diff $B $A; \\\r\necho \"Benchmark flamegraphs at: $OUT\"\r\n```\r\n\r\n> bench_b3bb4031.svg\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/b971e818-98b1-439c-b1d4-086476f66223\" />\r\n\r\n> bench_1ba50d81.svg\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/18555447-f657-4661-96c1-134460826a4e\" />\r\n\r\n</details>\r\n\r\n----\r\n\r\nComparing the current version with the [previous one](https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3013114686) mentioned by @Sjors indicates that it is indeed `AccessCoin` hashing that's causing the excessive slowdown:\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/73fa4ec0-014d-4419-a79b-64995c3600cc\" />\r\n\r\n\r\n----\r\n\r\nThe version @instagibbs posted (but given that `transaction_tests/max_standard_legacy_sigops` still fails it might not be reflective of a final solution yet) seems to be different enough to make comparison a bit harder to interpret:\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8bfd6ea0-3467-467d-b049-c27442963fea\" />\r\n\r\n\r\n----\r\n\r\n\r\nNote that [merging](https://github.com/l0rinc/bitcoin/commit/f2c6940781a8107075079bcaecc552294f07692c) the previous version of this pr with https://github.com/bitcoin/bitcoin/pull/32532 (optimizing the sigop operations) brings back the exact original performance of `AreInputsStandard`:\r\n\r\n> % build/bin/bench_bitcoin -filter='CCoinsCaching'\r\n\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              140.14 |        7,135,491.69 |    0.3% |      0.01 | `CCoinsCaching`\r\n|              140.99 |        7,092,774.75 |    0.4% |     11.01 | `CCoinsCaching`\r\n|              141.05 |        7,089,910.08 |    0.3% |     11.02 | `CCoinsCaching`\r\n\r\nThe differential flames also show that the additional script checks don't really change the outcome:\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/2a4c19d2-5e4e-4df9-9fb7-1809fdcc0f25\" />\r\n\r\nHowever, the optimizations in #32532 would also enable completely [eliminating the expensive `Solver` for all standard templates](https://github.com/l0rinc/bitcoin/commit/e52d051ec45b387c7ccccae64aba02b921704215), making standardness checks >2x faster on average:\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|               59.77 |       16,731,162.36 |    0.1% |     10.99 | `CCoinsCaching`\r\n|               59.73 |       16,740,845.93 |    0.1% |     10.99 | `CCoinsCaching`\r\n|               59.47 |       16,815,024.70 |    0.1% |     11.00 | `CCoinsCaching`\r\n\r\nThe differential flames confirm the lack of `Solver` calls:\r\n<img width=\"1000\" alt=\"image\" src=\"https://github.com/user-attachments/assets/9f252ee6-a8e2-4fd2-842d-c5e3cf3ed3de\" />\r\n",
      "created_at": "2025-06-29T08:56:54Z",
      "updated_at": "2025-06-29T11:33:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2173661408",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2173661408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174491505",
      "pull_request_review_id": 2970315718,
      "id": 2174491505,
      "node_id": "PRRC_kwDOABII586BnBtx",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": 20,
      "original_position": 20,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think there is any point in trying to micro-optimize this.",
      "created_at": "2025-06-30T08:14:30Z",
      "updated_at": "2025-06-30T08:14:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174491505",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174491505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174500469",
      "pull_request_review_id": 2970330473,
      "id": 2174500469,
      "node_id": "PRRC_kwDOABII586BnD51",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Asking because of\r\n\r\nThis is unrelated. Most sigops counted here are not counted in the old rule. In any case this change cannot lead to miners creating invalid blocks.",
      "created_at": "2025-06-30T08:19:24Z",
      "updated_at": "2025-06-30T08:19:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174500469",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174500469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174503497",
      "pull_request_review_id": 2970334928,
      "id": 2174503497,
      "node_id": "PRRC_kwDOABII586BnEpJ",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);",
      "path": "src/policy/policy.cpp",
      "position": 19,
      "original_position": 19,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171470960,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "~~Don't think that matters much, but i'll take your suggestion.~~ We are already exiting early. I don't think there is a need to duplicate the check after each increment to the `sigops` variable. I'll leave it like that.",
      "created_at": "2025-06-30T08:20:55Z",
      "updated_at": "2025-06-30T08:31:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174503497",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174503497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 186,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174515133",
      "pull_request_review_id": 2970353023,
      "id": 2174515133,
      "node_id": "PRRC_kwDOABII586BnHe9",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171487154,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In real usage `AreInputsStandard` is always called with a warm up cache so what you check here is not representative.",
      "created_at": "2025-06-30T08:27:00Z",
      "updated_at": "2025-06-30T08:27:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174515133",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174515133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174523500",
      "pull_request_review_id": 2970365632,
      "id": 2174523500,
      "node_id": "PRRC_kwDOABII586BnJhs",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> In any case this change cannot lead to miners creating invalid blocks.\r\n\r\nI know, what I was asking is how we expect the non-standardness of blocks to change because of this PR, i.e. how many blocks are usually mined that contradict the new rules and how we expect this PR to change that in time.",
      "created_at": "2025-06-30T08:31:00Z",
      "updated_at": "2025-06-30T08:31:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174523500",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174523500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174531192",
      "pull_request_review_id": 2970377505,
      "id": 2174531192,
      "node_id": "PRRC_kwDOABII586BnLZ4",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": 20,
      "original_position": 20,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The current implementation is ~66% slower, nothing \"micro\" about that. Very often we can make code simpler (i.e. having fewer moving parts) AND faster at the same time. This repeats work currently, so it's not as simple as it can get - what I'm suggesting is to explore that since the redundancy has a measurable cost.",
      "created_at": "2025-06-30T08:34:55Z",
      "updated_at": "2025-06-30T08:34:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174531192",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174531192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174535364",
      "pull_request_review_id": 2970383868,
      "id": 2174535364,
      "node_id": "PRRC_kwDOABII586BnMbE",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);",
      "path": "src/policy/policy.cpp",
      "position": 19,
      "original_position": 19,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171470960,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We're doing needless work in this case - calling the second sigop count calculation when we already know that we could exit early. This was the argument you gave against `return sigops <= MAX_TX_LEGACY_SIGOPS`. I would be fine with either, but this in-between needs a proper explanation in my opinion.",
      "created_at": "2025-06-30T08:37:05Z",
      "updated_at": "2025-06-30T08:37:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174535364",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174535364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 186,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174536803",
      "pull_request_review_id": 2970386120,
      "id": 2174536803,
      "node_id": "PRRC_kwDOABII586BnMxj",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171487154,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you update the benchmark to make it representative?",
      "created_at": "2025-06-30T08:37:54Z",
      "updated_at": "2025-06-30T08:37:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174536803",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174536803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174547626",
      "pull_request_review_id": 2970403018,
      "id": 2174547626,
      "node_id": "PRRC_kwDOABII586BnPaq",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171603715,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, dropped all unnecessary temporaries in `emplace_back`s from my unit test.",
      "created_at": "2025-06-30T08:43:35Z",
      "updated_at": "2025-06-30T08:43:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174547626",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174547626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174547674",
      "pull_request_review_id": 2970403107,
      "id": 2174547674,
      "node_id": "PRRC_kwDOABII586BnPba",
      "diff_hunk": "@@ -24,16 +25,23 @@\n     OP_IF,\n     OP_RETURN,\n     OP_TRUE,\n+    OP_2DUP,\n+    OP_DROP,\n+    OP_NOT,",
      "path": "test/functional/mempool_sigoplimit.py",
      "position": null,
      "original_position": 14,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171503978,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, done.",
      "created_at": "2025-06-30T08:43:36Z",
      "updated_at": "2025-06-30T08:43:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174547674",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174547674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174547736",
      "pull_request_review_id": 2970403202,
      "id": 2174547736,
      "node_id": "PRRC_kwDOABII586BnPcY",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2c636ba74cf0b7526b10d07c610b51adf0d57f9e",
      "in_reply_to_id": 2171495102,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure. I updated all usage of `BOOST_CHECK` that was checking for anything else than a boolean return value in my unit test to instead use `BOOST_CHECK_GT`, `BOOST_CHECK_LT` and `BOOST_CHECK_EQUAL`.",
      "created_at": "2025-06-30T08:43:38Z",
      "updated_at": "2025-06-30T08:43:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174547736",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174547736"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1096,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174554324",
      "pull_request_review_id": 2970413733,
      "id": 2174554324,
      "node_id": "PRRC_kwDOABII586BnRDU",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+\n+    // The transaction now still contains exactly 2500 sigops, the check should pass.\n+    AddCoins(coins, CTransaction(tx_create_segwit), 0, false);\n+    BOOST_REQUIRE(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Add one more P2PK input. We'll reach the limit.\n+    tx_create_p2pk.vout.emplace_back(212121, p2pk_script);\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    ++p2pk_inputs_count;\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));",
      "path": "src/test/transaction_tests.cpp",
      "position": 107,
      "original_position": 107,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171607771,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Otherwise it's harder to tell if it fails for the right reasons...\r\n\r\nThis is demonstrated through bounds checking. We check that `AreInputsStandard` passes, and check that it then fails by adding one more identical input.\r\n\r\n> i.e. that we could still mine these non-standard blocks?\r\n\r\nWe would not mine blocks with such transactions anymore, this is the whole point of this PR.",
      "created_at": "2025-06-30T08:47:09Z",
      "updated_at": "2025-06-30T08:47:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174554324",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174554324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1154,
      "original_line": 1154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174574795",
      "pull_request_review_id": 2970444883,
      "id": 2174574795,
      "node_id": "PRRC_kwDOABII586BnWDL",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};",
      "path": "src/test/transaction_tests.cpp",
      "position": 15,
      "original_position": 15,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171712231,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is unrelated. My code above is building the P2SH redeem script, i.e. the program being executed. You are referring to a specific instance of a scriptSig spending a multisig wrapped into a P2SH. The example you link pushes 2 signatures plus an empty push because of the off-by-one CHECKMULTISIG bug.\r\n\r\nBesides, your code suggestion is strictly functionally equivalent as `OP_0` pushes an empty vector on the stack. This diff will also result in the very same program since `OP_0` is `0x00` and pushing an empty vector will write a `0x00` size.",
      "created_at": "2025-06-30T08:57:27Z",
      "updated_at": "2025-06-30T08:57:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174574795",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174574795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1062,
      "original_line": 1062,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174575315",
      "pull_request_review_id": 2970445636,
      "id": 2174575315,
      "node_id": "PRRC_kwDOABII586BnWLT",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">  non-standardness of blocks to change because of this PR\r\n\r\nI don't get what you are asking here. I don't think there is such a thing as \"non-standardness of blocks\".",
      "created_at": "2025-06-30T08:57:42Z",
      "updated_at": "2025-06-30T08:57:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174575315",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174575315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174579276",
      "pull_request_review_id": 2970451837,
      "id": 2174579276,
      "node_id": "PRRC_kwDOABII586BnXJM",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);",
      "path": "src/test/transaction_tests.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171873609,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a comment, thanks.",
      "created_at": "2025-06-30T08:59:37Z",
      "updated_at": "2025-06-30T08:59:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174579276",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174579276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174599172",
      "pull_request_review_id": 2970483220,
      "id": 2174599172,
      "node_id": "PRRC_kwDOABII586BncAE",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171487154,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is still a micro benchmark, because the input standardness check is just a tiny fraction of stuff that gets actually checked when processing a new transaction. This could probably just be deleted, or replaced with a more comprehensive check of ProcessTransaction/ProcessNewPackage.",
      "created_at": "2025-06-30T09:09:58Z",
      "updated_at": "2025-06-30T09:09:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174599172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174599172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174849258",
      "pull_request_review_id": 2970873775,
      "id": 2174849258,
      "node_id": "PRRC_kwDOABII586BoZDq",
      "diff_hunk": "@@ -38,6 +38,8 @@ static constexpr unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE{65};\n static constexpr unsigned int MAX_P2SH_SIGOPS{15};\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n static constexpr unsigned int MAX_STANDARD_TX_SIGOPS_COST{MAX_BLOCK_SIGOPS_COST/5};\n+/** The maximum number of potentially executed legacy signature operations in a single standard tx */\n+static constexpr unsigned int MAX_TX_LEGACY_SIGOPS{2'500};",
      "path": "src/policy/policy.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171450864,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> non-standardness of blocks\r\n\r\ni.e. mined blocks that contain non-standard transactions - what's the accepted term for that?\r\n\r\n> I don't get what you are asking here\r\n\r\nDo we have data on how many main-chain transactions historically exceed the new threshold of 2500 legacy sigops?\r\nI’d like to confirm that the new policy would block no real-world traffic and is purely a preventive DoS measure ahead of any future BIP-54 soft-fork activation.",
      "created_at": "2025-06-30T11:26:57Z",
      "updated_at": "2025-06-30T11:26:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174849258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174849258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 42,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174859753",
      "pull_request_review_id": 2970889839,
      "id": 2174859753,
      "node_id": "PRRC_kwDOABII586Bobnp",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+\n+    // The transaction now still contains exactly 2500 sigops, the check should pass.\n+    AddCoins(coins, CTransaction(tx_create_segwit), 0, false);\n+    BOOST_REQUIRE(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Add one more P2PK input. We'll reach the limit.\n+    tx_create_p2pk.vout.emplace_back(212121, p2pk_script);\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    ++p2pk_inputs_count;\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));",
      "path": "src/test/transaction_tests.cpp",
      "position": 107,
      "original_position": 107,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171607771,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> We would not mine blocks with such transactions anymore, this is the whole point of this PR.\r\n\r\nI don't see how this PR is doing that currently.\r\nI understand that the point is to starve the miners of those pathological transactions before a future soft-fork makes the limit consensus-critical - but for now we have to make absolutely sure we don't accidentally do that and that it can still be mined, right? My question was if we can add that to the end of the test (which we can remove after we actually soft-fork).",
      "created_at": "2025-06-30T11:32:43Z",
      "updated_at": "2025-06-30T11:32:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174859753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174859753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1154,
      "original_line": 1154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174862347",
      "pull_request_review_id": 2970894121,
      "id": 2174862347,
      "node_id": "PRRC_kwDOABII586BocQL",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};",
      "path": "src/test/transaction_tests.cpp",
      "position": 15,
      "original_position": 15,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171712231,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> your code suggestion is strictly functionally equivalent\r\n\r\nYes, that's why I have suggested it:\r\n>  I understand that this corresponds to an empty vector, but maybe we can simplify it in the test",
      "created_at": "2025-06-30T11:34:24Z",
      "updated_at": "2025-06-30T11:34:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174862347",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174862347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1062,
      "original_line": 1062,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174901563",
      "pull_request_review_id": 2970953969,
      "id": 2174901563,
      "node_id": "PRRC_kwDOABII586Bol07",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": 20,
      "original_position": 20,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> The current implementation is ~66% slower\r\n\r\nThis is suggesting this PR makes transaction processing slower. It does not. The cost of adding an additional iteration through inputs is trivial compared to the total amount of work we do when processing a transaction. This seems silly to even state it. I don't know why you would fixate on this. Please let's spend our time on more important issues than removing the number of `for` loops used by the program.\r\n\r\n> This repeats work currently\r\n\r\nI'm aware. This was done for a good reason in response to a justified request from another reviewer https://github.com/bitcoin/bitcoin/pull/32521#issuecomment-3008736607.",
      "created_at": "2025-06-30T11:56:44Z",
      "updated_at": "2025-06-30T11:56:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174901563",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174901563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174904635",
      "pull_request_review_id": 2970958111,
      "id": 2174904635,
      "node_id": "PRRC_kwDOABII586Bomk7",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);",
      "path": "src/policy/policy.cpp",
      "position": 19,
      "original_position": 19,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171470960,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not planning on addressing this, as i think it would unnecessarily duplicate the check for no clear benefit.",
      "created_at": "2025-06-30T11:58:13Z",
      "updated_at": "2025-06-30T11:58:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174904635",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174904635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 186,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174917931",
      "pull_request_review_id": 2970978319,
      "id": 2174917931,
      "node_id": "PRRC_kwDOABII586Bop0r",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171487154,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Exactly. I think it's good to keep the benchmark but its results should not be over interpreted. It is focused on a tiny portion of the total work performed when processing a transaction. I locally have benchmarks of `ProcessTransaction` which i may share in the future. To give you an idea, they suggest (as can be expected from just reading the code) that total work in processing a transaction is *several* orders of magnitude higher than the work done in `AreInputsStandard`. And that's not even in the worst case.",
      "created_at": "2025-06-30T12:05:20Z",
      "updated_at": "2025-06-30T12:05:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174917931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174917931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174918740",
      "pull_request_review_id": 2970979648,
      "id": 2174918740,
      "node_id": "PRRC_kwDOABII586BoqBU",
      "diff_hunk": "",
      "path": "src/policy/policy.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171492254,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will address if i need to retouch.",
      "created_at": "2025-06-30T12:05:51Z",
      "updated_at": "2025-06-30T12:05:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174918740",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174918740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174930831",
      "pull_request_review_id": 2970998887,
      "id": 2174930831,
      "node_id": "PRRC_kwDOABII586Bos-P",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+\n+    // The transaction now still contains exactly 2500 sigops, the check should pass.\n+    AddCoins(coins, CTransaction(tx_create_segwit), 0, false);\n+    BOOST_REQUIRE(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Add one more P2PK input. We'll reach the limit.\n+    tx_create_p2pk.vout.emplace_back(212121, p2pk_script);\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    ++p2pk_inputs_count;\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));",
      "path": "src/test/transaction_tests.cpp",
      "position": 107,
      "original_position": 107,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171607771,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I don't see how this PR is doing that currently.\r\n\r\nWe only create block templates from the mempool. This PR prevents these transactions from being included in our mempool. As a result, we would never mine a block which include such transactions.\r\n\r\n> but for now we have to make absolutely sure we don't accidentally do that and that it can still be mined, right?\r\n\r\nI think what you are trying to say here is \"that we would still accept a block containing them\". That is, that we haven't accidentally made it invalid by consensus. This PR makes sure this is not the case by isolating these new checks: only a function that is never called during block validation is modified. You can verify this through code review. Further, this PR bundles a functional test which checks newly-non-standard transactions are still accepted in blocks.",
      "created_at": "2025-06-30T12:12:55Z",
      "updated_at": "2025-06-30T12:12:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174930831",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174930831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1154,
      "original_line": 1154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174931525",
      "pull_request_review_id": 2970999894,
      "id": 2174931525,
      "node_id": "PRRC_kwDOABII586BotJF",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};",
      "path": "src/test/transaction_tests.cpp",
      "position": 15,
      "original_position": 15,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171712231,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I won't be making this change.",
      "created_at": "2025-06-30T12:13:18Z",
      "updated_at": "2025-06-30T12:13:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174931525",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174931525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1062,
      "original_line": 1062,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174984218",
      "pull_request_review_id": 2971084083,
      "id": 2174984218,
      "node_id": "PRRC_kwDOABII586Bo6Aa",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+\n+    // The transaction now still contains exactly 2500 sigops, the check should pass.\n+    AddCoins(coins, CTransaction(tx_create_segwit), 0, false);\n+    BOOST_REQUIRE(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Add one more P2PK input. We'll reach the limit.\n+    tx_create_p2pk.vout.emplace_back(212121, p2pk_script);\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    ++p2pk_inputs_count;\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));",
      "path": "src/test/transaction_tests.cpp",
      "position": 107,
      "original_position": 107,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171607771,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think what you are trying to say here is \"that we would still accept a block containing them\".\r\n\r\nI wasn't just \"trying\", it's what I said.\r\n\r\n> You can verify this through code review\r\n\r\nI'd like a unit test to verify that instead, that's what I've been asking if we can extend the unit test to makes sure we still accept these non-standard transactions.\r\n\r\n> functional test which checks newly-non-standard transactions are still accepted in blocks\r\n\r\nYes, that's what I was asking to add to the unit test as well. \r\nhttps://github.com/bitcoin/bitcoin/pull/32521/files#diff-7a25310a1ae3883aca989cd736212222e6abca6eea25e7d59ea7059b38d76ea0R220\r\n> Make sure the original, non-standard, transaction can be mined\r\n\r\nI can accept if you think that's not necessary, but not sure I understand why it's difficult request...",
      "created_at": "2025-06-30T12:42:37Z",
      "updated_at": "2025-06-30T12:42:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174984218",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174984218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1154,
      "original_line": 1154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174984440",
      "pull_request_review_id": 2971084456,
      "id": 2174984440,
      "node_id": "PRRC_kwDOABII586Bo6D4",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};",
      "path": "src/policy/policy.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "27e54beff7d1c9ac68bee379bb6d971a775b9841",
      "in_reply_to_id": 2171487154,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You can also add a warmup round if you think that's more representative:\r\n```C++\r\n    bench.warmup(1).run([&] {\r\n        bool success{AreInputsStandard(tx_1, coins)};\r\n        assert(success);\r\n    });\r\n```\r\n\r\nThough that doesn't change the numbers for me:\r\n\r\nBefore:\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              140.41 |        7,122,118.63 |    0.4% |      1.10 | `CCoinsCaching`\r\n\r\nAfter:\r\n|               ns/op |                op/s |    err% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------:|:----------\r\n|              210.86 |        4,742,579.56 |    0.3% |      1.10 | `CCoinsCaching`\r\n\r\n---\r\n\r\nOr we could iterate over a known block to make it more representative, something like:\r\n```C++\r\n#include <bench/bench.h>\r\n#include <bench/data/block413567.raw.h>\r\n#include <coins.h>\r\n#include <policy/policy.h>\r\n#include <primitives/transaction.h>\r\n#include <script/signingprovider.h>\r\n#include <streams.h>\r\n\r\n#include <cassert>\r\n#include <vector>\r\n\r\nstatic void CCoinsCaching(benchmark::Bench& bench)\r\n{\r\n    CCoinsView coins_dummy;\r\n    CCoinsViewCache coins(&coins_dummy);\r\n\r\n    DataStream stream{benchmark::data::block413567};\r\n    CBlock block;\r\n    stream >> TX_WITH_WITNESS(block);\r\n\r\n    for (const auto& tx : block.vtx) {\r\n        if (tx->IsCoinBase()) continue;\r\n        for (const CTxIn& in : tx->vin) {\r\n            // TODO: Add a matching Coin for in.prevout to `coins`\r\n        }\r\n    }\r\n\r\n    bench.warmup(1).run([&] { // we don't even need warmup round anymore\r\n        for (const auto& tx : block.vtx) {\r\n            if (tx->IsCoinBase()) continue;\r\n            assert(AreInputsStandard(*tx, coins));\r\n        }\r\n    });\r\n}\r\n\r\nBENCHMARK(CCoinsCaching, benchmark::PriorityLevel::HIGH);\r\n```\r\n\r\n-----\r\n\r\nOr maybe we could customize [the `ProcessTransactionBench` I added to a different PR](https://github.com/bitcoin/bitcoin/pull/31682/commits/0118f63caa6d154385896bd7f938cb9dc1dbbcaa) to the current scenario so that it's more representative. Or yours, if you think that's better, I don't mind either way.\r\n\r\n",
      "created_at": "2025-06-30T12:42:46Z",
      "updated_at": "2025-06-30T12:42:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174984440",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174984440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174993741",
      "pull_request_review_id": 2971099545,
      "id": 2174993741,
      "node_id": "PRRC_kwDOABII586Bo8VN",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": 20,
      "original_position": 20,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> this PR makes transaction processing slower. It does not\r\n\r\n> This seems silly to even state it. \r\n\r\nIt's no silly, others have added a dedicated benchmark for this exact method.\r\nAnd I don't appreciate this patronizing tone.",
      "created_at": "2025-06-30T12:47:41Z",
      "updated_at": "2025-06-30T12:47:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2174993741",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2174993741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175160806",
      "pull_request_review_id": 2971369405,
      "id": 2175160806,
      "node_id": "PRRC_kwDOABII586BplHm",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+\n+    // The transaction now still contains exactly 2500 sigops, the check should pass.\n+    AddCoins(coins, CTransaction(tx_create_segwit), 0, false);\n+    BOOST_REQUIRE(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Add one more P2PK input. We'll reach the limit.\n+    tx_create_p2pk.vout.emplace_back(212121, p2pk_script);\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    ++p2pk_inputs_count;\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));",
      "path": "src/test/transaction_tests.cpp",
      "position": 107,
      "original_position": 107,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171607771,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "More accurate error/standardness failure reporting can be done later through #29060.",
      "created_at": "2025-06-30T14:02:42Z",
      "updated_at": "2025-06-30T14:02:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2175160806",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175160806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1154,
      "original_line": 1154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175175517",
      "pull_request_review_id": 2971395036,
      "id": 2175175517,
      "node_id": "PRRC_kwDOABII586Bpotd",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": 20,
      "original_position": 20,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Apologies if that came across as patronizing, this was not my intention. That said, you should expect to receive pushback if you insistently derail a PR with irrelevant concerns.",
      "created_at": "2025-06-30T14:10:04Z",
      "updated_at": "2025-06-30T14:10:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2175175517",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175175517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175176935",
      "pull_request_review_id": 2971397633,
      "id": 2175176935,
      "node_id": "PRRC_kwDOABII586BppDn",
      "diff_hunk": "@@ -168,6 +168,32 @@ bool IsStandardTx(const CTransaction& tx, const std::optional<unsigned>& max_dat\n     return true;\n }\n \n+/**\n+ * Check the total number of non-witness sigops across the whole transaction, as per BIP54.\n+ */\n+static bool CheckSigopsBIP54(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    Assert(!tx.IsCoinBase());\n+\n+    unsigned int sigops{0};\n+    for (unsigned i{0}; i < tx.vin.size(); ++i) {\n+        const auto& prev_txo{inputs.AccessCoin(tx.vin[i].prevout).out};\n+\n+        // Unlike the existing block wide sigop limit, BIP54 counts sigops when they are actually executed.\n+        // This means sigops in the spent scriptpubkey count toward the limit.\n+        // `fAccurate` means correctly accounting sigops for CHECKMULTISIGs with 16 pubkeys or less. This\n+        // method of accounting was introduced by BIP16, and BIP54 reuses it.\n+        sigops += tx.vin[i].scriptSig.GetSigOpCount(/*fAccurate=*/true);\n+        sigops += prev_txo.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);",
      "path": "src/policy/policy.cpp",
      "position": 20,
      "original_position": 20,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171446494,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the code is fine as-is, i don't plan on doing anything else here so will resolve this thread.",
      "created_at": "2025-06-30T14:10:49Z",
      "updated_at": "2025-06-30T14:10:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2175176935",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175176935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175235373",
      "pull_request_review_id": 2971491569,
      "id": 2175235373,
      "node_id": "PRRC_kwDOABII586Bp3Ut",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS < MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, p2sh_inputs_count), max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 == MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+\n+    // The transaction now still contains exactly 2500 sigops, the check should pass.\n+    AddCoins(coins, CTransaction(tx_create_segwit), 0, false);\n+    BOOST_REQUIRE(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Add one more P2PK input. We'll reach the limit.\n+    tx_create_p2pk.vout.emplace_back(212121, p2pk_script);\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count);\n+    ++p2pk_inputs_count;\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(COutPoint(prev_txid, i));\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+    BOOST_CHECK(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1 > MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));",
      "path": "src/test/transaction_tests.cpp",
      "position": 107,
      "original_position": 107,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "2ead56f0d28ac8ca288e8a6d0f19ec328a7e4171",
      "in_reply_to_id": 2171607771,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That this does not touch consensus can be ensured through code review and is also validated through a functional test. I don't think anything else is necessary to do here, so i'm going to resolve this thread.",
      "created_at": "2025-06-30T14:37:50Z",
      "updated_at": "2025-06-30T14:37:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2175235373",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175235373"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1154,
      "original_line": 1154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175236097",
      "pull_request_review_id": 2971492745,
      "id": 2175236097,
      "node_id": "PRRC_kwDOABII586Bp3gB",
      "diff_hunk": "@@ -1048,4 +1048,110 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     CheckIsNotStandard(t, \"dust\");\n }\n \n+BOOST_AUTO_TEST_CASE(max_standard_legacy_sigops)\n+{\n+    CCoinsView coins_dummy;\n+    CCoinsViewCache coins(&coins_dummy);\n+    SignatureData dummy_sigdata;\n+    FillableSigningProvider keystore;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    BOOST_REQUIRE(keystore.AddKey(key));\n+\n+    // Create a pathological P2SH script padded with as many sigops as is standard.\n+    CScript max_sigops_redeem_script{CScript() << std::vector<unsigned char>{} << key.GetPubKey()};\n+    for (unsigned i{0}; i < MAX_P2SH_SIGOPS - 1; ++i) max_sigops_redeem_script << OP_2DUP << OP_CHECKSIG << OP_DROP;\n+    max_sigops_redeem_script << OP_CHECKSIG << OP_NOT;\n+    const CScript max_sigops_p2sh{GetScriptForDestination(ScriptHash(max_sigops_redeem_script))};\n+\n+    // Create a transaction fanning out as many such P2SH outputs as is standard to spend in a\n+    // single transaction, and a transaction spending them.\n+    CMutableTransaction tx_create, tx_max_sigops;\n+    const unsigned p2sh_inputs_count{MAX_TX_LEGACY_SIGOPS / MAX_P2SH_SIGOPS};\n+    tx_create.vout.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_create.vout.emplace_back(424242 + i, max_sigops_p2sh);\n+    }\n+    auto prev_txid{tx_create.GetHash()};\n+    tx_max_sigops.vin.reserve(p2sh_inputs_count);\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(prev_txid, i, max_sigops_redeem_script);\n+    }\n+\n+    // p2sh_inputs_count is truncated to 166 (from 166.6666..)\n+    BOOST_CHECK_LT(p2sh_inputs_count * MAX_P2SH_SIGOPS, MAX_TX_LEGACY_SIGOPS);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+\n+    // 2490 sigops is below the limit.\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Adding one more input will bump this to 2505, hitting the limit.\n+    tx_create.vout.emplace_back(424242, max_sigops_p2sh);\n+    prev_txid = tx_create.GetHash();\n+    for (unsigned i{0}; i < p2sh_inputs_count; ++i) {\n+        tx_max_sigops.vin[i] = CTxIn(COutPoint(prev_txid, i), max_sigops_redeem_script);\n+    }\n+    tx_max_sigops.vin.emplace_back(prev_txid, p2sh_inputs_count, max_sigops_redeem_script);\n+    AddCoins(coins, CTransaction(tx_create), 0, false);\n+    BOOST_CHECK_GT((p2sh_inputs_count + 1) * MAX_P2SH_SIGOPS, MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, check the limit can be reached with regular P2PK outputs too. Use a separate\n+    // preparation transaction, to demonstrate spending coins from a single tx is irrelevant.\n+    CMutableTransaction tx_create_p2pk;\n+    const auto p2pk_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    unsigned p2pk_inputs_count{10}; // From 2490 to 2500.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_create_p2pk.vout.emplace_back(212121 + i, p2pk_script);\n+    }\n+    prev_txid = tx_create_p2pk.GetHash();\n+    tx_max_sigops.vin.resize(p2sh_inputs_count); // Drop the extra input.\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        tx_max_sigops.vin.emplace_back(prev_txid, i);\n+    }\n+    for (unsigned i{0}; i < p2pk_inputs_count; ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_p2pk), tx_max_sigops, p2sh_inputs_count + i, SIGHASH_ALL, dummy_sigdata));\n+    }\n+    AddCoins(coins, CTransaction(tx_create_p2pk), 0, false);\n+\n+    // The transaction now contains exactly 2500 sigops, the check should pass.\n+    BOOST_CHECK_EQUAL(p2sh_inputs_count * MAX_P2SH_SIGOPS + p2pk_inputs_count * 1, MAX_TX_LEGACY_SIGOPS);\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(tx_max_sigops), coins));\n+\n+    // Now, add some Segwit inputs. We add one for each defined Segwit output type. The limit\n+    // is exclusively on non-witness sigops and therefore those should not be counted.\n+    CMutableTransaction tx_create_segwit;\n+    const auto witness_script{CScript() << key.GetPubKey() << OP_CHECKSIG};\n+    tx_create_segwit.vout.emplace_back(121212, GetScriptForDestination(WitnessV0KeyHash(key.GetPubKey())));\n+    tx_create_segwit.vout.emplace_back(131313, GetScriptForDestination(WitnessV0ScriptHash(witness_script)));\n+    tx_create_segwit.vout.emplace_back(141414, GetScriptForDestination(WitnessV1Taproot{XOnlyPubKey(key.GetPubKey())}));\n+    prev_txid = tx_create_segwit.GetHash();\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        tx_max_sigops.vin.emplace_back(prev_txid, i);\n+    }\n+    keystore.AddCScript(witness_script);\n+    for (unsigned i{0}; i < tx_create_segwit.vout.size(); ++i) {\n+        BOOST_REQUIRE(SignSignature(keystore, CTransaction(tx_create_segwit), tx_max_sigops, tx_max_sigops.vin.size() - 1 - i, SIGHASH_ALL, dummy_sigdata));",
      "path": "src/test/transaction_tests.cpp",
      "position": 87,
      "original_position": 87,
      "commit_id": "ceeb1ebb2f463919a44b0bf3ba24f9b7f814bb5e",
      "original_commit_id": "dfb4bc73be2db8f98a1701eae4d3d3a9e2f7314e",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could we just skip signing them?",
      "created_at": "2025-06-30T14:38:11Z",
      "updated_at": "2025-06-30T14:38:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32521#discussion_r2175236097",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175236097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32521"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1134,
      "original_line": 1134,
      "side": "RIGHT"
    }
  ]
}