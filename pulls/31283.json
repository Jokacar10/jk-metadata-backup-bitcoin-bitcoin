{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283",
    "id": 2177252265,
    "node_id": "PR_kwDOABII586Bxjup",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31283",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31283.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31283.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/276ce2eea38865154017047f3761225c2b504cf6",
    "number": 31283,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Add waitNext() to BlockTemplate interface",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This PR introduces `waitNext()`. It waits for either the tip to update or for fees at the top of the mempool to rise sufficiently. It then returns a new template, with which the caller can rinse and repeat.\r\n\r\nOn testnet3 and testnet4 the difficulty drops after 20 minutes, so the second ensures that a new template is returned in that case.\r\n\r\nAlternative approach to #31003, suggested in https://github.com/bitcoin/bitcoin/issues/31109#issuecomment-2451942362",
    "labels": [],
    "created_at": "2024-11-13T12:30:36Z",
    "updated_at": "2025-02-04T17:32:57Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "ad1f8ba900be40b4ff5939e768a7c356e46306da",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "Sjors:2024/11/wait-next",
      "ref": "2024/11/wait-next",
      "sha": "276ce2eea38865154017047f3761225c2b504cf6",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 92390696,
        "node_id": "MDEwOlJlcG9zaXRvcnk5MjM5MDY5Ng==",
        "name": "bitcoin",
        "full_name": "Sjors/bitcoin",
        "owner": {
          "login": "Sjors",
          "id": 10217,
          "node_id": "MDQ6VXNlcjEwMjE3",
          "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Sjors",
          "html_url": "https://github.com/Sjors",
          "followers_url": "https://api.github.com/users/Sjors/followers",
          "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
          "organizations_url": "https://api.github.com/users/Sjors/orgs",
          "repos_url": "https://api.github.com/users/Sjors/repos",
          "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Sjors/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/Sjors/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Sjors/bitcoin",
        "archive_url": "https://api.github.com/repos/Sjors/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Sjors/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Sjors/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Sjors/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Sjors/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Sjors/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Sjors/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Sjors/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Sjors/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Sjors/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Sjors/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Sjors/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Sjors/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Sjors/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Sjors/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Sjors/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Sjors/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Sjors/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Sjors/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Sjors/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Sjors/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Sjors/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Sjors/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Sjors/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Sjors/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Sjors/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Sjors/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Sjors/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Sjors/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Sjors/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Sjors/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Sjors/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Sjors/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Sjors/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Sjors/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Sjors/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Sjors/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Sjors/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Sjors/bitcoin/hooks",
        "svn_url": "https://github.com/Sjors/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 10,
        "stargazers_count": 10,
        "watchers_count": 10,
        "size": 256053,
        "default_branch": "sv2",
        "open_issues_count": 12,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": false,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-02-04T15:38:48Z",
        "created_at": "2017-05-25T10:05:54Z",
        "updated_at": "2025-01-27T12:37:49Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "1172bc4157eefe80d1aaf0b56459857ec651e535",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36662,
        "stargazers_count": 81809,
        "watchers_count": 81809,
        "size": 275076,
        "default_branch": "master",
        "open_issues_count": 700,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-02-04T10:10:33Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-02-04T17:39:00Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 241,
    "deletions": 9,
    "changed_files": 8,
    "commits": 2,
    "review_comments": 92,
    "comments": 29
  },
  "events": [
    {
      "event": "commented",
      "id": 2473478992,
      "node_id": "IC_kwDOABII586TbktQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2473478992",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T12:30:39Z",
      "updated_at": "2025-02-04T06:10:25Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31283.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [vasild](https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2589664657) |\n| Stale ACK | [ryanofsky](https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2572838684) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31564](https://github.com/bitcoin/bitcoin/pull/31564) (Add checkblock RPC and checkBlock() to Mining interface by Sjors)\n* [#31384](https://github.com/bitcoin/bitcoin/pull/31384) (mining: bugfix: Fix duplicate coinbase tx weight reservation by ismaelsadeeq)\n* [#26812](https://github.com/bitcoin/bitcoin/pull/26812) (test: add end-to-end tests for CConnman and PeerManager by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2473478992",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "reviewed",
      "id": 2432977782,
      "node_id": "PRR_kwDOABII586RBEt2",
      "url": null,
      "actor": null,
      "commit_id": "f955b8e406bff8e833e8f130a71c73305dfe5f0b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2432977782",
      "submitted_at": "2024-11-13T12:34:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "reviewed",
      "id": 2432984860,
      "node_id": "PRR_kwDOABII586RBGcc",
      "url": null,
      "actor": null,
      "commit_id": "f955b8e406bff8e833e8f130a71c73305dfe5f0b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2432984860",
      "submitted_at": "2024-11-13T12:37:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "commented",
      "id": 2474606749,
      "node_id": "IC_kwDOABII586Tf4Cd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2474606749",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T19:46:36Z",
      "updated_at": "2024-11-13T19:46:36Z",
      "author_association": "MEMBER",
      "body": "I pushed a commit refactoring `miner_tests` to use the `Mining` interface. I plan to expand those tests to cover `waitNext()`.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2474606749",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "reviewed",
      "id": 2434267353,
      "node_id": "PRR_kwDOABII586RF_jZ",
      "url": null,
      "actor": null,
      "commit_id": "a316ba58cba5df8aadb05737959b97eeb6a350b4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2434267353",
      "submitted_at": "2024-11-13T19:47:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "reviewed",
      "id": 2434275875,
      "node_id": "PRR_kwDOABII586RGBoj",
      "url": null,
      "actor": null,
      "commit_id": "a316ba58cba5df8aadb05737959b97eeb6a350b4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2434275875",
      "submitted_at": "2024-11-13T19:51:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "labeled",
      "id": 15288912632,
      "node_id": "LE_lADOABII586eRRMpzwAAAAOPSkr4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15288912632",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T20:24:18Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2474713460,
      "node_id": "IC_kwDOABII586TgSF0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2474713460",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T20:24:19Z",
      "updated_at": "2024-11-13T20:24:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/32946689392</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2474713460",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15289184341,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOPTnBV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15289184341",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6b9b3a1e8941d61250a9d7922382f20c038f3e8d",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/6b9b3a1e8941d61250a9d7922382f20c038f3e8d",
      "created_at": "2024-11-13T20:52:39Z"
    },
    {
      "event": "unlabeled",
      "id": 15289529385,
      "node_id": "UNLE_lADOABII586eRRMpzwAAAAOPU7Qp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15289529385",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-13T21:26:24Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15297670690,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOPz-4i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15297670690",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "53f28453b1888a132f0d800ceb53c632e7b5baca",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/53f28453b1888a132f0d800ceb53c632e7b5baca",
      "created_at": "2024-11-14T12:16:20Z"
    },
    {
      "event": "commented",
      "id": 2476210165,
      "node_id": "IC_kwDOABII586Tl_f1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2476210165",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T12:17:23Z",
      "updated_at": "2024-11-14T12:17:55Z",
      "author_association": "MEMBER",
      "body": "I made the test code alternate calls between Chainman's `ProcessNewBlock` and `submitSolution` via the Mining interface. The latter approach is much simpler, but both are used in production code, so should be covered.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2476210165",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15297741161,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOP0QFp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15297741161",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "557004f9320320c54de2740a4aa35778cc4f5223",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/557004f9320320c54de2740a4aa35778cc4f5223",
      "created_at": "2024-11-14T12:22:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15298116483,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOP1ruD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15298116483",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "936f055dcd1e0c19a59bc59e569d0f301c8082c1",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/936f055dcd1e0c19a59bc59e569d0f301c8082c1",
      "created_at": "2024-11-14T12:53:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15298248839,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOP2MCH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15298248839",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "41f83a20497e4847c34104508fcf8a220907e1d1",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/41f83a20497e4847c34104508fcf8a220907e1d1",
      "created_at": "2024-11-14T13:04:42Z"
    },
    {
      "event": "ready_for_review",
      "id": 15298254075,
      "node_id": "RFRE_lADOABII586eRRMpzwAAAAOP2NT7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15298254075",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T13:05:07Z"
    },
    {
      "event": "commented",
      "id": 2476309704,
      "node_id": "IC_kwDOABII586TmXzI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2476309704",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T13:05:23Z",
      "updated_at": "2024-11-14T13:05:23Z",
      "author_association": "MEMBER",
      "body": "I added test coverage for `waitNext()`.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2476309704",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15298306814,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOP2aL-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15298306814",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bc05bc0978139d6dddae52b44e40e50b06066ab7",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/bc05bc0978139d6dddae52b44e40e50b06066ab7",
      "created_at": "2024-11-14T13:09:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15298399299,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOP2wxD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15298399299",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c931a4733e128d06d66b341f7736e2533e5c3365",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/c931a4733e128d06d66b341f7736e2533e5c3365",
      "created_at": "2024-11-14T13:16:55Z"
    },
    {
      "event": "commented",
      "id": 2476337636,
      "node_id": "IC_kwDOABII586Tmenk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2476337636",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T13:18:28Z",
      "updated_at": "2024-11-14T13:18:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "In commit f9200f6c65b5a97a4842cc1ec34e688ec13bffcd\r\n\r\n\"Use createNewBlock via the interface instead of calling Chainman's CreateNewBlock.\"\r\n\r\nDo you mean \"Use createNewBlock via the interface instead of calling CreateNewBlock through the BlockAssembler directly\"? There is no `CreateNewBlock` in the chainman.",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2476337636",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15298564133,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOP3ZAl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15298564133",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "171c116912e289a4debfcaa1d04179bd200acb1b",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/171c116912e289a4debfcaa1d04179bd200acb1b",
      "created_at": "2024-11-14T13:30:15Z"
    },
    {
      "event": "commented",
      "id": 2476365392,
      "node_id": "IC_kwDOABII586TmlZQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2476365392",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T13:31:07Z",
      "updated_at": "2024-11-14T13:31:07Z",
      "author_association": "MEMBER",
      "body": "Made some adjustments based on https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1842225267",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2476365392",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15298607727,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOP3jpv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15298607727",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e5a9b7321041f9790774b0597a431c81c6305607",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/e5a9b7321041f9790774b0597a431c81c6305607",
      "created_at": "2024-11-14T13:33:43Z"
    },
    {
      "event": "commented",
      "id": 2476371060,
      "node_id": "IC_kwDOABII586Tmmx0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2476371060",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T13:33:54Z",
      "updated_at": "2024-11-14T13:33:54Z",
      "author_association": "MEMBER",
      "body": "@TheCharlatan I adjusted the commit message",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2476371060",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "mentioned",
      "id": 15298610269,
      "node_id": "MEE_lADOABII586eRRMpzwAAAAOP3kRd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15298610269",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T13:33:55Z"
    },
    {
      "event": "subscribed",
      "id": 15298610303,
      "node_id": "SE_lADOABII586eRRMpzwAAAAOP3kR_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15298610303",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-14T13:33:55Z"
    },
    {
      "event": "reviewed",
      "id": 2438289769,
      "node_id": "PRR_kwDOABII586RVVlp",
      "url": null,
      "actor": null,
      "commit_id": "e5a9b7321041f9790774b0597a431c81c6305607",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2438289769",
      "submitted_at": "2024-11-15T10:55:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15315712415,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOQ4zmf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15315712415",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fdfab036a1e34fa06bb5866c01ae501c0d25f42f",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/fdfab036a1e34fa06bb5866c01ae501c0d25f42f",
      "created_at": "2024-11-15T17:37:00Z"
    },
    {
      "event": "commented",
      "id": 2479552572,
      "node_id": "IC_kwDOABII586Tyvg8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2479552572",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-15T17:37:58Z",
      "updated_at": "2024-11-15T17:38:10Z",
      "author_association": "MEMBER",
      "body": "Added early return logic. Similar to #31297 this would be less tedious if `notifications().m_tip_block` was set to the tip earlier.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2479552572",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "commented",
      "id": 2485727139,
      "node_id": "IC_kwDOABII586UKS-j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2485727139",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-19T13:33:06Z",
      "updated_at": "2024-11-19T13:33:06Z",
      "author_association": "MEMBER",
      "body": "Marking this draft, let's review the early return and m_tip_block block changes in #31297 first. ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2485727139",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "convert_to_draft",
      "id": 15349633791,
      "node_id": "CTDE_lADOABII586eRRMpzwAAAAOS6NL_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15349633791",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-19T13:33:12Z"
    },
    {
      "event": "commented",
      "id": 2486536906,
      "node_id": "IC_kwDOABII586UNYrK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2486536906",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-19T19:11:10Z",
      "updated_at": "2024-11-19T19:11:10Z",
      "author_association": "MEMBER",
      "body": "#31297 is on hold, as it's probably unnecessary.\r\n\r\nPlease review #31325 first, so I can decide whether to build this PR on top of it.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2486536906",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "labeled",
      "id": 15368369211,
      "node_id": "LE_lADOABII586eRRMpzwAAAAOUBrQ7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15368369211",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-20T14:48:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 15369254040,
      "node_id": "REFE_lADOABII586eRRMpzwAAAAOUFDSY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15369254040",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "22ef95dbe3e467039e6cd18988e66557d94041d1",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22ef95dbe3e467039e6cd18988e66557d94041d1",
      "created_at": "2024-11-20T15:45:54Z"
    },
    {
      "event": "commented",
      "id": 2491178957,
      "node_id": "IC_kwDOABII586UfF_N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2491178957",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T13:35:31Z",
      "updated_at": "2024-11-21T13:40:03Z",
      "author_association": "MEMBER",
      "body": "Rebased after #31288 and #31122.\r\n\r\nThis PR is now based on #31325 since that has enough support. Keeping this draft until that's merged (or dropped).\r\n\r\nThe test changes will probably cause a merge conflict with #31318, but it should be trivial. Ditto for the `waitNext()` implementation since that would no longer need to pump `script_pub_key` around.\r\n\r\nI dropped the early return in `waitNext()` because `wait_until` should already take care of that. I also made the while loop use `<=` instead of `<` so this actually works: https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1843589729 Added a test for that.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2491178957",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15382046063,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOU12Vv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15382046063",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3dbb27f7175557ede20ef5537c34396d56de9220",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/3dbb27f7175557ede20ef5537c34396d56de9220",
      "created_at": "2024-11-21T13:35:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15382088520,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOU2AtI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15382088520",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "245660284de8b4ac29428737f088c22cb2812037",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/245660284de8b4ac29428737f088c22cb2812037",
      "created_at": "2024-11-21T13:37:46Z"
    },
    {
      "event": "unlabeled",
      "id": 15382357720,
      "node_id": "UNLE_lADOABII586eRRMpzwAAAAOU3CbY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15382357720",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T13:50:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15397785098,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOVx44K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15397785098",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5d294d86f43c83603b5d965eff36c90159c6bffe",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/5d294d86f43c83603b5d965eff36c90159c6bffe",
      "created_at": "2024-11-22T13:47:31Z"
    },
    {
      "event": "commented",
      "id": 2493816544,
      "node_id": "IC_kwDOABII586UpJ7g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2493816544",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-22T13:50:50Z",
      "updated_at": "2024-11-22T13:50:50Z",
      "author_association": "MEMBER",
      "body": "Fixed a bug found while testing https://github.com/Sjors/bitcoin/pull/49, where it was spuriously making new block templates every tick even if fees didn't rise. [diff](\r\nhttps://github.com/bitcoin/bitcoin/compare/245660284de8b4ac29428737f088c22cb2812037..5d294d86f43c83603b5d965eff36c90159c6bffe)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2493816544",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "reviewed",
      "id": 2455447961,
      "node_id": "PRR_kwDOABII586SWymZ",
      "url": null,
      "actor": null,
      "commit_id": "5d294d86f43c83603b5d965eff36c90159c6bffe",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2455447961",
      "submitted_at": "2024-11-22T19:15:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "referenced",
      "id": 15477695428,
      "node_id": "REFE_lADOABII586eRRMpzwAAAAOaiuPE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15477695428",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a8da99a25e98de19b221184d95e49209eceb015d",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/a8da99a25e98de19b221184d95e49209eceb015d",
      "created_at": "2024-11-29T16:52:57Z"
    },
    {
      "event": "referenced",
      "id": 15498172728,
      "node_id": "REFE_lADOABII586eRRMpzwAAAAObw1k4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15498172728",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9634b8ae0075fe9687e9a96f9b314052c1ed9f55",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/9634b8ae0075fe9687e9a96f9b314052c1ed9f55",
      "created_at": "2024-12-02T19:11:25Z"
    },
    {
      "event": "referenced",
      "id": 15498710574,
      "node_id": "REFE_lADOABII586eRRMpzwAAAAOby44u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15498710574",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "392967375b78f787be43091173e4a9517036686f",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/392967375b78f787be43091173e4a9517036686f",
      "created_at": "2024-12-02T20:03:04Z"
    },
    {
      "event": "labeled",
      "id": 15516726650,
      "node_id": "LE_lADOABII586eRRMpzwAAAAOc3nV6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15516726650",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-03T22:14:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15519511766,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOdCPTW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15519511766",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3aba20ec05dba94a4ec7f570b68315057a973833",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/3aba20ec05dba94a4ec7f570b68315057a973833",
      "created_at": "2024-12-04T05:43:42Z"
    },
    {
      "event": "commented",
      "id": 2516244533,
      "node_id": "IC_kwDOABII586V-tg1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2516244533",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-04T05:44:18Z",
      "updated_at": "2024-12-04T05:44:18Z",
      "author_association": "MEMBER",
      "body": "Rebased after #31112.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2516244533",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15519554240,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOdCZrA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15519554240",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "84718f2f27aa319495b1f65f85edc2c9698b4951",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/84718f2f27aa319495b1f65f85edc2c9698b4951",
      "created_at": "2024-12-04T05:49:54Z"
    },
    {
      "event": "unlabeled",
      "id": 15519876784,
      "node_id": "UNLE_lADOABII586eRRMpzwAAAAOdDoaw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15519876784",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-04T06:32:47Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 15649459662,
      "node_id": "LE_lADOABII586eRRMpzwAAAAOkx83O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15649459662",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-13T14:22:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15655693808,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOlJu3w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15655693808",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9be5446c0924159baeb052d2b9bc092fbf34e34d",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/9be5446c0924159baeb052d2b9bc092fbf34e34d",
      "created_at": "2024-12-14T04:38:22Z"
    },
    {
      "event": "commented",
      "id": 2542812379,
      "node_id": "IC_kwDOABII586XkDzb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2542812379",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-14T04:38:24Z",
      "updated_at": "2024-12-14T04:38:24Z",
      "author_association": "MEMBER",
      "body": "Rebased after https://github.com/bitcoin/bitcoin/pull/31346.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2542812379",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "unlabeled",
      "id": 15655780452,
      "node_id": "UNLE_lADOABII586eRRMpzwAAAAOlKEBk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15655780452",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-14T05:24:08Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 15664488501,
      "node_id": "REFE_lADOABII586eRRMpzwAAAAOlrSA1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15664488501",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a263cda28522401ee524307b053230c61cc3d321",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/a263cda28522401ee524307b053230c61cc3d321",
      "created_at": "2024-12-16T04:51:05Z"
    },
    {
      "event": "labeled",
      "id": 15691191089,
      "node_id": "LE_lADOABII586eRRMpzwAAAAOnRJMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15691191089",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T18:45:14Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15696465290,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOnlQ2K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15696465290",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "618398b9951c3ecaf3fc8cb7aea39e992ec4f025",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/618398b9951c3ecaf3fc8cb7aea39e992ec4f025",
      "created_at": "2024-12-18T02:51:19Z"
    },
    {
      "event": "commented",
      "id": 2550196345,
      "node_id": "IC_kwDOABII586YAOh5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2550196345",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T02:51:32Z",
      "updated_at": "2024-12-18T02:51:32Z",
      "author_association": "MEMBER",
      "body": "Rebased after https://github.com/bitcoin/bitcoin/pull/31318 and #31197.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2550196345",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "commented",
      "id": 2550221152,
      "node_id": "IC_kwDOABII586YAUlg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2550221152",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T03:15:40Z",
      "updated_at": "2024-12-18T03:15:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/34571636339</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2550221152",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "labeled",
      "id": 15696659206,
      "node_id": "LE_lADOABII586eRRMpzwAAAAOnmAMG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15696659206",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T03:15:40Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 15696679692,
      "node_id": "UNLE_lADOABII586eRRMpzwAAAAOnmFMM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15696679692",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T03:18:12Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15696898145,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOnm6hh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15696898145",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7a505f5ea1e9ecea3ae0523d1fccf55c84e08890",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/7a505f5ea1e9ecea3ae0523d1fccf55c84e08890",
      "created_at": "2024-12-18T03:44:30Z"
    },
    {
      "event": "commented",
      "id": 2550255111,
      "node_id": "IC_kwDOABII586YAc4H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2550255111",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T03:44:57Z",
      "updated_at": "2024-12-18T03:44:57Z",
      "author_association": "MEMBER",
      "body": "Fixed tidy error.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2550255111",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "unlabeled",
      "id": 15697349311,
      "node_id": "UNLE_lADOABII586eRRMpzwAAAAOnooq_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15697349311",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T04:39:03Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15710706104,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOoblm4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15710706104",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3fd2daf474ce0a30362ae320f4d6101e59c7d1f0",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/3fd2daf474ce0a30362ae320f4d6101e59c7d1f0",
      "created_at": "2024-12-19T01:32:30Z"
    },
    {
      "event": "commented",
      "id": 2552589331,
      "node_id": "IC_kwDOABII586YJWwT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2552589331",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-19T01:32:32Z",
      "updated_at": "2024-12-19T01:32:32Z",
      "author_association": "MEMBER",
      "body": "The changes here don't conflict with the merged #31196, but I rebased just in case.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2552589331",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15727097890,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOpaHgi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15727097890",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a19a5f92df45e9fa6419d9d8e283af70260dca1a",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/a19a5f92df45e9fa6419d9d8e283af70260dca1a",
      "created_at": "2024-12-20T01:43:16Z"
    },
    {
      "event": "ready_for_review",
      "id": 15727102388,
      "node_id": "RFRE_lADOABII586eRRMpzwAAAAOpaIm0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15727102388",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-20T01:44:01Z"
    },
    {
      "event": "commented",
      "id": 2556096604,
      "node_id": "IC_kwDOABII586YWvBc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2556096604",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-20T01:44:45Z",
      "updated_at": "2024-12-20T01:44:45Z",
      "author_association": "MEMBER",
      "body": "#31325 landed so this is ready for review.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2556096604",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15756494318,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOrKQXu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15756494318",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3827fd22c6be2864ee8288479194787d2745c188",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/3827fd22c6be2864ee8288479194787d2745c188",
      "created_at": "2024-12-24T12:17:42Z"
    },
    {
      "event": "commented",
      "id": 2565696340,
      "node_id": "IC_kwDOABII586Y7WtU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2565696340",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-30T16:37:34Z",
      "updated_at": "2024-12-30T16:37:34Z",
      "author_association": "MEMBER",
      "body": "I extracted the first commit into its own PR #31581. Review on the second commit is still welcome here, since I don't expect it to change. Marking draft.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2565696340",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "convert_to_draft",
      "id": 15785725134,
      "node_id": "CTDE_lADOABII586eRRMpzwAAAAOs5wzO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15785725134",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-30T16:38:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15828896358,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOvecpm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15828896358",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a43ea8cc7c4ee7bc6a1263f0382781cc18c7a722",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/a43ea8cc7c4ee7bc6a1263f0382781cc18c7a722",
      "created_at": "2025-01-06T17:25:15Z"
    },
    {
      "event": "commented",
      "id": 2573570012,
      "node_id": "IC_kwDOABII586ZZY_c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2573570012",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-06T17:25:18Z",
      "updated_at": "2025-01-06T17:26:12Z",
      "author_association": "MEMBER",
      "body": "Rebased on the latest #31581.\r\n\r\nI added a commit that on testnet3 and testnet4 returns a new template after 20 minutes, to take advantage of the min difficulty rule.\r\n\r\nSince `miner_tests.cpp` uses mainnet, I created `testnet4_miner_tests.cpp` to cover this behaviour in the unit tests. A functional test could be added later using the testnet4 blocks added by #31583. This could check if the difficulty is correct.\r\n\r\nI also switched to using `NodeClock::now()` to be able to use mock time in tests. ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2573570012",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15829093491,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOvfMxz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15829093491",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "da305ac386bb2359fa928366d56d58aae4f74058",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/da305ac386bb2359fa928366d56d58aae4f74058",
      "created_at": "2025-01-06T17:44:53Z"
    },
    {
      "event": "labeled",
      "id": 15829094988,
      "node_id": "LE_lADOABII586eRRMpzwAAAAOvfNJM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15829094988",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-06T17:45:03Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2573603845,
      "node_id": "IC_kwDOABII586ZZhQF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2573603845",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-06T17:45:04Z",
      "updated_at": "2025-01-06T17:45:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/35210885796</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2573603845",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "unlabeled",
      "id": 15831244551,
      "node_id": "UNLE_lADOABII586eRRMpzwAAAAOvnZ8H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15831244551",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-06T21:44:58Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 15831935144,
      "node_id": "REFE_lADOABII586eRRMpzwAAAAOvqCio",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15831935144",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c506f2cee7b8398e5e34b5e881daf88725357a90",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c506f2cee7b8398e5e34b5e881daf88725357a90",
      "created_at": "2025-01-06T23:28:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15834714656,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAOv0pIg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15834714656",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8d54cfdb1f368bd4486bbc4b285f4712a0f260fa",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/8d54cfdb1f368bd4486bbc4b285f4712a0f260fa",
      "created_at": "2025-01-07T07:31:35Z"
    },
    {
      "event": "commented",
      "id": 2574567897,
      "node_id": "IC_kwDOABII586ZdMnZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2574567897",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-07T07:31:38Z",
      "updated_at": "2025-01-08T10:17:35Z",
      "author_association": "MEMBER",
      "body": "Rebased after #31581 landed, marking ready for review again.\r\n\r\nIf I need to retouch I'll fix the typo mentioned in  https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1905730379 and maybe add a helper to the test suggested here https://github.com/bitcoin/bitcoin/pull/31581#discussion_r1902173650.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2574567897",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "ready_for_review",
      "id": 15834715288,
      "node_id": "RFRE_lADOABII586eRRMpzwAAAAOv0pSY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15834715288",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-07T07:31:39Z"
    },
    {
      "event": "reviewed",
      "id": 2567565695,
      "node_id": "PRR_kwDOABII586ZCfF_",
      "url": null,
      "actor": null,
      "commit_id": "8d54cfdb1f368bd4486bbc4b285f4712a0f260fa",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 8d54cfdb1f368bd4486bbc4b285f4712a0f260fa, but I didn't look at the tests very closely and could review them more. The code seems to have gotten simpler since the last version in #31003, so that is very nice",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2567565695",
      "submitted_at": "2025-01-22T16:38:33Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16056923376,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAO9ETTw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16056923376",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/6bf77e5a376804c0681897fa032537ba16e9a99a",
      "created_at": "2025-01-24T10:52:29Z"
    },
    {
      "event": "commented",
      "id": 2612234565,
      "node_id": "IC_kwDOABII586bs4lF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2612234565",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-24T10:52:44Z",
      "updated_at": "2025-01-24T10:56:17Z",
      "author_association": "MEMBER",
      "body": "I dropped the special case for `fee_threshold` of 0 combined with a `timeout` of 0. I'll adjust https://github.com/Sjors/bitcoin/pull/49.\r\n\r\nAdded a comment why the mock time workaround is still needed. \r\n\r\nI also switched to using a new `BlockWaitOptions` struct.\r\n\r\nAlso rebased.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2612234565",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "unsubscribed",
      "id": 16057135265,
      "node_id": "UE_lADOABII586eRRMpzwAAAAO9FHCh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16057135265",
      "actor": {
        "login": "Juma-creator",
        "id": 85199024,
        "node_id": "MDQ6VXNlcjg1MTk5MDI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/85199024?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Juma-creator",
        "html_url": "https://github.com/Juma-creator",
        "followers_url": "https://api.github.com/users/Juma-creator/followers",
        "following_url": "https://api.github.com/users/Juma-creator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Juma-creator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Juma-creator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Juma-creator/subscriptions",
        "organizations_url": "https://api.github.com/users/Juma-creator/orgs",
        "repos_url": "https://api.github.com/users/Juma-creator/repos",
        "events_url": "https://api.github.com/users/Juma-creator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Juma-creator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-24T11:12:04Z"
    },
    {
      "event": "unsubscribed",
      "id": 16057135964,
      "node_id": "UE_lADOABII586eRRMpzwAAAAO9FHNc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16057135964",
      "actor": {
        "login": "Juma-creator",
        "id": 85199024,
        "node_id": "MDQ6VXNlcjg1MTk5MDI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/85199024?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Juma-creator",
        "html_url": "https://github.com/Juma-creator",
        "followers_url": "https://api.github.com/users/Juma-creator/followers",
        "following_url": "https://api.github.com/users/Juma-creator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Juma-creator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Juma-creator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Juma-creator/subscriptions",
        "organizations_url": "https://api.github.com/users/Juma-creator/orgs",
        "repos_url": "https://api.github.com/users/Juma-creator/repos",
        "events_url": "https://api.github.com/users/Juma-creator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Juma-creator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-24T11:12:07Z"
    },
    {
      "event": "reviewed",
      "id": 2572838684,
      "node_id": "PRR_kwDOABII586ZWmcc",
      "url": null,
      "actor": null,
      "commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 6bf77e5a376804c0681897fa032537ba16e9a99a. Code looks great, but I still would like to spend more time reviewing tests in detail.\r\n\r\nMain changes since last review were just adding options struct, dropping special case, adding comment explaining the now == deadline logic and other documentation. Code is pretty clear and simple now without the mempool GetTransactionsUpdated complexity, without the previous special case, and with the updated documentation.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2572838684",
      "submitted_at": "2025-01-24T14:44:58Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "reviewed",
      "id": 2584911247,
      "node_id": "PRR_kwDOABII586aEp2P",
      "url": null,
      "actor": null,
      "commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2584911247",
      "submitted_at": "2025-01-30T20:28:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "reviewed",
      "id": 2585059647,
      "node_id": "PRR_kwDOABII586aFOE_",
      "url": null,
      "actor": null,
      "commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code Review 6bf77e5a376804c0681897fa032537ba16e9a99a\r\n\r\nJust a question and a nit",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2585059647",
      "submitted_at": "2025-01-30T21:31:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "reviewed",
      "id": 2585936766,
      "node_id": "PRR_kwDOABII586aIkN-",
      "url": null,
      "actor": null,
      "commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK 6bf77e5a37",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2585936766",
      "submitted_at": "2025-01-31T13:38:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "reviewed",
      "id": 2587015084,
      "node_id": "PRR_kwDOABII586aMres",
      "url": null,
      "actor": null,
      "commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2587015084",
      "submitted_at": "2025-01-31T15:00:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16142986632,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAPCMm2I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16142986632",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "22cf6cdb4190482b486752dae4e9dc3b44cfcb1e",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/22cf6cdb4190482b486752dae4e9dc3b44cfcb1e",
      "created_at": "2025-01-31T16:32:14Z"
    },
    {
      "event": "commented",
      "id": 2627759233,
      "node_id": "IC_kwDOABII586coGyB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2627759233",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-31T16:32:15Z",
      "updated_at": "2025-01-31T16:32:15Z",
      "author_association": "MEMBER",
      "body": "Rebased and addressed new feedback.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2627759233",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "reviewed",
      "id": 2587351778,
      "node_id": "PRR_kwDOABII586aN9ri",
      "url": null,
      "actor": null,
      "commit_id": "22cf6cdb4190482b486752dae4e9dc3b44cfcb1e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2587351778",
      "submitted_at": "2025-01-31T17:25:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "reviewed",
      "id": 2587272523,
      "node_id": "PRR_kwDOABII586aNqVL",
      "url": null,
      "actor": null,
      "commit_id": "22cf6cdb4190482b486752dae4e9dc3b44cfcb1e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2587272523",
      "submitted_at": "2025-01-31T18:21:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16144743733,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAPCTT01",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16144743733",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bff6c36e3d27a313499557fa3c7d95a7538d5536",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/bff6c36e3d27a313499557fa3c7d95a7538d5536",
      "created_at": "2025-01-31T19:26:38Z"
    },
    {
      "event": "commented",
      "id": 2628133425,
      "node_id": "IC_kwDOABII586cpiIx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2628133425",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-31T19:26:40Z",
      "updated_at": "2025-01-31T19:35:06Z",
      "author_association": "MEMBER",
      "body": "I went back to using the `MAX_MONEY` magic value (with comment to explain why) and added a helper `check_tip_changed()` to make sure we check for a tip update _before_ waiting.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2628133425",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16144793339,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAPCTf77",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16144793339",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5dd3575ae1562eb77f8dfb6b7c2dc68574e2182f",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/5dd3575ae1562eb77f8dfb6b7c2dc68574e2182f",
      "created_at": "2025-01-31T19:31:16Z"
    },
    {
      "event": "reviewed",
      "id": 2589196920,
      "node_id": "PRR_kwDOABII586aVAJ4",
      "url": null,
      "actor": null,
      "commit_id": "5dd3575ae1562eb77f8dfb6b7c2dc68574e2182f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2589196920",
      "submitted_at": "2025-02-03T08:34:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16158568214,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAPDIC8W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16158568214",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c5b56cc652dd9a0525741001eeda09e523054d3e",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/c5b56cc652dd9a0525741001eeda09e523054d3e",
      "created_at": "2025-02-03T09:09:40Z"
    },
    {
      "event": "commented",
      "id": 2630362917,
      "node_id": "IC_kwDOABII586cyCcl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2630362917",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T09:10:36Z",
      "updated_at": "2025-02-03T09:10:53Z",
      "author_association": "MEMBER",
      "body": "Dropped unnecessary `check_tip_changed()` check before `wait_until`.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2630362917",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16159163324,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAPDKUO8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16159163324",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "166f3945aafc1e5ef0528a4406c09ef9825b1545",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/166f3945aafc1e5ef0528a4406c09ef9825b1545",
      "created_at": "2025-02-03T09:40:06Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk4YjUyZjQwOTA1MmUzZWRjZTc3ZDQzMTY5NmZkZGE1ZTFhZjNiNzA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98b52f409052e3edce77d431696fdda5e1af3b70",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/98b52f409052e3edce77d431696fdda5e1af3b70",
      "tree": {
        "sha": "286f5c56439b5ab71d26e493f0a76d805ac5ca1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/286f5c56439b5ab71d26e493f0a76d805ac5ca1c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 286f5c56439b5ab71d26e493f0a76d805ac5ca1c\nparent 8fa10edcd1706a1f0dc9d8c3adbc8efa3c7755bf\nauthor Sjors Provoost <sjors@sprovoost.nl> 1734493355 +0700\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1738576364 +0100\n\nAdd waitNext() to BlockTemplate interface\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmegke4ACgkQV/+b28ww\nEAmdsxAAkBTQwctnewmLW7es5WFi4CZVXyiqN9CYBehzn0f/edQOOJEaY5DyQlBe\nuxb6EDPmUqXgZXEEaQbN5HoucX1tHhyt2IjwLM5s6qhvtSADjaeawB1HVAU0jtLg\nOhkzNPbIl1JSf1xZnkcamgRKF8sstzVXbFTx0DkFyNxnuJGCm3DGCeWfyqgPVD9v\nZ0fPZ13MnAfMhIgTFP33sq93J857lJ+krX7fjn6PK0S6NtrKonN3MYqHEayZAD57\nv5KB2mrc3QLRWjxyQQ74y7MZGoBRS3fM+ZNV2jpiep5FUNB8YsB3DeNuFA03FP7b\nuoLeVhD51roKn5GRnXWkszd1bdPy/YOdjS+NOy0OYhRVv4kFElEuidZTvKfJDKKu\nqaYLYmQlkTOji3aTUfKEnk0UeuNoNoYNADu5KehJUR3Yc5KPtg7MdI7dckUCVNJK\nMRFQrMTH6zscWUvMAHu/SALAl03O8G8FFfrcHeEvMfEthNI0EztX6al+6Te6TCS3\nP5VIDJaM/GC3T2JLgTDOvAbn1QkoPO4Tz/GI08NhVikSr29uSI17tTUUvUFsM3kZ\nyziLZ2WilRxNtYphC+s8hESVg+QXhM6lxWrWY6wpS6L3NSwXQpALKKXhfMysvz+O\nvklEVZZSRX9sG1Ivj95vcI3HLNuRVXodoVV0T7VZ4Yy8LxtCd6s=\n=l+hH\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fa10edcd1706a1f0dc9d8c3adbc8efa3c7755bf",
          "sha": "8fa10edcd1706a1f0dc9d8c3adbc8efa3c7755bf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8fa10edcd1706a1f0dc9d8c3adbc8efa3c7755bf"
        }
      ],
      "message": "Add waitNext() to BlockTemplate interface",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2025-02-03T09:52:44Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2024-12-18T03:42:35Z"
      },
      "sha": "98b52f409052e3edce77d431696fdda5e1af3b70"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI3NmNlMmVlYTM4ODY1MTU0MDE3MDQ3ZjM3NjEyMjVjMmI1MDRjZjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/276ce2eea38865154017047f3761225c2b504cf6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/276ce2eea38865154017047f3761225c2b504cf6",
      "tree": {
        "sha": "6cc82303d16acc8bd1082ea994450834e1fd555a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cc82303d16acc8bd1082ea994450834e1fd555a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6cc82303d16acc8bd1082ea994450834e1fd555a\nparent 98b52f409052e3edce77d431696fdda5e1af3b70\nauthor Sjors Provoost <sjors@sprovoost.nl> 1738340368 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1738576480 +0100\n\nminer: have waitNext return after 20 min on testnet\n\nOn testnet we need to create a min diff template after 20 min.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmegkmAACgkQV/+b28ww\nEAlS3w/8Cfg/gCX//GJmDN6DWwZoD2kfZVtuYeKosY/7IMp47Muo0e4XwOXCgmtV\nbHo7Ns2w1tYeQ8HOep1lK3HLe6EmN6CkK5QdlkZ0AjA8bgysfMHR9cmALOwjU8ln\n6KuP6m/GER5nt5CuIkPoMXFg3fwWi6XgVcVC+bS8cqPgB+far25XDDyiza/PmvVA\ns0WARKfeIlamA8SJpkg14k1vkSb0CVZT2BphqvKM1xqW2gcrDOxwCGebs5sxfssE\nXlVADTlxb2eoiEC0KBrv4f9pk9pOUWVW2OABVWeBUfZS1sq/EVfaIzkukliAWZUx\n+YUke0C9xx/l6VVOfTukzAKbw8PGvO4e1M7Fq7h7ILtH586iM1zncj79OB9LqZ0x\n2tnPWxNzO9edokFFbwlvGkjOo4WSpH2WmmvBXefTtYf8lWgOgzfkEfF8NAhEDgc9\nqiER53CbtSs0+Y8QUnaZ/eA5imQiHvEhNCV+SCc27hFh1uHcRalglB00k5BKMIAS\nxMTr4PfVhySCdSjdCSByvQg21T9gKQkfML40tNxnRAcrCCQebOojaJ4oZOo76t1k\n/LMtpvRkaIr4akxFoqEErhL0vK4x+Sgt8MF2QGTZItXsJ4HqfbYbvRUivdyqS86m\nd0mmUZpzjcQT6CPHICF1VYW26sCBBJ4j7Sq+o86rpYrE5AYb45Q=\n=8v5I\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98b52f409052e3edce77d431696fdda5e1af3b70",
          "sha": "98b52f409052e3edce77d431696fdda5e1af3b70",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/98b52f409052e3edce77d431696fdda5e1af3b70"
        }
      ],
      "message": "miner: have waitNext return after 20 min on testnet\n\nOn testnet we need to create a min diff template after 20 min.",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2025-02-03T09:54:40Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2025-01-31T16:19:28Z"
      },
      "sha": "276ce2eea38865154017047f3761225c2b504cf6"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16159462641,
      "node_id": "HRFPE_lADOABII586eRRMpzwAAAAPDLdTx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16159462641",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/276ce2eea38865154017047f3761225c2b504cf6",
      "created_at": "2025-02-03T09:55:31Z"
    },
    {
      "event": "commented",
      "id": 2630466522,
      "node_id": "IC_kwDOABII586cybva",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2630466522",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T09:55:38Z",
      "updated_at": "2025-02-03T09:55:38Z",
      "author_association": "MEMBER",
      "body": "Applied @vasild's suggestion: https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939075014",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#issuecomment-2630466522",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31283"
    },
    {
      "event": "mentioned",
      "id": 16159465071,
      "node_id": "MEE_lADOABII586eRRMpzwAAAAPDLd5v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16159465071",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T09:55:39Z"
    },
    {
      "event": "subscribed",
      "id": 16159465082,
      "node_id": "SE_lADOABII586eRRMpzwAAAAPDLd56",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16159465082",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T09:55:39Z"
    },
    {
      "event": "reviewed",
      "id": 2589664657,
      "node_id": "PRR_kwDOABII586aWyWR",
      "url": null,
      "actor": null,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 276ce2eea38865154017047f3761225c2b504cf6\r\n\r\nTwo things that would be nice to figure out before merge:\r\n\r\n* [x] There could be a low-hanging fruit to avoid iterating over all transactions and use `-nFee` which should be significantly faster: https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937311760\r\n\r\n* [ ] Just to confirm that the `Assume()` can't happen in normal circumstances: https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939240601\r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#pullrequestreview-2589664657",
      "submitted_at": "2025-02-03T11:47:00Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
    },
    {
      "event": "review_requested",
      "id": 16161033879,
      "node_id": "RRE_lADOABII586eRRMpzwAAAAPDRc6X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16161033879",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T11:47:05Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1840190668",
      "pull_request_review_id": 2432977782,
      "id": 1840190668,
      "node_id": "PRRC_kwDOABII585trxTM",
      "diff_hunk": "@@ -938,9 +938,71 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(CAmount fee_threshold, MillisecondsDouble timeout) override\n+    {\n+        if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+\n+        CAmount current_fees = 0;\n+        if (fee_threshold < MAX_MONEY) {\n+            for (CAmount fee : m_block_template->vTxFees) {\n+                // Skip coinbase\n+                if (fee < 0) continue;\n+                current_fees += fee;\n+            }\n+        }\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{std::chrono::steady_clock::now()};\n+        const auto deadline = now + timeout;\n+        const MillisecondsDouble tick{1000};\n+        std::unique_ptr<BlockTemplateImpl> block_template;\n+\n+        while (now < deadline) {\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    return notifications().m_tip_block != m_block_template->block.hashPrevBlock || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // The only way to determine if fees increased compared to the previous template,\n+            // is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+            // way to determine how much (approximate) fees for the next block increased.\n+            block_template = std::make_unique<BlockTemplateImpl>(m_script_pub_key, m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(m_script_pub_key), m_node);\n+\n+            // If the tip changed, return the new template regardless of its fees.\n+            if (block_template->m_block_template->block.hashPrevBlock != m_block_template->block.hashPrevBlock) {\n+                return block_template;\n+            }\n+\n+            CAmount new_fees = 0;\n+            for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                // Skip coinbase\n+                if (fee < 0) continue;\n+                new_fees += fee;\n+                if (new_fees >= current_fees + fee_threshold) return block_template;\n+            }\n+            //\n+            block_template.reset();\n+        }\n+\n+        return block_template;\n+    }\n+\n+    const CScript m_script_pub_key;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "f955b8e406bff8e833e8f130a71c73305dfe5f0b",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Separate from this PR, I'm looking into whether we can avoid passing `script_pub_key` around. Afaik it's only used by tests and for solo CPU mining.",
      "created_at": "2024-11-13T12:34:38Z",
      "updated_at": "2024-11-13T12:34:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1840190668",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1840190668"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1012,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1840195105",
      "pull_request_review_id": 2432984860,
      "id": 1840195105,
      "node_id": "PRRC_kwDOABII585tryYh",
      "diff_hunk": "@@ -938,9 +938,71 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(CAmount fee_threshold, MillisecondsDouble timeout) override\n+    {\n+        if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "f955b8e406bff8e833e8f130a71c73305dfe5f0b",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I still need to study https://github.com/bitcoin/bitcoin/pull/31003#discussion_r1792221843 in more detail to see if this code isn't making similar mistakes.",
      "created_at": "2024-11-13T12:37:51Z",
      "updated_at": "2024-11-13T12:37:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1840195105",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1840195105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 943,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841070497",
      "pull_request_review_id": 2434267353,
      "id": 1841070497,
      "node_id": "PRRC_kwDOABII585tvIGh",
      "diff_hunk": "@@ -54,23 +56,17 @@ struct MinerTestingSetup : public TestingSetup {\n         Assert(error.empty());\n         return *m_node.mempool;\n     }\n-    BlockAssembler AssemblerForTest(CTxMemPool& tx_mempool);\n+    std::unique_ptr<Mining> MakeMining()\n+    {\n+        return interfaces::MakeMining(m_node);\n+    }\n };\n } // namespace miner_tests\n \n BOOST_FIXTURE_TEST_SUITE(miner_tests, MinerTestingSetup)\n \n static CFeeRate blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n \n-BlockAssembler MinerTestingSetup::AssemblerForTest(CTxMemPool& tx_mempool)\n-{\n-    BlockAssembler::Options options;\n-\n-    options.nBlockMaxWeight = MAX_BLOCK_WEIGHT;\n-    options.blockMinFeeRate = blockMinFeeRate;",
      "path": "src/test/miner_tests.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a316ba58cba5df8aadb05737959b97eeb6a350b4",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a316ba58cba5df8aadb05737959b97eeb6a350b4: I think dropping this doesn't matter?",
      "created_at": "2024-11-13T19:47:31Z",
      "updated_at": "2024-11-13T19:47:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1841070497",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841070497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841075744",
      "pull_request_review_id": 2434275875,
      "id": 1841075744,
      "node_id": "PRRC_kwDOABII585tvJYg",
      "diff_hunk": "@@ -589,59 +605,66 @@ void MinerTestingSetup::TestPrioritisedMining(const CScript& scriptPubKey, const\n     Txid hashFreeGrandchild = tx.GetHash();\n     tx_mempool.addUnchecked(entry.Fee(0).SpendsCoinbase(false).FromTx(tx));\n \n-    auto pblocktemplate = AssemblerForTest(tx_mempool).CreateNewBlock(scriptPubKey);\n-    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 6U);\n-    BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashFreeParent);\n-    BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashParentTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashPrioritsedChild);\n-    BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashFreeChild);\n-    for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n+    auto block_template = miner->createNewBlock(scriptPubKey);\n+    CBlock block{block_template->getBlock()};\n+    BOOST_REQUIRE_EQUAL(block.vtx.size(), 6U);\n+    BOOST_CHECK(block.vtx[1]->GetHash() == hashFreeParent);\n+    BOOST_CHECK(block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n+    BOOST_CHECK(block.vtx[3]->GetHash() == hashParentTx);\n+    BOOST_CHECK(block.vtx[4]->GetHash() == hashPrioritsedChild);\n+    BOOST_CHECK(block.vtx[5]->GetHash() == hashFreeChild);\n+    for (size_t i=0; i<block.vtx.size(); ++i) {\n         // The FreeParent and FreeChild's prioritisations should not impact the child.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeGrandchild);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashFreeGrandchild);\n         // De-prioritised transaction should not be included.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashMediumFeeTx);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashMediumFeeTx);\n     }\n }\n \n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n+    auto miner{MakeMining()};\n+    BOOST_REQUIRE(miner);\n+\n     // Note that by default, these tests run with size accounting enabled.\n     CScript scriptPubKey = CScript() << \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\"_hex << OP_CHECKSIG;\n-    std::unique_ptr<CBlockTemplate> pblocktemplate;\n-\n-    CTxMemPool& tx_mempool{*m_node.mempool};\n-    // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(tx_mempool).CreateNewBlock(scriptPubKey));\n+    std::unique_ptr<BlockTemplate> block_template;\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 110 blocks :)\n     static_assert(std::size(BLOCKINFO) == 110, \"Should have 110 blocks to import\");\n     int baseheight = 0;\n     std::vector<CTransactionRef> txFirst;\n     for (const auto& bi : BLOCKINFO) {\n-        CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+        // Simple block creation, nothing special yet:\n+        block_template = miner->createNewBlock(scriptPubKey);\n+        BOOST_REQUIRE(block_template);\n+\n+        CBlock block{block_template->getBlock()};\n         {\n             LOCK(cs_main);\n-            pblock->nVersion = VERSIONBITS_TOP_BITS;\n-            pblock->nTime = m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1;\n-            CMutableTransaction txCoinbase(*pblock->vtx[0]);\n+            block.nVersion = VERSIONBITS_TOP_BITS;\n+            block.nTime = Assert(m_node.chainman)->ActiveChain().Tip()->GetMedianTimePast()+1;\n+            CMutableTransaction txCoinbase(*block.vtx[0]);\n             txCoinbase.version = 1;\n             txCoinbase.vin[0].scriptSig = CScript{} << (m_node.chainman->ActiveChain().Height() + 1) << bi.extranonce;\n             txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n             txCoinbase.vout[0].scriptPubKey = CScript();\n-            pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n+            block.vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n             if (txFirst.size() == 0)\n                 baseheight = m_node.chainman->ActiveChain().Height();\n             if (txFirst.size() < 4)\n-                txFirst.push_back(pblock->vtx[0]);\n-            pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n-            pblock->nNonce = bi.nonce;\n+                txFirst.push_back(block.vtx[0]);\n+            block.hashMerkleRoot = BlockMerkleRoot(block);\n+            block.nNonce = bi.nonce;\n         }\n-        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        BOOST_CHECK(Assert(m_node.chainman)->ProcessNewBlock(shared_pblock, true, true, nullptr));\n-        pblock->hashPrevBlock = pblock->GetHash();\n+        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n+        BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(shared_pblock, /*force_processing=*/true, /*min_pow_checked=*/true, nullptr));",
      "path": "src/test/miner_tests.cpp",
      "position": null,
      "original_position": 375,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a316ba58cba5df8aadb05737959b97eeb6a350b4",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a316ba58cba5df8aadb05737959b97eeb6a350b4: I'm tempted to use `miner.submitSolution()` here.",
      "created_at": "2024-11-13T19:51:48Z",
      "updated_at": "2024-11-13T19:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1841075744",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1841075744"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 662,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842122891",
      "pull_request_review_id": 2435923081,
      "id": 1842122891,
      "node_id": "PRRC_kwDOABII585tzJCL",
      "diff_hunk": "@@ -589,59 +605,66 @@ void MinerTestingSetup::TestPrioritisedMining(const CScript& scriptPubKey, const\n     Txid hashFreeGrandchild = tx.GetHash();\n     tx_mempool.addUnchecked(entry.Fee(0).SpendsCoinbase(false).FromTx(tx));\n \n-    auto pblocktemplate = AssemblerForTest(tx_mempool).CreateNewBlock(scriptPubKey);\n-    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 6U);\n-    BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashFreeParent);\n-    BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashParentTx);\n-    BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashPrioritsedChild);\n-    BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashFreeChild);\n-    for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n+    auto block_template = miner->createNewBlock(scriptPubKey);\n+    CBlock block{block_template->getBlock()};\n+    BOOST_REQUIRE_EQUAL(block.vtx.size(), 6U);\n+    BOOST_CHECK(block.vtx[1]->GetHash() == hashFreeParent);\n+    BOOST_CHECK(block.vtx[2]->GetHash() == hashFreePrioritisedTx);\n+    BOOST_CHECK(block.vtx[3]->GetHash() == hashParentTx);\n+    BOOST_CHECK(block.vtx[4]->GetHash() == hashPrioritsedChild);\n+    BOOST_CHECK(block.vtx[5]->GetHash() == hashFreeChild);\n+    for (size_t i=0; i<block.vtx.size(); ++i) {\n         // The FreeParent and FreeChild's prioritisations should not impact the child.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeGrandchild);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashFreeGrandchild);\n         // De-prioritised transaction should not be included.\n-        BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashMediumFeeTx);\n+        BOOST_CHECK(block.vtx[i]->GetHash() != hashMediumFeeTx);\n     }\n }\n \n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n+    auto miner{MakeMining()};\n+    BOOST_REQUIRE(miner);\n+\n     // Note that by default, these tests run with size accounting enabled.\n     CScript scriptPubKey = CScript() << \"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\"_hex << OP_CHECKSIG;\n-    std::unique_ptr<CBlockTemplate> pblocktemplate;\n-\n-    CTxMemPool& tx_mempool{*m_node.mempool};\n-    // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(tx_mempool).CreateNewBlock(scriptPubKey));\n+    std::unique_ptr<BlockTemplate> block_template;\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 110 blocks :)\n     static_assert(std::size(BLOCKINFO) == 110, \"Should have 110 blocks to import\");\n     int baseheight = 0;\n     std::vector<CTransactionRef> txFirst;\n     for (const auto& bi : BLOCKINFO) {\n-        CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+        // Simple block creation, nothing special yet:\n+        block_template = miner->createNewBlock(scriptPubKey);\n+        BOOST_REQUIRE(block_template);\n+\n+        CBlock block{block_template->getBlock()};\n         {\n             LOCK(cs_main);\n-            pblock->nVersion = VERSIONBITS_TOP_BITS;\n-            pblock->nTime = m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1;\n-            CMutableTransaction txCoinbase(*pblock->vtx[0]);\n+            block.nVersion = VERSIONBITS_TOP_BITS;\n+            block.nTime = Assert(m_node.chainman)->ActiveChain().Tip()->GetMedianTimePast()+1;\n+            CMutableTransaction txCoinbase(*block.vtx[0]);\n             txCoinbase.version = 1;\n             txCoinbase.vin[0].scriptSig = CScript{} << (m_node.chainman->ActiveChain().Height() + 1) << bi.extranonce;\n             txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n             txCoinbase.vout[0].scriptPubKey = CScript();\n-            pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n+            block.vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n             if (txFirst.size() == 0)\n                 baseheight = m_node.chainman->ActiveChain().Height();\n             if (txFirst.size() < 4)\n-                txFirst.push_back(pblock->vtx[0]);\n-            pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n-            pblock->nNonce = bi.nonce;\n+                txFirst.push_back(block.vtx[0]);\n+            block.hashMerkleRoot = BlockMerkleRoot(block);\n+            block.nNonce = bi.nonce;\n         }\n-        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        BOOST_CHECK(Assert(m_node.chainman)->ProcessNewBlock(shared_pblock, true, true, nullptr));\n-        pblock->hashPrevBlock = pblock->GetHash();\n+        std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n+        BOOST_REQUIRE(Assert(m_node.chainman)->ProcessNewBlock(shared_pblock, /*force_processing=*/true, /*min_pow_checked=*/true, nullptr));",
      "path": "src/test/miner_tests.cpp",
      "position": null,
      "original_position": 375,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a316ba58cba5df8aadb05737959b97eeb6a350b4",
      "in_reply_to_id": 1841075744,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2024-11-14T12:16:30Z",
      "updated_at": "2024-11-14T12:16:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1842122891",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842122891"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 662,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842225267",
      "pull_request_review_id": 2436090747,
      "id": 1842225267,
      "node_id": "PRRC_kwDOABII585tziBz",
      "diff_hunk": "@@ -938,9 +938,71 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(CAmount fee_threshold, MillisecondsDouble timeout) override\n+    {\n+        if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "f955b8e406bff8e833e8f130a71c73305dfe5f0b",
      "in_reply_to_id": 1840195105,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I dropped this line.\r\n\r\nAdditionally this PR does not make use of `last_mempool_update`, since it's not very useful in a typical production setting where something in the mempool updates all the time.\r\n\r\nI think the race condition mentioned there is not an issue here because we don't pass in the current fees via argument, but instead derive them from the original template.\r\n\r\nI did forget to update `now` at the end of the loop, which I fixed.",
      "created_at": "2024-11-14T13:30:15Z",
      "updated_at": "2024-11-14T13:30:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1842225267",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1842225267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 943,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1843589729",
      "pull_request_review_id": 2438289769,
      "id": 1843589729,
      "node_id": "PRRC_kwDOABII585t4vJh",
      "diff_hunk": "@@ -938,9 +938,76 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(CAmount fee_threshold, MillisecondsDouble timeout) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{std::chrono::steady_clock::now()};\n+        const auto deadline = now + timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now < deadline) {\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    return notifications().m_tip_block != m_block_template->block.hashPrevBlock || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // The only way to determine if fees increased compared to the previous template,\n+            // is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+            // way to determine how much (approximate) fees for the next block increased.\n+            auto block_template{std::make_unique<BlockTemplateImpl>(m_script_pub_key, m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(m_script_pub_key), m_node)};\n+\n+            // If the tip changed, return the new template regardless of its fees.\n+            if (block_template->m_block_template->block.hashPrevBlock != m_block_template->block.hashPrevBlock) {\n+                return block_template;\n+            }\n+\n+            if (fee_threshold < MAX_MONEY) {\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + fee_threshold) return block_template;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "e5a9b7321041f9790774b0597a431c81c6305607",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A `fee_threshold` of 0 combined with a `timeout` of 0 will immediately return a new template. This is useful for the Template Provider, because it needs to unconditionally send new templates to all connected clients if fees increased sufficiently for one its connected clients. (at least until cluster mempool makes the fee calculation trivially cheap) ",
      "created_at": "2024-11-15T10:55:09Z",
      "updated_at": "2024-11-15T10:55:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1843589729",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1843589729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1011,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846795785",
      "pull_request_review_id": 2442968731,
      "id": 1846795785,
      "node_id": "PRRC_kwDOABII585uE94J",
      "diff_hunk": "@@ -938,9 +938,71 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(CAmount fee_threshold, MillisecondsDouble timeout) override\n+    {\n+        if (timeout > std::chrono::years{100}) timeout = std::chrono::years{100}; // Upper bound to avoid UB in std::chrono\n+\n+        CAmount current_fees = 0;\n+        if (fee_threshold < MAX_MONEY) {\n+            for (CAmount fee : m_block_template->vTxFees) {\n+                // Skip coinbase\n+                if (fee < 0) continue;\n+                current_fees += fee;\n+            }\n+        }\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{std::chrono::steady_clock::now()};\n+        const auto deadline = now + timeout;\n+        const MillisecondsDouble tick{1000};\n+        std::unique_ptr<BlockTemplateImpl> block_template;\n+\n+        while (now < deadline) {\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    return notifications().m_tip_block != m_block_template->block.hashPrevBlock || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // The only way to determine if fees increased compared to the previous template,\n+            // is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+            // way to determine how much (approximate) fees for the next block increased.\n+            block_template = std::make_unique<BlockTemplateImpl>(m_script_pub_key, m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(m_script_pub_key), m_node);\n+\n+            // If the tip changed, return the new template regardless of its fees.\n+            if (block_template->m_block_template->block.hashPrevBlock != m_block_template->block.hashPrevBlock) {\n+                return block_template;\n+            }\n+\n+            CAmount new_fees = 0;\n+            for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                // Skip coinbase\n+                if (fee < 0) continue;\n+                new_fees += fee;\n+                if (new_fees >= current_fees + fee_threshold) return block_template;\n+            }\n+            //\n+            block_template.reset();\n+        }\n+\n+        return block_template;\n+    }\n+\n+    const CScript m_script_pub_key;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "f955b8e406bff8e833e8f130a71c73305dfe5f0b",
      "in_reply_to_id": 1840190668,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "#31318 drops this argument. It's only slightly easier to merge that first, so I'll leave this PR open.",
      "created_at": "2024-11-18T15:33:04Z",
      "updated_at": "2024-11-18T15:33:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1846795785",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846795785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1012,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854528651",
      "pull_request_review_id": 2455447961,
      "id": 1854528651,
      "node_id": "PRRC_kwDOABII585uidyL",
      "diff_hunk": "@@ -938,9 +938,85 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(CAmount fee_threshold, MillisecondsDouble timeout) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{std::chrono::steady_clock::now()};\n+        const auto deadline = now + timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        // Lower than OR equal is used here, so that a fee_threshold of 0 combined with\n+        // a timeout of 0 immedidately returns a new template (rather than nullptr).\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    // Although C++17 allows safe comparison of optional<T> with\n+                    // another T, we need to wait for m_tip_block to be set AND\n+                    // for the value to be different than the current_tip value.\n+                    tip_changed = notifications().m_tip_block && notifications().m_tip_block != m_block_template->block.hashPrevBlock;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "5d294d86f43c83603b5d965eff36c90159c6bffe",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If #31346 lands first, `notifications().m_tip_block` could be an `Assert` and the comment removed, see https://github.com/bitcoin/bitcoin/pull/31346#issuecomment-2493956840\r\n\r\nThough I have to make sure there's no race condition where you call `createNewBlock()` followed by `waitNext()` right at node startup, without first calling `waitTipChanged(ZERO)`.",
      "created_at": "2024-11-22T19:15:13Z",
      "updated_at": "2024-11-22T19:19:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1854528651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1854528651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 963,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925533767",
      "pull_request_review_id": 2567565695,
      "id": 1925533767,
      "node_id": "PRRC_kwDOABII585yxVBH",
      "diff_hunk": "@@ -936,9 +936,87 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(CAmount fee_threshold, MillisecondsDouble timeout) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Special case to force create a fresh template\n+            if (!tip_changed && timeout == MillisecondsDouble(0) && fee_threshold == 0) {\n+                tip_changed = true;\n+            }\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + fee_threshold) return block_template;\n+                }\n+            }\n+\n+            // Break out of while when using mock time\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "956b449a51223cfa620d6c76d7ec37db5de86c3b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"Add waitNext() to BlockTemplate interface\" (956b449a51223cfa620d6c76d7ec37db5de86c3b)\r\n\r\nThis seems hacky, Why not change `now <= deadline` to `now < deadline` at the top of the while loop, or alternately call setmocktime in tests with time + 1?",
      "created_at": "2025-01-22T15:34:54Z",
      "updated_at": "2025-01-22T16:38:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1925533767",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925533767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1005,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925565765",
      "pull_request_review_id": 2567565695,
      "id": 1925565765,
      "node_id": "PRRC_kwDOABII585yxc1F",
      "diff_hunk": "@@ -936,9 +936,87 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(CAmount fee_threshold, MillisecondsDouble timeout) override",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "956b449a51223cfa620d6c76d7ec37db5de86c3b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"Add waitNext() to BlockTemplate interface\" (956b449a51223cfa620d6c76d7ec37db5de86c3b)\r\n\r\nIt might sense to move arguments to this function into a `BlockWaitOptions` struct similar to the existing `BlockCreateOptions` struct. Could make calling code clearer since it will specify need to specify arguments by name instead of passing two numbers, and provide more backwards source compatibility (require source code to change less if we want to drop existing arguments or add new ones in the future).",
      "created_at": "2025-01-22T15:54:25Z",
      "updated_at": "2025-01-22T16:38:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1925565765",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925565765"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 939,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925568583",
      "pull_request_review_id": 2567565695,
      "id": 1925568583,
      "node_id": "PRRC_kwDOABII585yxdhH",
      "diff_hunk": "@@ -938,9 +938,76 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(CAmount fee_threshold, MillisecondsDouble timeout) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{std::chrono::steady_clock::now()};\n+        const auto deadline = now + timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now < deadline) {\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    return notifications().m_tip_block != m_block_template->block.hashPrevBlock || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // The only way to determine if fees increased compared to the previous template,\n+            // is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+            // way to determine how much (approximate) fees for the next block increased.\n+            auto block_template{std::make_unique<BlockTemplateImpl>(m_script_pub_key, m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(m_script_pub_key), m_node)};\n+\n+            // If the tip changed, return the new template regardless of its fees.\n+            if (block_template->m_block_template->block.hashPrevBlock != m_block_template->block.hashPrevBlock) {\n+                return block_template;\n+            }\n+\n+            if (fee_threshold < MAX_MONEY) {\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + fee_threshold) return block_template;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "e5a9b7321041f9790774b0597a431c81c6305607",
      "in_reply_to_id": 1843589729,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1843589729\r\n\r\nIn commit \"Add waitNext() to BlockTemplate interface\" (956b449a51223cfa620d6c76d7ec37db5de86c3b)\r\n\r\n> A `fee_threshold` of 0 combined with a `timeout` of 0 will immediately return a new template. This is useful for the Template Provider, because it needs to unconditionally send new templates to all connected clients if fees increased sufficiently for one its connected clients. (at least until cluster mempool makes the fee calculation trivially cheap)\r\n\r\nI don't think I understand this special case. Wouldn't it be easier for callers to just call createNewBlock() if they need a new template unconditionally? Dropping this would allow getting rid of the `!tip_changed && timeout == MillisecondsDouble(0) && fee_threshold == 0` code which complicates things here.",
      "created_at": "2025-01-22T15:56:06Z",
      "updated_at": "2025-01-22T16:38:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1925568583",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925568583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1011,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925697476",
      "pull_request_review_id": 2567839723,
      "id": 1925697476,
      "node_id": "PRRC_kwDOABII585yx8_E",
      "diff_hunk": "@@ -938,9 +938,76 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(CAmount fee_threshold, MillisecondsDouble timeout) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{std::chrono::steady_clock::now()};\n+        const auto deadline = now + timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now < deadline) {\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    return notifications().m_tip_block != m_block_template->block.hashPrevBlock || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // The only way to determine if fees increased compared to the previous template,\n+            // is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+            // way to determine how much (approximate) fees for the next block increased.\n+            auto block_template{std::make_unique<BlockTemplateImpl>(m_script_pub_key, m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(m_script_pub_key), m_node)};\n+\n+            // If the tip changed, return the new template regardless of its fees.\n+            if (block_template->m_block_template->block.hashPrevBlock != m_block_template->block.hashPrevBlock) {\n+                return block_template;\n+            }\n+\n+            if (fee_threshold < MAX_MONEY) {\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + fee_threshold) return block_template;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "e5a9b7321041f9790774b0597a431c81c6305607",
      "in_reply_to_id": 1843589729,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That may indeed be a way to kill two birds with one stone: https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1925533767",
      "created_at": "2025-01-22T17:22:20Z",
      "updated_at": "2025-01-22T17:22:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1925697476",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925697476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1011,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1928498841",
      "pull_request_review_id": 2572329488,
      "id": 1928498841,
      "node_id": "PRRC_kwDOABII585y8o6Z",
      "diff_hunk": "@@ -936,9 +936,87 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(CAmount fee_threshold, MillisecondsDouble timeout) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Special case to force create a fresh template\n+            if (!tip_changed && timeout == MillisecondsDouble(0) && fee_threshold == 0) {\n+                tip_changed = true;\n+            }\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + fee_threshold) return block_template;\n+                }\n+            }\n+\n+            // Break out of while when using mock time\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "956b449a51223cfa620d6c76d7ec37db5de86c3b",
      "in_reply_to_id": 1925533767,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Even after dropping the `fee_threshold==0 && timeout==0` special case, I still need this. Added a comment to explain why (unit tests can't easily move mock time during a blocking call).",
      "created_at": "2025-01-24T10:52:32Z",
      "updated_at": "2025-01-24T10:52:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1928498841",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1928498841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1005,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936212347",
      "pull_request_review_id": 2584911247,
      "id": 1936212347,
      "node_id": "PRRC_kwDOABII585zaEF7",
      "diff_hunk": "@@ -56,6 +56,16 @@ class BlockTemplate\n      * @returns if the block was processed, independent of block validity\n      */\n     virtual bool submitSolution(uint32_t version, uint32_t timestamp, uint32_t nonce, CTransactionRef coinbase) = 0;\n+\n+    /**\n+     * Waits for fees in the next block to rise, a new tip or the timeout.\n+     *\n+     * @param[in] options   Control the timeout (default forever) and by how much total fees\n+     *                      for the next block should rise (default infinite).",
      "path": "src/interfaces/mining.h",
      "position": 18,
      "original_position": 18,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In  \"Add waitNext() to BlockTemplate interface\" a61fb2fd2d6b338c08c619e4605521a41bd3edd9\r\n\r\nWe already have the comments about the default in node types `BlockWaitOptions` docstring, writing it here is duplicating same information, when we update the default we have to update both places.\r\n\r\nI think it will be better to just move the fee threshold description comment to node types `BlockWaitOptions` docstring and delete the duplicate here.",
      "created_at": "2025-01-30T20:04:46Z",
      "updated_at": "2025-01-30T20:28:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1936212347",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936212347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": 63,
      "original_start_line": 63,
      "start_side": "RIGHT",
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936237852",
      "pull_request_review_id": 2584911247,
      "id": 1936237852,
      "node_id": "PRRC_kwDOABII585zaKUc",
      "diff_hunk": "@@ -936,9 +937,88 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"Add waitNext() to BlockTemplate interface\" a61fb2fd2d6b338c08c619e4605521a41bd3edd9 \r\n\r\nI think we are not just creating a block template after ticks but on each iteration of this loop, which continues infinitely in the default case. Since we are holding `cs_main` continuously, wouldn't this cause resource contention and delay other components of the node?\r\n\r\nMy concern is that, regardless of whether the mempool improves, we keep creating block templates.\r\n\r\nCurrently there is no reliable way to determine if the fee rate diagram of the mempool has increased, I think this will become easier after #30289. When RBF occurs, we can be certain that the fee rate diagram of the mempool has improved. We could even determine the fee additions after those RBFs and compare them with `fee_threshold` the pool want; if the threshold is exceeded, we should trigger a block template update.\r\n\r\nSince that is not possible and #30289  is a WIP I think we should only build a block template after some time has passed. It seems like GBT waits for a minute maybe you could do the same?",
      "created_at": "2025-01-30T20:28:16Z",
      "updated_at": "2025-01-30T20:28:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1936237852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936237852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 972,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 997,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936242611",
      "pull_request_review_id": 2584964165,
      "id": 1936242611,
      "node_id": "PRRC_kwDOABII585zaLez",
      "diff_hunk": "@@ -56,6 +56,16 @@ class BlockTemplate\n      * @returns if the block was processed, independent of block validity\n      */\n     virtual bool submitSolution(uint32_t version, uint32_t timestamp, uint32_t nonce, CTransactionRef coinbase) = 0;\n+\n+    /**\n+     * Waits for fees in the next block to rise, a new tip or the timeout.\n+     *\n+     * @param[in] options   Control the timeout (default forever) and by how much total fees\n+     *                      for the next block should rise (default infinite).",
      "path": "src/interfaces/mining.h",
      "position": 18,
      "original_position": 18,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "in_reply_to_id": 1936212347,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I tried to make it a quick TL&DR so someone can understand the most important behaviour, without having to go and read the entire struct doc (which might grow, and not all code let you hover and see the full thing in a popup).",
      "created_at": "2025-01-30T20:32:52Z",
      "updated_at": "2025-01-30T20:32:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1936242611",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936242611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": 63,
      "original_start_line": 63,
      "start_side": "RIGHT",
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936248702",
      "pull_request_review_id": 2584974710,
      "id": 1936248702,
      "node_id": "PRRC_kwDOABII585zaM9-",
      "diff_hunk": "@@ -936,9 +937,88 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "in_reply_to_id": 1936237852,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1936237852\r\n\r\n> In \"Add waitNext() to BlockTemplate interface\" [a61fb2f](https://github.com/bitcoin/bitcoin/commit/a61fb2fd2d6b338c08c619e4605521a41bd3edd9)\r\n> \r\n> I think we are not just creating a block template after ticks but on each iteration of this loop, which continues infinitely in the default case. Since we are holding `cs_main` continuously, wouldn't this cause resource contention and delay other components of the node?\r\n\r\nThe `m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline))` call on [line 957](https://github.com/bitcoin/bitcoin/blob/6bf77e5a376804c0681897fa032537ba16e9a99a/src/node/interfaces.cpp#L957C1-L957C24) is what is supposed to prevent this. Each time that line is reached the thread should sleep for one tick. It should only wake up before the tick if the tip changes or the call is timing out or the node is shutting down.",
      "created_at": "2025-01-30T20:38:50Z",
      "updated_at": "2025-01-30T20:40:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1936248702",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936248702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 972,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 997,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936250003",
      "pull_request_review_id": 2584976748,
      "id": 1936250003,
      "node_id": "PRRC_kwDOABII585zaNST",
      "diff_hunk": "@@ -936,9 +937,88 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "in_reply_to_id": 1936237852,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`cs_main` is only held briefly, _after_ each 1 second wait, once per loop.\r\n\r\nThis PR currently makes 1 template per second to get the fees. Once we have cluster mempool, I'm hoping there will be a lighter weight method to see fees in the top 4 mega-weight units have risen. cc @sipa / @sdaftuar \r\n\r\nOne of the stratum v2 goals is to push new templates faster, so I'd rather keep the tick at 1 second unless it causes problems on slow hardware.",
      "created_at": "2025-01-30T20:40:05Z",
      "updated_at": "2025-01-30T20:40:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1936250003",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936250003"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 972,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 997,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936256452",
      "pull_request_review_id": 2584987148,
      "id": 1936256452,
      "node_id": "PRRC_kwDOABII585zaO3E",
      "diff_hunk": "@@ -936,9 +937,88 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "in_reply_to_id": 1936237852,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> The m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline)) call on [line 957](https://github.com/bitcoin/bitcoin/blob/6bf77e5a376804c0681897fa032537ba16e9a99a/src/node/interfaces.cpp#L957C1-L957C24) is what is supposed to prevent this.\r\n\r\n> cs_main is only held briefly, after each 1 second wait, once per loop.\r\n\r\nI missed this in first pass.\r\nThanks for the clarifications my concern is addressed.\r\n\r\nI imagine still there will be redundant work in doing this each second, we won't be certain that much has changed in a second, but you could make the same argument for 30 seconds or 1 minute as well.\r\n\r\n",
      "created_at": "2025-01-30T20:46:02Z",
      "updated_at": "2025-01-30T20:46:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1936256452",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936256452"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 972,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 997,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936297849",
      "pull_request_review_id": 2585059647,
      "id": 1936297849,
      "node_id": "PRRC_kwDOABII585zaY95",
      "diff_hunk": "@@ -936,9 +937,88 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + options.fee_threshold) return block_template;\n+                }",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"Add waitNext() to BlockTemplate interface\"  a61fb2fd2d6b338c08c619e4605521a41bd3edd9\r\n\r\n@Sjors  IIRC block assembler has a total fees field `nFees` that also skips coinbase transaction, why aren't we using that? could expose it and use it, this will prevent the iterating through all the block transactions to compute the total fees during each tick?",
      "created_at": "2025-01-30T21:05:21Z",
      "updated_at": "2025-01-30T21:31:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1936297849",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936297849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 983,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1021,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936317810",
      "pull_request_review_id": 2585059647,
      "id": 1936317810,
      "node_id": "PRRC_kwDOABII585zad1y",
      "diff_hunk": "@@ -64,6 +64,9 @@ class BlockTemplate\n      *                      for the next block should rise (default infinite).",
      "path": "src/interfaces/mining.h",
      "position": 18,
      "original_position": 1,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"On testnet create min diff template after 20 mins\" 6bf77e5a376804c0681897fa032537ba16e9a99a\r\n\r\nnit: \r\n@Sjors should this commit message and comments be updated to reflect the actual change something like\r\n\r\n\"miner: update `waitNext` to return a new block if 20 minutes have elapsed since the tip\"\r\n\r\nI think the above discription is exactly what this commit does and does not enable the creation of the min diff template, it's done internally by the block assembler?",
      "created_at": "2025-01-30T21:25:38Z",
      "updated_at": "2025-01-30T21:31:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1936317810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936317810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936795545",
      "pull_request_review_id": 2585874531,
      "id": 1936795545,
      "node_id": "PRRC_kwDOABII585zcSeZ",
      "diff_hunk": "@@ -56,6 +56,16 @@ class BlockTemplate\n      * @returns if the block was processed, independent of block validity\n      */\n     virtual bool submitSolution(uint32_t version, uint32_t timestamp, uint32_t nonce, CTransactionRef coinbase) = 0;\n+\n+    /**\n+     * Waits for fees in the next block to rise, a new tip or the timeout.\n+     *\n+     * @param[in] options   Control the timeout (default forever) and by how much total fees\n+     *                      for the next block should rise (default infinite).",
      "path": "src/interfaces/mining.h",
      "position": 18,
      "original_position": 18,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "in_reply_to_id": 1936212347,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(and these two defaults are very unlikely to change).",
      "created_at": "2025-01-31T07:34:44Z",
      "updated_at": "2025-01-31T07:34:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1936795545",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936795545"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": 63,
      "original_start_line": 63,
      "start_side": "RIGHT",
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936806097",
      "pull_request_review_id": 2585890330,
      "id": 1936806097,
      "node_id": "PRRC_kwDOABII585zcVDR",
      "diff_hunk": "@@ -936,9 +937,88 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + options.fee_threshold) return block_template;\n+                }",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 79,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "in_reply_to_id": 1936297849,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point. `BlockAssembler::CreateNewBlock()` uses `nFees` internally. It's updated in `AddToBlock`. I could expose it via `CBlockTemplate`.\r\n\r\nHowever this code will hopefully go away soon(tm) with Cluster Mempool, and I suspect it's extremely fast (compared to block assembly). So it's perhaps not worth refactoring. In any case it could be done in a followup without changing the interface.",
      "created_at": "2025-01-31T07:45:40Z",
      "updated_at": "2025-01-31T07:46:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1936806097",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936806097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 983,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1021,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936835457",
      "pull_request_review_id": 2585936766,
      "id": 1936835457,
      "node_id": "PRRC_kwDOABII585zccOB",
      "diff_hunk": "@@ -56,6 +56,19 @@ class BlockTemplate\n      * @returns if the block was processed, independent of block validity\n      */\n     virtual bool submitSolution(uint32_t version, uint32_t timestamp, uint32_t nonce, CTransactionRef coinbase) = 0;\n+\n+    /**\n+     * Waits for fees in the next block to rise, a new tip or the timeout.\n+     *\n+     * @param[in] options   Control the timeout (default forever) and by how much total fees\n+     *                      for the next block should rise (default infinite).\n+     *\n+     * @returns a new BlockTemplate or nullptr if the timeout occurs.",
      "path": "src/interfaces/mining.h",
      "position": null,
      "original_position": 20,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: strictly speaking it does not return `nullptr` but an empty `std::unique_ptr` (which owns `nullptr`).",
      "created_at": "2025-01-31T08:13:55Z",
      "updated_at": "2025-01-31T13:38:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1936835457",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1936835457"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937078288",
      "pull_request_review_id": 2585936766,
      "id": 1937078288,
      "node_id": "PRRC_kwDOABII585zdXgQ",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What is the reasoning to abort the entire program if `TipBlock()` returns an empty optional? Looks a bit too aggressive to me. `TipBlock()`'s doc says \"Might be unset during an early shutdown\". Is it not better to return an empty unique_ptr from `waitNext()` if this happens?",
      "created_at": "2025-01-31T11:23:45Z",
      "updated_at": "2025-01-31T13:38:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937078288",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937078288"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 958,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937123826",
      "pull_request_review_id": 2585936766,
      "id": 1937123826,
      "node_id": "PRRC_kwDOABII585zdiny",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;",
      "path": "src/node/interfaces.cpp",
      "position": 30,
      "original_position": 30,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "When `options.timeout` is `MillisecondsDouble::max()` it looks odd to add to it. This seems to work because of the underlying `double` type which ends up being `inf` and adding to `inf` results in `inf`. But if that is changed to an integer type this will break (overflow). Maybe at least comment on `BlockWaitOptions::timeout` that it must be of `double` type because of this, or to have `BlockWaitOptions::timeout` be of type `std::optional` with an empty optional meaning \"no timeout\". Then `deadline` would be optional as well.",
      "created_at": "2025-01-31T12:03:06Z",
      "updated_at": "2025-01-31T13:38:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937123826",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937123826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 949,
      "original_line": 949,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937133582",
      "pull_request_review_id": 2585936766,
      "id": 1937133582,
      "node_id": "PRRC_kwDOABII585zdlAO",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {\n+                    tip_changed = true;\n+                }\n+            }\n+\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + options.fee_threshold) return block_template;\n+                }\n+            }\n+\n+            /**\n+             * Break out of while when using mock time. While functional tests\n+             * can call setmocktime to move the clock and exit this loop, a\n+             * unit tests would need to spawn a thread to achieve this.\n+             * Making the while loop use now < deadline won't work either, because\n+             * then there's no wait to test its internals, e.g. the  20 minute\n+             * testnet exception.\n+             */\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the loop should be `while (now < deadline)` (instead of `<=`) and this should not exist. But then I do not understand what this means: \"because then there's no wait to test its internals, e.g. the 20 minute testnet exception\". Can you elaborate?",
      "created_at": "2025-01-31T12:12:09Z",
      "updated_at": "2025-01-31T13:38:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937133582",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937133582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1012,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937136963",
      "pull_request_review_id": 2585936766,
      "id": 1937136963,
      "node_id": "PRRC_kwDOABII585zdl1D",
      "diff_hunk": "@@ -61,6 +63,22 @@ struct BlockCreateOptions {\n      */\n     CScript coinbase_output_script{CScript() << OP_TRUE};\n };\n+\n+struct BlockWaitOptions {\n+    /**\n+     * How long to wait before returning nullptr instead of a new template.\n+     * Default is to wait forever.\n+     */\n+    MillisecondsDouble timeout{MillisecondsDouble::max()};\n+\n+    /**\n+     * Wait until total fees in the new template exceed fees in the origal\n+     * template by at least this amount (in sats). The default is to ignore\n+     * fee increases and only wait for a tip change.\n+     */\n+    CAmount fee_threshold{MAX_MONEY};",
      "path": "src/node/types.h",
      "position": null,
      "original_position": 27,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Consider using `std::optional` with an empty optional meaning \"no value\" instead of the magic values `MillisecondsDouble::max()` and `MAX_MONEY`.",
      "created_at": "2025-01-31T12:15:22Z",
      "updated_at": "2025-01-31T13:38:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937136963",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937136963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937311760",
      "pull_request_review_id": 2585936766,
      "id": 1937311760,
      "node_id": "PRRC_kwDOABII585zeQgQ",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {\n+                    tip_changed = true;\n+                }\n+            }\n+\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }",
      "path": "src/node/interfaces.cpp",
      "position": 93,
      "original_position": 81,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Looking at\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/8fa10edcd1706a1f0dc9d8c3adbc8efa3c7755bf/src/node/miner.cpp#L157\r\n\r\nisn't this equivalent to just `current_fees = m_block_template->vTxFees[0];`?",
      "created_at": "2025-01-31T13:19:27Z",
      "updated_at": "2025-01-31T13:38:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937311760",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937311760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": 1005,
      "original_start_line": 993,
      "start_side": "RIGHT",
      "line": 1012,
      "original_line": 1012,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937332052",
      "pull_request_review_id": 2585936766,
      "id": 1937332052,
      "node_id": "PRRC_kwDOABII585zeVdU",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n                if (now > tip_time + 20min) {\r\n```",
      "created_at": "2025-01-31T13:35:03Z",
      "updated_at": "2025-01-31T13:38:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937332052",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937332052"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 983,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937354583",
      "pull_request_review_id": 2586828657,
      "id": 1937354583,
      "node_id": "PRRC_kwDOABII585zea9X",
      "diff_hunk": "@@ -936,9 +936,87 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(CAmount fee_threshold, MillisecondsDouble timeout) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Special case to force create a fresh template\n+            if (!tip_changed && timeout == MillisecondsDouble(0) && fee_threshold == 0) {\n+                tip_changed = true;\n+            }\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + fee_threshold) return block_template;\n+                }\n+            }\n+\n+            // Break out of while when using mock time\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "956b449a51223cfa620d6c76d7ec37db5de86c3b",
      "in_reply_to_id": 1925533767,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just stumbled on this and posted a [comment to the PR elsewhere](https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937133582)... Having this only to make unit tests easier seems not enough justification to me.",
      "created_at": "2025-01-31T13:52:43Z",
      "updated_at": "2025-01-31T13:52:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937354583",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937354583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1005,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937357533",
      "pull_request_review_id": 2586837108,
      "id": 1937357533,
      "node_id": "PRRC_kwDOABII585zebrd",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {\n+                    tip_changed = true;\n+                }\n+            }\n+\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + options.fee_threshold) return block_template;\n+                }\n+            }\n+\n+            /**\n+             * Break out of while when using mock time. While functional tests\n+             * can call setmocktime to move the clock and exit this loop, a\n+             * unit tests would need to spawn a thread to achieve this.\n+             * Making the while loop use now < deadline won't work either, because\n+             * then there's no wait to test its internals, e.g. the  20 minute\n+             * testnet exception.\n+             */\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937133582,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Lets continue the discussion here https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1925533767 which is a previous comment about the same thing.",
      "created_at": "2025-01-31T13:54:19Z",
      "updated_at": "2025-01-31T13:54:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937357533",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937357533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1012,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937363516",
      "pull_request_review_id": 2586846258,
      "id": 1937363516,
      "node_id": "PRRC_kwDOABII585zedI8",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {\n+                    tip_changed = true;\n+                }\n+            }\n+\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + options.fee_threshold) return block_template;\n+                }\n+            }\n+\n+            /**\n+             * Break out of while when using mock time. While functional tests\n+             * can call setmocktime to move the clock and exit this loop, a\n+             * unit tests would need to spawn a thread to achieve this.\n+             * Making the while loop use now < deadline won't work either, because\n+             * then there's no wait to test its internals, e.g. the  20 minute\n+             * testnet exception.\n+             */\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937133582,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If the loop uses `while (now < deadline)` then it will never generate a template, so all the `BOOST_REQUIRE(block_template)` checks will fail.\r\n\r\nSo it has to use `<=`, but without the `break` here the test will freeze, because time doesn't move.",
      "created_at": "2025-01-31T13:58:15Z",
      "updated_at": "2025-01-31T13:58:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937363516",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937363516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1012,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937372244",
      "pull_request_review_id": 2586861457,
      "id": 1937372244,
      "node_id": "PRRC_kwDOABII585zefRU",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {\n+                    tip_changed = true;\n+                }\n+            }\n+\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }",
      "path": "src/node/interfaces.cpp",
      "position": 93,
      "original_position": 81,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937311760,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That might work actually, with an extra minus. But it seems brittle, because the line `pblocktemplate->vTxFees[0] = -nFees;` doesn't do anything afaik and might one day get deleted, causing this code to think fees are 0.\r\n\r\n---\r\n\r\nI just verified that deleting `pblocktemplate->vTxFees[0] = -nFees;` doesn't break any test.\r\n\r\nAdditionally I expect this to go away in favor of something more efficient sooner rather than later, see https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937451223",
      "created_at": "2025-01-31T14:05:00Z",
      "updated_at": "2025-01-31T15:50:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937372244",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937372244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": 1005,
      "original_start_line": 993,
      "start_side": "RIGHT",
      "line": 1012,
      "original_line": 1012,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937378509",
      "pull_request_review_id": 2586872407,
      "id": 1937378509,
      "node_id": "PRRC_kwDOABII585zegzN",
      "diff_hunk": "@@ -936,9 +936,87 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(CAmount fee_threshold, MillisecondsDouble timeout) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Special case to force create a fresh template\n+            if (!tip_changed && timeout == MillisecondsDouble(0) && fee_threshold == 0) {\n+                tip_changed = true;\n+            }\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + fee_threshold) return block_template;\n+                }\n+            }\n+\n+            // Break out of while when using mock time\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "956b449a51223cfa620d6c76d7ec37db5de86c3b",
      "in_reply_to_id": 1925533767,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> unit tests can't easily move mock time during a blocking call\r\n\r\nConsider the following pattern to do that. I think it would be better to have that in the tests instead of this `if (now == deadline)` in the main (production) code.\r\n\r\n```cpp\r\nstd::atomic_int now = 0;\r\n\r\nvoid waitNext(int timeout)\r\n{\r\n    const int deadline = now + timeout;\r\n    while (now < deadline) {\r\n        std::cout << \"waitNext() now=\" << now << \"\\n\";\r\n        std::this_thread::sleep_for(500ms);\r\n    }\r\n}\r\n\r\nint main(int, char**)\r\n{\r\n    std::atomic_bool stop_advancing_mocktime{false};\r\n    std::thread advance_mocktime{[&stop_advancing_mocktime]() {\r\n        while (!stop_advancing_mocktime) {\r\n            ++now;\r\n            std::this_thread::sleep_for(500ms);\r\n        }\r\n    }};\r\n    waitNext(5);\r\n    stop_advancing_mocktime = true;\r\n    advance_mocktime.join();\r\n    return 0;\r\n}\r\n```",
      "created_at": "2025-01-31T14:09:47Z",
      "updated_at": "2025-01-31T14:09:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937378509",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937378509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1005,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937405785",
      "pull_request_review_id": 2586937806,
      "id": 1937405785,
      "node_id": "PRRC_kwDOABII585zendZ",
      "diff_hunk": "@@ -61,6 +63,22 @@ struct BlockCreateOptions {\n      */\n     CScript coinbase_output_script{CScript() << OP_TRUE};\n };\n+\n+struct BlockWaitOptions {\n+    /**\n+     * How long to wait before returning nullptr instead of a new template.\n+     * Default is to wait forever.\n+     */\n+    MillisecondsDouble timeout{MillisecondsDouble::max()};\n+\n+    /**\n+     * Wait until total fees in the new template exceed fees in the origal\n+     * template by at least this amount (in sats). The default is to ignore\n+     * fee increases and only wait for a tip change.\n+     */\n+    CAmount fee_threshold{MAX_MONEY};",
      "path": "src/node/types.h",
      "position": null,
      "original_position": 27,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937136963,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "IIRC I used magic values back when these were passed in as arguments, but in a struct using an `std::optional` is not much friction. I'll look into that.",
      "created_at": "2025-01-31T14:29:14Z",
      "updated_at": "2025-01-31T14:29:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937405785",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937405785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937410103",
      "pull_request_review_id": 2586945176,
      "id": 1937410103,
      "node_id": "PRRC_kwDOABII585zeog3",
      "diff_hunk": "@@ -936,9 +936,87 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(CAmount fee_threshold, MillisecondsDouble timeout) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Special case to force create a fresh template\n+            if (!tip_changed && timeout == MillisecondsDouble(0) && fee_threshold == 0) {\n+                tip_changed = true;\n+            }\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + fee_threshold) return block_template;\n+                }\n+            }\n+\n+            // Break out of while when using mock time\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "956b449a51223cfa620d6c76d7ec37db5de86c3b",
      "in_reply_to_id": 1925533767,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think it would be better to have that in the tests instead of this `if (now == deadline)` in the main (production) code.\r\n\r\nDo we actually think that behavior is bad to have in production code? It seems like it's perfectly reasonable for production code to return either at the deadline or immediately after, and the choice is basically arbitrary for normal code but important for tests, so we are choosing a behavior that makes it more convenient to write tests and documenting that fact. This doesn't seem l like a bad thing to me, and it might be preferable to introducing another thread and risking making the tests nondeterministic. Just my thoughts, no strong opinion though.",
      "created_at": "2025-01-31T14:32:23Z",
      "updated_at": "2025-01-31T14:32:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937410103",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937410103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1005,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937423612",
      "pull_request_review_id": 2586968766,
      "id": 1937423612,
      "node_id": "PRRC_kwDOABII585zerz8",
      "diff_hunk": "@@ -61,6 +63,22 @@ struct BlockCreateOptions {\n      */\n     CScript coinbase_output_script{CScript() << OP_TRUE};\n };\n+\n+struct BlockWaitOptions {\n+    /**\n+     * How long to wait before returning nullptr instead of a new template.\n+     * Default is to wait forever.\n+     */\n+    MillisecondsDouble timeout{MillisecondsDouble::max()};\n+\n+    /**\n+     * Wait until total fees in the new template exceed fees in the origal\n+     * template by at least this amount (in sats). The default is to ignore\n+     * fee increases and only wait for a tip change.\n+     */\n+    CAmount fee_threshold{MAX_MONEY};",
      "path": "src/node/types.h",
      "position": null,
      "original_position": 27,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937136963,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> IIRC I used magic values back when these were passed in as arguments, but in a struct using an `std::optional` is not much friction. I'll look into that.\r\n\r\nIMO, MAX_MONEY is a magic value that would be good to replace with nullopt, but MillisecondsDouble::max() is not a magic value and the code would be simpler if it were kept.\r\n\r\nA magic value (imo) is a value that is handled specially and adds a special case, so replacing `CAmount fee_threshold` with std::optional` is good because the code actually has a *contains* a special case for not checking for any fee threshold, and so it is better to make that special case more explicit and directly controllable.\r\n\r\nBut the code does not contain any special case for MillisecondsDouble::max(), it is just treated correctly as a really large value, so changing that to use std::optional would only add a special case that wasn't previously there and make the code more complicated and fragile. So it would be better to keep the way it is.",
      "created_at": "2025-01-31T14:41:52Z",
      "updated_at": "2025-01-31T14:41:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937423612",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937423612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937441681",
      "pull_request_review_id": 2586999175,
      "id": 1937441681,
      "node_id": "PRRC_kwDOABII585zewOR",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;",
      "path": "src/node/interfaces.cpp",
      "position": 30,
      "original_position": 30,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937123826,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> But if that is changed to an integer type this will break (overflow).\r\n\r\nI don't think there is anything unusual about that. If you change a floating point variable to an integer, you should expect code using that variable to need to be updated to handle overflows correctly, because integer and floating point numbers overflow differently. This code could work correctly if it were switched to an integer. It would just need to use saturating integer operations like the ones in util/overflow.h.\r\n\r\nI also think an nullopt value is more semantically ambiguous. Specifying nullopt or \"no timeout\" could mean either return right away or wait forever. But specifying 1.7 x 10^308 seconds more clearly corresponds to waiting forever.",
      "created_at": "2025-01-31T14:54:15Z",
      "updated_at": "2025-01-31T14:54:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937441681",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937441681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 949,
      "original_line": 949,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937451223",
      "pull_request_review_id": 2587015084,
      "id": 1937451223,
      "node_id": "PRRC_kwDOABII585zeyjX",
      "diff_hunk": "@@ -936,9 +937,88 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "~~This is not the case, or at least, this is not dependent on cluster mempool.~~ EDIT: maybe it can actually be done much faster with cluster mempool, see [below](https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937550966).\r\n\r\nCluster mempool will make the block-building algorithm faster (or, possibly, have the option of producing a better-quality one), but operationally nothing changes: you need to effectively run the block-building algorithm to know what fees can be gathered.\r\n\r\nThere are a number of options if we just want an approximate \"how many fees\" faster, but they could be implemented today just as easily:\r\n* We could have a variant of the block-building code that does not actually remember the template, and only keeps track of the fees.\r\n* We could have a variant of the block-building code that avoids spending (as much) time in the bin-packing aspect to fill the last few kWU of the block.\r\n\r\nI think eventually, the correct approach is to have a background thread that continuously creates blocks for the block weight(s) requested, and store the result in a variable that's not under `cs_main`; the code here could then wait on it.",
      "created_at": "2025-01-31T15:00:48Z",
      "updated_at": "2025-01-31T16:13:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937451223",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937451223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937491375",
      "pull_request_review_id": 2587082863,
      "id": 1937491375,
      "node_id": "PRRC_kwDOABII585ze8Wv",
      "diff_hunk": "@@ -936,9 +937,88 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "in_reply_to_id": 1937451223,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I was hoping we could simply have a variable that tracks the total fees for the top 1 vMB, which is constantly updated as things are inserted and removed from the mempool.  \r\n\r\n\r\n(or the ability to register multiple such variables which the code here can then monitor)",
      "created_at": "2025-01-31T15:27:25Z",
      "updated_at": "2025-01-31T15:28:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937491375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937491375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937500659",
      "pull_request_review_id": 2587098819,
      "id": 1937500659,
      "node_id": "PRRC_kwDOABII585ze-nz",
      "diff_hunk": "@@ -936,9 +937,88 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "in_reply_to_id": 1937451223,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's probably fast enough that that can be done as an add-on, updated after every mempool change, but limited to every N milliseconds or so.",
      "created_at": "2025-01-31T15:34:14Z",
      "updated_at": "2025-01-31T15:34:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937500659",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937500659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937503273",
      "pull_request_review_id": 2587103379,
      "id": 1937503273,
      "node_id": "PRRC_kwDOABII585ze_Qp",
      "diff_hunk": "@@ -936,9 +937,88 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "in_reply_to_id": 1937451223,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@sipa, I imagine that an RBF over any transaction in the last built block template be an indicator that the previously built template improve.\r\n\r\nAnd since we would be using fee rate diagram for RBF's after cluster mempool, it could also be an indicator?\r\nBut higher mining score txs can also get it, so this is not that reliable.",
      "created_at": "2025-01-31T15:36:17Z",
      "updated_at": "2025-01-31T15:40:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937503273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937503273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937516539",
      "pull_request_review_id": 2587125889,
      "id": 1937516539,
      "node_id": "PRRC_kwDOABII585zfCf7",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {\n+                    tip_changed = true;\n+                }\n+            }\n+\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + options.fee_threshold) return block_template;\n+                }\n+            }\n+\n+            /**\n+             * Break out of while when using mock time. While functional tests\n+             * can call setmocktime to move the clock and exit this loop, a\n+             * unit tests would need to spawn a thread to achieve this.\n+             * Making the while loop use now < deadline won't work either, because\n+             * then there's no wait to test its internals, e.g. the  20 minute\n+             * testnet exception.\n+             */\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937133582,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You mean \"never generate a template\" when run from the tests, right? Why is that? The default timeout is `inf` so `now < deadline` should be `true`?\r\n\r\n> So it has to use <=, but without the break here the test will freeze, because time doesn't move.\r\n\r\nRight, but it is not too difficult to advance the time in unit tests.",
      "created_at": "2025-01-31T15:45:53Z",
      "updated_at": "2025-01-31T15:45:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937516539",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937516539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1012,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937522651",
      "pull_request_review_id": 2587136151,
      "id": 1937522651,
      "node_id": "PRRC_kwDOABII585zfD_b",
      "diff_hunk": "@@ -936,9 +936,87 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(CAmount fee_threshold, MillisecondsDouble timeout) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Special case to force create a fresh template\n+            if (!tip_changed && timeout == MillisecondsDouble(0) && fee_threshold == 0) {\n+                tip_changed = true;\n+            }\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + fee_threshold) return block_template;\n+                }\n+            }\n+\n+            // Break out of while when using mock time\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "956b449a51223cfa620d6c76d7ec37db5de86c3b",
      "in_reply_to_id": 1925533767,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Functionality-wise I think the behavior of the production code is ok. I am concerned about its readability and maintainability. It just looks confusing (to me).",
      "created_at": "2025-01-31T15:50:36Z",
      "updated_at": "2025-01-31T15:50:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937522651",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937522651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1005,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937527468",
      "pull_request_review_id": 2587144334,
      "id": 1937527468,
      "node_id": "PRRC_kwDOABII585zfFKs",
      "diff_hunk": "@@ -61,6 +63,22 @@ struct BlockCreateOptions {\n      */\n     CScript coinbase_output_script{CScript() << OP_TRUE};\n };\n+\n+struct BlockWaitOptions {\n+    /**\n+     * How long to wait before returning nullptr instead of a new template.\n+     * Default is to wait forever.\n+     */\n+    MillisecondsDouble timeout{MillisecondsDouble::max()};\n+\n+    /**\n+     * Wait until total fees in the new template exceed fees in the origal\n+     * template by at least this amount (in sats). The default is to ignore\n+     * fee increases and only wait for a tip change.\n+     */\n+    CAmount fee_threshold{MAX_MONEY};",
      "path": "src/node/types.h",
      "position": null,
      "original_position": 27,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937136963,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agreed about `MillisecondsDouble::max()`. Note here that we rely to have such a max value that when we add to it the result is the same max value (not overflow or cause unexpected things).",
      "created_at": "2025-01-31T15:53:40Z",
      "updated_at": "2025-01-31T15:53:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937527468",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937527468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937550966",
      "pull_request_review_id": 2587184308,
      "id": 1937550966,
      "node_id": "PRRC_kwDOABII585zfK52",
      "diff_hunk": "@@ -936,9 +937,88 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "in_reply_to_id": 1937451223,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just discussed this with @ismaelsadeeq a bit more.\r\n\r\nThe hard part is not tracking improvements to the mempool (that is ultimately what all of cluster mempool is, making this explicit), but knowing which improvements affect the top 1 MvB of the mempool and to what extent. My thinking was that we can't really maintain an index for that, as doing so would be less efficient than just recomputing when it's needed.\r\n\r\nBut maybe that is not the case. We could keep track at all times of (a) the sum of the fees F and sizes S in all chunks that (fully) fit in the top 1 MvB of a block, and (b) the first chunk C that does not (fully) fit. Any time a chunk is added whose feerate exceeds C's feerate, its fee/size is added to F & S. Any time such a chunk is removed, its fee is removed from F & S. Any time one wants to query the top block's fee, C may need to be walked up or down, so to make S <= 1000000 and S+size(C) > 1000000, but that can be a pretty fast operation, which only scales with the number of chunks affected in between, not with the total number of chunks. When a new block comes in it may be faster to recompute F/S/C from scratch than trying to keep it updated though.\r\n\r\nThis would give a super fast way of estimating top block fee, though will ignore binpacking effects entirely.\r\n\r\nThis needs #30535, though.\r\n",
      "created_at": "2025-01-31T16:09:19Z",
      "updated_at": "2025-01-31T16:27:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937550966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937550966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937555381",
      "pull_request_review_id": 2587191584,
      "id": 1937555381,
      "node_id": "PRRC_kwDOABII585zfL-1",
      "diff_hunk": "@@ -61,6 +63,22 @@ struct BlockCreateOptions {\n      */\n     CScript coinbase_output_script{CScript() << OP_TRUE};\n };\n+\n+struct BlockWaitOptions {\n+    /**\n+     * How long to wait before returning nullptr instead of a new template.\n+     * Default is to wait forever.\n+     */\n+    MillisecondsDouble timeout{MillisecondsDouble::max()};\n+\n+    /**\n+     * Wait until total fees in the new template exceed fees in the origal\n+     * template by at least this amount (in sats). The default is to ignore\n+     * fee increases and only wait for a tip change.\n+     */\n+    CAmount fee_threshold{MAX_MONEY};",
      "path": "src/node/types.h",
      "position": null,
      "original_position": 27,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937136963,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@ryanofsky do I understand correctly that for the `.capnp` there's no difference when making something an `std::optional`?",
      "created_at": "2025-01-31T16:12:00Z",
      "updated_at": "2025-01-31T16:12:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937555381",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937555381"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937566000",
      "pull_request_review_id": 2587211048,
      "id": 1937566000,
      "node_id": "PRRC_kwDOABII585zfOkw",
      "diff_hunk": "@@ -64,6 +64,9 @@ class BlockTemplate\n      *                      for the next block should rise (default infinite).",
      "path": "src/interfaces/mining.h",
      "position": 18,
      "original_position": 1,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1936317810,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed the commit message.",
      "created_at": "2025-01-31T16:20:08Z",
      "updated_at": "2025-01-31T16:20:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937566000",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937566000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937568342",
      "pull_request_review_id": 2587215673,
      "id": 1937568342,
      "node_id": "PRRC_kwDOABII585zfPJW",
      "diff_hunk": "@@ -56,6 +56,19 @@ class BlockTemplate\n      * @returns if the block was processed, independent of block validity\n      */\n     virtual bool submitSolution(uint32_t version, uint32_t timestamp, uint32_t nonce, CTransactionRef coinbase) = 0;\n+\n+    /**\n+     * Waits for fees in the next block to rise, a new tip or the timeout.\n+     *\n+     * @param[in] options   Control the timeout (default forever) and by how much total fees\n+     *                      for the next block should rise (default infinite).\n+     *\n+     * @returns a new BlockTemplate or nullptr if the timeout occurs.",
      "path": "src/interfaces/mining.h",
      "position": null,
      "original_position": 20,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1936835457,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed to \"nothing\"",
      "created_at": "2025-01-31T16:21:57Z",
      "updated_at": "2025-01-31T16:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937568342",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937568342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937577466",
      "pull_request_review_id": 2587237621,
      "id": 1937577466,
      "node_id": "PRRC_kwDOABII585zfRX6",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937078288,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I turned `Assert` into `Assume`. When comparing an `std::optional<uint256>` with a `uint256` it will be considered unequal if the optional is empty. https://en.cppreference.com/w/cpp/utility/optional/operator_cmp (24)\r\n\r\nThis would trigger a spurious `tip_changed`. But since it can only happen during shutdown, it's not a problem. And not fatal in any case.",
      "created_at": "2025-01-31T16:28:29Z",
      "updated_at": "2025-01-31T16:28:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937577466",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937577466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 958,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937579881",
      "pull_request_review_id": 2587243345,
      "id": 1937579881,
      "node_id": "PRRC_kwDOABII585zfR9p",
      "diff_hunk": "@@ -936,9 +937,88 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "a61fb2fd2d6b338c08c619e4605521a41bd3edd9",
      "in_reply_to_id": 1937451223,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I adjusted the comment.",
      "created_at": "2025-01-31T16:30:27Z",
      "updated_at": "2025-01-31T16:30:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937579881",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937579881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937596836",
      "pull_request_review_id": 2587272523,
      "id": 1937596836,
      "node_id": "PRRC_kwDOABII585zfWGk",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The earlier discussion is unclear to me. Is it possible that `TipBlock()` returns `std::nullopt` under non-error conditions (including shutdown)? If so, there should not be an `Assume()` here. Those are for conditions we believe are not possible if the code is correct.",
      "created_at": "2025-01-31T16:44:37Z",
      "updated_at": "2025-01-31T18:21:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937596836",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937596836"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 957,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937600509",
      "pull_request_review_id": 2587272523,
      "id": 1937600509,
      "node_id": "PRRC_kwDOABII585zfW_9",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(In case the `Assume()` above is correct, see my other comment).\r\n\r\nIt seems wasteful to call `TipBlock()` twice here. I'd suggest:\r\n```c++\r\nauto tip_block = notifications().TipBlock();\r\nAssume(tip_block);\r\ntip_changed = m_block_template->block.hashPrevBlock;\r\nreturn tip_changed || chainman().m_interrupt;\r\n```\r\n",
      "created_at": "2025-01-31T16:47:39Z",
      "updated_at": "2025-01-31T18:21:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937600509",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937600509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 958,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937622086",
      "pull_request_review_id": 2587314094,
      "id": 1937622086,
      "node_id": "PRRC_kwDOABII585zfcRG",
      "diff_hunk": "@@ -61,6 +63,22 @@ struct BlockCreateOptions {\n      */\n     CScript coinbase_output_script{CScript() << OP_TRUE};\n };\n+\n+struct BlockWaitOptions {\n+    /**\n+     * How long to wait before returning nullptr instead of a new template.\n+     * Default is to wait forever.\n+     */\n+    MillisecondsDouble timeout{MillisecondsDouble::max()};\n+\n+    /**\n+     * Wait until total fees in the new template exceed fees in the origal\n+     * template by at least this amount (in sats). The default is to ignore\n+     * fee increases and only wait for a tip change.\n+     */\n+    CAmount fee_threshold{MAX_MONEY};",
      "path": "src/node/types.h",
      "position": null,
      "original_position": 27,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937136963,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> @ryanofsky do I understand correctly that for the `.capnp` there's no difference when making something an `std::optional`?\r\n\r\nIt depends on the type. In capnproto schemas primitive fields (numbers, bools, enums, unions) are not optional and are always present. If these fields are not assigned values they are just initialized to 0. So to represent a std::optional\\<T> value where T is a primitive you have to change the capnproto schema to be able to represent std::nullopt differently somehow, unless you are ok with std::nullopt being represented as 0.\r\n\r\nCapnproto does allow non-primitive fields (data, text, struct, list fields) to be missing so you don't need to change the capnproto schema to use std::optional for these. For these fields a std::nullopt field is just serialized with the field unset, and this is not ambiguous.\r\n\r\nThe difference between primitive/non-primitve fields is explained at https://capnproto.org/faq.html#how-do-i-make-a-field-optional and the faq recommends using a union with Void to represent optional primitive fields(*). Unfortunately though, I didn't know about that trick and I don't think libmultiprocess currently supports that, although it could. Another natural way to represent an optional value might just to use a List() type and only populate it with 0 or 1 elements.\r\n\r\nBut actually the way I've supported optional primitive fields in libmultiprocess so far has just been to accompany them with a boolean \"has\" field. So for example the `Chain::getHeight` method which returns `std::optional<int>` in c++ returns [`(result :Int32, hasResult :Bool)`](https://github.com/ryanofsky/bitcoin/blob/64b833854a34d87cde4e0ca4173d75012c401a7a/src/ipc/capnp/chain.capnp#L20) in capnproto. I know this works for parameters and returns values, though I'm not sure if it works for struct fields. You could just declare the struct to have a `hasFeeThreshold: Bool` value and I could fix this in libmultiprocess if it isn't working.\r\n\r\nOr if we think maybe `List(Int64)` or `Union(Void, Int64)` would be better ways to represent `std::optional<Int64>` fields we could use one of those representations and I can extend libmultiprocess to support them.\r\n\r\n(*) ~I think the faq might be a little buggy, though, because I believe the Void field needs to come before the Int32 field in its example for Void to be the default value instead of 0.~. EDIT: NVM faq is actually fine. I forgot the schema language allows setting default values so as long as the default value is void this is fine\r\n\r\n",
      "created_at": "2025-01-31T17:05:27Z",
      "updated_at": "2025-01-31T18:00:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937622086",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937622086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937644528",
      "pull_request_review_id": 2587351778,
      "id": 1937644528,
      "node_id": "PRRC_kwDOABII585zfhvw",
      "diff_hunk": "@@ -39,6 +40,11 @@ struct BlockCreateOptions $Proxy.wrap(\"node::BlockCreateOptions\") {\n     coinbaseOutputMaxAdditionalSigops @2 :UInt64 $Proxy.name(\"coinbase_output_max_additional_sigops\");\n }\n \n+struct BlockWaitOptions $Proxy.wrap(\"node::BlockWaitOptions\") {",
      "path": "src/ipc/capnp/mining.capnp",
      "position": 12,
      "original_position": 12,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "22cf6cdb4190482b486752dae4e9dc3b44cfcb1e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"miner: have waitNext return after 20 min on testnet\" (22cf6cdb4190482b486752dae4e9dc3b44cfcb1e):\r\n\r\nNote for a possible followup. I think this representation of the options struct should work fine for now as long as the client initializing the BlockWaitOptions struct is a c++ client using the libmultiprocess library.\r\n\r\nHowever, this representation of the options struct might not be the most convenient for other clients, like a possible rust client, because by default these fields will both be set to 0 and interpreted by the server as 0, so the rust client will have to manually remember to set these fields to max values if they want default behavior.\r\n\r\nThis problem could be avoided by adding additional `hasTimeout` and `hasFeeThreshold` bool fields which will both default to false, and which should cause the c++ server code code to automatically leave the default c++ struct field values in place and not overwrite them with 0. Or other representations like the union(Void, T) representation mentioned https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937622086 could also work. Any representation that results in default behavior when a capnproto client leaves these fields unset would work.\r\n\r\nThis can be a followup though, since default libmultiprocess c++ client will initialize both these fields from a source C++ struct which has the correct default values.\r\n\r\n",
      "created_at": "2025-01-31T17:25:52Z",
      "updated_at": "2025-01-31T17:25:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937644528",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937644528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 43,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937718497",
      "pull_request_review_id": 2587461963,
      "id": 1937718497,
      "node_id": "PRRC_kwDOABII585zfzzh",
      "diff_hunk": "@@ -39,6 +40,11 @@ struct BlockCreateOptions $Proxy.wrap(\"node::BlockCreateOptions\") {\n     coinbaseOutputMaxAdditionalSigops @2 :UInt64 $Proxy.name(\"coinbase_output_max_additional_sigops\");\n }\n \n+struct BlockWaitOptions $Proxy.wrap(\"node::BlockWaitOptions\") {",
      "path": "src/ipc/capnp/mining.capnp",
      "position": 12,
      "original_position": 12,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "22cf6cdb4190482b486752dae4e9dc3b44cfcb1e",
      "in_reply_to_id": 1937644528,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937644528\r\n\r\nActually never mind, there is a better solution here. I forgot capnproto *does* support setting default values, using syntax shown https://capnproto.org/language.html#structs, but for some reason I had thought it did not support them. It supports default values using a xor trick described https://capnproto.org/encoding.html#default-values).\r\n\r\nSo recommendation here could be to set default values in the capnproto struct to match default values in the c++ struct. But again this could be a followup and it only affects other potential clients like rust clients, not c++ client using libmultiprocess since they will just be serializing a c++ struct which already has the defaults set.",
      "created_at": "2025-01-31T17:57:10Z",
      "updated_at": "2025-01-31T18:03:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937718497",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937718497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 43,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937739579",
      "pull_request_review_id": 2587272523,
      "id": 1937739579,
      "node_id": "PRRC_kwDOABII585zf487",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {",
      "path": "src/node/interfaces.cpp",
      "position": 51,
      "original_position": 37,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is it possible that `notifications.TipBlock()` has changed already, before the `m_tip_block_mutex` lock is grabbed? If so, we'd wait up to a full second before noticing?",
      "created_at": "2025-01-31T18:18:30Z",
      "updated_at": "2025-01-31T18:21:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937739579",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937739579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 970,
      "original_line": 970,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937741741",
      "pull_request_review_id": 2587272523,
      "id": 1937741741,
      "node_id": "PRRC_kwDOABII585zf5et",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            /**\n+             * We determine if fees increased compared to the previous template by generating\n+             * a fresh template. There may be more efficient ways to determine how much\n+             * (approximate) fees for the next block increased, perhaps more so after\n+             * Cluster Mempool.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {",
      "path": "src/node/interfaces.cpp",
      "position": 81,
      "original_position": 61,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Similarly here, is it possible the tip block has changed after the 1s wait above expired, but before `cs_main` is grabbed above? This could be easily detect by `tip_changed || block_template->block.hashPrevBlock !=  m_block_template->block.hashPrevBlock` here (the `tip_changed ||` is perhaps not even necessary?).",
      "created_at": "2025-01-31T18:20:47Z",
      "updated_at": "2025-01-31T18:21:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937741741",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937741741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1000,
      "original_line": 1000,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937755456",
      "pull_request_review_id": 2587522856,
      "id": 1937755456,
      "node_id": "PRRC_kwDOABII585zf81A",
      "diff_hunk": "@@ -39,6 +40,11 @@ struct BlockCreateOptions $Proxy.wrap(\"node::BlockCreateOptions\") {\n     coinbaseOutputMaxAdditionalSigops @2 :UInt64 $Proxy.name(\"coinbase_output_max_additional_sigops\");\n }\n \n+struct BlockWaitOptions $Proxy.wrap(\"node::BlockWaitOptions\") {",
      "path": "src/ipc/capnp/mining.capnp",
      "position": 12,
      "original_position": 12,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "22cf6cdb4190482b486752dae4e9dc3b44cfcb1e",
      "in_reply_to_id": 1937644528,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'd really like this to be easy to use for a Rust client as early as possible. It seems better to revert to the magic value for now.",
      "created_at": "2025-01-31T18:34:08Z",
      "updated_at": "2025-01-31T18:34:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937755456",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937755456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 43,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937772174",
      "pull_request_review_id": 2587549962,
      "id": 1937772174,
      "node_id": "PRRC_kwDOABII585zgA6O",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": 1937596836,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The assume is correct, but the assert was a bit overzealous. `waitNext()` is a method on `BlockTemplate`. You can't generate a template before there's a tip, so it's impossible for this fail.\r\n\r\nIt's possible that the node is shut down when `TipBlock()` still returns `std::nullopt`, but in that scenario there can't be a `BlockTemplate`. The value doesn't get unset during shutdown.",
      "created_at": "2025-01-31T18:50:33Z",
      "updated_at": "2025-01-31T18:51:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937772174",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937772174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 957,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937777590",
      "pull_request_review_id": 2587561700,
      "id": 1937777590,
      "node_id": "PRRC_kwDOABII585zgCO2",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": 1937600509,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taken (with some changes)",
      "created_at": "2025-01-31T18:55:26Z",
      "updated_at": "2025-01-31T18:55:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937777590",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937777590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 958,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937779528",
      "pull_request_review_id": 2587564943,
      "id": 1937779528,
      "node_id": "PRRC_kwDOABII585zgCtI",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": 1937596836,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Got it.",
      "created_at": "2025-01-31T18:57:19Z",
      "updated_at": "2025-01-31T18:57:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937779528",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937779528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 957,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937808429",
      "pull_request_review_id": 2587614296,
      "id": 1937808429,
      "node_id": "PRRC_kwDOABII585zgJwt",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {",
      "path": "src/node/interfaces.cpp",
      "position": 51,
      "original_position": 37,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": 1937739579,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I added check before we start the wait.",
      "created_at": "2025-01-31T19:26:45Z",
      "updated_at": "2025-01-31T19:26:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937808429",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937808429"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 970,
      "original_line": 970,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937809044",
      "pull_request_review_id": 2587615058,
      "id": 1937809044,
      "node_id": "PRRC_kwDOABII585zgJ6U",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            /**\n+             * We determine if fees increased compared to the previous template by generating\n+             * a fresh template. There may be more efficient ways to determine how much\n+             * (approximate) fees for the next block increased, perhaps more so after\n+             * Cluster Mempool.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {",
      "path": "src/node/interfaces.cpp",
      "position": 81,
      "original_position": 61,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": 1937741741,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If that happens we'll catch it at the start of the next loop, with the above change.",
      "created_at": "2025-01-31T19:26:51Z",
      "updated_at": "2025-01-31T19:26:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937809044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937809044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1000,
      "original_line": 1000,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937818071",
      "pull_request_review_id": 2587628090,
      "id": 1937818071,
      "node_id": "PRRC_kwDOABII585zgMHX",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            /**\n+             * We determine if fees increased compared to the previous template by generating\n+             * a fresh template. There may be more efficient ways to determine how much\n+             * (approximate) fees for the next block increased, perhaps more so after\n+             * Cluster Mempool.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {",
      "path": "src/node/interfaces.cpp",
      "position": 81,
      "original_position": 61,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": 1937741741,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`m_tip_block_mutex` and `cs_main` locks don't jive well, so I limited the places where we actually check",
      "created_at": "2025-01-31T19:28:23Z",
      "updated_at": "2025-01-31T19:28:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937818071",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937818071"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1000,
      "original_line": 1000,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937834069",
      "pull_request_review_id": 2587651239,
      "id": 1937834069,
      "node_id": "PRRC_kwDOABII585zgQBV",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": 1937596836,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I added a comment to remember this.",
      "created_at": "2025-01-31T19:32:01Z",
      "updated_at": "2025-01-31T19:32:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937834069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937834069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 957,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937839814",
      "pull_request_review_id": 2587659740,
      "id": 1937839814,
      "node_id": "PRRC_kwDOABII585zgRbG",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {\n+                    tip_changed = true;\n+                }\n+            }\n+\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + options.fee_threshold) return block_template;\n+                }\n+            }\n+\n+            /**\n+             * Break out of while when using mock time. While functional tests\n+             * can call setmocktime to move the clock and exit this loop, a\n+             * unit tests would need to spawn a thread to achieve this.\n+             * Making the while loop use now < deadline won't work either, because\n+             * then there's no wait to test its internals, e.g. the  20 minute\n+             * testnet exception.\n+             */\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937133582,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, when run from the tests.\r\n\r\nIt would require a second thread, because the main thread of the unit test is waiting on `waitNext()`.",
      "created_at": "2025-01-31T19:33:30Z",
      "updated_at": "2025-01-31T19:34:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937839814",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1937839814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1012,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938204958",
      "pull_request_review_id": 2588257214,
      "id": 1938204958,
      "node_id": "PRRC_kwDOABII585zhqke",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {\n+                    tip_changed = true;\n+                }\n+            }\n+\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + options.fee_threshold) return block_template;\n+                }\n+            }\n+\n+            /**\n+             * Break out of while when using mock time. While functional tests\n+             * can call setmocktime to move the clock and exit this loop, a\n+             * unit tests would need to spawn a thread to achieve this.\n+             * Making the while loop use now < deadline won't work either, because\n+             * then there's no wait to test its internals, e.g. the  20 minute\n+             * testnet exception.\n+             */\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937133582,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, it will never generate a template because it will never exit from `waitNext()` (when run from unit tests with mocktime which never advances). \"BOOST_REQUIRE(block_template) checks will fail\" -- they will never be reached in that case.\r\n\r\nWhat about this (unit tests will use timeout=0):\r\n\r\n```\r\nnow = now()\r\ndeadline = now + timeout;\r\ndo {\r\n    stuff;\r\n    now = now();\r\n} while (now < deadline);\r\n```\r\nit will execute the body of the loop exactly once when given timeout=0 regardless of whether the clock advances or not.",
      "created_at": "2025-02-01T05:43:04Z",
      "updated_at": "2025-02-01T05:43:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1938204958",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938204958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1012,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938233022",
      "pull_request_review_id": 2588298019,
      "id": 1938233022,
      "node_id": "PRRC_kwDOABII585zhxa-",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {\n+                    tip_changed = true;\n+                }\n+            }\n+\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + options.fee_threshold) return block_template;\n+                }\n+            }\n+\n+            /**\n+             * Break out of while when using mock time. While functional tests\n+             * can call setmocktime to move the clock and exit this loop, a\n+             * unit tests would need to spawn a thread to achieve this.\n+             * Making the while loop use now < deadline won't work either, because\n+             * then there's no wait to test its internals, e.g. the  20 minute\n+             * testnet exception.\n+             */\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937133582,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it's better explicitly mention the test issue:\r\n1. Less likely for someone to accidentally break it and be confused\r\n2. Maybe someone adds a nice macro one day `RUN_COMMAND_DO_OTHER_THING_IN_NEW_THREAD_AFTER(command, delay)`\r\n(or 3. have an option to make mock time move)",
      "created_at": "2025-02-01T08:48:27Z",
      "updated_at": "2025-02-01T08:49:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1938233022",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938233022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1012,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938953860",
      "pull_request_review_id": 2589186973,
      "id": 1938953860,
      "node_id": "PRRC_kwDOABII585zkhaE",
      "diff_hunk": "@@ -61,6 +63,22 @@ struct BlockCreateOptions {\n      */\n     CScript coinbase_output_script{CScript() << OP_TRUE};\n };\n+\n+struct BlockWaitOptions {\n+    /**\n+     * How long to wait before returning nullptr instead of a new template.\n+     * Default is to wait forever.\n+     */\n+    MillisecondsDouble timeout{MillisecondsDouble::max()};\n+\n+    /**\n+     * Wait until total fees in the new template exceed fees in the origal\n+     * template by at least this amount (in sats). The default is to ignore\n+     * fee increases and only wait for a tip change.\n+     */\n+    CAmount fee_threshold{MAX_MONEY};",
      "path": "src/node/types.h",
      "position": null,
      "original_position": 27,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937136963,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, I think using `MAX_MONEY` as magic value to mean \"no threshold\" would be nice to avoid but is not a blocker for this PR. Accompanying boolean \"has\" field is fine too.",
      "created_at": "2025-02-03T08:16:56Z",
      "updated_at": "2025-02-03T08:16:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1938953860",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938953860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 67,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938960467",
      "pull_request_review_id": 2589196920,
      "id": 1938960467,
      "node_id": "PRRC_kwDOABII585zkjBT",
      "diff_hunk": "@@ -936,9 +937,112 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        bool tip_changed{false};\n+        // Helper to check if the tip has has changed, and also update tip_changed.",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "5dd3575ae1562eb77f8dfb6b7c2dc68574e2182f",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n        // Helper to check if the tip has changed, and also update tip_changed.\r\n```",
      "created_at": "2025-02-03T08:21:54Z",
      "updated_at": "2025-02-03T08:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1938960467",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938960467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 954,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938970989",
      "pull_request_review_id": 2589196920,
      "id": 1938970989,
      "node_id": "PRRC_kwDOABII585zkllt",
      "diff_hunk": "@@ -936,9 +937,112 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        bool tip_changed{false};\n+        // Helper to check if the tip has has changed, and also update tip_changed.\n+        auto check_tip_changed = [this, &tip_changed]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+            AssertLockHeld(notifications().m_tip_block_mutex);\n+            if (tip_changed) return true;\n+            const auto tip_block{notifications().TipBlock()};\n+            // This is an instance method on BlockTemplate and no template\n+            // could have been generated before a tip exists.\n+            Assume(tip_block);\n+            tip_changed = tip_block != m_block_template->block.hashPrevBlock;\n+            return tip_changed;\n+        };\n+\n+        while (now <= deadline) {\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                // First make sure the tip hasn't already changed:\n+                check_tip_changed() || notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    return check_tip_changed() || chainman().m_interrupt;\n+                });",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "5dd3575ae1562eb77f8dfb6b7c2dc68574e2182f",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`wait_until()` will first call the predicate, so `check_tip_changed() || ` is not needed. The above code is equivalent to:\r\n\r\n```cpp\r\n                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\r\n                    return check_tip_changed() || chainman().m_interrupt;\r\n                });\r\n```",
      "created_at": "2025-02-03T08:30:23Z",
      "updated_at": "2025-02-03T08:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1938970989",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1938970989"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 969,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 972,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939003712",
      "pull_request_review_id": 2589266344,
      "id": 1939003712,
      "node_id": "PRRC_kwDOABII585zktlA",
      "diff_hunk": "@@ -936,9 +937,112 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        bool tip_changed{false};\n+        // Helper to check if the tip has has changed, and also update tip_changed.\n+        auto check_tip_changed = [this, &tip_changed]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+            AssertLockHeld(notifications().m_tip_block_mutex);\n+            if (tip_changed) return true;\n+            const auto tip_block{notifications().TipBlock()};\n+            // This is an instance method on BlockTemplate and no template\n+            // could have been generated before a tip exists.\n+            Assume(tip_block);\n+            tip_changed = tip_block != m_block_template->block.hashPrevBlock;\n+            return tip_changed;\n+        };\n+\n+        while (now <= deadline) {\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                // First make sure the tip hasn't already changed:\n+                check_tip_changed() || notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    return check_tip_changed() || chainman().m_interrupt;\n+                });",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "5dd3575ae1562eb77f8dfb6b7c2dc68574e2182f",
      "in_reply_to_id": 1938970989,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah oops, we're going in circles, I forgot about this as well. Will add a comment.",
      "created_at": "2025-02-03T08:54:18Z",
      "updated_at": "2025-02-03T08:54:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939003712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939003712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 969,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 972,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939023678",
      "pull_request_review_id": 2589300932,
      "id": 1939023678,
      "node_id": "PRRC_kwDOABII585zkyc-",
      "diff_hunk": "@@ -936,9 +937,112 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        bool tip_changed{false};\n+        // Helper to check if the tip has has changed, and also update tip_changed.\n+        auto check_tip_changed = [this, &tip_changed]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+            AssertLockHeld(notifications().m_tip_block_mutex);\n+            if (tip_changed) return true;\n+            const auto tip_block{notifications().TipBlock()};\n+            // This is an instance method on BlockTemplate and no template\n+            // could have been generated before a tip exists.\n+            Assume(tip_block);\n+            tip_changed = tip_block != m_block_template->block.hashPrevBlock;\n+            return tip_changed;\n+        };\n+\n+        while (now <= deadline) {\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                // First make sure the tip hasn't already changed:\n+                check_tip_changed() || notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    return check_tip_changed() || chainman().m_interrupt;\n+                });",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "5dd3575ae1562eb77f8dfb6b7c2dc68574e2182f",
      "in_reply_to_id": 1938970989,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@ryanofsky pointed out the same mistake in a different (now closed) PR: https://github.com/bitcoin/bitcoin/pull/31297#discussion_r1848409060",
      "created_at": "2025-02-03T09:07:10Z",
      "updated_at": "2025-02-03T09:07:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939023678",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939023678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 969,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 972,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939026787",
      "pull_request_review_id": 2589306256,
      "id": 1939026787,
      "node_id": "PRRC_kwDOABII585zkzNj",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {",
      "path": "src/node/interfaces.cpp",
      "position": 51,
      "original_position": 37,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": 1937739579,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Actually, I forgot that `wait_until` already checks the predicate once before waiting. See https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1938970989",
      "created_at": "2025-02-03T09:08:58Z",
      "updated_at": "2025-02-03T09:08:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939026787",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939026787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 970,
      "original_line": 970,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939056704",
      "pull_request_review_id": 2589354935,
      "id": 1939056704,
      "node_id": "PRRC_kwDOABII585zk6hA",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {\n+                    tip_changed = true;\n+                }\n+            }\n+\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + options.fee_threshold) return block_template;\n+                }\n+            }\n+\n+            /**\n+             * Break out of while when using mock time. While functional tests\n+             * can call setmocktime to move the clock and exit this loop, a\n+             * unit tests would need to spawn a thread to achieve this.\n+             * Making the while loop use now < deadline won't work either, because\n+             * then there's no wait to test its internals, e.g. the  20 minute\n+             * testnet exception.\n+             */\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937133582,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> then there's no wait to test its internals\r\n\r\nShould that be \"no way\"?",
      "created_at": "2025-02-03T09:29:09Z",
      "updated_at": "2025-02-03T09:29:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939056704",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939056704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1012,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939070752",
      "pull_request_review_id": 2589377229,
      "id": 1939070752,
      "node_id": "PRRC_kwDOABII585zk98g",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {\n+                    tip_changed = true;\n+                }\n+            }\n+\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + options.fee_threshold) return block_template;\n+                }\n+            }\n+\n+            /**\n+             * Break out of while when using mock time. While functional tests\n+             * can call setmocktime to move the clock and exit this loop, a\n+             * unit tests would need to spawn a thread to achieve this.\n+             * Making the while loop use now < deadline won't work either, because\n+             * then there's no wait to test its internals, e.g. the  20 minute\n+             * testnet exception.\n+             */\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937133582,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "~Will push fix if I need to change anything else.~\r\n\r\nFixed",
      "created_at": "2025-02-03T09:38:29Z",
      "updated_at": "2025-02-03T09:40:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939070752",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939070752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1012,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939075014",
      "pull_request_review_id": 2589384072,
      "id": 1939075014,
      "node_id": "PRRC_kwDOABII585zk-_G",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {\n+                    tip_changed = true;\n+                }\n+            }\n+\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + options.fee_threshold) return block_template;\n+                }\n+            }\n+\n+            /**\n+             * Break out of while when using mock time. While functional tests\n+             * can call setmocktime to move the clock and exit this loop, a\n+             * unit tests would need to spawn a thread to achieve this.\n+             * Making the while loop use now < deadline won't work either, because\n+             * then there's no wait to test its internals, e.g. the  20 minute\n+             * testnet exception.\n+             */\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937133582,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Consider the following. It avoids the hackish part and achieves the same purpose:\r\n\r\n```diff\r\ndiff --git i/src/node/interfaces.cpp w/src/node/interfaces.cpp\r\nindex 9fe4984cd0..8022b47b5e 100644\r\n--- i/src/node/interfaces.cpp\r\n+++ w/src/node/interfaces.cpp\r\n@@ -960,13 +960,13 @@ public:\r\n             // could have been generated before a tip exists.\r\n             Assume(tip_block);\r\n             tip_changed = tip_block != m_block_template->block.hashPrevBlock;\r\n             return tip_changed;\r\n         };\r\n \r\n-        while (now <= deadline) {\r\n+        do {\r\n             {\r\n                 WAIT_LOCK(notifications().m_tip_block_mutex, lock);\r\n                 // Note that wait_until() checks the predicate before waiting\r\n                 notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\r\n                     return check_tip_changed() || chainman().m_interrupt;\r\n                 });\r\n@@ -1018,23 +1018,14 @@ public:\r\n                     new_fees += fee;\r\n                     Assume(options.fee_threshold != MAX_MONEY);\r\n                     if (new_fees >= current_fees + options.fee_threshold) return block_template;\r\n                 }\r\n             }\r\n \r\n-            /**\r\n-             * Break out of while when using mock time. While functional tests\r\n-             * can call setmocktime to move the clock and exit this loop, a\r\n-             * unit tests would need to spawn a thread to achieve this.\r\n-             * Making the while loop use now < deadline won't work either, because\r\n-             * then there's no wait to test its internals, e.g. the  20 minute\r\n-             * testnet exception.\r\n-             */\r\n-            if (now == deadline) break;\r\n             now = NodeClock::now();\r\n-        }\r\n+        } while (now < deadline);\r\n \r\n         return nullptr;\r\n     }\r\n \r\n     const BlockAssembler::Options m_assemble_options;\r\n \r\n```",
      "created_at": "2025-02-03T09:41:21Z",
      "updated_at": "2025-02-03T09:41:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939075014",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939075014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1012,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939077245",
      "pull_request_review_id": 2589387867,
      "id": 1939077245,
      "node_id": "PRRC_kwDOABII585zk_h9",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937332052,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is marked as resolved, but the code is not changed.",
      "created_at": "2025-02-03T09:42:57Z",
      "updated_at": "2025-02-03T09:42:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939077245",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939077245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 983,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939094701",
      "pull_request_review_id": 2589419746,
      "id": 1939094701,
      "node_id": "PRRC_kwDOABII585zlDyt",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937332052,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I lost it in a rebase, taken again.",
      "created_at": "2025-02-03T09:54:25Z",
      "updated_at": "2025-02-03T09:54:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939094701",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939094701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 983,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939095877",
      "pull_request_review_id": 2589421598,
      "id": 1939095877,
      "node_id": "PRRC_kwDOABII585zlEFF",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {\n+                    tip_changed = true;\n+                }\n+            }\n+\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }\n+\n+                CAmount new_fees = 0;\n+                for (CAmount fee : block_template->m_block_template->vTxFees) {\n+                    // Skip coinbase\n+                    if (fee < 0) continue;\n+                    new_fees += fee;\n+                    if (new_fees >= current_fees + options.fee_threshold) return block_template;\n+                }\n+            }\n+\n+            /**\n+             * Break out of while when using mock time. While functional tests\n+             * can call setmocktime to move the clock and exit this loop, a\n+             * unit tests would need to spawn a thread to achieve this.\n+             * Making the while loop use now < deadline won't work either, because\n+             * then there's no wait to test its internals, e.g. the  20 minute\n+             * testnet exception.\n+             */\n+            if (now == deadline) break;",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937133582,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taken",
      "created_at": "2025-02-03T09:55:09Z",
      "updated_at": "2025-02-03T09:55:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939095877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939095877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": 1012,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1032,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939205224",
      "pull_request_review_id": 2589598592,
      "id": 1939205224,
      "node_id": "PRRC_kwDOABII585zlexo",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {\n+                    tip_changed = true;\n+                }\n+            }\n+\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }",
      "path": "src/node/interfaces.cpp",
      "position": 93,
      "original_position": 81,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937311760,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can there be a test that enforces `pblocktemplate->vTxFees[0] = -nFees`? Ie the test to fail if that line is removed?",
      "created_at": "2025-02-03T11:13:26Z",
      "updated_at": "2025-02-03T11:13:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939205224",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939205224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": 1005,
      "original_start_line": 993,
      "start_side": "RIGHT",
      "line": 1012,
      "original_line": 1012,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939240601",
      "pull_request_review_id": 2589655750,
      "id": 1939240601,
      "node_id": "PRRC_kwDOABII585zlnaZ",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": 1937596836,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> but in that scenario there can't be a `BlockTemplate` ...\r\n\r\nWhat about\r\n\r\n1. A `BlockTemplate` is generated\r\n2. Shutdown is initiated\r\n3. This code is reached and `TipBlock()` returns an empty optional, triggering the `Assume()`\r\n\r\nCan't happen?",
      "created_at": "2025-02-03T11:42:40Z",
      "updated_at": "2025-02-03T11:42:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939240601",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939240601"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 957,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939287479",
      "pull_request_review_id": 2589735052,
      "id": 1939287479,
      "node_id": "PRRC_kwDOABII585zly23",
      "diff_hunk": "@@ -936,9 +937,99 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+        const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assert(notifications().TipBlock());\n+                    tip_changed = notifications().TipBlock() != m_block_template->block.hashPrevBlock;\n+                    return tip_changed || chainman().m_interrupt;\n+                });\n+            }\n+\n+            if (chainman().m_interrupt) return nullptr;\n+\n+            // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\n+            LOCK(::cs_main);\n+\n+            // On test networks return a minimum difficulty block after 20 minutes\n+            if (!tip_changed && allow_min_difficulty) {\n+                const NodeClock::time_point tip_time{std::chrono::seconds{chainman().ActiveChain().Tip()->GetBlockTime()}};\n+                if (now > tip_time + std::chrono::seconds(20 * 60)) {\n+                    tip_changed = true;\n+                }\n+            }\n+\n+            /**\n+             * The only way to determine if fees increased compared to the previous template,\n+             * is to generate a fresh template. Cluster Mempool may allow for a more efficient\n+             * way to determine how much (approximate) fees for the next block increased.\n+             *\n+             * We'll also create a new template if the tip changed during the last tick.\n+             */\n+            if (options.fee_threshold < MAX_MONEY || tip_changed) {\n+                auto block_template{std::make_unique<BlockTemplateImpl>(m_assemble_options, BlockAssembler{chainman().ActiveChainstate(), context()->mempool.get(), m_assemble_options}.CreateNewBlock(), m_node)};\n+\n+                // If the tip changed, return the new template regardless of its fees.\n+                if (tip_changed) {\n+                    return block_template;\n+                }\n+\n+                // Calculate the original template total fees if we haven't already\n+                if (current_fees == -1) {\n+                    current_fees = 0;\n+                    for (CAmount fee : m_block_template->vTxFees) {\n+                        // Skip coinbase\n+                        if (fee < 0) continue;\n+                        current_fees += fee;\n+                    }\n+                }",
      "path": "src/node/interfaces.cpp",
      "position": 93,
      "original_position": 81,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "6bf77e5a376804c0681897fa032537ba16e9a99a",
      "in_reply_to_id": 1937311760,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'd rather remove the line, it might have had a use before that no longer applies.\r\n\r\nIf we want to get fees via the CBLockTemplate then it should just get a field for that.\r\n\r\nBut I don't think it's useful to do any of that, because this (duplicate) code will likely go away soon: https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937451223\r\n\r\nThe real slowness is in constructing the `CBLockTemplate`, compared to that this loop should be negligible. And when we have a more efficient method to figure out the fee increase at the top of the mempool, we probably won't use the `CBLockTemplate` struct at all.",
      "created_at": "2025-02-03T12:21:04Z",
      "updated_at": "2025-02-03T12:26:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939287479",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939287479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": 1005,
      "original_start_line": 993,
      "start_side": "RIGHT",
      "line": 1012,
      "original_line": 1012,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939291428",
      "pull_request_review_id": 2589741675,
      "id": 1939291428,
      "node_id": "PRRC_kwDOABII585zlz0k",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": 1937596836,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Step (3) doesn't happen. A shutdown doesn't null out `m_tip_block`.",
      "created_at": "2025-02-03T12:24:13Z",
      "updated_at": "2025-02-03T12:24:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939291428",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939291428"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 957,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939436862",
      "pull_request_review_id": 2590011269,
      "id": 1939436862,
      "node_id": "PRRC_kwDOABII585zmXU-",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": 1937596836,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "But what about this comment:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/1172bc4157eefe80d1aaf0b56459857ec651e535/src/node/kernel_notifications.h#L61-L62\r\n\r\nrelated:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/1172bc4157eefe80d1aaf0b56459857ec651e535/src/init.cpp#L1817-L1827",
      "created_at": "2025-02-03T14:08:29Z",
      "updated_at": "2025-02-03T14:08:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939436862",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939436862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 957,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939503331",
      "pull_request_review_id": 2590129847,
      "id": 1939503331,
      "node_id": "PRRC_kwDOABII585zmnjj",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": 1937596836,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@vasild it's possible to start the node and quickly shut it down. If that happens then `m_tip_block` remains `null`.\r\n\r\nIf you call `createNewBlock()` during that time I'm not sure what happens.  I think it's best to add an extra guard there. The Template Provider calls `waitTipChanged` before calling `createNewBlock()`, but not every interface user might do that.\r\n\r\nWith that in place you can't get here.",
      "created_at": "2025-02-03T14:46:00Z",
      "updated_at": "2025-02-03T14:46:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939503331",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939503331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 957,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939522785",
      "pull_request_review_id": 2590162179,
      "id": 1939522785,
      "node_id": "PRRC_kwDOABII585zmsTh",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": 1937596836,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Opened #31785 for this check, though I could include it here.",
      "created_at": "2025-02-03T14:57:33Z",
      "updated_at": "2025-02-03T14:57:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939522785",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939522785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 957,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939763961",
      "pull_request_review_id": 2590571234,
      "id": 1939763961,
      "node_id": "PRRC_kwDOABII585znnL5",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": 1937596836,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> though I could include it here.\r\n\r\nIt turned into a bigger change than I expected, so better to keep it separate from this. I don't think it's blocking.",
      "created_at": "2025-02-03T17:24:50Z",
      "updated_at": "2025-02-03T17:24:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1939763961",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1939763961"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 957,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1941605053",
      "pull_request_review_id": 2593576688,
      "id": 1941605053,
      "node_id": "PRRC_kwDOABII585zuoq9",
      "diff_hunk": "@@ -936,9 +937,90 @@ class BlockTemplateImpl : public BlockTemplate\n         return chainman().ProcessNewBlock(block_ptr, /*force_processing=*/true, /*min_pow_checked=*/true, /*new_block=*/nullptr);\n     }\n \n+    std::unique_ptr<BlockTemplate> waitNext(BlockWaitOptions options) override\n+    {\n+        // Delay calculating the current template fees, just in case a new block\n+        // comes in before the next tick.\n+        CAmount current_fees = -1;\n+\n+        // Alternate waiting for a new tip and checking if fees have risen.\n+        // The latter check is expensive so we only run it once per second.\n+        auto now{NodeClock::now()};\n+        const auto deadline = now + options.timeout;\n+        const MillisecondsDouble tick{1000};\n+\n+        while (now <= deadline) {\n+            bool tip_changed{false};\n+            {\n+                WAIT_LOCK(notifications().m_tip_block_mutex, lock);\n+                notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\n+                    Assume(notifications().TipBlock());",
      "path": "src/node/interfaces.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "276ce2eea38865154017047f3761225c2b504cf6",
      "original_commit_id": "ae787b1b4197b9f294fa13b8a225440c6bb865a5",
      "in_reply_to_id": 1937596836,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Or this, idea from [discussion from another thread](https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937078288) - return `nullptr` if `TipBlock()` returns no block:\r\n\r\n<details>\r\n<summary>[patch] return nullptr from waitNext() if no tip</summary>\r\n\r\n```diff\r\ndiff --git i/src/node/interfaces.cpp w/src/node/interfaces.cpp\r\nindex 1eb66d81c0..9af5e65308 100644\r\n--- i/src/node/interfaces.cpp\r\n+++ w/src/node/interfaces.cpp\r\n@@ -947,35 +947,37 @@ public:\r\n         // The latter check is expensive so we only run it once per second.\r\n         auto now{NodeClock::now()};\r\n         const auto deadline = now + options.timeout;\r\n         const MillisecondsDouble tick{1000};\r\n         const bool allow_min_difficulty{chainman().GetParams().GetConsensus().fPowAllowMinDifficultyBlocks};\r\n \r\n+        std::optional<uint256> tip_hash;\r\n         bool tip_changed{false};\r\n         // Helper to check if the tip has changed, and also update tip_changed.\r\n-        auto check_tip_changed = [this, &tip_changed]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\r\n+        auto check_tip_changed = [this, &tip_hash, &tip_changed]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\r\n             AssertLockHeld(notifications().m_tip_block_mutex);\r\n             if (tip_changed) return true;\r\n-            const auto tip_block{notifications().TipBlock()};\r\n-            // This is an instance method on BlockTemplate and no template\r\n-            // could have been generated before a tip exists.\r\n-            Assume(tip_block);\r\n-            tip_changed = tip_block != m_block_template->block.hashPrevBlock;\r\n+            tip_hash = notifications().TipBlock();\r\n+            if (tip_hash.has_value()) {\r\n+                tip_changed = tip_hash.value() != m_block_template->block.hashPrevBlock;\r\n+            } else {\r\n+                tip_changed = true;\r\n+            }\r\n             return tip_changed;\r\n         };\r\n \r\n         do {\r\n             {\r\n                 WAIT_LOCK(notifications().m_tip_block_mutex, lock);\r\n                 // Note that wait_until() checks the predicate before waiting\r\n                 notifications().m_tip_block_cv.wait_until(lock, std::min(now + tick, deadline), [&]() EXCLUSIVE_LOCKS_REQUIRED(notifications().m_tip_block_mutex) {\r\n                     return check_tip_changed() || chainman().m_interrupt;\r\n                 });\r\n             }\r\n \r\n-            if (chainman().m_interrupt) return nullptr;\r\n+            if (chainman().m_interrupt || !tip_hash.has_value()) return nullptr;\r\n \r\n             // Must release m_tip_block_mutex before locking cs_main, to avoid deadlocks.\r\n             LOCK(::cs_main);\r\n \r\n             // On test networks return a minimum difficulty block after 20 minutes\r\n             if (!tip_changed && allow_min_difficulty) {\r\n```\r\n</details>\r\n\r\nDoes that look sensible?",
      "created_at": "2025-02-04T17:32:57Z",
      "updated_at": "2025-02-04T17:32:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1941605053",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1941605053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31283"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 957,
      "side": "RIGHT"
    }
  ]
}