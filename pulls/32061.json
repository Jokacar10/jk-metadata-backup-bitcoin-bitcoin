{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061",
    "id": 2391882324,
    "node_id": "PR_kwDOABII586OkTpU",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32061",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32061.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32061.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/e66712d4d3eb95cfd3beefc92c7888de9b65da38",
    "number": 32061,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Replace libevent with our own HTTP and socket-handling implementation",
    "user": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This is a major component of [removing libevent as a dependency of the project](https://github.com/bitcoin/bitcoin/issues/31194)\r\n\r\nIt is based on #30988  but only in the sense that it copies the `Sockman` class introduced in that PR. The p2p / `Connman` refactor isn't needed for HTTP and therefore this branch can be reviewed and merged independently of the p2p changes.\r\n\r\nCommit strategy:\r\n- Import `sockman.{h,cpp}` from #30988 \r\n- Assert current behavior of HTTP with additional functional tests, including copying from libevent's tests\r\n- Implement a few helper functions for strings, timestamps, etc needed by HTTP protocol\r\n- Isolate the existing libevent-based HTTP server in a namespace `http_libevent`\r\n- Implement HTTP in a new namespace `http_bitcoin` (the namespace manages duplicate `HTTPRequest` definitions, etc)\r\n- Switch bitcoind from the libevent server to the new server\r\n- Clean up (delete `http_libevent`)\r\n\r\nI am currently seeing about a 10% speed up in the functional tests on my own arm/macos machine.\r\n\r\n## Integration testing:\r\n\r\nI am testing the new HTTP server by forking projects that integrate with bitcoin via HTTP and running their integration tests with bitcoind built from this branch (on Github actions). I will continue adding integrations over time, and re-running these CI tests as this branch gets rebased:\r\n\r\n- [NodeJS `rpc-bitcoin`](https://github.com/pinheadmz/rpc-bitcoin/pull/1)\r\n- [electrs](https://github.com/pinheadmz/electrs/pull/1)\r\n- [lnd](https://github.com/pinheadmz/lnd/pull/1)\r\n- [eclair](https://github.com/pinheadmz/eclair/pull/1)\r\n- [corepc](https://github.com/pinheadmz/corepc/pull/1)\r\n- [bitcoinjs-lib](https://github.com/pinheadmz/bitcoinjs-lib/pull/1)",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "created_at": "2025-03-13T19:32:14Z",
    "updated_at": "2025-06-21T01:58:40Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "e58ac6e0365a08d95f4bb2dd7de55756d306cc0f",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "pinheadmz:http-rewrite-13march2025",
      "ref": "http-rewrite-13march2025",
      "sha": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 61248407,
        "node_id": "MDEwOlJlcG9zaXRvcnk2MTI0ODQwNw==",
        "name": "bitcoin",
        "full_name": "pinheadmz/bitcoin",
        "owner": {
          "login": "pinheadmz",
          "id": 2084648,
          "node_id": "MDQ6VXNlcjIwODQ2NDg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pinheadmz",
          "html_url": "https://github.com/pinheadmz",
          "followers_url": "https://api.github.com/users/pinheadmz/followers",
          "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
          "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
          "repos_url": "https://api.github.com/users/pinheadmz/repos",
          "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/pinheadmz/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/pinheadmz/bitcoin",
        "archive_url": "https://api.github.com/repos/pinheadmz/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/pinheadmz/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/pinheadmz/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/pinheadmz/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/pinheadmz/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/pinheadmz/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/pinheadmz/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/pinheadmz/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/pinheadmz/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/pinheadmz/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/pinheadmz/bitcoin/events",
        "forks_url": "https://api.github.com/repos/pinheadmz/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/pinheadmz/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/pinheadmz/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/pinheadmz/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/pinheadmz/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/pinheadmz/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/pinheadmz/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/pinheadmz/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/pinheadmz/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/pinheadmz/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/pinheadmz/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/pinheadmz/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/pinheadmz/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:pinheadmz/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/pinheadmz/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/pinheadmz/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/pinheadmz/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/pinheadmz/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/pinheadmz/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/pinheadmz/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/pinheadmz/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/pinheadmz/bitcoin/hooks",
        "svn_url": "https://github.com/pinheadmz/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 274686,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-06-21T01:49:27Z",
        "created_at": "2016-06-15T23:48:20Z",
        "updated_at": "2025-06-10T17:35:30Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "ed060e01e756fc8d4c1c590e79f9555ae86c433f",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37404,
        "stargazers_count": 84252,
        "watchers_count": 84252,
        "size": 284330,
        "default_branch": "master",
        "open_issues_count": 753,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-06-20T23:30:50Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-06-21T01:15:37Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 2535,
    "deletions": 606,
    "changed_files": 25,
    "commits": 34,
    "review_comments": 108,
    "comments": 11
  },
  "events": [
    {
      "event": "commented",
      "id": 2722486916,
      "node_id": "IC_kwDOABII586iRdqE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2722486916",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-13T19:32:18Z",
      "updated_at": "2025-06-21T01:49:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32061.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [laanwj](https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2724599518), [fjahr](https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2725685034), [w0xlt](https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2813801840) |\n| Approach ACK | [vasild](https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2903739719) |\n| Stale ACK | [romanz](https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2848493348) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#32562](https://github.com/bitcoin/bitcoin/pull/32562) (doc: remove // for ... comments by fanquake)\n* [#32520](https://github.com/bitcoin/bitcoin/pull/32520) (Remove legacy `Parse(U)Int*` by maflcko)\n* [#32408](https://github.com/bitcoin/bitcoin/pull/32408) (tests: Expand HTTP coverage to assert libevent behavior by pinheadmz)\n* [#31929](https://github.com/bitcoin/bitcoin/pull/31929) (http: Make server shutdown more robust by hodlinator)\n* [#31672](https://github.com/bitcoin/bitcoin/pull/31672) (rpc: add cpu_load to getpeerinfo by vasild)\n* [#27731](https://github.com/bitcoin/bitcoin/pull/27731) (Prevent file descriptor exhaustion from too many RPC calls by fjahr)\n* [#26022](https://github.com/bitcoin/bitcoin/pull/26022) (Add util::ResultPtr class by ryanofsky)\n* [#25665](https://github.com/bitcoin/bitcoin/pull/25665) (refactor: Add util::Result failure values, multiple error and warning messages by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->\n### LLM Linter (✨ experimental)\n\nPossible typos and grammar issues:\n\n- “an unique id” → “a unique id” [“unique” begins with a consonant sound, so “a” is the correct article]\n\nNo other typos were found.\n\n<sup>drahtbot_id_4_m</sup>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2722486916",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "convert_to_draft",
      "id": 16748542816,
      "node_id": "CTDE_lADOABII586t8FMgzwAAAAPmSntg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16748542816",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-13T19:37:02Z"
    },
    {
      "event": "labeled",
      "id": 16749188787,
      "node_id": "LE_lADOABII586t8FMgzwAAAAPmVFaz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16749188787",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-13T20:29:33Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2722620721,
      "node_id": "IC_kwDOABII586iR-Ux",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2722620721",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-13T20:29:34Z",
      "updated_at": "2025-03-13T20:29:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/38735177073</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2722620721",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "labeled",
      "id": 16768803020,
      "node_id": "LE_lADOABII586t8FMgzwAAAAPnf6DM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16768803020",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-14T09:17:51Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "commented",
      "id": 2724599518,
      "node_id": "IC_kwDOABII586iZhbe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2724599518",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-14T12:52:30Z",
      "updated_at": "2025-03-14T12:52:30Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, nice work",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2724599518",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "commented",
      "id": 2724787234,
      "node_id": "IC_kwDOABII586iaPQi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2724787234",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-14T13:57:43Z",
      "updated_at": "2025-03-14T13:57:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2724787234",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "commented",
      "id": 2725685034,
      "node_id": "IC_kwDOABII586idqcq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2725685034",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-14T20:29:05Z",
      "updated_at": "2025-03-14T20:29:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nMy understanding from the low-level networking discussion at CoreDev was that this wouldn't build on top of sockman. I guess the devil is in the details but can you address that in what sense the current approach follows what was discussed there? Thanks!",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2725685034",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "commented",
      "id": 2726033041,
      "node_id": "IC_kwDOABII586ie_aR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2726033041",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T00:03:45Z",
      "updated_at": "2025-03-15T00:03:45Z",
      "author_association": "MEMBER",
      "body": "> My understanding from the low-level networking discussion at CoreDev was that this wouldn't build on top of sockman. I guess the devil is in the details but can you address that in what sense the current approach follows what was discussed there? Thanks!\r\n\r\nSure, by coredev I had already written most of this implementation (based on sockman) but the performance was bad, and that was part of the motivation behind the deep-dive talk. However, by the end of the week I had reviewed that code in person with smart attendees and not only improved the performance of my code but started to improve performance vs master branch as well! Those updates came in the days just after the deep-dive discussion.\r\n\r\nSOME kind of sockman is needed to replace libevent. The one @vasild  wrote does actually seem to work well for this purpose as well as for p2p, and it would be \"nice\" to only have to maintain one I/O loop structure in bitcoind. @theuni is investigating how a sockman for http could be optimized if it had no other purpose, and I think that is the kind of feedback that will help us decide which path to take.\r\n\r\n",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2726033041",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "mentioned",
      "id": 16782346824,
      "node_id": "MEE_lADOABII586t8FMgzwAAAAPoTkpI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16782346824",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T00:03:46Z"
    },
    {
      "event": "subscribed",
      "id": 16782346826,
      "node_id": "SE_lADOABII586t8FMgzwAAAAPoTkpK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16782346826",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T00:03:46Z"
    },
    {
      "event": "mentioned",
      "id": 16782346830,
      "node_id": "MEE_lADOABII586t8FMgzwAAAAPoTkpO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16782346830",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T00:03:46Z"
    },
    {
      "event": "subscribed",
      "id": 16782346835,
      "node_id": "SE_lADOABII586t8FMgzwAAAAPoTkpT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16782346835",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T00:03:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16844975202,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAPsCexi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16844975202",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "640f38f6e44bdead2d47efa4471a34b5013c173c",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/640f38f6e44bdead2d47efa4471a34b5013c173c",
      "created_at": "2025-03-18T19:27:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16845246523,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAPsDhA7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16845246523",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "49784b396938c0ca582c1cbf21227fde2dad0e92",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/49784b396938c0ca582c1cbf21227fde2dad0e92",
      "created_at": "2025-03-18T19:44:41Z"
    },
    {
      "event": "commented",
      "id": 2736442775,
      "node_id": "IC_kwDOABII586jGs2X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2736442775",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T12:22:15Z",
      "updated_at": "2025-03-19T12:22:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "> SOME kind of sockman is needed to replace libevent ... it would be \"nice\" to only have to maintain one I/O loop structure in bitcoind.\r\n\r\n:100: ",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2736442775",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16878383639,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAPuB7IX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16878383639",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8de6cf02039783f84876869f7c442cb036b60022",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/8de6cf02039783f84876869f7c442cb036b60022",
      "created_at": "2025-03-19T20:13:51Z"
    },
    {
      "event": "labeled",
      "id": 16899582189,
      "node_id": "LE_lADOABII586t8FMgzwAAAAPvSyjt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16899582189",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T10:09:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16914708514,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAPwMfgi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16914708514",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "44a2317892518a52d7af93220a182e73c8d6e294",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/44a2317892518a52d7af93220a182e73c8d6e294",
      "created_at": "2025-03-20T16:56:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16914860259,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAPwNEjj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16914860259",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0c7d573dd8f9b91106da2306d257928ed4809315",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/0c7d573dd8f9b91106da2306d257928ed4809315",
      "created_at": "2025-03-20T17:06:40Z"
    },
    {
      "event": "unlabeled",
      "id": 16916392545,
      "node_id": "UNLE_lADOABII586t8FMgzwAAAAPwS6ph",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16916392545",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T18:54:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16919849846,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAPwgGt2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16919849846",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "04fe4baf5ed76dd31b70fbeeebd0609c7abde024",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/04fe4baf5ed76dd31b70fbeeebd0609c7abde024",
      "created_at": "2025-03-21T00:34:22Z"
    },
    {
      "event": "labeled",
      "id": 16964052665,
      "node_id": "LE_lADOABII586t8FMgzwAAAAPzIua5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16964052665",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-24T22:30:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17043070627,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAP32J6j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17043070627",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bfcd833820e0f5baa432be4a292f2f2a7bcc4c1e",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/bfcd833820e0f5baa432be4a292f2f2a7bcc4c1e",
      "created_at": "2025-03-29T12:48:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17046430018,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAP4C-FC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17046430018",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8ae826be90985d76dc702d09fb36a78c0bd8dd89",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/8ae826be90985d76dc702d09fb36a78c0bd8dd89",
      "created_at": "2025-03-29T23:24:50Z"
    },
    {
      "event": "unlabeled",
      "id": 17046573809,
      "node_id": "UNLE_lADOABII586t8FMgzwAAAAP4DhLx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17046573809",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-30T00:41:07Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 17046644650,
      "node_id": "UNLE_lADOABII586t8FMgzwAAAAP4Dyeq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17046644650",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-30T01:21:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17049750477,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAP4PovN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17049750477",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "11d80d4187afaa101de989330fa1982cd019cfa8",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/11d80d4187afaa101de989330fa1982cd019cfa8",
      "created_at": "2025-03-31T01:04:54Z"
    },
    {
      "event": "commented",
      "id": 2765788869,
      "node_id": "IC_kwDOABII586k2pbF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2765788869",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T10:18:26Z",
      "updated_at": "2025-03-31T10:18:26Z",
      "author_association": "MEMBER",
      "body": "I rebased this branch on a single squashed commit from #30988 essentially just cherry-picking `sockman.{h,cpp}` by @vasild and leaving out the p2p refactor. This will make rebase maintenance on master a lot easier by reducing conflicting scope, and hopefully also makes review easier. It also means to some extent this PR can be merged independently of #30988,  and also gives @theuni some room to rewrite a specific HTTP sockman if a more efficient purpose-focused module can be written. (Will update PR description in a moment)\r\n\r\nI've finally gotten all CI to pass so I'm going to mark this PR as ready for review as I move on to integration testing with all the bitcoin client libraries I can find!",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2765788869",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "mentioned",
      "id": 17054719727,
      "node_id": "MEE_lADOABII586t8FMgzwAAAAP4il7v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17054719727",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T10:18:27Z"
    },
    {
      "event": "subscribed",
      "id": 17054719744,
      "node_id": "SE_lADOABII586t8FMgzwAAAAP4il8A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17054719744",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T10:18:27Z"
    },
    {
      "event": "mentioned",
      "id": 17054719763,
      "node_id": "MEE_lADOABII586t8FMgzwAAAAP4il8T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17054719763",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T10:18:27Z"
    },
    {
      "event": "subscribed",
      "id": 17054719773,
      "node_id": "SE_lADOABII586t8FMgzwAAAAP4il8d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17054719773",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T10:18:27Z"
    },
    {
      "event": "ready_for_review",
      "id": 17054752759,
      "node_id": "RFRE_lADOABII586t8FMgzwAAAAP4it_3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17054752759",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T10:21:06Z"
    },
    {
      "event": "renamed",
      "id": 17054756647,
      "node_id": "RTE_lADOABII586t8FMgzwAAAAP4iu8n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17054756647",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T10:21:21Z",
      "rename": {
        "from": "[draft] Replace libevent with our own HTTP and socket-handling implementation",
        "to": "Replace libevent with our own HTTP and socket-handling implementation"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17119289148,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAP8Y588",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17119289148",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a225633e34f6ad1207d9bc60a2c1f3f0c74edb40",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/a225633e34f6ad1207d9bc60a2c1f3f0c74edb40",
      "created_at": "2025-04-03T19:13:20Z"
    },
    {
      "event": "commented",
      "id": 2776706841,
      "node_id": "IC_kwDOABII586lgS8Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2776706841",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-03T19:14:55Z",
      "updated_at": "2025-04-03T19:14:55Z",
      "author_association": "MEMBER",
      "body": "rebase to a225633e34 includes a new test for \"pipelining\" HTTP requests (thanks @theuni for pointing out this oversight) and also adds a queue of requests to each HTTPClient to ensure requests are processed in series, in the order they were received.",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2776706841",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "mentioned",
      "id": 17119311189,
      "node_id": "MEE_lADOABII586t8FMgzwAAAAP8Y_VV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17119311189",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-03T19:14:56Z"
    },
    {
      "event": "subscribed",
      "id": 17119311210,
      "node_id": "SE_lADOABII586t8FMgzwAAAAP8Y_Vq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17119311210",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-03T19:14:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17119346499,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAP8ZH9D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17119346499",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "created_at": "2025-04-03T19:17:47Z"
    },
    {
      "event": "labeled",
      "id": 17121496965,
      "node_id": "LE_lADOABII586t8FMgzwAAAAP8hU-F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17121496965",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-03T22:42:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 17124454598,
      "node_id": "UNLE_lADOABII586t8FMgzwAAAAP8snDG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17124454598",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-04T06:04:32Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2813801840,
      "node_id": "IC_kwDOABII586ntzVw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2813801840",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-17T19:06:30Z",
      "updated_at": "2025-04-17T19:06:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK. ",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2813801840",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "reviewed",
      "id": 2780581749,
      "node_id": "PRR_kwDOABII586lvE91",
      "url": null,
      "actor": null,
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2780581749",
      "submitted_at": "2025-04-21T05:52:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "reviewed",
      "id": 2780602792,
      "node_id": "PRR_kwDOABII586lvKGo",
      "url": null,
      "actor": null,
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2780602792",
      "submitted_at": "2025-04-21T06:46:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "reviewed",
      "id": 2780672873,
      "node_id": "PRR_kwDOABII586lvbNp",
      "url": null,
      "actor": null,
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2780672873",
      "submitted_at": "2025-04-21T16:06:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "reviewed",
      "id": 2781691846,
      "node_id": "PRR_kwDOABII586lzT_G",
      "url": null,
      "actor": null,
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2781691846",
      "submitted_at": "2025-04-21T16:14:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "reviewed",
      "id": 2797567891,
      "node_id": "PRR_kwDOABII586mv3-T",
      "url": null,
      "actor": null,
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2797567891",
      "submitted_at": "2025-04-27T09:36:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "reviewed",
      "id": 2797582544,
      "node_id": "PRR_kwDOABII586mv7jQ",
      "url": null,
      "actor": null,
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2797582544",
      "submitted_at": "2025-04-27T11:04:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "reviewed",
      "id": 2797634240,
      "node_id": "PRR_kwDOABII586mwILA",
      "url": null,
      "actor": null,
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "LGTM, many thanks!\r\nAdded some comments/suggestions above :)",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2797634240",
      "submitted_at": "2025-04-27T13:00:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17452828383,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAQQRQbf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17452828383",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/7d301184016a3f59c2e363dff631263cdbe21da0",
      "created_at": "2025-04-29T11:04:32Z"
    },
    {
      "event": "reviewed",
      "id": 2799390114,
      "node_id": "PRR_kwDOABII586m202i",
      "url": null,
      "actor": null,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks so much for the great review @romanz I took most of your suggestions, there's still an open question about `m_recv_buffer` but I really appreciate all your attention to string copying!",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2799390114",
      "submitted_at": "2025-04-29T13:23:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "commented",
      "id": 2848493348,
      "node_id": "IC_kwDOABII586pyI8k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2848493348",
      "actor": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-03T07:54:16Z",
      "updated_at": "2025-05-03T07:54:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "tACK https://github.com/bitcoin/bitcoin/commit/7d301184016a3f59c2e363dff631263cdbe21da0\r\n\r\nTested with both [electrs](https://github.com/romanz/electrs) and [bindex](https://github.com/romanz/bindex-rs).",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2848493348",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "review_requested",
      "id": 17507193219,
      "node_id": "RRE_lADOABII586t8FMgzwAAAAQTgpGD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17507193219",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-03T07:54:21Z",
      "requested_reviewer": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 17507193235,
      "node_id": "RRE_lADOABII586t8FMgzwAAAAQTgpGT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17507193235",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-03T07:54:21Z",
      "requested_reviewer": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 17507193255,
      "node_id": "RRE_lADOABII586t8FMgzwAAAAQTgpGn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17507193255",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-03T07:54:22Z",
      "requested_reviewer": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2842608359,
      "node_id": "PRR_kwDOABII586pbsLn",
      "url": null,
      "actor": null,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Posting review midway. Reviewed up to and including 144a777f86 `string: add CaseInsensitiveComparator`. I like that the PR starts with some new tests to enforce correct behavior.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2842608359",
      "submitted_at": "2025-05-15T13:57:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "review_requested",
      "id": 17672863896,
      "node_id": "RRE_lADOABII586t8FMgzwAAAAQdYoCY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17672863896",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-15T13:57:42Z",
      "requested_reviewer": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2846448811,
      "node_id": "PRR_kwDOABII586pqVyr",
      "url": null,
      "actor": null,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Posting review midway. Reviewed up to and including e95c6f5b6511ae35141b1e440e1f22e1004d3de6 `http: Implement HTTPHeaders class`",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2846448811",
      "submitted_at": "2025-05-16T14:44:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "review_requested",
      "id": 17690244547,
      "node_id": "RRE_lADOABII586t8FMgzwAAAAQea7XD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17690244547",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-16T14:44:53Z",
      "requested_reviewer": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "labeled",
      "id": 17730623431,
      "node_id": "LE_lADOABII586t8FMgzwAAAAQg09fH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17730623431",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-20T09:40:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2860857095,
      "node_id": "PRR_kwDOABII586qhTcH",
      "url": null,
      "actor": null,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Posting review midway. Reviewed up to and including 980a9cd3d38abd0e0da85363056a2be6098d3919 `http: read requests from connected clients`.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2860857095",
      "submitted_at": "2025-05-22T14:57:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "review_requested",
      "id": 17774348037,
      "node_id": "RRE_lADOABII586t8FMgzwAAAAQjbwcF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17774348037",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-22T14:57:08Z",
      "requested_reviewer": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2899730748,
      "node_id": "PRR_kwDOABII586s1mE8",
      "url": null,
      "actor": null,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Posting review midway. Reviewed up to and including b90f808e30 `http: disconnect after idle timeout (-rpcservertimeout)`",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2899730748",
      "submitted_at": "2025-06-05T14:02:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "review_requested",
      "id": 18002225054,
      "node_id": "RRE_lADOABII586t8FMgzwAAAAQxBCee",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18002225054",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-05T14:02:50Z",
      "requested_reviewer": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2903739719,
      "node_id": "PRR_kwDOABII586tE41H",
      "url": null,
      "actor": null,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK 7d301184016a3f59c2e363dff631263cdbe21da0",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2903739719",
      "submitted_at": "2025-06-06T07:17:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "referenced",
      "id": 18062078269,
      "node_id": "REFE_lADOABII586t8FMgzwAAAAQ0lXE9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18062078269",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d978a43d054d8a24e41d71b3aaad598ac41d0233",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d978a43d054d8a24e41d71b3aaad598ac41d0233",
      "created_at": "2025-06-09T20:08:51Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkyOTlkNWRiYzUxODk2Yjg0Nzk4MGZiMjM0YTAzMzE2YjZhMjQyNTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9299d5dbc51896b847980fb234a03316b6a24258",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9299d5dbc51896b847980fb234a03316b6a24258",
      "tree": {
        "sha": "58840288f82a9de1c25cfe53878beb7418fdad60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58840288f82a9de1c25cfe53878beb7418fdad60"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 58840288f82a9de1c25cfe53878beb7418fdad60\nparent 65b26507b84a870a39a43b2ad4fd78e539773fa0\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749059576 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1749838844 -0400\n\nSockMan: introduce class and implement binding to listening socket\n\nIntroduce a new low-level socket managing class `SockMan`.\nUnit-test it with a new class `SocketTestingSetup` which mocks\n`CreateSock()` and will enable mock client I/O in future commits.\n\n`SockMan` and `SocketTestingSetup` are designed to be generic and\nreusbale for higher-level network protocol implementation and testing.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhMa/wACgkQ5+KYS2KJ\nyTohwhAA2asHhRGtFA5toNLWPDtJvGhREvyydqKanMxZ40dlgVb3lXNhN4FdyM+y\nP72hHj2wx3vUNHEwxOecty3cyd2RRlDpjFqi9/5xgFR6EyzNabigzb/sylMAf2XZ\n6miimLUSKXt6z2pIORyGCjI4UcNZ773hheksSk+O1H5lqBZPCl5IujfJoJqMdqOA\nVbbbqiON3XAaRjwVIovWYW2FiLBVIBg9HdFIa7sgFGrT3g0b2hkawZoqhk4DEmvP\nydAwCiOlITcsSDToRZU1fc8sV49ff5zeCOmJG6Hrxc7onvvTTnrdBfH5RuqbuUFZ\nFwVpfJ1ZvvAjmPe3G4tE+Lo4jG6IY4nvdWD/xkEGBDGa57bPgFa7oa2WJJxzrkU5\nP9CaOL73DnJVARsvlECHKbSYhBK5i+gwUGhSnpf0h5czloz2jfIEi3uiB6TiWlY8\nIq4PQmSzkl/NimkkkKrPqvz5O95PkbzmfxZiS8XsH66be2EJNlVr8bPxOCRV943U\n1hL3CErQ5JpxhcGDDWaRBL5g02exH04VQvRH4SZdJlit6NZBJ8hsQ4pmOQf+MzlT\n2RPe2cJ9IQI5gwij/WmDYkSi16q2Nr6L7P3v3l7R2bzbgedrB/vvmtdOP25e/slp\nar7piZa7TrTuqJonwMt0T3vSw9z5apDjN6QKWfsyN7VwbuYUR7A=\n=q7ZH\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65b26507b84a870a39a43b2ad4fd78e539773fa0",
          "sha": "65b26507b84a870a39a43b2ad4fd78e539773fa0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/65b26507b84a870a39a43b2ad4fd78e539773fa0"
        }
      ],
      "message": "SockMan: introduce class and implement binding to listening socket\n\nIntroduce a new low-level socket managing class `SockMan`.\nUnit-test it with a new class `SocketTestingSetup` which mocks\n`CreateSock()` and will enable mock client I/O in future commits.\n\n`SockMan` and `SocketTestingSetup` are designed to be generic and\nreusbale for higher-level network protocol implementation and testing.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-13T18:20:44Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-04T17:52:56Z"
      },
      "sha": "9299d5dbc51896b847980fb234a03316b6a24258"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRlNjMzNjk4YTExYjRlMmUzYzMwZWUxMjQ2YWZlNDc5OTZjMGRlZGE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de633698a11b4e2e3c30ee1246afe47996c0deda",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/de633698a11b4e2e3c30ee1246afe47996c0deda",
      "tree": {
        "sha": "d425b30fa5a49b321a6df1e9049864e0fd006817",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d425b30fa5a49b321a6df1e9049864e0fd006817"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d425b30fa5a49b321a6df1e9049864e0fd006817\nparent 9299d5dbc51896b847980fb234a03316b6a24258\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749059790 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1749838854 -0400\n\nstyle: modernize the style of SockMan::BindListenPort()\n\nIt was copied verbatim from `CConnman::BindListenPort()` in the previous\ncommit. Modernize its variables and style and log the error messages\nfrom the caller. Also categorize the informative messages to the \"net\"\ncategory because they are quite specific to the networking layer.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhMbAYACgkQ5+KYS2KJ\nyTqhUw//QXh2XgMTglXL03BQen3h8wz8wRH4amZK4Jr6c5XLJxDPpGH/TgigsZZT\nzgC2Os70RZGhE2PhsdL2++ACnDoX6RWwRiONdTzCUx+j31vJJtShzgf2bXLiVlj1\n2rFflMTOtFAYGqM5VGaVHLw536diXCpWqNmiCKcBlwvVFnOVZesrrhxhYUxytc1w\nsRDb/VSvnL0pyKO152yfzSAqMiFVmEWexg/xg9JbjNK1ZUjmqUV692cZQylTaPT6\nkgFjSeCdJO/X725HsCaaeT15KtXcNXmfklORlL7y3P3J9xPAvzWz0iAz1MXkxb/0\nr7ZnPVTvL7sXCQNaZRJxub13h/VG4EHpszWHbu5bZxL1lhuKFPQQgCB9+KapWCrj\neVE4siH3jusSzNDHZPTO1EYPgPW2T1apppQwyQzGQ4yJbeBTRURudDyXFeFNez6X\n29N5IWcdzrBkvZnyM/6cBUXzT6aWoyt+TlPpwn9A7bBgj2Colt+KqybzVv0tH0+9\niUNYtUsII722TXD1/rLMtiZAkwofurMdm1oTy8BoKh75FjsfqTGpvg7SDtzIaSPs\nGpXTJv1oIz/9NZmVRGDbmeMd25bjEF+DsfJ9Xayg0pCDCrwxsJ71YWgIL1JdrBGR\nsWZ1sHoNBiN1pxNAAFp7vPwK5yDfRHRShEsPP0GOvPkI8CCIv28=\n=0/h7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9299d5dbc51896b847980fb234a03316b6a24258",
          "sha": "9299d5dbc51896b847980fb234a03316b6a24258",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9299d5dbc51896b847980fb234a03316b6a24258"
        }
      ],
      "message": "style: modernize the style of SockMan::BindListenPort()\n\nIt was copied verbatim from `CConnman::BindListenPort()` in the previous\ncommit. Modernize its variables and style and log the error messages\nfrom the caller. Also categorize the informative messages to the \"net\"\ncategory because they are quite specific to the networking layer.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-13T18:20:54Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-04T17:56:30Z"
      },
      "sha": "de633698a11b4e2e3c30ee1246afe47996c0deda"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY2YWYwYzhjZDExYTJlNDAzM2IyNDhhODY4ODA2NTM4MzhjYjVhNWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6af0c8cd11a2e4033b248a86880653838cb5a5c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f6af0c8cd11a2e4033b248a86880653838cb5a5c",
      "tree": {
        "sha": "a282e9c3903cf2c61b482e5d4c95515b7428ac9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a282e9c3903cf2c61b482e5d4c95515b7428ac9a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a282e9c3903cf2c61b482e5d4c95515b7428ac9a\nparent de633698a11b4e2e3c30ee1246afe47996c0deda\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749060853 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1749838854 -0400\n\nSockMan: implement and test AcceptConnection()\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhMbAYACgkQ5+KYS2KJ\nyTp88g/9GrwDBYvY0aLYUnI/p8LvwAX6KPK6wWz/JJF+l2xWEhR7Jw3sjBcrKoDR\nhfhvr+zhLPrNYT0u3LQujApzuqgHdAH3masL0RaxOG9ESyG9jDj0XWfmGj93COGJ\ntDMSh2/LSh/6vyVGv2s9jNneNljG2aj34lUSaOsljG9e1+SRAFowaENcwi7qDrkY\nLpryOiPy2xQA5tgaodt9M4M6KiuYkR+mJ2tCAGzUvaRNYYNzpRErj4x0KWq/e6D3\ne0fsieASiYWAPHnAciiT4RyU/LEiMsnRjtrPykqb2SUE991/IEkr6K+mIiTpcj0v\nvHyovj2Rnx2PksZuyV2KhWmi/nmbtIcuRncqvoa0Hsu/+pCOdGCohSIPHzltMmY3\nkEAAu75amIs8VKlm4Tbjv50rrOajJtcUNvwCIv6kGYVUYQaEP71EvmDEzJShZldu\nfdNpK/oiNqNRt14cETHMGwxxIB65+lAXi8to+ca8lksGVFnyAeYOlsOxmeodTQA0\nCTxcadhOMr2d6KRlDyh7Sh1htuZxmppG+HJkd4DhafCaH7I/TpYxNvxx5qv0Q/Le\n/zz4Mk+gUXomZJexlqKGibLHUGeRTUOXHkHAQLa2C9T7gktDKIeuY8Ekr+c54GLG\najayspvllS5XEotaAj2UcALKPrN6gi0LBBNm00Ksfuo9vp+w2L0=\n=ULQO\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de633698a11b4e2e3c30ee1246afe47996c0deda",
          "sha": "de633698a11b4e2e3c30ee1246afe47996c0deda",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/de633698a11b4e2e3c30ee1246afe47996c0deda"
        }
      ],
      "message": "SockMan: implement and test AcceptConnection()\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-13T18:20:54Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-04T18:14:13Z"
      },
      "sha": "f6af0c8cd11a2e4033b248a86880653838cb5a5c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNjYTQ4NGM3Y2ViZDViYjg3NmUyNzJlNDBjZGQyMWU1OWMyMDI1MzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cca484c7cebd5bb876e272e40cdd21e59c202533",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cca484c7cebd5bb876e272e40cdd21e59c202533",
      "tree": {
        "sha": "37b8d8c5b6f5e4185976161313f61896000be180",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37b8d8c5b6f5e4185976161313f61896000be180"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 37b8d8c5b6f5e4185976161313f61896000be180\nparent f6af0c8cd11a2e4033b248a86880653838cb5a5c\nauthor Vasil Dimov <vd@FreeBSD.org> 1726586947 +0200\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1749838854 -0400\n\nstyle: modernize the style of SockMan::AcceptConnection()\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhMbAYACgkQ5+KYS2KJ\nyToSGg//aZQYfL/7WYpuFVnDC0fHi0h7BzFsDMPPZ9BmJrTGPWRbJdDC5Ji4vlV0\n+dgx6G7SPbcXD4SGn99xxbT89l85FPZYYwQdUXMjyY8TXvH287FZ8AMny3vIhz3u\nKHwPfIfqTdeRHHgID/5HjrHZq2gKWjBE+fKX+sirmCjTYSDoj/lPzUJvHzPr2BhW\nqVve0jk9eVvoke+ghdLwnq2xwbhCGE48pHlDN0g6IN82UsnqUkKiPHvsyXmNultx\nc+FwyqmB4jgZprPqVumPKCmg2+FQuScxl9+LPfsuNJyiKDuiDb2Vf3wBY4aW3gsy\ndFADVoptMOf73iVV+T0KJ5cJFqtk3kmE+OBH9cdOzSQJf91II3g24KYsmvpeboo3\ngnaXJoCnsqqR1AOxJlOeIMJbXzJzWkxXQMDWTSDPDLvuSGLLvFvzMPJqYFOMcIT6\nbyZsgfYNTMKTURVqHc5vF7f0UNNeao13UVUGFKbm2m0c3BTXgG4bcn8wZ9x+xZ4h\nPiRKawnT96I005/CWTo2IuE+5nRrr0dorewaZhp8d3/X0b3wHo+HauEFBFCzZdHY\ngpPk9epuksTKUpU97PKX6frItPUebfOp+iv1q4r5bQKBKPxtugQhMCTNepZ4YlME\neFNqc+3vbRoRIIsat5LxT6qP4NKKaWm+GlzwEgW/dRkDLSBe0UI=\n=AKXv\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6af0c8cd11a2e4033b248a86880653838cb5a5c",
          "sha": "f6af0c8cd11a2e4033b248a86880653838cb5a5c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f6af0c8cd11a2e4033b248a86880653838cb5a5c"
        }
      ],
      "message": "style: modernize the style of SockMan::AcceptConnection()",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-13T18:20:54Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2024-09-17T15:29:07Z"
      },
      "sha": "cca484c7cebd5bb876e272e40cdd21e59c202533"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFkZWFhMDg3Y2Q2NWFlMWU0YzI0Y2MwYTg3YzlkYTQ3YmVkNTQxMmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1deaa087cd65ae1e4c24cc0a87c9da47bed5412d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1deaa087cd65ae1e4c24cc0a87c9da47bed5412d",
      "tree": {
        "sha": "923685a65aa1c7bb78b032e78d73ce50e54168c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/923685a65aa1c7bb78b032e78d73ce50e54168c1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 923685a65aa1c7bb78b032e78d73ce50e54168c1\nparent cca484c7cebd5bb876e272e40cdd21e59c202533\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749061156 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1749838854 -0400\n\nSockMan: generate sequential Ids for each newly accepted connection\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhMbAYACgkQ5+KYS2KJ\nyTqVJhAAs0IsHIlMKq0b2cRztjdWmrxkHFhzudUNuQjAlFNRS3HIiVSujYVTZNxQ\ntQcnVpFahag1QaFfxltdcB1t21LrUKtrTGr3/TwfGaccJHC76VXbn8y7mHGd/VdZ\nVwIetwTNARUVd/8devt42eSMprHQ8oxkCFVFJiI2VNtJseKydhXmJspcN7mkZahU\nCQMCTG3k/zAso9EPO6cVjIHcEn0Y927rxjEHdq3Sl3PO0zjyIFUHbn3z2NxVkygR\nYNjOrPTKF2/qip8wZ86Ky6UytKMgnE1p2tby4SgLzovcNCfb1SPi7nGFEc7YqfDS\ngZZH+ZrwhG+TIw1Dj69C8yIHmWFe9hV9qqjo9YfekL56CiS58KFaG6oJQWUKTz9u\nG1wlN3L8/4qIkx2QS9NGKF1GQlyonU+XSesFvbPDmlaU5XeRRnL9C7yWve5hFqjB\n+2VIngY1DY1jiWTjoOAQK3hJIhTTBFNCu5whOV8RHdDyJ9mQPBhnDoLOwUqGNLxK\nqsKO5bMNPRj26dFZnr6UGSDQXy83PPqxHZjV4pKR4R9qLduvNwOBxsqY7xCuD4N+\nJsV4OIGcDTAyejrU2fWEGh0SWVY3NS7Yt3n2pN+LmSD3+yu+ZL1w5eIDykBwL7ZG\n9/c5KQXqX7q6iYDDuZEL6wJ7yM0dc0xknvFY1NFVQcSOtr+moWA=\n=Yq+C\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cca484c7cebd5bb876e272e40cdd21e59c202533",
          "sha": "cca484c7cebd5bb876e272e40cdd21e59c202533",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cca484c7cebd5bb876e272e40cdd21e59c202533"
        }
      ],
      "message": "SockMan: generate sequential Ids for each newly accepted connection\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-13T18:20:54Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-04T18:19:16Z"
      },
      "sha": "1deaa087cd65ae1e4c24cc0a87c9da47bed5412d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJlNmNkYjQ4MDRmM2IwYzY2NDVlMTc1MWMyNjJhNjg2Y2UxOTE0ODE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e6cdb4804f3b0c6645e1751c262a686ce191481",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2e6cdb4804f3b0c6645e1751c262a686ce191481",
      "tree": {
        "sha": "6bce139d65fd97383d404962925c09f51f59e371",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bce139d65fd97383d404962925c09f51f59e371"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6bce139d65fd97383d404962925c09f51f59e371\nparent 1deaa087cd65ae1e4c24cc0a87c9da47bed5412d\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749754636 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1749910086 -0400\n\nSockMan: start an I/O loop in a new thread and accept connections\n\nSocket handling methods are copied from CConnMan:\n\n`CConnman::GenerateWaitSockets()` goes to\n`SockMan::GenerateWaitSockets()`.\n\n`CConnman::ThreadSocketHandler()` and\n`CConnman::SocketHandler()` are combined into\n`SockMan::ThreadSocketHandler()`.\n\n`CConnman::SocketHandlerListening()` goes to\n`SockMan::SocketHandlerListening()`.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhNgkkACgkQ5+KYS2KJ\nyTq5SRAAowz/3OTzTfueTfwj6sGrlnIiNg35fQsVZjgBJdSqa7YxLusoB1BUkt3A\nUczWwfaGEVIFbMfAxN+vB8YaMxrWKRsCceSPUIgioEm0GboffFc1m+xHZ+f7AR2N\nIx7ubdsYZk2tj21/VsMdV7dlknPEIB4AKZBM/G5t5jy5L6pvFxrHx7htx/8dqLT3\nN3u0bnOmEX1qGGlHyEqMfMSSEZ3IEM/jY7KzFX8tqGNAwQNWeZAeD/3zoi9kA6sn\n39gmkGLgr8r6NRcs3FqlASMTwj2BYile35rcfuMmw5EwpLfCSIBHl+7lm7iGqNlW\nmhuOE5ab5fSM57CK0zhhMtzHxU80mR47D78BJ1oaKBCna8yNP92RVsG4hIeBr2OV\n6gXiIuoR2c9CMLuUXsrxEia/l4EPdJ8le0tvpKTclQQaomIf03ofFYsDpKgj0/gv\n2r8Vle1J5wlbcu+aLKSG6x51zFzTFwRTY1hE7mc8F+xrJMgxvpSCkQ83JCqo2Vbc\nVbyGMvMbZmS0x/sc0ZYLADqIVCtEwVOkAHFjwzbynIaI9PteucDt1WcUJl/SZ3y9\n9szKjKvDA7kwUdLcbxRYRMfuetvpQyWcIQ7NvJdLvxlAVURRt1ly7VhsOoKEfig5\npCGn5F9ASyVhlcvTru9PsICp4mDyXll3vgkR3hLrScDPFL84r/s=\n=p6x0\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1deaa087cd65ae1e4c24cc0a87c9da47bed5412d",
          "sha": "1deaa087cd65ae1e4c24cc0a87c9da47bed5412d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1deaa087cd65ae1e4c24cc0a87c9da47bed5412d"
        }
      ],
      "message": "SockMan: start an I/O loop in a new thread and accept connections\n\nSocket handling methods are copied from CConnMan:\n\n`CConnman::GenerateWaitSockets()` goes to\n`SockMan::GenerateWaitSockets()`.\n\n`CConnman::ThreadSocketHandler()` and\n`CConnman::SocketHandler()` are combined into\n`SockMan::ThreadSocketHandler()`.\n\n`CConnman::SocketHandlerListening()` goes to\n`SockMan::SocketHandlerListening()`.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-14T14:08:06Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-12T18:57:16Z"
      },
      "sha": "2e6cdb4804f3b0c6645e1751c262a686ce191481"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY3NGE1ZmY4ZjE1MTE0N2M4MWNjOGZiOGQ5MDY0MWFjOWYzNTRmODQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/674a5ff8f151147c81cc8fb8d90641ac9f354f84",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/674a5ff8f151147c81cc8fb8d90641ac9f354f84",
      "tree": {
        "sha": "cce72b401e57a8d7550c611fe1f83c41a0e7f9ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cce72b401e57a8d7550c611fe1f83c41a0e7f9ca"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree cce72b401e57a8d7550c611fe1f83c41a0e7f9ca\nparent 2e6cdb4804f3b0c6645e1751c262a686ce191481\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749756905 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1749910341 -0400\n\nSockMan: handle connected sockets: read data from socket\n\n`CConnman::SocketHandlerConnected()` copied to\n`SockMan::SocketHandlerConnected()`.\n\nTesting this requires adding a new feature to the SocketTestingSetup,\ninserting a \"request\" payload into the mock client that conencts\nto us.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhNg0gACgkQ5+KYS2KJ\nyTrDfRAAy8pSdQvrUu8dswFHoS+3VzwCYo8zAqAvdNrsB2AqDdtNMQszsGrk1P5I\n4Uj9YNI8JaACcIZ/0d3CxQPprkmpcEMWeUfPqYjJG2KyLt/ng2BWV59TlZWa85QW\nGoFK9YImVH4vzWZX8iAW8UEkxNU+8ifgXX12NNsrYBLc1SQGmJjkoo9uUpjzExQR\nn8p8wdER8qHg9KwxZr7Lc4Ug4JinpTej5Km0LIrNGWVEyec7eE4DnzO437TsWzMd\ndkIMXMFMjoUg4os6frc4isQhobvkzawrFmFBrhytvASRary76Qv0FanHF8+yiWos\np+wDHzSJjez6uj/WcWUXkX4/tGjZR6ZQ7m0zLidxck8voCQIy09BA6P4gWv5etch\nT2Xg+cqlcvq4Ul+CJw3cXsnUqwQO4TsuZbtmnP51xvKYwF+gbk5drAhmJFBjjUJ2\nUPQl3jTSMK/9ZOGtTYhkAhz8h+hTAZeyfUbsf5aicMX+12Iu3e0KntSytd8uAbDG\n+AEBjx/Jed7GmZTm75ubCxJ7SAGkPxRizxbX8hiemD9mvdbvYj19EDgL5fXUH2Fd\n+udMIQ3aJRjzIBhzI40bT0W+TZ+RD1a5lsNxMiv7H/+T0HdYgd/ktPkgunvkMHhw\niSngnrOvOm3wwdJ0VwhLgdVQtMz8FgxEq0mKVoFFGXaL9W7jWig=\n=KW7D\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e6cdb4804f3b0c6645e1751c262a686ce191481",
          "sha": "2e6cdb4804f3b0c6645e1751c262a686ce191481",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2e6cdb4804f3b0c6645e1751c262a686ce191481"
        }
      ],
      "message": "SockMan: handle connected sockets: read data from socket\n\n`CConnman::SocketHandlerConnected()` copied to\n`SockMan::SocketHandlerConnected()`.\n\nTesting this requires adding a new feature to the SocketTestingSetup,\ninserting a \"request\" payload into the mock client that conencts\nto us.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-14T14:12:21Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-12T19:35:05Z"
      },
      "sha": "674a5ff8f151147c81cc8fb8d90641ac9f354f84"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNmNzk2YjY5YzhhNGY3Yjg0MDIzYzY2ZDdlMTRjOTQ1NzE2Mzc2Mjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f796b69c8a4f7b84023c66d7e14c94571637629",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3f796b69c8a4f7b84023c66d7e14c94571637629",
      "tree": {
        "sha": "9355a9642926595d41b4c1c382d7e58d5969dadb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9355a9642926595d41b4c1c382d7e58d5969dadb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9355a9642926595d41b4c1c382d7e58d5969dadb\nparent 674a5ff8f151147c81cc8fb8d90641ac9f354f84\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749824279 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1749910413 -0400\n\nSockMan: handle connected sockets: write data to socket\n\nSockets-touching bits from `CConnman::SocketSendData()` copied to\n`SockMan::SendBytes()`.\n\nTesting this requires adding a new feature to the SocketTestingSetup,\nreturning the DynSock I/O pipes from the mock socket so the recevied\ndata can be checked.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhNg48ACgkQ5+KYS2KJ\nyToB/hAAlNJOa78tWo+PVsEtI3EkAg6U6SfUumPADokMgRrjpdLtbGP7reQYbiKi\n9pcH7J9KNwUlIF5B734MUXOWNTfCl1UUb2oGrjz+Ni9YzG+d+XscPQ57f8w/IhYZ\ny6QvX7Zo98/Ggq8em5UGO2/RcLcA1vbCIVJgIgkUuu8B7YFXcobbIxQA+5MuWfRm\ngOuuVTDDRKFt8hsfn8l3bYvjSmOFHu7PSMyEaqebYWthfqkj3gaGOouSxfm5InvR\nepFKa3aN/sfRBIPwDgqKU3b1FgvjrnclP5lcYyuknSWGRA1F0F6/NUYpGSIcb9l5\nsO1NfUxJChWkapCM3vgXOtB3XoZJYcBI0NuVDjmWoyZnkguqJlQHQOp1cYEkydY5\n78gQ11qh5aVsZhgDTewe/bPGE4uZ/CKttbk7DiZDT5q+1n6k+ffQwBWrdpQc2AcV\nDClA70GehXssecIwCMKxxzC3JIBZJLP/wdweMZ60xpGIZckPMraeanDHYAj9ml1K\nfKhkqimtvB6RtTjh/H4nCGq67pvJHI6rEXHtrejRZ7zol5X14PoQdu8qTUZykSzm\n2+6LTHIECeQgSj8VGTAY+lBzBUsoMnICbOTZiHrKi2zkEzrvnaPyw6ZPL2bNUJ+n\niaPPbP2FSpr18Wek0tQUbzeKGzXzqokmlWcfR7nOAMsZYf+cBHo=\n=mYU+\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/674a5ff8f151147c81cc8fb8d90641ac9f354f84",
          "sha": "674a5ff8f151147c81cc8fb8d90641ac9f354f84",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/674a5ff8f151147c81cc8fb8d90641ac9f354f84"
        }
      ],
      "message": "SockMan: handle connected sockets: write data to socket\n\nSockets-touching bits from `CConnman::SocketSendData()` copied to\n`SockMan::SendBytes()`.\n\nTesting this requires adding a new feature to the SocketTestingSetup,\nreturning the DynSock I/O pipes from the mock socket so the recevied\ndata can be checked.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-14T14:13:33Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-13T14:17:59Z"
      },
      "sha": "3f796b69c8a4f7b84023c66d7e14c94571637629"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVmNzk0MTE4N2ExMmY2ZDFkMTgwZWUyOWI3MmIyYTVlZTdhNTc4Yjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f7941187a12f6d1d180ee29b72b2a5ee7a578b8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5f7941187a12f6d1d180ee29b72b2a5ee7a578b8",
      "tree": {
        "sha": "e00406a39d62d1105c70bd5b9056ebf130a8e645",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e00406a39d62d1105c70bd5b9056ebf130a8e645"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e00406a39d62d1105c70bd5b9056ebf130a8e645\nparent 3f796b69c8a4f7b84023c66d7e14c94571637629\nauthor Matthew Zipkin <pinheadmz@pm.me> 1749825814 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1749910430 -0400\n\nSockMan: dispatch cyclical events from I/O loop\n\nCopy from some parts of `CConnman::SocketHandlerConnected()` and\n`CConnman::ThreadSocketHandler()` to:\n`EventIOLoopCompletedForOne(id)` and `EventIOLoopCompletedForAll()`.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhNg54ACgkQ5+KYS2KJ\nyTqSPxAAnwalHPITTdNzbhXYSHl/JnvxGQ8cRBU929/64TSvN2nIeWxancIXqEI2\nR8u/uQN3CPceYaUEGsD9L1wTf5/9Vf6PWluDC6ak48mN9yoRCwteTU5D4PzdDd8R\nguJswcVeqNxqT2nbni1eNL6F8jmEj5YxV81DJSWYuanf9kpta4joBJFc3V4CDHe+\nw68ymWcCz3oR81r9+R5ar+ikFsXh80mJ9x5fNHN0QkgWo47BSpqES0pEdtHrmYwZ\ndUMoiGcQNysgBqi2tMMtzBpZrFoHeGStJQOWih1UYsHeyOhrRUBxGzGMY6uCDQVr\nwkdbucvfTon/LMgfnesf/plyaCl9YYyWzrYVpX1ZZR9SJD7XV7co6/cm/CfEokTU\nofQnXlHMmE2UDixNrJZ3yVTpGntYrwCzBpymmZtoGcXNMPwFfujTwrc3tPyDpvyV\neUxeZE2cyKS7QnHVCdNIfoOg++lx3VQ3wCY0bmdS8EQRMeqCKGdGWxbE7bwbIiPU\nHtTImUF8a9wSgsZJ/s9BJp8ktcnltJ3mUtJZaFQMILLuS7iueI/ffR2tk/gzHJAC\noqEa92ff5RhjQpLceCl1ROvURTQKOOg8YNu7cxSeIz3+S19S6QKI1ipjyNt+j961\nOeQdbmqOjj5UCWUh72YOkvGNi8pq2kKtb95KBMtNHHvP3iqaCbs=\n=xU5n\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f796b69c8a4f7b84023c66d7e14c94571637629",
          "sha": "3f796b69c8a4f7b84023c66d7e14c94571637629",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3f796b69c8a4f7b84023c66d7e14c94571637629"
        }
      ],
      "message": "SockMan: dispatch cyclical events from I/O loop\n\nCopy from some parts of `CConnman::SocketHandlerConnected()` and\n`CConnman::ThreadSocketHandler()` to:\n`EventIOLoopCompletedForOne(id)` and `EventIOLoopCompletedForAll()`.\n\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-14T14:13:50Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-13T14:43:34Z"
      },
      "sha": "5f7941187a12f6d1d180ee29b72b2a5ee7a578b8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI5MmVjMDhlMzM1NTI4MDRkOTdlYmU2NzI3YzEzMWNjZjJkNmFlODk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b92ec08e33552804d97ebe6727c131ccf2d6ae89",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b92ec08e33552804d97ebe6727c131ccf2d6ae89",
      "tree": {
        "sha": "d95521633ee01cfe136c962ff436c4b366fd4702",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d95521633ee01cfe136c962ff436c4b366fd4702"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d95521633ee01cfe136c962ff436c4b366fd4702\nparent 5f7941187a12f6d1d180ee29b72b2a5ee7a578b8\nauthor Matthew Zipkin <pinheadmz@pm.me> 1741800707 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750189175 -0400\n\nstring: add `base` argument for ToIntegral to operate on hexadecimal\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhRxKkACgkQ5+KYS2KJ\nyTouORAAkahueoakIa2u4qFloczQ+TAxPUC9otmbGDIZDbd91LfEpa40lbBZRzi7\nPuKgkCrrg4g4U8NwIkpdMqH6H6aY25/juWlhIvcACQrp2EaGMBDPdwMnMvCIHRtz\n19jKFroWiynWatDacIrDabJwR3rSLrSAyrPP39EdoD5Jbtq877dQArm/IkeL2b6o\nUp7G8TyAC6dySQFviGpay/jeXk8kQDOuDh4l3N4n88ioeuqfwLDIKZvdXjfNVK55\nrOTiqoKAgy0FVmYADODPLF5P/gPjOZ27yWccESwlI93PKJFT4zltBWJiAyJJg1sP\nXj/FoFqA5SdNzKbFG59RkSuMFWdgvInOX/0WydJoHYMuPWzC0khza2DwYVYX8lok\ntULf9ACSjDLCqXa9bn5qOFYYFuj7Ut5CT2dHxz/eekNzkv2O6LE7trn5dTIr591w\nEUppFOqGLJC96GgRv1Er3plmkgOygski57jF9FaA0r04qgRhWtLdab+Ktw2gJZCO\nA+RZ4CUdeGmNkcaF1VgypZSaDqdkPfRUWaMDGs3D8vMIzWawtCZA09q8D50yIDmK\nhIePPmKjCJtli0KePKQjFvgooYASrqOdcNybgnPrpFRracWvXILGnjPe8qYimQTc\nesNa26b6VqDR2foSn/WA/7B91bznMtRtuf84nj117AafpJHhDkw=\n=mgdj\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f7941187a12f6d1d180ee29b72b2a5ee7a578b8",
          "sha": "5f7941187a12f6d1d180ee29b72b2a5ee7a578b8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5f7941187a12f6d1d180ee29b72b2a5ee7a578b8"
        }
      ],
      "message": "string: add `base` argument for ToIntegral to operate on hexadecimal",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-17T19:39:35Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-12T17:31:47Z"
      },
      "sha": "b92ec08e33552804d97ebe6727c131ccf2d6ae89"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIxOTUzMzg5MDRmMDkyMWM4NGRkMjExNzg3NTc0NWE2YTczNWM0YmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b195338904f0921c84dd2117875745a6a735c4ba",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b195338904f0921c84dd2117875745a6a735c4ba",
      "tree": {
        "sha": "015e546274405f97cab143943a0a9b39989d8fe1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/015e546274405f97cab143943a0a9b39989d8fe1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 015e546274405f97cab143943a0a9b39989d8fe1\nparent b92ec08e33552804d97ebe6727c131ccf2d6ae89\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1717097698 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750440573 -0700\n\nstring: add CaseInsensitive{KeyEqual, Hash} for unordered map\n\nhttps://httpwg.org/specs/rfc9110.html#rfc.section.5.1\nField names in HTTP headers are case-insensitive. These\nstructs will be used in the headers map to search by key.\nIn libevent these are compared in lowercase:\n  evhttp_find_header()\n  evutil_ascii_strcasecmp()\n  EVUTIL_TOLOWER_()\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhVmn8ACgkQ5+KYS2KJ\nyTpE6w//frJgzCqytsioAdB2nlvgdaQYLdbJXSN3n5I6gvtieJpt0iSZhel0DXxN\nCqgS8f3tF5uTcOZ9iEyviJTMh8P+MGZeTUU0qSA/OpivkcSR02JRZRmEJ1TOhm9l\nLEA60CBWKzpAvIKeVqnyenNImwPtzIRkoBMBS5wSG1HBP14L/B7tleMDg4UzEBHY\nmPVZ/T9U3tT2tJsVNLfv8BMG6LQIa/2Vuy7QBiisPYcD1VLWoEriinB787oszSXg\nmmkBROnmveV96zanUOl0yQ3HTb9Zs69SqMAueXaLA4d/iQo2SCLFPvnmSiDaA/D1\nsfZxXiRxg3dOgPmtWwsrpNYjUpuqw93ZUfwkm6yhu7UFfBHWViyU+4WVM2d0RnL5\n79Afot2j+5gIeh+PW8GYpb8HsQP6CrXADdOneKH0PiOxwdzWBiVOjFzYdFu6ZuL/\nIvKkvIQBrcpD4fAgXCen5AVSMqXm7w5/5WNX08Wwp297mWozV7TnPjPgz23L640Y\n4pskz65pSWPUA7DCZPirm9PaQIDRmeNOPxwfb/3muoi6z3Mc469ca1c63K0ZapAy\n4+Qz+4Y+X6Iwt6SgFigdfvxCUhlTBfsxZEXhi5BwJsczQbCAmd+I/yKq1fWRI+0P\nR5tEZG716JH0sH1twVP1Dqt1OmPbATD3G9regxwudy0wwp4A1hc=\n=EJWd\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b92ec08e33552804d97ebe6727c131ccf2d6ae89",
          "sha": "b92ec08e33552804d97ebe6727c131ccf2d6ae89",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b92ec08e33552804d97ebe6727c131ccf2d6ae89"
        }
      ],
      "message": "string: add CaseInsensitive{KeyEqual, Hash} for unordered map\n\nhttps://httpwg.org/specs/rfc9110.html#rfc.section.5.1\nField names in HTTP headers are case-insensitive. These\nstructs will be used in the headers map to search by key.\nIn libevent these are compared in lowercase:\n  evhttp_find_header()\n  evutil_ascii_strcasecmp()\n  EVUTIL_TOLOWER_()",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T17:29:33Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-05-30T19:34:58Z"
      },
      "sha": "b195338904f0921c84dd2117875745a6a735c4ba"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDliZDNjNzFlNjMwODQ0NzZmZTAzZGVhNDA4ZmQxMmJmNDhmY2Y0MTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bd3c71e63084476fe03dea408fd12bf48fcf414",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9bd3c71e63084476fe03dea408fd12bf48fcf414",
      "tree": {
        "sha": "6e39e9a3010616306107fccbffaae161c251e599",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e39e9a3010616306107fccbffaae161c251e599"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6e39e9a3010616306107fccbffaae161c251e599\nparent b195338904f0921c84dd2117875745a6a735c4ba\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1717436232 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750440596 -0700\n\ntime: implement and test RFC7231 timestamp string\n\nHTTP 1.1 responses require a timestamp header with a\nspecific format, specified in:\nhttps://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhVmpQACgkQ5+KYS2KJ\nyTo0Qw//V5bF7lKy5e0Hm0N0FLZ2QrY1OdWjrpvCorybXwVW+QGkz1z4z1QwctMa\nUJTmS7aqqfYnW+t9/k08kfkxl7SE0MODy28Av+RQ6gp8EuIAA2kDLnr9Hz/AampN\n1Tsy+DtKI+7iaHQasYz0h6yTZuebtTRnQv8ry+/44zp5z1Ey9AtTDk8033AnySSa\nLr3I1mGXtys7w+cSa1IiN802LQoMWtoFrV/qGtR9i8e1+hcpenh2cVkr2GiGNtq0\n35q8jBkP9TKay3owuViGmstia2rSc2sqaoYFds9ebZZan3isxp5b0UZ8SBBPa5Y3\nKdb6tRgltX22bSZNIrfjovgQWt4z511ICnKCF3+MSsoqHX1io6rnvxEY/dhsN/pR\nbvqWVQ+kWGnKj0nAGfm928YOmVSyLldV5nIf1L6HhpaRTLJzjB16PZdzPWsKGriE\nRg3PQosaHr0NPccrARxsNOX6W7Woxat3dQ7FyT6jStQmM3TluQPc1RSBWijmvp5G\niTwk5aTgZhFt/G1IRW8Wg28T6oZoOB6PGRRgjhwD9lUWWkrG+BRzbdEKaH0zBwux\n/GcVR82h9IWy6LTV/DkKIiXFtPpbscPxDASEPLFYS8PGFtAxZb4YOlfyKTuZXOS6\nwgyuIuz3Awi64kmPt4OS6o1W4T0GOYL84S7DGzOxSbUUYvdhlpc=\n=H4uV\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b195338904f0921c84dd2117875745a6a735c4ba",
          "sha": "b195338904f0921c84dd2117875745a6a735c4ba",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b195338904f0921c84dd2117875745a6a735c4ba"
        }
      ],
      "message": "time: implement and test RFC7231 timestamp string\n\nHTTP 1.1 responses require a timestamp header with a\nspecific format, specified in:\nhttps://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T17:29:56Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-06-03T17:37:12Z"
      },
      "sha": "9bd3c71e63084476fe03dea408fd12bf48fcf414"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYzYzNhNTNhMThkOWFkYzYyNzFjYWVmMDgwZjUzOWFlMmYxYjY4MjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3c3a53a18d9adc6271caef080f539ae2f1b6821",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f3c3a53a18d9adc6271caef080f539ae2f1b6821",
      "tree": {
        "sha": "ea0f7168404dcb80ecf05bfc138a0fff934408cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea0f7168404dcb80ecf05bfc138a0fff934408cb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ea0f7168404dcb80ecf05bfc138a0fff934408cb\nparent 9bd3c71e63084476fe03dea408fd12bf48fcf414\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1727464937 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750440597 -0700\n\nstring: add LineReader\n\nThis is a helper struct to parse HTTP messages from data in buffers\nfrom sockets. HTTP messages begin with headers which are\nCRLF-terminated lines (\\n or \\r\\n) followed by an arbitrary amount of\nbody data. Whitespace is trimmed from the field lines but not the body.\n\nhttps://httpwg.org/specs/rfc9110.html#rfc.section.5\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhVmpUACgkQ5+KYS2KJ\nyTqxIg/+OHknrcTpWPImYKmTjpRxoMNZFXVeLHdm/FsfLHJlo8i65X08TGwGt6F4\ncAPndBe3gJIHRWYNnuUWU2Wot2Pfux81LI5yMAgLyNUGKCdWnnQ8TUG2rBElMyMG\nJawXQQeP3jpptEPs3GPklGdtz3uunZh+/gjyfWR4HLB0On/zU5T2Bjrg/5qpEcng\nLGIYKhMOKDpbiMoMPqHHQu5QgTKV1/JSjQwjuwIOuoj+/37YiYjrailL1FOxu0VJ\nS5Pw+l3bKpulLBkktpSbVoKOgC779PoM21GgZYa0kypmqZUfWTUEwBlYDRg6X9Z6\nVUqNg58GHnu5UVkqTnNFdVzPfm6vuC+W0K2pxfTNM8IGJsYrzd27Uc7I4T9/f3yH\nWmmxcLrmJhzoNTR3/uWGtjc4Rwsg429cdPnOUXfgET0GtiJyOEEeJYhc60sC8/Tt\nrjDr4nmPZ5LlecNTvgn+k1CoI2g5TgDyS2gVW5tdgG2w7ilEUKCQb8vHCRtVHI/Z\nky7Q2PcuIzH5T7lItz22U2YmDjI1/Gkmduqo1n0QhVPPMocXn7h4N1Xgh0tQD41N\nNit/fwtl2U0/FZYuVQdccIbRJaSPYwUoYunSnLeK5cNXJuvd7VQVylCrWa77yAz3\nBlKwk3Vf/W1cuJoCAwHS/19ZT4XvoSP7e9fkWUO1n1YlJ2wVyQM=\n=acCU\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bd3c71e63084476fe03dea408fd12bf48fcf414",
          "sha": "9bd3c71e63084476fe03dea408fd12bf48fcf414",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9bd3c71e63084476fe03dea408fd12bf48fcf414"
        }
      ],
      "message": "string: add LineReader\n\nThis is a helper struct to parse HTTP messages from data in buffers\nfrom sockets. HTTP messages begin with headers which are\nCRLF-terminated lines (\\n or \\r\\n) followed by an arbitrary amount of\nbody data. Whitespace is trimmed from the field lines but not the body.\n\nhttps://httpwg.org/specs/rfc9110.html#rfc.section.5",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T17:29:57Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-09-27T19:22:17Z"
      },
      "sha": "f3c3a53a18d9adc6271caef080f539ae2f1b6821"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMwNGJjMWVlNDY3NTdiYmYzNmQ5YTIyNjQxYmVlMjZkZTkzZDEyNzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/304bc1ee46757bbf36d9a22641bee26de93d1273",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/304bc1ee46757bbf36d9a22641bee26de93d1273",
      "tree": {
        "sha": "f553b078734b20051d3db62ae8c400dd440cd2ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f553b078734b20051d3db62ae8c400dd440cd2ba"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f553b078734b20051d3db62ae8c400dd440cd2ba\nparent f3c3a53a18d9adc6271caef080f539ae2f1b6821\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1727713734 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750440597 -0700\n\nhttp: enclose libevent-dependent code in a namespace\n\nThis commit is a no-op to isolate HTTP methods and objects that\ndepend on libevent. Following commits will add replacement objects\nand methods in a new namespace for testing and review before\nswitching over the server.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhVmpUACgkQ5+KYS2KJ\nyTqMxQ/8D4ZhmPjHzMOrD0ujxkD6FnOiEHdipFTiPOt/5jPuMpiOJ89GPuAWNtul\nfe/EwWcGb7CZmPoqY4CNOv1pGSbKcgf4xSE3/bpAD9TfXTwtT5E6i9o8vnlNEpBa\nAK4BN8PJbjo7tu7/y4xHq+s98XU+0McTMmt2M+YcIr2zygXq1OhMhaY2f/nrQIup\nrr4T+ahtK3tnS1div+YShyKUhpulRxV1BiJNJvXg2xnCJHG7gHeBPEQOdvbOMjP5\n9YATggrX28qqWYqHyV3xOZb2AnSDNrlADYiSpOqutRwYj5tbOIQRgX7m4uGJcke8\nShuMZG9T+0kCdxoQm2BZrx6LfcXkNa55/HEi0ipv+1BltkxV81fawyA98LWxoJf2\nJulVsBjDZNqoZH2khPvBZlXlzJMWam6JEqoCZrBrASPZIxzwolB7cPj7jqO6284q\nc6P/QCUjfApt2h+O8SOnu4RsRtYeHxm+h0n+4W5MrODWiWCJ5JmB4dfaTMfOHvAR\nXdixX5oOW2zYTN8Kg4rpftn1ccey6FICiOAWwdY++9CjvbbbuSQmPFDrMWRK7TIB\nubUid/K3i8EXcEyai290wLOUUBDeDZMJT87rYaBh/5/uECDVvClLkkP/xC7s9DLg\nG9YHV9CEKVbzmxCfA+sOCsMdetBwYE2SGAo+mQ0sLExPYqYEcxI=\n=/OPF\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3c3a53a18d9adc6271caef080f539ae2f1b6821",
          "sha": "f3c3a53a18d9adc6271caef080f539ae2f1b6821",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f3c3a53a18d9adc6271caef080f539ae2f1b6821"
        }
      ],
      "message": "http: enclose libevent-dependent code in a namespace\n\nThis commit is a no-op to isolate HTTP methods and objects that\ndepend on libevent. Following commits will add replacement objects\nand methods in a new namespace for testing and review before\nswitching over the server.",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T17:29:57Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-09-30T16:28:54Z"
      },
      "sha": "304bc1ee46757bbf36d9a22641bee26de93d1273"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDllODViYTI5YzJkMGE5YTYzMTJhNDViNjcwYjhlYTczODcwZDMwZjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e85ba29c2d0a9a6312a45b670b8ea73870d30f9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9e85ba29c2d0a9a6312a45b670b8ea73870d30f9",
      "tree": {
        "sha": "48da2928c355cdb415b983ab30152cf1eaa5e40e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48da2928c355cdb415b983ab30152cf1eaa5e40e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 48da2928c355cdb415b983ab30152cf1eaa5e40e\nparent 304bc1ee46757bbf36d9a22641bee26de93d1273\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1727716949 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461966 -0700\n\nhttp: Implement HTTPHeaders class\n\nsee:\nhttps://www.rfc-editor.org/rfc/rfc2616#section-4.2\nhttps://www.rfc-editor.org/rfc/rfc7231#section-5\nhttps://www.rfc-editor.org/rfc/rfc7231#section-7\nhttps://httpwg.org/specs/rfc9111.html#header.field.definitions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7g4ACgkQ5+KYS2KJ\nyTpc5g//eUsgNgP3Z/L54MY3MVmMG5pFYlzL2+5MBwRRueniSg8pxrMcYTl+42ge\noLOUoOFBJjDDuxWPvEQwZzpPQx+EE82FBjFvgE70c+WY0R4f7HXNDfoEhRe9xmEE\n6wQS9DwihxVNBQ8+p08LftxoJl9vUP9eWt9pcFw+SG6StRv0hHTSRHCTAU6btD4+\nJaP/YP2U2Za/NhECwbHceuqmFPmrFrld/WoGxXDMkrofecr+kV7YxLdHrCxKYKTu\neGaXA/JNB9hG4rZDy7KnEVujnfQ/n2TQCqjtUY9cIvaL/h8GTovlQtWpyY+ZglQp\nHX/nrW7H3MLkI4547JqnygJmGslaEtqrUgcbHF9WjgSG8Rm9rd0cbje4wHnHDrtW\nwo7OGoPMZKTT5rd6nuzOkgEFKdwTF8lVvLjVuhmheUYeq6TOLfwftpkFJUL/3wSK\nlWFvkjEVjq6l7/wkbeuBeB+U1ttnKclpYxaFz9WMkmz3Y9/cmetFXHFc0r+GxOHq\nVPRGPJDcrC1j+H5VmO5KVpp9Uoueiwq2Y7zNNnoCBSK5rZsikz/WlhRZmOn3rlDM\nszzVeskukM/QT63+OD9zThnFJGUTJpXD+/D7/0dtMeMVmo6WKykXqTaSktd7w5Ez\nI7tWmlQDT0D4yoOaEjowNPcXwK4+OwzR9cINxEOyk3/CeDoEtrE=\n=CFCQ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/304bc1ee46757bbf36d9a22641bee26de93d1273",
          "sha": "304bc1ee46757bbf36d9a22641bee26de93d1273",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/304bc1ee46757bbf36d9a22641bee26de93d1273"
        }
      ],
      "message": "http: Implement HTTPHeaders class\n\nsee:\nhttps://www.rfc-editor.org/rfc/rfc2616#section-4.2\nhttps://www.rfc-editor.org/rfc/rfc7231#section-5\nhttps://www.rfc-editor.org/rfc/rfc7231#section-7\nhttps://httpwg.org/specs/rfc9111.html#header.field.definitions",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:06Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-09-30T17:22:29Z"
      },
      "sha": "9e85ba29c2d0a9a6312a45b670b8ea73870d30f9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJlZjYxNzQ5MzJjZjYxZWUyMzc3MGY0NzY1YWZiZDIwMTMzZDJiYzQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ef6174932cf61ee23770f4765afbd20133d2bc4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2ef6174932cf61ee23770f4765afbd20133d2bc4",
      "tree": {
        "sha": "ef2d4e8e2ad4a392a4ac2b22efc0fa337b8ee5a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef2d4e8e2ad4a392a4ac2b22efc0fa337b8ee5a3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ef2d4e8e2ad4a392a4ac2b22efc0fa337b8ee5a3\nparent 9e85ba29c2d0a9a6312a45b670b8ea73870d30f9\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1729090626 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461972 -0700\n\nhttp: Implement HTTPResponse class\n\nHTTP Response message:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-6\n\nStatus line (first line of response):\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-6.1\n\nStatus code definitions:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-9\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hQACgkQ5+KYS2KJ\nyTpogg//ZHdxBzQmMpI0a/efXtqs0SZVeNjKjbD/cS9FN+01mI0yDqzUbPBqPuGG\nxaWIcd0fBkiAy2xXxU/Eq2B/myvJX7N9WVYu4DYNUEysUuJ28ZjAUAKslq0Tm0i4\nnuE2VJiRCbyGSp3HUhKopmkKfYMFXIecnL+/noaf1GNmkSDFL/VGhoECQKWcUUiC\nIGAPL/KfHLSQyWXPYiL9J5hNOVUwEr5U9KggZ0saAgCBUAb2sELgcX5XqkC3H2FD\neOjyJY29/PeD1TFpHpCs19cxO5cmIm+8CPKuu0zLOOmSBrqiEJbAcJjH4Mk+SDuL\nj3O7Ws69lX2eEqcVdQQc5gzNIIzyDGT4dD4YXz5xBnt7NkU1dbQqlYNzBKxjWMSv\nLqOyBVB2Pyu2U6Kvc8hBUGagOKgSbYUYmTQgTn9LKJoNs2K6GC5dLcHyjDMQNyo9\n9YQBoVNBk9NmzCtKOB+kc6jH5mjZNU8f5QTl+07+rNEwJ8Pcu23VKnc2sgV0Lo/w\nRFut+lyKXDxRrWkjV3hd2/d8G/yQwwVsPPkEKJaOkgyPCxtncYW0X6Tch+GESNXD\nO//doS1WS1MjOwlCPOa/GvvyVKNwHnBTNUaykl1d9jRMUZhLtLa0WDiXTt3makhV\nRDMaDadyonIK8IbhrhBVBGV37nM1M3GXJin/jVNN+wt3pvVTpN8=\n=6fR9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e85ba29c2d0a9a6312a45b670b8ea73870d30f9",
          "sha": "9e85ba29c2d0a9a6312a45b670b8ea73870d30f9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9e85ba29c2d0a9a6312a45b670b8ea73870d30f9"
        }
      ],
      "message": "http: Implement HTTPResponse class\n\nHTTP Response message:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-6\n\nStatus line (first line of response):\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-6.1\n\nStatus code definitions:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-9",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:12Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-10-16T14:57:06Z"
      },
      "sha": "2ef6174932cf61ee23770f4765afbd20133d2bc4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ0Y2VmMjBhMmI2Y2Y4NDkyNGQ2Y2RhMmM3ZTYxYjFiMzk4NTMxZWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44cef20a2b6cf84924d6cda2c7e61b1b398531ef",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/44cef20a2b6cf84924d6cda2c7e61b1b398531ef",
      "tree": {
        "sha": "4db387f297a1350169274106c2febd885467b900",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4db387f297a1350169274106c2febd885467b900"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4db387f297a1350169274106c2febd885467b900\nparent 2ef6174932cf61ee23770f4765afbd20133d2bc4\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1729102725 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461972 -0700\n\nhttp: Implement HTTPRequest class\n\nHTTP Request message:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-5\n\nRequest Line aka Control Line aka first line:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-5.1\n\nSee message_read_status() in libevent http.c for how\n`MORE_DATA_EXPECTED` is handled there\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hQACgkQ5+KYS2KJ\nyTrsDRAAxlZ72bWyBS/r6YR110nvRU0xvKMcvgxISMlsbi1TL4xPwxb9zUSzv8d0\nL+ck6m8XlyZGBdXre8hDoz9YAOpf8E4C3rPUesmSQ8aFIzeqptJxT4sk1A/xvuYI\nq3kUd/cJeiqMAGFMMYoq7Ct+DCZ6rluK6iBXolHwqZ0WeCK81W+Ay3yQWneWB/Ld\n0Iq78/KjEdNqa9hKHozXuD7/+FsY/9ydBbRfCnUijCXoEh43eDcV+dDdUJavJBqz\nGcmtMRKpuP4Iv/m3pdeIlEMHAX0EzOzId+5IZwcL582vRbdllt/56y8PvDTFBPVM\ndMpTf/ZjBTUMSx+vtBcDkf/CyIQEdyRKdVO3iwJU2hiOJIiBGL4wZeY2AsYosYKV\nkmgfl5OcmR3CZKG43+F/V+cqiVcOaPR+5ac1atBz78MiLn5Vd6vMyTrs+zShdcxe\nx9DlpUpRvjcXTUMoY/rf9GdO9X7TKOKtg3px2Q4xb2AaAYH1D29nXHU5qLkVTgzg\nd3eTjeThCHpPlJJ1wvnWYnNHBu0ULxCMRqApFcMWix1NXfstLWQvM4XDwRutIzcZ\nEcs0t7b2Ef6OtAbtLgIPTAubw+T41zlbJoAY/BMbc3PSWIjZBnAYuIj5zOXUcNeG\nh476/Qsc1hd5xniABmQobxXdxjQxIjQp3F3WZDWaQWyQjbmGyRo=\n=JKAD\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ef6174932cf61ee23770f4765afbd20133d2bc4",
          "sha": "2ef6174932cf61ee23770f4765afbd20133d2bc4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2ef6174932cf61ee23770f4765afbd20133d2bc4"
        }
      ],
      "message": "http: Implement HTTPRequest class\n\nHTTP Request message:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-5\n\nRequest Line aka Control Line aka first line:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-5.1\n\nSee message_read_status() in libevent http.c for how\n`MORE_DATA_EXPECTED` is handled there",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:12Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-10-16T18:18:45Z"
      },
      "sha": "44cef20a2b6cf84924d6cda2c7e61b1b398531ef"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY2ZDI2NTYwMjJiYmQ5NWIwOGQ5YzNjY2M4ODFhZjdmMjE0OWM0MWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6d2656022bbd95b08d9c3ccc881af7f2149c41b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f6d2656022bbd95b08d9c3ccc881af7f2149c41b",
      "tree": {
        "sha": "e94210fe04af5bc9e97dfd94534bbfca574de843",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e94210fe04af5bc9e97dfd94534bbfca574de843"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e94210fe04af5bc9e97dfd94534bbfca574de843\nparent 44cef20a2b6cf84924d6cda2c7e61b1b398531ef\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1730319080 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461972 -0700\n\nhttp: Begin implementation of HTTPClient and HTTPServer\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hQACgkQ5+KYS2KJ\nyTrwbA//fxW6l6aDU556Yt8VfGZvxQmNpEL8DhpRF7D47W7Z0rvWkRvjjF7LG0Tb\n8ZwFDMRUSNLdIo4I9vbgpuQDrn8oBolndN5af4g2REeMK7XJ599TO5H6cGAZshkf\nTRGXAV7/1N+u9y1tfYRDOVk7KX805hOpVM9HbvydK6MKs65UDgNKJOZvI/DGe5RE\naIIJNWped3Mvv96mIQleKDdFDNxTP41eE2mLrgS1oCqf1zcAkKS6Pd7eBdOKmszn\n8lwGrwSAY6GWZbtaVq+mZjzTGCfgAEQwpPGQ4MHFvi+kjtJ3csspmson2RJA4uk/\n65mSgfpDnkW5T/X4YX9H0ujEILR7tvIpcaEk8aQz53M+uxCWVPgEZThbPmnBuw99\nbIRW6QlaQ6tYrXNjpupOVDMQw+Hh3G2EAJQ1TE1CuOqUGhF6hcdN/TrOjVsHN+rS\nDF8pQMtTUtwa2ij71OUybyW388hONvjA+1uaxhml40O06MB13uqE5NA6J+Gdoc6i\nY4Zw555Vbq5ITAjwDQ4lb7OBpUiCcOdTnsGMT61dztO+DbQzwDQqcw2RgOmLPwBg\nX3Ine8xwO4yw63lj7d6yf7h8cmtprjSxXX9/oEzwnyURmeCi1j2hScWXoTsxKeSy\n/E3nA8PC5+E4e862S/++4E/deuuR+1ihxWRW4cFjDwk6FUaGF5g=\n=2mK3\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44cef20a2b6cf84924d6cda2c7e61b1b398531ef",
          "sha": "44cef20a2b6cf84924d6cda2c7e61b1b398531ef",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/44cef20a2b6cf84924d6cda2c7e61b1b398531ef"
        }
      ],
      "message": "http: Begin implementation of HTTPClient and HTTPServer",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:12Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-10-30T20:11:20Z"
      },
      "sha": "f6d2656022bbd95b08d9c3ccc881af7f2149c41b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM5YzFkMWZmYWIwNTIyNDg1ZWM4NjQxMDAzNGRjMDNkYWMyYTc0ZWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39c1d1ffab0522485ec86410034dc03dac2a74eb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/39c1d1ffab0522485ec86410034dc03dac2a74eb",
      "tree": {
        "sha": "69bade61c48e0e335d38b5cbc7b3a45441380e8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69bade61c48e0e335d38b5cbc7b3a45441380e8d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 69bade61c48e0e335d38b5cbc7b3a45441380e8d\nparent f6d2656022bbd95b08d9c3ccc881af7f2149c41b\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1730396059 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461972 -0700\n\nhttp: read requests from connected clients\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hQACgkQ5+KYS2KJ\nyTrgNw//b9+H3pSZwkNMctjGLD+WgQlBHL61J49WExsA7+DbotSDirBfzn5wC0f3\nSPpKWtUEiTWY+WbdDjWkrqjIWHf+7r7gWZPBPTW1KLUqVvPwctigUFif4eq6kDAO\nIcZcgjfnAOYjGa1/xWClsr1WdspC53cRDJxfn2VdvTS9KLCT2a4n60lr2fevbOyL\ntyrsB3OeLHZo8lUyTlCxqosn620m7wEGIW6Ly0qr++j98w/ZQ4DFDxiC90zi5NIK\nxY0iLBOrni6XEvZhMxvRhKRBnWKPMOqQZs8l+NwURNGR2me0gTxG0ExyvUqRVHWh\nQpcrvigd4tl9AjWwIEFiPbq6nFM8/kf+TUq7FngI+zGy/00OjgyRzP2cVpAgfiWn\n9vOik6Fq39kAegTb6wTRgJD7wahNsgmlO+GQ3MlgoaW1+GoYnZjVpjFjVabmT1Qm\nD8F5LQmC7rULXil8t6BXiFRyjAENs/lCHVojWVFqgwSvAhhSVMLabfrRkS7h9szE\n3/syR2g+NIsXnWFIKTH/R/buCe1uIon6GhREkIdWUYilnB/UUA/HLiDJuTbzEoh3\nt+uBhOk+NpNG9tzP2eDXgPenK/qcZJUGNWTNiIVcpVYwxXQq0UM+WUSpm06rT7Yt\nn5ghGc3nwaYNkcsnT5op8VBGepE6G+5hZ+fDiD+LRhe3g8FfVy0=\n=1Ehg\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6d2656022bbd95b08d9c3ccc881af7f2149c41b",
          "sha": "f6d2656022bbd95b08d9c3ccc881af7f2149c41b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f6d2656022bbd95b08d9c3ccc881af7f2149c41b"
        }
      ],
      "message": "http: read requests from connected clients",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:12Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-10-31T17:34:19Z"
      },
      "sha": "39c1d1ffab0522485ec86410034dc03dac2a74eb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQ2Yjc4Y2NmYmUzM2VmYzc4NzRiNTJmNTg5OGVmZDU0MmFmZTY1ZGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46b78ccfbe33efc7874b52f5898efd542afe65dd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/46b78ccfbe33efc7874b52f5898efd542afe65dd",
      "tree": {
        "sha": "c2f9b12e680b452e857a696f0ee9fc3be8f3102c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2f9b12e680b452e857a696f0ee9fc3be8f3102c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c2f9b12e680b452e857a696f0ee9fc3be8f3102c\nparent 39c1d1ffab0522485ec86410034dc03dac2a74eb\nauthor Matthew Zipkin <pinheadmz@pm.me> 1741805491 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461973 -0700\n\nhttp: support \"chunked\" Transfer-Encoding\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hUACgkQ5+KYS2KJ\nyTo7EQ//YZgTFinbRjVlHcMvvdzaQVDTXr/za+MpxJMnb8qwAlhafaMsj8LW369D\nf6TbP+zHatKgLsEQ4CgPfpkhisGpHHitdX4YDrCUbYJ+zDivjb4ZjuzU631u8KIo\nHm3nbaVSu8iptIjF6FcuWtjw8Ny+82qiR1Aciq5y4Z598hFH87cVpFzKZeiGj6h2\n2oEA6kSzq2POwNRnfJK9btlcap6FeuS4j5oZaGTAuyz5B1NAp+qzRrUQclVS3jpp\nBYoEd3TX1Pbxhu+7gxEt/czC27V708Eq2/CRugTJQZuk7sck8xRrlA0prhw+8xzH\nqK/kI2tz3h3X4hhDZr3YvoMP1xb1FU7l95N0nOq3YRsx+YfbY+jqugG4THWX3sW3\nYWjEQhYt30xqmY7aNem7meleT6+FKNbCy256ONEgWgbm1YYv36fAQpoRYJJJs03O\nfxhkno2GGyHKvSfF/fw7SOX555GZg8FisLm0gk93/vXUZHGlyGmlIT7E3R5Y1xy0\nfg0k42MkvN8/KZ3nJucxdZbMRU9sdSI/GnYTJv399fJ+39WnFRRVfTHKyH2326R+\npg9lmon7l5Idgtajpk5H1QVPZUwNlb8YO8mwNxjI5uwsIcq29qksLzYjZ3danq8h\nkMSzuIiBQsCd1JQoPyVdt59QjOw+uHLlivMQ6U/N2FEwjyzLViU=\n=ogPR\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39c1d1ffab0522485ec86410034dc03dac2a74eb",
          "sha": "39c1d1ffab0522485ec86410034dc03dac2a74eb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/39c1d1ffab0522485ec86410034dc03dac2a74eb"
        }
      ],
      "message": "http: support \"chunked\" Transfer-Encoding",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:13Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-12T18:51:31Z"
      },
      "sha": "46b78ccfbe33efc7874b52f5898efd542afe65dd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFkMmM3MjMyODY0OTAyM2RlMzMwMDA3OThiYjg1N2UyOGYxZTA0NDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d2c72328649023de33000798bb857e28f1e0440",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1d2c72328649023de33000798bb857e28f1e0440",
      "tree": {
        "sha": "6c1e8d0d19bd96170e0259257824afe6e1c7c9f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c1e8d0d19bd96170e0259257824afe6e1c7c9f7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6c1e8d0d19bd96170e0259257824afe6e1c7c9f7\nparent 46b78ccfbe33efc7874b52f5898efd542afe65dd\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1733878975 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461973 -0700\n\nhttp: compose and send replies to connected clients\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hUACgkQ5+KYS2KJ\nyToeXhAAwaANhyuCcpoX+R3TxVry0ONntyNhH5Oz4g31EPUkncbxztaX7xOgBX3q\nIdVrtuphNObu8V3h29e2r+zpwABQEbDZ1q1YUTY97Yf+qehrSN6FVXG4ebUPZKnL\njM2g/sxA4bXXyOKAYI8u38uoTNpS/drKsW2b6bMPQxUoC61pjwi9mTT1Zq5pX+65\n00gWV1oraUDGslGlWdV2KbkPfc9XEFiLBw3DTV1eQD1Veq/GVKIkYPCFIzYpuNa5\nDUpPpB+ajmuEWvf930eUGNJdAnJD+dP+SKNO+YV2qgyHZtGtdAGvRK3REZn5M1hW\nvFYwRrDHhDF8JR8dKzn1ghdeMjW5mOLyvUrGaVp9T3XypZcdJMFLwyVBPdtcpWq6\nBbGg7uJMfjyMJSRJx2dB2XF19Pwip4q506gnHV3iRBbT8YEMgCepXXmgLLZE/XH6\nZTvMBMzBt8FDek2j65eFW7NJ7tT86+Bw0uRghkOpnxqP1K2UBCZAGtOKrt4oNxq4\ngPP7Au/I6gpNF5qA+o7NEkzo3P9jwp6bhLP9+WBlgnWLk7zKtHGWsy2qKNy/XIhD\ntUPpI0RZI3Klpgb8NBukbEqzewOr28qzGs673KaCo9D7Oi9GpGZnCvg2xdvlsVUg\noqKu9zjQcGSEQLClSDtcBM8Re6Gw0RYdURD9zAAL5nSJEg0EjtY=\n=AUzl\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46b78ccfbe33efc7874b52f5898efd542afe65dd",
          "sha": "46b78ccfbe33efc7874b52f5898efd542afe65dd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/46b78ccfbe33efc7874b52f5898efd542afe65dd"
        }
      ],
      "message": "http: compose and send replies to connected clients",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:13Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-12-11T01:02:55Z"
      },
      "sha": "1d2c72328649023de33000798bb857e28f1e0440"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDcyOTdhOTBkYzNjMjc2MGE5ODkyYTM5NWI3MTk2ZjEzMjQwN2IxZWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7297a90dc3c2760a9892a395b7196f132407b1ee",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7297a90dc3c2760a9892a395b7196f132407b1ee",
      "tree": {
        "sha": "be0aa813e57b4e7f139c71f0012d14d59316acd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be0aa813e57b4e7f139c71f0012d14d59316acd8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree be0aa813e57b4e7f139c71f0012d14d59316acd8\nparent 1d2c72328649023de33000798bb857e28f1e0440\nauthor Matthew Zipkin <pinheadmz@pm.me> 1741033247 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461973 -0700\n\nhttp: disconnect clients\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hUACgkQ5+KYS2KJ\nyTryaBAA2+QV+QGospqrMqMdE0TxAdRZT2c8KqI+XpYBfjM6CJw00IT0ElZepUWe\n0ryl3pFt8LBIGiKaocR6cjIKNqxM7RNtzY9c8ZHzAKkZEPpKiOWefXzuUALA/ceV\nU946fPwIN4DdMkTf0R9jeKRmfk7IRARXwbiVjg+KUNvWfRkmhpoe/9q0btt2Zdd5\nEg8P+ZuDB1ShlYT5uzJiYkr5/imfqUmSu30RCij2bAxtZRoRYdGOSvfinZAYq85U\nUoNca59puaPa+/aKTb+4jkCh23qBnPb5JFV9RTsHC/RJvnxnu3+Cju2yuEyFk7aJ\nSVTHbdKDIndvNLGoWD1PMNr5tL6MJSfMDBzM6AAnsN382FkGNfuqsXnv1bF5UArL\n3Ghvt5O7UkDOkUfmojCF8vXBmbAhqr+k2DAd+u9eAe9vsoH6vDx/KLavCzUzS+X8\neYFMkMDo9oBUa8BL/kqgwpLtiYn9VsQpDT2UI4Y6GBldqct87Hu/Ban7HUsgqkGc\n0evzFZjPquMlThd+opCYsR3xJZyO6Tjwy0AqJi09CduPRGd6ukhVgzC25vkn8+Ri\nWDYQZZiz76qmtUBJlrsGZpWSslayMjrDBup/SAqhYod3xyjkKI86M0kvw4tDE6od\nNAU6vuD5+T1bjrmpny9RZ4KFqmTbsC3ZigvsxZk7TOKDe5HKRJs=\n=xv1q\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d2c72328649023de33000798bb857e28f1e0440",
          "sha": "1d2c72328649023de33000798bb857e28f1e0440",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1d2c72328649023de33000798bb857e28f1e0440"
        }
      ],
      "message": "http: disconnect clients",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:13Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-03T20:20:47Z"
      },
      "sha": "7297a90dc3c2760a9892a395b7196f132407b1ee"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY5MjYzMzhlZDE4ZjVmNjVlMTQ3NTc4MjU4Mjc1MWVmODBkM2RhNGY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f926338ed18f5f65e1475782582751ef80d3da4f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f926338ed18f5f65e1475782582751ef80d3da4f",
      "tree": {
        "sha": "c5be9b3b40a258e34c87d287607a19aad0fd01cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5be9b3b40a258e34c87d287607a19aad0fd01cb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c5be9b3b40a258e34c87d287607a19aad0fd01cb\nparent 7297a90dc3c2760a9892a395b7196f132407b1ee\nauthor Matthew Zipkin <pinheadmz@pm.me> 1740855101 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461973 -0700\n\nAllow http workers to send data optimistically as an optimization\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hUACgkQ5+KYS2KJ\nyTqfbRAApaQ3c6VBSA6/+GjJaS/MworFgV/puzW2LL3+EvzX2jfXahKm4WYHaw0P\nEfhResUc2zHO9kYFD1bRVyJLG/S6/8v5C6LKKlcsQbc+2+1nW4zSjQdnQI7TPn62\nVWreQ2WNLXP8dlD1vhtx2786NKGQMmZdDjiOrxmiwEgQx9iiWbmLR5YrkrdoEDEN\nyQQ5GyDyUO++yMqEMguFFUQXCjMchlSRFQHZ9djaP9CqN4+si9wlxReyYXem344E\nweemRe+xNJ5jrdBAyRNEHRjt7aKxDVTzmD3F1RtxwIzD5tWXlndMlsLgWFd4Sxsj\nwZZuLDQFB9ekcjmunIuWEmnhWoHKwR1rYufRgxD8d8fJtHBQqFj7f52L3SEh2C2w\nPwB2JUCYBE7N311O5L49sAKcHNjrVl+jQJchrwHWdlwgf1CL/SzNF0XSzLxYcHPR\n0k1A/UwqlXAZy6wY78oWljII73GFvp8/3KhL7jftIqn+nuQTF4bGtNxrtzI8iDtX\njdA76wxsyoA8RnbwjyoqkNKMEDkWB6rf1SfkP6lP5ZtUathbMgdpG4BNNCVJ838D\n3XuClQzVLbTeGDVXjpqFpmn4atY7vKNf+k5GQD0qrRQUfm1tUfL3boN0dfrqvLzD\nY0pYbNgmnmhEVXjy9gR43oJyUag+x4McudQjRkYdk+0qA2yMI0Q=\n=vb1M\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7297a90dc3c2760a9892a395b7196f132407b1ee",
          "sha": "7297a90dc3c2760a9892a395b7196f132407b1ee",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7297a90dc3c2760a9892a395b7196f132407b1ee"
        }
      ],
      "message": "Allow http workers to send data optimistically as an optimization",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:13Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-01T18:51:41Z"
      },
      "sha": "f926338ed18f5f65e1475782582751ef80d3da4f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVjNTBkMDU4MDc2ODEzZDQxY2VlNGZiNWU1OTM4MDlkZDMyMjQwZmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c50d058076813d41cee4fb5e593809dd32240fa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5c50d058076813d41cee4fb5e593809dd32240fa",
      "tree": {
        "sha": "af681d1f1109957148d500b9a3c6cbca8e7ed17c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af681d1f1109957148d500b9a3c6cbca8e7ed17c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree af681d1f1109957148d500b9a3c6cbca8e7ed17c\nparent f926338ed18f5f65e1475782582751ef80d3da4f\nauthor Matthew Zipkin <pinheadmz@pm.me> 1743697722 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461973 -0700\n\nhttp: use a queue to pipeline requests from each connected client\n\nSee https://www.rfc-editor.org/rfc/rfc7230#section-6.3.2\n\n> A server MAY process a sequence of pipelined requests in\n  parallel if they all have safe methods (Section 4.2.1 of [RFC7231]),\n  but it MUST send the corresponding responses in the same order that\n  the requests were received.\n\nWe choose NOT to process requests in parallel. They are executed in\nthe order recevied as well as responded to in the order received.\nThis prevents race conditions where old state may get sent in response\nto requests that are very quick to process but were requested later on\nin the queue.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hUACgkQ5+KYS2KJ\nyTovzBAAo+Qj3QkwLyer+XI70Cesxy9hGuhi3dyW6VEi7+sdQu/dLKK/aJQqaXxl\n3lfq2zp1fO51epOc5uXwwYboCROJwFJsEER2nEVxFiBYTwgH5ChPpeoOj+TTSY0p\ngUY3Xse3J6eVdMLKxRpX93hswgPNfw/O5N8ZBLHuZjtFTCJpEgVX4OXygEkorDiq\nA0NYkLWh+FsJljiGFaaDxQwH+yG6mEB2i6FGpzin4lb8f5whYEzMHLscstP1Wgec\nz98lCdlWS4rx5sBjAmwc344IE5YKWAiEXDb9XYHldwqjofRfxAEP1LUOFc95gkQ1\nr7YfO3uemUuKIuJEx7sjl6TMG05Ek0oIBXcmLaf40hSFd2zdHKMWtxEPXa/ECdVQ\nVCmqAcQ7wuB2Ksx3WtWraNRnMb4C40VznLwEfGnbY0sGivkUuwIh9NY0A0AHy3LA\nUyZG+Lt2NZyBDQFIJR1pi4y4WlOyjrdYlHJe5r4Lys2o4+yJfcycnLTris6LgKRP\nNUrODyvRfsWhDy8aYmo+UWGA5SiT8/2Qszk5ZaUGV1eSO1YfUOKqABaga6VJeq/E\n+D4Ea2l5aZCbJb4z4rFYjfSqLCF+MLfoAq50d4YHr721orPGd53OTYOk1h3/pF8d\n6J1S7Hgx2oj5cOBh130qgqnwgf9ZRbB/CVT8qjjBStTLvAGn/ZI=\n=gXng\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f926338ed18f5f65e1475782582751ef80d3da4f",
          "sha": "f926338ed18f5f65e1475782582751ef80d3da4f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f926338ed18f5f65e1475782582751ef80d3da4f"
        }
      ],
      "message": "http: use a queue to pipeline requests from each connected client\n\nSee https://www.rfc-editor.org/rfc/rfc7230#section-6.3.2\n\n> A server MAY process a sequence of pipelined requests in\n  parallel if they all have safe methods (Section 4.2.1 of [RFC7231]),\n  but it MUST send the corresponding responses in the same order that\n  the requests were received.\n\nWe choose NOT to process requests in parallel. They are executed in\nthe order recevied as well as responded to in the order received.\nThis prevents race conditions where old state may get sent in response\nto requests that are very quick to process but were requested later on\nin the queue.",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:13Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-03T16:28:42Z"
      },
      "sha": "5c50d058076813d41cee4fb5e593809dd32240fa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU1OWM1ODMzYWI2OWNmMjMxNjgzYjYxNmVlNzI3MTdjYTk3ZWQ2ZWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e59c5833ab69cf231683b616ee72717ca97ed6eb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e59c5833ab69cf231683b616ee72717ca97ed6eb",
      "tree": {
        "sha": "59a732e2ea4f161db5ad16e7111ef7f4bba4d247",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59a732e2ea4f161db5ad16e7111ef7f4bba4d247"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 59a732e2ea4f161db5ad16e7111ef7f4bba4d247\nparent 5c50d058076813d41cee4fb5e593809dd32240fa\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1733941291 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461973 -0700\n\ndefine HTTP request methods at module level outside of class\n\nThis is a refactor to prepare for matching the API of HTTPRequest\ndefinitions in both namespaces http_bitcoin and http_libevent. In\nparticular, to provide a consistent return type for GetRequestMethod()\nin both classes.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hUACgkQ5+KYS2KJ\nyTrdgBAAxyLQAI5L3HfRPPo2WXHF/ijQHdVrKJcePPnq0Do1QMBlllbCzKhSRMbj\n9gFWuvdEfPJ2Q1MPqHMTWNTWGjA+jaQ1InU3dIL0OsYZWQP8m+sA1Vwej+mHJB6E\nyvuLUoO7tpAIpHH6oyk7KiJbnNkhDxOw+hqfamU/RRHdL0A1doz5j+MfRYfttwHI\nhV76Zlxz9IiOFsQR6eDEMXki+xocSRJgz44w1MDnNhFQINP/bnQnrah58rpvYfW2\n6wDu/AvW/b7nJuBhXjzGjEHtgXTWM9UwTS2+DdqkHXjE46aQjTlXCHwk3/Qs7eNj\n0hAPRSiNfO7NIKpyA5DgTcNRPBDg9EsX/FQxlBEI6YYLa/zQdF5OhnTq5JJYZ9w5\nU6HFxpyh363qTqH1PqjYiGr9X5OXSZ0MA5a4p1G37DEiQx4vatGHgxSHdH9hpVvF\nDxrLJ+DXcSBo8DOCx8S0uTbeF7mOOQo0Z7sOtxtzEWqQoqUWrEMQNUcypytsnXES\nkjEmWG/jNGRsoAZe9CqXMm//caEO0O6tCrGDagXw7fX7Rn0PDt2g+B2ZsFA+fUgP\nFM4UvuuMdYR0LJrABSLDjXI4Inm0WWcmx151pkWhcri7/iRpYp+UYlvaHeOIYenz\n5zyhEnlkWXYtJN+WkXp+k5oN+odcwt1IHmcITg78bns7ectZ5cY=\n=Bszi\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c50d058076813d41cee4fb5e593809dd32240fa",
          "sha": "5c50d058076813d41cee4fb5e593809dd32240fa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5c50d058076813d41cee4fb5e593809dd32240fa"
        }
      ],
      "message": "define HTTP request methods at module level outside of class\n\nThis is a refactor to prepare for matching the API of HTTPRequest\ndefinitions in both namespaces http_bitcoin and http_libevent. In\nparticular, to provide a consistent return type for GetRequestMethod()\nin both classes.",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:13Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-12-11T18:21:31Z"
      },
      "sha": "e59c5833ab69cf231683b616ee72717ca97ed6eb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY5YjhiYTA2NGNlYTBjNGRlYzFjMTUxNjg1ZjY3YTQ4MTYwZTExYjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9b8ba064cea0c4dec1c151685f67a48160e11b6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f9b8ba064cea0c4dec1c151685f67a48160e11b6",
      "tree": {
        "sha": "2521a0907f0cb2d5cac473c1340804c4c2f61c84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2521a0907f0cb2d5cac473c1340804c4c2f61c84"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2521a0907f0cb2d5cac473c1340804c4c2f61c84\nparent e59c5833ab69cf231683b616ee72717ca97ed6eb\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1734021892 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461973 -0700\n\nAdd helper methods to HTTPRequest to match original API\n\nThese methods are called by http_request_cb() and are present in the\noriginal http_libevent::HTTPRequest.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hUACgkQ5+KYS2KJ\nyToIMQ/9HQutNxlcg1CIhIAcGys/RvWzh1nbwNQ1cp6x7e3X64IqTX9Llc38hW7H\nBDJpyaKxEdCasWxRNhCcotQ9qv6ZtMsWQRE9JdkLLLwh4EA5X7dXRMuqgOraPTEC\nMxbhBfFBubQAg4f30yVssuLnFtW9mNolqV9aAamXiX5926NZZhVOykzvlFIhQ4cI\nW0nL9wbKs6cHts1UzZ+N/svy6acVTd6BVnlhuYW8BuIoKpe36lyJVu5cL9FnIeGm\nKBW0YwTDvluJlbsHX+de+xdrwgtlSYXAfLxySctm2bsK8KyTjlO6L8hLDnXYdAmZ\n8q3NVV0dgyVERKC7xtm7rqnfn/XwHWpKfYC5nPfTjCbQjPShxzqKE3i/1yNCktW+\n4Met0OiMdIxDA5THlgALwUvb9JZuxHZaLGRLdQT/nQPNKFersYcYsHY8z31ElMUU\nBk5xQUrrEohKLr/RsenOOM4vosUibD+ch5zf8VGX9kARr2lNb67MioVtVYjcwNfw\n+ilIiSGsvLCgiE2S74Bmp1yMvM5wvGQWsCmzBVXuZ+/9V016rCuMgjqI2WXZfxif\nH8AQZQ7oJbm9U17trYynR8GPBk6KguyXgXgP1hOWKCPkAR+Qb4r0T+uyS0Nl817+\nVVHO0qXLIy9dLU02WHWAs7ledgC6XT9yvAb1Oax4hcnL9LVi/ng=\n=iXKP\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e59c5833ab69cf231683b616ee72717ca97ed6eb",
          "sha": "e59c5833ab69cf231683b616ee72717ca97ed6eb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e59c5833ab69cf231683b616ee72717ca97ed6eb"
        }
      ],
      "message": "Add helper methods to HTTPRequest to match original API\n\nThese methods are called by http_request_cb() and are present in the\noriginal http_libevent::HTTPRequest.",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:13Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-12-12T16:44:52Z"
      },
      "sha": "f9b8ba064cea0c4dec1c151685f67a48160e11b6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDYxNTg0MzY1MTcxMjYwMWEwZTFjMmFhODEyYmI4MTNkMWNkODVlZGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/615843651712601a0e1c2aa812bb813d1cd85edb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/615843651712601a0e1c2aa812bb813d1cd85edb",
      "tree": {
        "sha": "e812c34689a2a123c617da8563970aad878d08c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e812c34689a2a123c617da8563970aad878d08c5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e812c34689a2a123c617da8563970aad878d08c5\nparent f9b8ba064cea0c4dec1c151685f67a48160e11b6\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1734036925 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461973 -0700\n\nrefactor: split http_request_cb into libevent callback and dispatch\n\nThe original function is passed to libevent as a callback when HTTP\nrequests are received and processed. It wrapped the libevent request\nobject in a http_libevent::HTTPRequest and then handed that off to\nbitcoin for basic checks and finally dispatch to worker threads.\n\nIn this commit we split the function after the\nhttp_libevent::HTTPRequest is created, and pass that object to a new\nfunction that maintains the logic of checking and dispatching.\n\nThis will be the merge point for http_libevent and http_bitcoin,\nwhere HTTPRequest objects from either namespace have the same\ndownstream lifecycle.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hUACgkQ5+KYS2KJ\nyTrDEw/9GF8FS2gnR9Z/C4Kv0KHZ+n83tTS2YwybLgi1Rj2vmGvN1Wl/qJQVgJA6\n6Wz/SrA803+PaTIEvbNUGjs4MZtgrA7rcuqjgsMwKauybwA4Ogy9fB3ASRf0nLhb\nyGdQy6qZaE//zwCXOaaiwpC3/ZVvPSKO5y+H0/Vekef5tGyZjcnWMmbXuZa1ewty\nzIftgVvDRLP/THUrnhX7hKurs11BsYx4rlWsPeWCyfD2FMWM7SSDMf27x+ZjhqhE\nWcTLVXQyenhnINSg1ZPD5O0npzTi1SWjO94FKgXJZIuiJ3jeiHcYYR4b+T2dlIMb\nnkelbIYi1FobQFbonBuB7tGriPsRmylXgkkqopoVTKHOUNh1mhwGFEimNYUrQtwL\nsIjdWtDka3nexREPEwXNGJVHlC23FDq2SrceZ8BFjgPUX4m+5UyWNmVWukSumklU\ncZ1aC0K9TA8ePgsMnj09nwRZnUNZ/ZEFLcyO7JIiJYGtvkhKWJWXRwZKjh85y5ys\nmhLifztABk5SJKrO8voJbtVQQkWLWsw7e2YyFqkGorrIyXyXNbvEZhDP277H0HDF\nlxlQ5n52qKjRPlt0tBR8aksmpQBrfBS8FB+1AyM62nrF7eHEW5H44WfW4sXbIhBV\nOZCBSTEhETGQ8B+gpQ1m5NaFOxgfiwxleEkEre+yi1FsW/vZyMg=\n=RlZv\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9b8ba064cea0c4dec1c151685f67a48160e11b6",
          "sha": "f9b8ba064cea0c4dec1c151685f67a48160e11b6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f9b8ba064cea0c4dec1c151685f67a48160e11b6"
        }
      ],
      "message": "refactor: split http_request_cb into libevent callback and dispatch\n\nThe original function is passed to libevent as a callback when HTTP\nrequests are received and processed. It wrapped the libevent request\nobject in a http_libevent::HTTPRequest and then handed that off to\nbitcoin for basic checks and finally dispatch to worker threads.\n\nIn this commit we split the function after the\nhttp_libevent::HTTPRequest is created, and pass that object to a new\nfunction that maintains the logic of checking and dispatching.\n\nThis will be the merge point for http_libevent and http_bitcoin,\nwhere HTTPRequest objects from either namespace have the same\ndownstream lifecycle.",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:13Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-12-12T20:55:25Z"
      },
      "sha": "615843651712601a0e1c2aa812bb813d1cd85edb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY3MGFkNzdjOTQ3ZGY4NGVkMjQ0OGY3Y2ZiODcwM2Y4OTgxZjJiYzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/670ad77c947df84ed2448f7cfb8703f8981f2bc8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/670ad77c947df84ed2448f7cfb8703f8981f2bc8",
      "tree": {
        "sha": "f787f39c8aba785ce653cde6b49a00eec0fd7e2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f787f39c8aba785ce653cde6b49a00eec0fd7e2a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f787f39c8aba785ce653cde6b49a00eec0fd7e2a\nparent 615843651712601a0e1c2aa812bb813d1cd85edb\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1736969196 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461973 -0700\n\nrefactor: split HTTPBindAddresses into config parse and libevent setup\n\nThe original function was already naturally split into two chunks:\nFirst, we parse and validate the users' RPC configuration for IPs and\nports. Next we bind libevent's http server to the appropriate\nendpoints.\n\nThis commit splits these chunks into two separate functions, leaving\nthe argument parsing in the common space of the module and moving the\nlibevent-specific binding into the http_libevent namespace.\n\nA future commit will implement http_bitcoin::HTTPBindAddresses to\nbind the validate list of endpoints by the new HTTP server.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hUACgkQ5+KYS2KJ\nyTpXHw//Y0rOA7N3/y8Gp9c2SUgw/IKBPWErddLqQaWUALk7bzLNcjPSRMlXNuWu\np0GdTg9+YFKeaaGISKSwmutxrZg8/5NblP2zwFnsa62YHG8tHTnQOLDzyDuA/0gj\ntZu2UVWXZTj1yOUiQaSsk08NBsM1bOX6sP5PmHLGLyv10JIFtcX29ZuyI09a7+uB\n5ufMVmstJROrvoZjNwVCVk0MUd9jwH8twQRayW16KVm6DuSsmPwKyCIJr4THsu4j\nzXqB3TOhHB0yxv+DK4CxdvFGdoJyCRSFJ1uIM/zRiDYTaUSua5JaoQy9cHYQx5w9\nwXZAYg3t4hfgeElRWvt6aTCIl+ZQQn+RWbS7uwFDDqglWWB5x6yTqOoRfrYWAeNj\nHO5B9hcdsmlhyzUOFlb6Yqj3TZV/XnhSWKbIXrMiufpdSRffmDR0lGmp/VLMk05p\nLK4i1dO+eRYfE6gpsUSk6WNf1Bq1Alo40PGdWtcuydzgfg5UvdcESckuHeg9dDc+\n3WUGn6LyChfC4MD37XevOCiB177a1fSHiZclH8arSVF+bhNH6fZJPjinVa51SqLW\n6ysHLnjVdb8pvvR/zfUP7NgHy02RD+LIMQuVde8bQpswkSXoPLH/1QAB26KBcsKr\nP1bmwylkM3sZlUwE71kO/wly80IsFqkPYdPHg90NH1NGjW2tZnU=\n=Hjsu\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/615843651712601a0e1c2aa812bb813d1cd85edb",
          "sha": "615843651712601a0e1c2aa812bb813d1cd85edb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/615843651712601a0e1c2aa812bb813d1cd85edb"
        }
      ],
      "message": "refactor: split HTTPBindAddresses into config parse and libevent setup\n\nThe original function was already naturally split into two chunks:\nFirst, we parse and validate the users' RPC configuration for IPs and\nports. Next we bind libevent's http server to the appropriate\nendpoints.\n\nThis commit splits these chunks into two separate functions, leaving\nthe argument parsing in the common space of the module and moving the\nlibevent-specific binding into the http_libevent namespace.\n\nA future commit will implement http_bitcoin::HTTPBindAddresses to\nbind the validate list of endpoints by the new HTTP server.",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:13Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2025-01-15T19:26:36Z"
      },
      "sha": "670ad77c947df84ed2448f7cfb8703f8981f2bc8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhhNzAzYjU5MDU5NDU1YTBmOWZkOTA1Mzg3YjYyNWYyNTk1Y2YwMDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a703b59059455a0f9fd905387b625f2595cf002",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8a703b59059455a0f9fd905387b625f2595cf002",
      "tree": {
        "sha": "36a4ff13337e23c1549490c10ceac84a0cd12311",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36a4ff13337e23c1549490c10ceac84a0cd12311"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 36a4ff13337e23c1549490c10ceac84a0cd12311\nparent 670ad77c947df84ed2448f7cfb8703f8981f2bc8\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1736972256 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461974 -0700\n\nhttp: implement new server control methods to match legacy API\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hYACgkQ5+KYS2KJ\nyTr5iBAAsxza3faWryrK1498FrL4vouFbgMr2bG/bfhdAH7KY5NIy/J3ese03S2D\n2cDKrWxFO/HpunLiTLZdKUb/GUocQ5DmRObNZZiXy0AQdjKHeDZVwxWRbeHi9weE\nbujZXJA4X/+M2eCQLeCrR2I0OQbBun3nu/8IX6H8coMB9TSgezlq5Y30n+UvFhqf\nrBAvLQ8D6GpHwbSTCHGw65zLlyLGHSl7dyUO8OZ6w++qWN/wxycm3Pov2RNlZcjA\nDXhz0jiHJrdfAevIzlyVRW/SlTRHENj3DjmvHQFgEMvyUhS+S1CBh68TY4bIzABb\n9InsTLO85ynV+Dp0NX1TxCo4sb1NPUVCgv+BgQUj89ll55f8tjECNF/FXIlmIyxe\niPjr8r7IBqwI/c1sHtaiYvxprYk9QM4GyC9h/w2nh0d22wiYZ6657MPRDTcT7zW7\nSivUjpNktmgDpKoNwGyjDzH/ElUWggaxtSAZq/UTx03OVnAC5y4EpW/F6NyC1IHm\nw3hDYzoNo5AhdI0l1+znY44QUSa9UIobGb7P8UsZBomaBj7daUABve5zsJYAZ/9N\nWVihRWa+flQaB74XyBbgsFMx8URQahrjemxKGVpUgrie68TjBzGfkSHsqiIaUUX5\naPkG6G/zg2+bFrnxPK4R46nHLM7XjypVD5YG3xMeFq2szswt+8M=\n=XXGY\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/670ad77c947df84ed2448f7cfb8703f8981f2bc8",
          "sha": "670ad77c947df84ed2448f7cfb8703f8981f2bc8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/670ad77c947df84ed2448f7cfb8703f8981f2bc8"
        }
      ],
      "message": "http: implement new server control methods to match legacy API",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:14Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2025-01-15T20:17:36Z"
      },
      "sha": "8a703b59059455a0f9fd905387b625f2595cf002"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRkNWRiZGUwOTcyMDhlNTg0YWY5ZjQ2MGNkODgxZGExZjlkY2I0MGY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd5dbde097208e584af9f460cd881da1f9dcb40f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dd5dbde097208e584af9f460cd881da1f9dcb40f",
      "tree": {
        "sha": "9591b79073f5486b97778c00ff96149855d01cbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9591b79073f5486b97778c00ff96149855d01cbb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9591b79073f5486b97778c00ff96149855d01cbb\nparent 8a703b59059455a0f9fd905387b625f2595cf002\nauthor Matthew Zipkin <pinheadmz@pm.me> 1741627852 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461974 -0700\n\nhttp: disconnect after idle timeout (-rpcservertimeout)\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hYACgkQ5+KYS2KJ\nyTq8BQ/+Nd8MXxBq8mmVI6naPFL42cfeeGGdN29Tb9nNQA6aVuoIZGY2OADhv0s9\no714EbTAg6JoMm3nLD6QIvEUWAP8/mirxlYP57HGr4GrTao0KzhqTp7B2B0CiuGn\nDtLv8SCFjqelk5RE7yqsZ2c2BVGF3rIVHp4MNVYqQeva5NFp207Ap9ipbiYhtM4R\nFwYZRKKtpGVggpSZ4zt7Xu0+tCLjz6D7hDGnois8Xv9iagYwa9I7//a34PlhGdVS\nUXE/352skgwwPv+h92zRSJmrxgmcNxjAIzfFXaDiPh4kY68LvEyONxLWgsDqqhQn\nRNEiKUvc9CuqfiyQIxh8XJJl+op3Kp8NUh3eCM0JGXRzov1lESUp2n2q2++sjo4V\nik2wLzd6jqH5kxvrtyGmIzwUpvosDRNPH8EJjRIfzICVY0mLoZQmOOaniKY4Eqhz\nIuj+VK49O2GXuMPhfE4Nt0tRcfymK4ZpWzsQ4ZKTlWTZYwaoTwvguOffDY8pMz3O\nJ+7xljz6yG1jwfkujRH9LAyGITXH8rcfzjG2HgVDMV+aSTdoNUcFe3U90pcOWf8Z\n2MVWWQf397hOvHFQddA9RwySbwmmfhiZbTWBh80YT7CZBx8dMhAzhDwDm5xidFbq\nFqUZaur47YcOs1GbkbASVoc/DFWmI+Qf8JiR96msx2jFjIWwhiw=\n=39Js\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a703b59059455a0f9fd905387b625f2595cf002",
          "sha": "8a703b59059455a0f9fd905387b625f2595cf002",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8a703b59059455a0f9fd905387b625f2595cf002"
        }
      ],
      "message": "http: disconnect after idle timeout (-rpcservertimeout)",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:14Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-10T17:30:52Z"
      },
      "sha": "dd5dbde097208e584af9f460cd881da1f9dcb40f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc4NDg5NWJiYmJkMWJkM2FiNjJhNDBkZGEyNTk1MjlmYzQ5MWQ2Y2U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/784895bbbbd1bd3ab62a40dda259529fc491d6ce",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/784895bbbbd1bd3ab62a40dda259529fc491d6ce",
      "tree": {
        "sha": "35848e60969aaa3912c3aa87bde77d86a3e3ac75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35848e60969aaa3912c3aa87bde77d86a3e3ac75"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 35848e60969aaa3912c3aa87bde77d86a3e3ac75\nparent dd5dbde097208e584af9f460cd881da1f9dcb40f\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1737126299 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461974 -0700\n\nuse CScheduler for HTTPRPCTimer\n\nThis removes the dependency on libevent for scheduled events,\nlike re-locking a wallet some time after decryption.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hYACgkQ5+KYS2KJ\nyToK8Q/+Lx8EFb9o6y5A1SmKyzcI1bB+SGzYJW4Xcq+MTitB/tNFwyRAVh5IRcme\nwseMHM3h2aYvL6gPCZRBbavf05D5ctazUk2B3pjDVRL77IGWQCwIifo0dELnTfZa\nuLxxV9F4Ozk5asoR+uXdY9xp/ohEmI3x0F7jl/jnYREojHBwEzM2T1Mu9Lll/aML\nAaIVKhgfpyfDSi4PKjPzEL1bjCT/Qhp55mw12W1awRE1ZqHkPUdBCGAmz4qgub2e\n1nOVvtEIseHkr8nN0sxaEOR+fav9jyCgs5EnLcJXuthlS6I0oXW2OkE/Nhdy9iDY\nA8X4vDOYFOYIjFS3b/TNS71WE6G8vq/rcB9HvdqHOI8FJOxAkj947EtcMcHGeUKs\nB/R49xzGmwABIEGVx+teZvEEl81rcUslIhjvCjEsmKUuwDFCkhYCH4vgUqDXCJkg\nohQQpkJsR6J9DN2SHWzHoYO7tiD5j6z3PU9HuO4vWNWNqQucFCraf2ehwIuDAME0\n2xjYgOumTouzi2ZNdcM3vP7g8gl3dxYHpy6Dd7KH4L3/bjI5GyL+omkwRT3jOL4w\nngOoQPS5mQoVwRqSTtyyNERa77oFbQBrG6twcoGQjakK7oXV0tDNBL5h7XIgtTqJ\n5Z5GklfRQE3IXqvNPE7m5XFi22uLlKr1Wzan+agOVCL5sHSNGKI=\n=48Jc\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd5dbde097208e584af9f460cd881da1f9dcb40f",
          "sha": "dd5dbde097208e584af9f460cd881da1f9dcb40f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dd5dbde097208e584af9f460cd881da1f9dcb40f"
        }
      ],
      "message": "use CScheduler for HTTPRPCTimer\n\nThis removes the dependency on libevent for scheduled events,\nlike re-locking a wallet some time after decryption.",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:14Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2025-01-17T15:04:59Z"
      },
      "sha": "784895bbbbd1bd3ab62a40dda259529fc491d6ce"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYyN2NmZDU5OWQxYzUzMDhjZGQ3OTdmYzFhMGM2MmY0NGNlNGQxNmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f27cfd599d1c5308cdd797fc1a0c62f44ce4d16a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f27cfd599d1c5308cdd797fc1a0c62f44ce4d16a",
      "tree": {
        "sha": "0c6d6002305b8b09160b2229c1b0871cfdcedfdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c6d6002305b8b09160b2229c1b0871cfdcedfdd"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0c6d6002305b8b09160b2229c1b0871cfdcedfdd\nparent 784895bbbbd1bd3ab62a40dda259529fc491d6ce\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1736973856 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461974 -0700\n\nhttp: switch servers from libevent to bitcoin\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hYACgkQ5+KYS2KJ\nyTp6Ow/+IYKiw203TF8irBN5y76Cp13lOijJQUBQwaoLM0lHOnlwOtpAmQ5Zij6u\nN7cyr1zvppw5sBD7Kcom2p4kkatwjSCN08xrUIiaUuIkRPPzWpSID/iEM4y3LzWl\nqfgLoThNopPj2T9uezxg/Yo5e9BDdWhWwwXfepx3cTYdbR5xBIp2W4rLNlVC4Mkq\nMbLQvHn5rRgvOCIyITtz4QURwdLHij3HgWN68XePygMR72ewE1b2PMNtjtS0T6nk\nGy+BZ4y9Brw3XvGH8zYqpgaQGCdkh228Ru4ZDU/gW0gyNz1pN434cnSn/WgEqW1G\nEcuS6doSsvAkP+qNTVU1fyvkKqWQ7PL6Kim/PMnO/JEiTG0hMKTanMS0ReDTxyF5\nkvygSM8xvkkP4A7ojKQCgzHJo9++tOoqfNOLQw7wP2cFp17UeP/ue3Qg8RsOce2p\nobIssxMij8ruX1s7PLSvUXXAsg0X1z5ssIa+6wbp/MC2FfJDGFk9khjQG59uh5E6\ngKM/pBE75+SHlEPwQEiA5qbdY6uvOarERJ+jpnui+A52cuJe+vkQx7mDjyFIhEkD\n04J7693A+bnGZXLDkDw7ObeW3A256Mbks6pqxUauzE9yJMh4TRUhGyjOEVQ72OXH\nx9k3kaJKBdH3M9G6cJKU55cei2jP23KOeAm7ZNCG8iGm2BO4esk=\n=o5EN\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/784895bbbbd1bd3ab62a40dda259529fc491d6ce",
          "sha": "784895bbbbd1bd3ab62a40dda259529fc491d6ce",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/784895bbbbd1bd3ab62a40dda259529fc491d6ce"
        }
      ],
      "message": "http: switch servers from libevent to bitcoin",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:14Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2025-01-15T20:44:16Z"
      },
      "sha": "f27cfd599d1c5308cdd797fc1a0c62f44ce4d16a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRjNTUwN2ZkZGMzYzg0ZGUyNGMyYWY0YjRkMjc0M2Y5MDFlNTAyZjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c5507fddc3c84de24c2af4b4d2743f901e502f7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4c5507fddc3c84de24c2af4b4d2743f901e502f7",
      "tree": {
        "sha": "7aa6c51e845e7779732734fe20b2a54300e27e4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7aa6c51e845e7779732734fe20b2a54300e27e4c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7aa6c51e845e7779732734fe20b2a54300e27e4c\nparent f27cfd599d1c5308cdd797fc1a0c62f44ce4d16a\nauthor Matthew Zipkin <pinheadmz@pm.me> 1742317853 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461974 -0700\n\nfuzz: switch http_libevent::HTTPRequest to http_bitcoin::HTTPRequest\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hYACgkQ5+KYS2KJ\nyTobRRAAnduUERwU8pyK7VFNHlO/nuM/Gd3Tbn6WsGDYMuF2Fni3Pa+rM5haEW9L\nAHreeXXNRFbvHPxYEqTW/6SBizKJkj94osiB16CWahQECtHfpE3+1DcUZlAf7tBP\n16viMAqf+SXTkGAQYyLy5O29de1epvvdGCt3Ypivr30t9gpSZFmzZlEVu5NnpM3k\n8VJvEeg7Ys17z8EQxFHEF2LyNMzNGZn9Fmpb+kOoBR23JUsqr0NC/yk9TcQFk8Rn\nRpJ7UMB4sid0fQK1VXQl4rjOwdm2DZ6iEEc/jC7VvjpYZrCAIS2xGVU30dfRJhQ8\nqVE6NhAOp53M3LU6ozXcPX2S7/gXicFqVoZrz5o6sLgOtsMd8v+BYU/Y6d/AZTmZ\nPnbvf/682Cde/0wJZAxh+hiZXRGVsEWrNWrVgPMdZMMyRBieGqymsJ7honkgU8cS\nM1X8QMUa9IVaoynsBC4cqtld+rnH90aXzN95FGLhJGjKDCPmqu6fRKRtKwIOlRDw\nA44tGiXju7KPtKtEVghuYRu25TY7+XCfNYGmIb6ndUXokMeaDh6smxSpqMAjO//P\na4zCoTRAJMV7MumMbvYtG+0u2TuXBektjPN4H22YnSeKXEEFXse4SdzRHBoNtBQz\nQV/grmHmasSUkm9ngJYRCL8Pc33/qu0BqKbeJPmAAEIvuMWvWYw=\n=Be/j\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f27cfd599d1c5308cdd797fc1a0c62f44ce4d16a",
          "sha": "f27cfd599d1c5308cdd797fc1a0c62f44ce4d16a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f27cfd599d1c5308cdd797fc1a0c62f44ce4d16a"
        }
      ],
      "message": "fuzz: switch http_libevent::HTTPRequest to http_bitcoin::HTTPRequest",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:14Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-18T17:10:53Z"
      },
      "sha": "4c5507fddc3c84de24c2af4b4d2743f901e502f7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU2NjcxMmQ0ZDNlYjk1Y2ZkM2JlZWZjOTJjNzg4OGRlOWI2NWRhMzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "tree": {
        "sha": "39c0b727cca67ff9c3dcb0f762d24335c9814f99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39c0b727cca67ff9c3dcb0f762d24335c9814f99"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 39c0b727cca67ff9c3dcb0f762d24335c9814f99\nparent 4c5507fddc3c84de24c2af4b4d2743f901e502f7\nauthor Matthew Zipkin <pinheadmz@pm.me> 1741888678 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1750461974 -0700\n\nhttpserver: delete libevent!\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmhV7hYACgkQ5+KYS2KJ\nyTr/uw/9GVTXjqwF+DzzxYPw0Y8GRAyZgiFLJ4m6J7z70TJnAzu9ZDodyP0cyjMQ\ng/CgbeTqz5tspYkL0yF06DdYx8KQDZs9HLhSRZRVJp/D7I/VFaCpq+h+hFF+wZFm\ni5PbAZWZJzfe9s02MoytX5nm/TIfgFqZPEpyVJ45gBWwTbfUrWdKx3N3GSw7kufN\nsY6tehGyXf8QIH2VqrQqGZaA8VmPiP4XLlYHqX/m09wT2G1aKpgQLivEGSwILmLt\nfuGs6JydH3tAHPDrv4kFJCKaeeLqnxmpM7aViFqWMcQV4DOWKGgzsDlxk2Y7Z2Xd\nLRMrgqDDzEOteh2XNI+47iXJknRWwsXikx01SvOrmgrZdcidOeRvzTkn5rxSDnji\nwWRcqMGXkIHMBpOZWgdDCPHsTdQWybEs0+d5pru4ortdNrJsPfQbUNeiBFZH1aXD\n7S+Xe1q7An7OEVmfr+k0wilc2EYMUgrl289D5FBSNeewydkA2Nyg5tSY5Pvk3b0Z\nvLYx8zPKwj68ncqaI7IpJtp8VWtzOaK4umUYxuVfAR2WxfMemBEvL7iJ/o4wCLq/\nvybWEXaqFkv4S0sazp+5T15k6uw6Ll7d9nhtx0txd87uUZF7f3gibsZS3PkIfJMF\nG19STaqcCryn7u4J0foW3eSQk3ekL9AtlzU+rYHmnSiDBnkIgFE=\n=9Jcs\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c5507fddc3c84de24c2af4b4d2743f901e502f7",
          "sha": "4c5507fddc3c84de24c2af4b4d2743f901e502f7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4c5507fddc3c84de24c2af4b4d2743f901e502f7"
        }
      ],
      "message": "httpserver: delete libevent!",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-06-20T23:26:14Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-13T17:57:58Z"
      },
      "sha": "e66712d4d3eb95cfd3beefc92c7888de9b65da38"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18255142221,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAARAF11N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18255142221",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "created_at": "2025-06-21T01:49:29Z"
    },
    {
      "event": "unlabeled",
      "id": 18255165201,
      "node_id": "UNLE_lADOABII586t8FMgzwAAAARAF7cR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18255165201",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-21T01:58:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051985554",
      "pull_request_review_id": 2780581749,
      "id": 2051985554,
      "node_id": "PRRC_kwDOABII5856TtCS",
      "diff_hunk": "@@ -0,0 +1,535 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://opensource.org/license/mit/.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <common/sockman.h>\n+#include <logging.h>\n+#include <netbase.h>\n+#include <util/sock.h>\n+#include <util/thread.h>\n+\n+#include <cassert>\n+\n+// The set of sockets cannot be modified while waiting\n+// The sleep time needs to be small to avoid new sockets stalling\n+static constexpr auto SELECT_TIMEOUT{50ms};\n+\n+/** Get the bind address for a socket as CService. */\n+static CService GetBindAddress(const Sock& sock)\n+{\n+    CService addr_bind;\n+    struct sockaddr_storage sockaddr_bind;\n+    socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n+    if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+        addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind, sockaddr_bind_len);\n+    } else {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"getsockname failed\\n\");\n+    }\n+    return addr_bind;\n+}\n+\n+bool SockMan::BindAndStartListening(const CService& to, bilingual_str& err_msg)\n+{\n+    // Create socket for listening for incoming connections\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+    if (!to.GetSockAddr(reinterpret_cast<sockaddr*>(&storage), &len)) {\n+        err_msg = Untranslated(strprintf(\"Bind address family for %s not supported\", to.ToStringAddrPort()));\n+        return false;\n+    }\n+\n+    std::unique_ptr<Sock> sock{CreateSock(to.GetSAFamily(), SOCK_STREAM, IPPROTO_TCP)};\n+    if (!sock) {\n+        err_msg = Untranslated(strprintf(\"Cannot create %s listen socket: %s\",\n+                                         to.ToStringAddrPort(),\n+                                         NetworkErrorString(WSAGetLastError())));\n+        return false;\n+    }\n+\n+    int one{1};\n+\n+    // Allow binding if the port is still in TIME_WAIT state after\n+    // the program was closed and restarted.\n+    if (sock->SetSockOpt(SOL_SOCKET, SO_REUSEADDR, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+        LogPrintLevel(BCLog::NET,\n+                      BCLog::Level::Info,\n+                      \"Cannot set SO_REUSEADDR on %s listen socket: %s, continuing anyway\\n\",\n+                      to.ToStringAddrPort(),\n+                      NetworkErrorString(WSAGetLastError()));\n+    }\n+\n+    // some systems don't have IPV6_V6ONLY but are always v6only; others do have the option\n+    // and enable it by default or not. Try to enable it, if possible.\n+    if (to.IsIPv6()) {\n+#ifdef IPV6_V6ONLY\n+        if (sock->SetSockOpt(IPPROTO_IPV6, IPV6_V6ONLY, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_V6ONLY on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+#ifdef WIN32\n+        int prot_level{PROTECTION_LEVEL_UNRESTRICTED};\n+        if (sock->SetSockOpt(IPPROTO_IPV6,\n+                             IPV6_PROTECTION_LEVEL,\n+                             reinterpret_cast<const char*>(&prot_level),\n+                             sizeof(prot_level)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_PROTECTION_LEVEL on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+    }\n+\n+    if (sock->Bind(reinterpret_cast<sockaddr*>(&storage), len) == SOCKET_ERROR) {\n+        const int err{WSAGetLastError()};\n+        if (err == WSAEADDRINUSE) {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\"),\n+                                to.ToStringAddrPort(),\n+                                CLIENT_NAME);\n+        } else {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\"),\n+                                to.ToStringAddrPort(),\n+                                NetworkErrorString(err));\n+        }\n+        return false;\n+    }\n+\n+    // Listen for incoming connections\n+    if (sock->Listen(SOMAXCONN) == SOCKET_ERROR) {\n+        err_msg = strprintf(_(\"Cannot listen on %s: %s\"), to.ToStringAddrPort(), NetworkErrorString(WSAGetLastError()));\n+        return false;\n+    }\n+\n+    m_listen.emplace_back(std::move(sock));\n+\n+    return true;\n+}\n+\n+void SockMan::StartSocketsThreads(const Options& options)\n+{\n+    m_thread_socket_handler = std::thread(\n+        &util::TraceThread, options.socket_handler_thread_name, [this] { ThreadSocketHandler(); });\n+\n+    if (options.i2p.has_value()) {\n+        m_i2p_sam_session = std::make_unique<i2p::sam::Session>(\n+            options.i2p->private_key_file, options.i2p->sam_proxy, &interruptNet);\n+\n+        m_thread_i2p_accept =\n+            std::thread(&util::TraceThread, options.i2p->accept_thread_name, [this] { ThreadI2PAccept(); });\n+    }\n+}\n+\n+void SockMan::JoinSocketsThreads()\n+{\n+    if (m_thread_i2p_accept.joinable()) {\n+        m_thread_i2p_accept.join();\n+    }\n+\n+    if (m_thread_socket_handler.joinable()) {\n+        m_thread_socket_handler.join();\n+    }\n+}\n+\n+std::optional<SockMan::Id>\n+SockMan::ConnectAndMakeId(const std::variant<CService, StringHostIntPort>& to,\n+                          bool is_important,\n+                          std::optional<Proxy> proxy,\n+                          bool& proxy_failed,\n+                          CService& me)\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+    AssertLockNotHeld(m_unused_i2p_sessions_mutex);\n+\n+    std::unique_ptr<Sock> sock;\n+    std::unique_ptr<i2p::sam::Session> i2p_transient_session;\n+\n+    Assume(!me.IsValid());\n+\n+    if (std::holds_alternative<CService>(to)) {\n+        const CService& addr_to{std::get<CService>(to)};\n+        if (addr_to.IsI2P()) {\n+            if (!Assume(proxy.has_value())) {\n+                return std::nullopt;\n+            }\n+\n+            i2p::Connection conn;\n+            bool connected{false};\n+\n+            if (m_i2p_sam_session) {\n+                connected = m_i2p_sam_session->Connect(addr_to, conn, proxy_failed);\n+            } else {\n+                {\n+                    LOCK(m_unused_i2p_sessions_mutex);\n+                    if (m_unused_i2p_sessions.empty()) {\n+                        i2p_transient_session = std::make_unique<i2p::sam::Session>(proxy.value(), &interruptNet);\n+                    } else {\n+                        i2p_transient_session.swap(m_unused_i2p_sessions.front());\n+                        m_unused_i2p_sessions.pop();\n+                    }\n+                }\n+                connected = i2p_transient_session->Connect(addr_to, conn, proxy_failed);\n+                if (!connected) {\n+                    LOCK(m_unused_i2p_sessions_mutex);\n+                    if (m_unused_i2p_sessions.size() < MAX_UNUSED_I2P_SESSIONS_SIZE) {\n+                        m_unused_i2p_sessions.emplace(i2p_transient_session.release());\n+                    }\n+                }\n+            }\n+\n+            if (connected) {\n+                sock = std::move(conn.sock);\n+                me = conn.me;\n+            }\n+        } else if (proxy.has_value()) {\n+            sock = ConnectThroughProxy(proxy.value(), addr_to.ToStringAddr(), addr_to.GetPort(), proxy_failed);\n+        } else {\n+            sock = ConnectDirectly(addr_to, is_important);\n+        }\n+    } else {\n+        if (!Assume(proxy.has_value())) {\n+            return std::nullopt;\n+        }\n+\n+        const auto& hostport{std::get<StringHostIntPort>(to)};\n+\n+        bool dummy_proxy_failed;\n+        sock = ConnectThroughProxy(proxy.value(), hostport.host, hostport.port, dummy_proxy_failed);\n+    }\n+\n+    if (!sock) {\n+        return std::nullopt;\n+    }\n+\n+    if (!me.IsValid()) {\n+        me = GetBindAddress(*sock);\n+    }\n+\n+    const Id id{GetNewId()};\n+\n+    {\n+        LOCK(m_connected_mutex);\n+        m_connected.emplace(id, std::make_shared<ConnectionSockets>(std::move(sock),\n+                                                                    std::move(i2p_transient_session)));\n+    }\n+\n+    return id;\n+}\n+\n+bool SockMan::CloseConnection(Id id)\n+{\n+    LOCK(m_connected_mutex);\n+    return m_connected.erase(id) > 0;\n+}\n+\n+ssize_t SockMan::SendBytes(Id id,\n+                           std::span<const unsigned char> data,\n+                           bool will_send_more,\n+                           std::string& errmsg) const\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    if (data.empty()) {\n+        return 0;\n+    }\n+\n+    auto sockets{GetConnectionSockets(id)};\n+    if (!sockets) {\n+        // Bail out immediately and just leave things in the caller's send queue.\n+        return 0;\n+    }\n+\n+    int flags{MSG_NOSIGNAL | MSG_DONTWAIT};\n+#ifdef MSG_MORE\n+    if (will_send_more) {\n+        flags |= MSG_MORE;\n+    }\n+#endif\n+\n+    const ssize_t sent{WITH_LOCK(\n+        sockets->mutex,\n+        return sockets->sock->Send(reinterpret_cast<const char*>(data.data()), data.size(), flags);)};\n+\n+    if (sent >= 0) {\n+        return sent;\n+    }\n+\n+    const int err{WSAGetLastError()};\n+    if (err == WSAEWOULDBLOCK || err == WSAEMSGSIZE || err == WSAEINTR || err == WSAEINPROGRESS) {\n+        return 0;\n+    }\n+    errmsg = NetworkErrorString(err);\n+    return -1;\n+}\n+\n+void SockMan::StopListening()\n+{\n+    m_listen.clear();\n+}\n+\n+bool SockMan::ShouldTryToSend(Id id) const { return true; }\n+\n+bool SockMan::ShouldTryToRecv(Id id) const { return true; }\n+\n+void SockMan::EventIOLoopCompletedForOne(Id id) {}\n+\n+void SockMan::EventIOLoopCompletedForAll() {}\n+\n+void SockMan::EventI2PStatus(const CService&, I2PStatus) {}\n+\n+void SockMan::TestOnlyAddExistentConnection(Id id, std::unique_ptr<Sock>&& sock)\n+{\n+    LOCK(m_connected_mutex);\n+    const auto result{m_connected.emplace(id, std::make_shared<ConnectionSockets>(std::move(sock)))};\n+    assert(result.second);\n+}\n+\n+void SockMan::ThreadI2PAccept()\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    static constexpr auto err_wait_begin = 1s;\n+    static constexpr auto err_wait_cap = 5min;\n+    auto err_wait = err_wait_begin;\n+\n+    i2p::Connection conn;\n+\n+    auto SleepOnFailure = [&]() {\n+        interruptNet.sleep_for(err_wait);\n+        if (err_wait < err_wait_cap) {\n+            err_wait += 1s;\n+        }\n+    };\n+\n+    while (!interruptNet) {\n+\n+        if (!m_i2p_sam_session->Listen(conn)) {\n+            EventI2PStatus(conn.me, SockMan::I2PStatus::STOP_LISTENING);\n+            SleepOnFailure();\n+            continue;\n+        }\n+\n+        EventI2PStatus(conn.me, SockMan::I2PStatus::START_LISTENING);\n+\n+        if (!m_i2p_sam_session->Accept(conn)) {\n+            SleepOnFailure();\n+            continue;\n+        }\n+\n+        Assume(conn.me.IsI2P());\n+        Assume(conn.peer.IsI2P());\n+\n+        NewSockAccepted(std::move(conn.sock), conn.me, conn.peer);\n+\n+        err_wait = err_wait_begin;\n+    }\n+}\n+\n+void SockMan::ThreadSocketHandler()\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    while (!interruptNet) {\n+        EventIOLoopCompletedForAll();\n+\n+        // Check for the readiness of the already connected sockets and the\n+        // listening sockets in one call (\"readiness\" as in poll(2) or\n+        // select(2)). If none are ready, wait for a short while and return\n+        // empty sets.\n+        auto io_readiness{GenerateWaitSockets()};\n+        if (io_readiness.events_per_sock.empty() ||\n+            // WaitMany() may as well be a static method, the context of the first Sock in the vector is not relevant.\n+            !io_readiness.events_per_sock.begin()->first->WaitMany(SELECT_TIMEOUT,\n+                                                                   io_readiness.events_per_sock)) {\n+            interruptNet.sleep_for(SELECT_TIMEOUT);\n+        }\n+\n+        // Service (send/receive) each of the already connected sockets.\n+        SocketHandlerConnected(io_readiness);\n+\n+        // Accept new connections from listening sockets.\n+        SocketHandlerListening(io_readiness.events_per_sock);\n+    }\n+}\n+\n+std::unique_ptr<Sock> SockMan::AcceptConnection(const Sock& listen_sock, CService& addr)\n+{\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+\n+    auto sock{listen_sock.Accept(reinterpret_cast<sockaddr*>(&storage), &len)};\n+\n+    if (!sock) {\n+        const int err{WSAGetLastError()};\n+        if (err != WSAEWOULDBLOCK) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Error,\n+                          \"Cannot accept new connection: %s\\n\",\n+                          NetworkErrorString(err));\n+        }\n+        return {};\n+    }\n+\n+    if (!addr.SetSockAddr(reinterpret_cast<sockaddr*>(&storage), len)) {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Unknown socket family\\n\");\n+    }\n+\n+    return sock;\n+}\n+\n+void SockMan::NewSockAccepted(std::unique_ptr<Sock>&& sock, const CService& me, const CService& them)\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    if (!sock->IsSelectable()) {\n+        LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", them.ToStringAddrPort());\n+        return;\n+    }\n+\n+    // According to the internet TCP_NODELAY is not carried into accepted sockets\n+    // on all platforms.  Set it again here just to be sure.",
      "path": "src/common/sockman.cpp",
      "position": null,
      "original_position": 396,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "cfe5eba4463ff289b46ba0b3f4708f7cd3f1e9fe",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: this comment seems to be incorrect, since `TCP_NODELAY` is only set once by `SockMan`.",
      "created_at": "2025-04-21T05:44:31Z",
      "updated_at": "2025-04-21T05:52:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2051985554",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051985554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 396,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051989121",
      "pull_request_review_id": 2780581749,
      "id": 2051989121,
      "node_id": "PRRC_kwDOABII5856Tt6B",
      "diff_hunk": "@@ -116,6 +119,20 @@ std::optional<int64_t> ParseISO8601DateTime(std::string_view str)\n     return int64_t{TicksSinceEpoch<std::chrono::seconds>(tp)};\n }\n \n+std::string FormatRFC7231DateTime(int64_t nTime)\n+{\n+    const std::chrono::sys_seconds secs{std::chrono::seconds{nTime}};\n+    const auto days{std::chrono::floor<std::chrono::days>(secs)};\n+    // 1970-01-01 was a Thursday\n+    std::string weekday{weekdays[(days.time_since_epoch().count() + 4) % 7]};",
      "path": "src/util/time.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "aeb8352a9de844073c10656e53e3d90b573b9eda",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `weekday` and `month` can be a `string_view`.",
      "created_at": "2025-04-21T05:49:31Z",
      "updated_at": "2025-04-21T05:52:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2051989121",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051989121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051998964",
      "pull_request_review_id": 2780602792,
      "id": 2051998964,
      "node_id": "PRRC_kwDOABII5856TwT0",
      "diff_hunk": "@@ -497,3 +497,10 @@ std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_mu\n     }\n     return *parsed_num * unit_amount;\n }\n+\n+std::vector<std::byte> StringToBuffer(const std::string& str)\n+{\n+    return std::vector<std::byte>(",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: maybe using `std::span` will be simpler? \r\nFor example:\r\n```c++\r\n    auto span = std::as_bytes(std::span(str));\r\n    return {span.begin(), span.end()};\r\n```",
      "created_at": "2025-04-21T06:03:20Z",
      "updated_at": "2025-04-21T06:46:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2051998964",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051998964"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052024440",
      "pull_request_review_id": 2780602792,
      "id": 2052024440,
      "node_id": "PRRC_kwDOABII5856T2h4",
      "diff_hunk": "@@ -13,4 +13,42 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n     if (search.empty()) return;\n     in_out = std::regex_replace(in_out, std::regex(search), substitute);\n }\n+\n+LineReader::LineReader(std::span<const std::byte> buffer, size_t max_read)\n+    : start(buffer.begin()), end(buffer.end()), max_read(max_read), it(buffer.begin()) {}\n+\n+std::optional<std::string> LineReader::ReadLine()\n+{\n+    if (it == end) {\n+        return std::nullopt;\n+    }\n+\n+    auto line_start = it;\n+    std::string line{};\n+    while (it != end) {\n+        char c = static_cast<char>(*it);\n+        line += c;",
      "path": "src/util/string.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe it would be better (performance-wise) to create the string after the loop is over?\r\n```c++\r\nstd::optional<std::string> LineReader::ReadLine()\r\n{\r\n    if (it == end) {\r\n        return std::nullopt;\r\n    }\r\n\r\n    auto line_start = it;\r\n    size_t count = 0;\r\n    while (it != end) {\r\n        char c = static_cast<char>(*it);\r\n        ++it;\r\n        ++count;\r\n        if (c == '\\n') break;\r\n        if (count >= max_read) throw std::runtime_error(\"max_read exceeded by LineReader\");\r\n    }\r\n    const std::byte *data = &*line_start;\r\n    std::string line{reinterpret_cast<const char *>(data), count};\r\n    line = TrimString(line); // delete trailing \\r and/or \\n\r\n    return line;\r\n}\r\n```",
      "created_at": "2025-04-21T06:33:50Z",
      "updated_at": "2025-04-21T06:46:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2052024440",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052024440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052025637",
      "pull_request_review_id": 2780602792,
      "id": 2052025637,
      "node_id": "PRRC_kwDOABII5856T20l",
      "diff_hunk": "@@ -13,4 +13,42 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n     if (search.empty()) return;\n     in_out = std::regex_replace(in_out, std::regex(search), substitute);\n }\n+\n+LineReader::LineReader(std::span<const std::byte> buffer, size_t max_read)\n+    : start(buffer.begin()), end(buffer.end()), max_read(max_read), it(buffer.begin()) {}\n+\n+std::optional<std::string> LineReader::ReadLine()\n+{\n+    if (it == end) {\n+        return std::nullopt;\n+    }\n+\n+    auto line_start = it;\n+    std::string line{};\n+    while (it != end) {\n+        char c = static_cast<char>(*it);\n+        line += c;\n+        ++it;\n+        if (c == '\\n') break;\n+        if ((size_t)std::distance(line_start, it) >= max_read) throw std::runtime_error(\"max_read exceeded by LineReader\");\n+    }\n+\n+    line = TrimString(line); // delete trailing \\r and/or \\n",
      "path": "src/util/string.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can we return a `string_view` to the internal buffer?\r\n(preventing allocation & copy)",
      "created_at": "2025-04-21T06:35:11Z",
      "updated_at": "2025-04-21T06:46:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2052025637",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052025637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052027205",
      "pull_request_review_id": 2780602792,
      "id": 2052027205,
      "node_id": "PRRC_kwDOABII5856T3NF",
      "diff_hunk": "@@ -13,4 +13,42 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n     if (search.empty()) return;\n     in_out = std::regex_replace(in_out, std::regex(search), substitute);\n }\n+\n+LineReader::LineReader(std::span<const std::byte> buffer, size_t max_read)\n+    : start(buffer.begin()), end(buffer.end()), max_read(max_read), it(buffer.begin()) {}\n+\n+std::optional<std::string> LineReader::ReadLine()\n+{\n+    if (it == end) {\n+        return std::nullopt;\n+    }\n+\n+    auto line_start = it;\n+    std::string line{};\n+    while (it != end) {\n+        char c = static_cast<char>(*it);\n+        line += c;\n+        ++it;\n+        if (c == '\\n') break;\n+        if ((size_t)std::distance(line_start, it) >= max_read) throw std::runtime_error(\"max_read exceeded by LineReader\");\n+    }\n+\n+    line = TrimString(line); // delete trailing \\r and/or \\n\n+    return line;\n+}\n+\n+// Ignores max_read but won't overflow\n+std::string LineReader::ReadLength(size_t len)\n+{\n+    if (len == 0) return \"\";\n+    if (Left() < len) throw std::runtime_error(\"Not enough data in buffer\");\n+    std::string out(reinterpret_cast<const char*>(&(*it)), len);",
      "path": "src/util/string.cpp",
      "position": 33,
      "original_position": 33,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can we return a `string_view` to the internal buffer?\r\n(preventing allocation & copy)",
      "created_at": "2025-04-21T06:37:06Z",
      "updated_at": "2025-04-21T06:46:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2052027205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052027205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052036849",
      "pull_request_review_id": 2780672873,
      "id": 2052036849,
      "node_id": "PRRC_kwDOABII5856T5jx",
      "diff_hunk": "@@ -781,3 +781,69 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n         pathHandlers.erase(i);\n     }\n }\n+\n+\n+namespace http_bitcoin {\n+std::optional<std::string> HTTPHeaders::Find(const std::string key) const",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "70d003ca1028458bd6573bcd067e234e009f66c9",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: consider using `string_view` instead of `string` here and below.",
      "created_at": "2025-04-21T06:48:12Z",
      "updated_at": "2025-04-21T16:06:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2052036849",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052036849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052664896",
      "pull_request_review_id": 2781691846,
      "id": 2052664896,
      "node_id": "PRRC_kwDOABII5856WS5A",
      "diff_hunk": "@@ -781,3 +781,69 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n         pathHandlers.erase(i);\n     }\n }\n+\n+\n+namespace http_bitcoin {\n+std::optional<std::string> HTTPHeaders::Find(const std::string key) const\n+{\n+    const auto it = m_map.find(key);\n+    if (it == m_map.end()) return std::nullopt;\n+    return it->second;\n+}\n+\n+void HTTPHeaders::Write(const std::string key, const std::string value)\n+{\n+    // If present, append value to list\n+    const auto existing_value = Find(key);\n+    if (existing_value) {\n+        m_map[key] = existing_value.value() + \", \" + value;\n+    } else {\n+        m_map[key] = value;\n+    }\n+}\n+\n+void HTTPHeaders::Remove(const std::string key)\n+{\n+    m_map.erase(key);\n+}\n+\n+bool HTTPHeaders::Read(util::LineReader& reader)\n+{\n+    // Headers https://httpwg.org/specs/rfc9110.html#rfc.section.6.3\n+    // A sequence of Field Lines https://httpwg.org/specs/rfc9110.html#rfc.section.5.2\n+    do {\n+        auto maybe_line = reader.ReadLine();\n+        if (!maybe_line) return false;\n+        const std::string& line = *maybe_line;\n+\n+        // An empty line indicates end of the headers section https://www.rfc-editor.org/rfc/rfc2616#section-4\n+        if (line.length() == 0) break;\n+\n+        // Header line must have at least one \":\"\n+        // keys are not allowed to have delimiters like \":\" but values are\n+        // https://httpwg.org/specs/rfc9110.html#rfc.section.5.6.2\n+        const size_t pos{line.find(':')};\n+        if (pos == std::string::npos) throw std::runtime_error(\"HTTP header missing colon (:)\");\n+\n+        // Whitespace is optional\n+        std::string key = util::TrimString(line.substr(0, pos));\n+        std::string value = util::TrimString(line.substr(pos + 1));\n+        Write(key, value);\n+    } while (true);\n+\n+    return true;\n+}\n+\n+std::string HTTPHeaders::Stringify() const\n+{\n+    std::string out;\n+    for (auto it = m_map.begin(); it != m_map.end(); ++it) {",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "70d003ca1028458bd6573bcd067e234e009f66c9",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: maybe the following would be simpler?\r\n```c++\r\n    for (const auto& [k, v] : m_map) {\r\n        out += k + \": \" + v + \"\\r\\n\";\r\n    }\r\n```",
      "created_at": "2025-04-21T16:11:56Z",
      "updated_at": "2025-04-21T16:14:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2052664896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052664896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 840,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062566402",
      "pull_request_review_id": 2797567891,
      "id": 2062566402,
      "node_id": "PRRC_kwDOABII58568EQC",
      "diff_hunk": "@@ -906,6 +906,24 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     return true;\n }\n \n+bool HTTPClient::ReadRequest(std::unique_ptr<HTTPRequest>& req)\n+{\n+    LineReader reader(m_recv_buffer, MAX_HEADERS_SIZE);\n+\n+    if (!req->LoadControlData(reader)) return false;\n+    if (!req->LoadHeaders(reader)) return false;\n+    if (!req->LoadBody(reader)) return false;\n+\n+    // Remove the bytes read out of the buffer.\n+    // If one of the above calls throws an error, the caller must\n+    // catch it and disconnect the client.\n+    m_recv_buffer.erase(",
      "path": "src/httpserver.cpp",
      "position": 753,
      "original_position": 15,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "482382bd1490fa3e0bdf0e82497a583dafd80a45",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: maybe it's better to return a `std::span` from `m_recv_buffer` to avoid a copy here.",
      "created_at": "2025-04-27T08:49:01Z",
      "updated_at": "2025-04-27T09:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062566402",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062566402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 648,
      "original_line": 648,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062569706",
      "pull_request_review_id": 2797567891,
      "id": 2062569706,
      "node_id": "PRRC_kwDOABII58568FDq",
      "diff_hunk": "@@ -940,6 +941,92 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)",
      "path": "src/httpserver.cpp",
      "position": 635,
      "original_position": 12,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would it be possible to allow writing a reply composed of several `span<byte>`?\r\nIt should allow sending while serializing a response object.",
      "created_at": "2025-04-27T09:02:51Z",
      "updated_at": "2025-04-27T09:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062569706",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062569706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 536,
      "original_line": 536,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062570060",
      "pull_request_review_id": 2797567891,
      "id": 2062570060,
      "node_id": "PRRC_kwDOABII58568FJM",
      "diff_hunk": "@@ -940,6 +941,92 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)\n+{\n+    HTTPResponse res;\n+\n+    // Some response headers are determined in advance and stored in the request\n+    res.m_headers = std::move(m_response_headers);\n+\n+    // Response version matches request version\n+    res.m_version_major = m_version_major;\n+    res.m_version_minor = m_version_minor;\n+\n+    // Add response code and look up reason string\n+    res.m_status = status;\n+    res.m_reason = HTTPReason.find(status)->second;\n+\n+    // See libevent evhttp_response_needs_body()\n+    // Response headers are different if no body is needed\n+    bool needs_body{status != HTTP_NO_CONTENT && (status < 100 || status >= 200)};\n+\n+    // See libevent evhttp_make_header_response()\n+    // Expected response headers depend on protocol version\n+    if (m_version_major == 1) {\n+        // HTTP/1.0\n+        if (m_version_minor == 0) {\n+            auto connection_header{m_headers.Find(\"Connection\")};\n+            if (connection_header && ToLower(connection_header.value()) == \"keep-alive\") {\n+                res.m_headers.Write(\"Connection\", \"keep-alive\");\n+                res.m_keep_alive = true;\n+            }\n+        }\n+\n+        // HTTP/1.1\n+        if (m_version_minor >= 1) {\n+            const int64_t now_seconds{TicksSinceEpoch<std::chrono::seconds>(NodeClock::now())};\n+            res.m_headers.Write(\"Date\", FormatRFC7231DateTime(now_seconds));\n+\n+            if (needs_body) {\n+                res.m_headers.Write(\"Content-Length\", strprintf(\"%d\", reply_body.size()));\n+            }\n+\n+            // Default for HTTP/1.1\n+            res.m_keep_alive = true;\n+        }\n+    }\n+\n+    if (needs_body && !res.m_headers.Find(\"Content-Type\")) {\n+        // Default type from libevent evhttp_new_object()\n+        res.m_headers.Write(\"Content-Type\", \"text/html; charset=ISO-8859-1\");\n+    }\n+\n+    auto connection_header{m_headers.Find(\"Connection\")};\n+    if (connection_header && ToLower(connection_header.value()) == \"close\") {\n+        // Might not exist already but we need to replace it, not append to it\n+        res.m_headers.Remove(\"Connection\");\n+        res.m_headers.Write(\"Connection\", \"close\");\n+        res.m_keep_alive = false;\n+    }\n+\n+    // Serialize the response headers\n+    const std::string headers{res.StringifyHeaders()};\n+    const auto headers_bytes{std::as_bytes(std::span(headers.begin(), headers.end()))};\n+\n+    // Fill the send buffer with the complete serialized response headers + body\n+    {\n+        LOCK(m_client->m_send_mutex);\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), headers_bytes.begin(), headers_bytes.end());\n+\n+        // We've been using std::span up until now but it is finally time to copy\n+        // data. The original data will go out of scope when WriteReply() returns.\n+        // This is analogous to the memcpy() in libevent's evbuffer_add()\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), reply_body.begin(), reply_body.end());",
      "path": "src/httpserver.cpp",
      "position": 713,
      "original_position": 82,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe use a list of buffers (instead a single FIFO buffer)?",
      "created_at": "2025-04-27T09:04:42Z",
      "updated_at": "2025-04-27T09:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062570060",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062570060"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 610,
      "original_line": 610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062572600",
      "pull_request_review_id": 2797567891,
      "id": 2062572600,
      "node_id": "PRRC_kwDOABII58568Fw4",
      "diff_hunk": "@@ -266,6 +266,15 @@ class HTTPRequest\n     bool LoadControlData(LineReader& reader);\n     bool LoadHeaders(LineReader& reader);\n     bool LoadBody(LineReader& reader);\n+\n+    // Response headers may be set in advance before response body is known\n+    HTTPHeaders m_response_headers;\n+    void WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body = {});\n+    void WriteReply(HTTPStatusCode status, const char* reply_body) {\n+        auto reply_body_view = std::string_view(reply_body);\n+        std::span<const std::byte> byte_span(reinterpret_cast<const std::byte*>(reply_body_view.data()), reply_body_view.size());",
      "path": "src/httpserver.h",
      "position": null,
      "original_position": 10,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: can be simplified using\r\n```c++\r\n    void WriteReply(HTTPStatusCode status, std::string_view reply_body_view)\r\n    {\r\n        WriteReply(status, std::as_bytes(std::span{reply_body_view}));\r\n    }\r\n```",
      "created_at": "2025-04-27T09:16:19Z",
      "updated_at": "2025-04-27T09:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062572600",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062572600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062573530",
      "pull_request_review_id": 2797567891,
      "id": 2062573530,
      "node_id": "PRRC_kwDOABII58568F_a",
      "diff_hunk": "@@ -27,168 +34,316 @@ static const int DEFAULT_HTTP_WORKQUEUE=64;\n \n static const int DEFAULT_HTTP_SERVER_TIMEOUT=30;\n \n-struct evhttp_request;\n-struct event_base;\n-class CService;\n-class HTTPRequest;\n+enum HTTPRequestMethod {\n+    UNKNOWN,\n+    GET,\n+    POST,\n+    HEAD,\n+    PUT\n+};\n \n-/** Initialize HTTP server.\n- * Call this before RegisterHTTPHandler or EventBase().\n- */\n-bool InitHTTPServer(const util::SignalInterrupt& interrupt);\n-/** Start HTTP server.\n- * This is separate from InitHTTPServer to give users race-condition-free time\n- * to register their handlers between InitHTTPServer and StartHTTPServer.\n+/** Event handler closure.\n  */\n-void StartHTTPServer();\n-/** Interrupt HTTP server threads */\n-void InterruptHTTPServer();\n-/** Stop HTTP server */\n-void StopHTTPServer();\n+class HTTPClosure\n+{\n+public:\n+    virtual void operator()() = 0;\n+    virtual ~HTTPClosure() = default;\n+};\n \n-/** Change logging level for libevent. */\n-void UpdateHTTPServerLogging(bool enable);\n+namespace http_bitcoin {\n+using util::LineReader;\n+using NodeId = SockMan::Id;\n \n-/** Handler for requests to a certain HTTP path */\n-typedef std::function<bool(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n-/** Register handler for prefix.\n- * If multiple handlers match a prefix, the first-registered one will\n- * be invoked.\n- */\n-void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler);\n-/** Unregister handler for prefix */\n-void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch);\n+// shortest valid request line, used by libevent in evhttp_parse_request_line()\n+static const size_t MIN_REQUEST_LINE_LENGTH{strlen(\"GET / HTTP/1.0\")};\n+// maximum size of http request (request line + headers)\n+// see https://github.com/bitcoin/bitcoin/issues/6425\n+static const size_t MAX_HEADERS_SIZE{8192};\n \n-/** Return evhttp event base. This can be used by submodules to\n- * queue timers or custom events.\n- */\n-struct event_base* EventBase();\n+class HTTPHeaders\n+{\n+public:\n+    std::optional<std::string> Find(const std::string key) const;\n+    void Write(const std::string key, const std::string value);\n+    void Remove(const std::string key);\n+    bool Read(util::LineReader& reader);\n+    std::string Stringify() const;\n+\n+private:\n+    std::map<std::string, std::string, util::CaseInsensitiveComparator> m_map;\n+};\n+\n+class HTTPResponse\n+{\n+public:\n+    int m_version_major;\n+    int m_version_minor;\n+    HTTPStatusCode m_status;\n+    std::string m_reason;\n+    HTTPHeaders m_headers;\n+    std::vector<std::byte> m_body;\n+    bool m_keep_alive{false};\n+\n+    std::string StringifyHeaders() const;\n+};\n+\n+class HTTPClient;\n \n-/** In-flight HTTP request.\n- * Thin C++ wrapper around evhttp_request.\n- */\n class HTTPRequest\n {\n-private:\n-    struct evhttp_request* req;\n-    const util::SignalInterrupt& m_interrupt;\n-    bool replySent;\n+public:\n+    std::string m_method;\n+    std::string m_target;\n+    // Default protocol version is used by error responses to unreadable requests\n+    int m_version_major{1};\n+    int m_version_minor{1};\n+    HTTPHeaders m_headers;\n+    std::string m_body;\n+\n+    // Keep a pointer to the client that made the request so\n+    // we know who to respond to.\n+    std::shared_ptr<HTTPClient> m_client;\n+    explicit HTTPRequest(std::shared_ptr<HTTPClient> client) : m_client(client) {};\n+    // Null client for unit tests\n+    explicit HTTPRequest() : m_client(nullptr) {};\n+\n+    // Readers return false if they need more data from the\n+    // socket to parse properly. They throw errors if\n+    // the data is invalid.\n+    bool LoadControlData(LineReader& reader);\n+    bool LoadHeaders(LineReader& reader);\n+    bool LoadBody(LineReader& reader);\n \n+    // These methods reimplement the API from http_libevent::HTTPRequest\n+    // for downstream JSONRPC and REST modules.\n+    std::string GetURI() const {return m_target;};\n+    CService GetPeer() const;\n+    HTTPRequestMethod GetRequestMethod() const;\n+    std::optional<std::string> GetQueryParameter(const std::string& key) const;\n+    std::pair<bool, std::string> GetHeader(const std::string& hdr) const;\n+    std::string ReadBody() const {return m_body;};\n+    void WriteHeader(const std::string& hdr, const std::string& value);\n+\n+    // Response headers may be set in advance before response body is known\n+    HTTPHeaders m_response_headers;\n+    void WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body = {});\n+    void WriteReply(HTTPStatusCode status, const char* reply_body)\n+    {\n+        auto reply_body_view = std::string_view(reply_body);\n+        std::span<const std::byte> byte_span(reinterpret_cast<const std::byte*>(reply_body_view.data()), reply_body_view.size());\n+        WriteReply(status, byte_span);\n+    }\n+    void WriteReply(HTTPStatusCode status, const std::string& reply_body)",
      "path": "src/httpserver.h",
      "position": null,
      "original_position": 160,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can be removed if we'll add `WriteReply(HTTPStatusCode status, std::string_view reply_body_view)` (see above).\r\n",
      "created_at": "2025-04-27T09:20:30Z",
      "updated_at": "2025-04-27T09:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062573530",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062573530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062578451",
      "pull_request_review_id": 2797582544,
      "id": 2062578451,
      "node_id": "PRRC_kwDOABII58568HMT",
      "diff_hunk": "@@ -243,18 +243,18 @@ static bool InitHTTPAllowList()\n }\n \n /** HTTP request method as string - use for logging only */\n-std::string RequestMethodString(HTTPRequest::RequestMethod m)\n+std::string RequestMethodString(HTTPRequestMethod m)",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "90761d5026285d10ab89494fc44f3225e778d5a8",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```c++\r\nstd::string_view RequestMethodString(HTTPRequestMethod m)\r\n```",
      "created_at": "2025-04-27T09:43:28Z",
      "updated_at": "2025-04-27T11:04:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062578451",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062578451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062578725",
      "pull_request_review_id": 2797582544,
      "id": 2062578725,
      "node_id": "PRRC_kwDOABII58568HQl",
      "diff_hunk": "@@ -941,6 +942,69 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+CService HTTPRequest::GetPeer() const\n+{\n+    return m_client->m_addr;\n+}\n+\n+HTTPRequestMethod HTTPRequest::GetRequestMethod() const\n+{\n+    if (m_method == \"GET\") return HTTPRequestMethod::GET;\n+    if (m_method == \"POST\") return HTTPRequestMethod::POST;\n+    if (m_method == \"HEAD\") return HTTPRequestMethod::HEAD;\n+    if (m_method == \"PUT\") return HTTPRequestMethod::PUT;\n+    return HTTPRequestMethod::UNKNOWN;\n+}\n+\n+std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+{\n+    return GetQueryParameterFromUri(GetURI(), key);\n+}\n+\n+// See libevent http.c evhttp_parse_query_impl()\n+// and https://www.rfc-editor.org/rfc/rfc3986#section-3.4\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key)\n+{\n+    // Handle %XX encoding\n+    std::string decoded_uri{UrlDecode(uri)};\n+\n+    // find query in URI\n+    size_t start = decoded_uri.find('?');\n+    if (start == std::string::npos) return std::nullopt;\n+    size_t end = decoded_uri.find('#', start);\n+    if (end == std::string::npos) {\n+        end = decoded_uri.length();\n+    }\n+    const std::string query{decoded_uri.substr(start + 1, end - start - 1)};\n+    // find requested parameter in query\n+    const std::vector<std::string> params{SplitString(query, \"&\")};",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "b828fa1e29f0baf5c08517512509a0138338bd50",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: wouldn't it copy the substrings?",
      "created_at": "2025-04-27T09:44:58Z",
      "updated_at": "2025-04-27T11:04:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062578725",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062578725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 980,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062578806",
      "pull_request_review_id": 2797582544,
      "id": 2062578806,
      "node_id": "PRRC_kwDOABII58568HR2",
      "diff_hunk": "@@ -941,6 +942,69 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+CService HTTPRequest::GetPeer() const\n+{\n+    return m_client->m_addr;\n+}\n+\n+HTTPRequestMethod HTTPRequest::GetRequestMethod() const\n+{\n+    if (m_method == \"GET\") return HTTPRequestMethod::GET;\n+    if (m_method == \"POST\") return HTTPRequestMethod::POST;\n+    if (m_method == \"HEAD\") return HTTPRequestMethod::HEAD;\n+    if (m_method == \"PUT\") return HTTPRequestMethod::PUT;\n+    return HTTPRequestMethod::UNKNOWN;\n+}\n+\n+std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+{\n+    return GetQueryParameterFromUri(GetURI(), key);\n+}\n+\n+// See libevent http.c evhttp_parse_query_impl()\n+// and https://www.rfc-editor.org/rfc/rfc3986#section-3.4\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key)\n+{\n+    // Handle %XX encoding\n+    std::string decoded_uri{UrlDecode(uri)};\n+\n+    // find query in URI\n+    size_t start = decoded_uri.find('?');\n+    if (start == std::string::npos) return std::nullopt;\n+    size_t end = decoded_uri.find('#', start);\n+    if (end == std::string::npos) {\n+        end = decoded_uri.length();\n+    }\n+    const std::string query{decoded_uri.substr(start + 1, end - start - 1)};\n+    // find requested parameter in query\n+    const std::vector<std::string> params{SplitString(query, \"&\")};\n+    for (const std::string& param : params) {\n+        size_t delim = param.find('=');\n+        if (key == param.substr(0, delim)) {\n+            if (delim == std::string::npos) {\n+                return \"\";\n+            } else {\n+                return param.substr(delim + 1);\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr) const",
      "path": "src/httpserver.cpp",
      "position": 616,
      "original_position": 61,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "b828fa1e29f0baf5c08517512509a0138338bd50",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```\r\nstd::pair<bool, std::string_view> HTTPRequest::GetHeader(const std::string& hdr) const\r\n```\r\n",
      "created_at": "2025-04-27T09:45:32Z",
      "updated_at": "2025-04-27T11:04:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062578806",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062578806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 522,
      "original_line": 522,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063711938",
      "pull_request_review_id": 2799390114,
      "id": 2063711938,
      "node_id": "PRRC_kwDOABII5857Ab7C",
      "diff_hunk": "@@ -0,0 +1,535 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://opensource.org/license/mit/.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <common/sockman.h>\n+#include <logging.h>\n+#include <netbase.h>\n+#include <util/sock.h>\n+#include <util/thread.h>\n+\n+#include <cassert>\n+\n+// The set of sockets cannot be modified while waiting\n+// The sleep time needs to be small to avoid new sockets stalling\n+static constexpr auto SELECT_TIMEOUT{50ms};\n+\n+/** Get the bind address for a socket as CService. */\n+static CService GetBindAddress(const Sock& sock)\n+{\n+    CService addr_bind;\n+    struct sockaddr_storage sockaddr_bind;\n+    socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n+    if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+        addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind, sockaddr_bind_len);\n+    } else {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"getsockname failed\\n\");\n+    }\n+    return addr_bind;\n+}\n+\n+bool SockMan::BindAndStartListening(const CService& to, bilingual_str& err_msg)\n+{\n+    // Create socket for listening for incoming connections\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+    if (!to.GetSockAddr(reinterpret_cast<sockaddr*>(&storage), &len)) {\n+        err_msg = Untranslated(strprintf(\"Bind address family for %s not supported\", to.ToStringAddrPort()));\n+        return false;\n+    }\n+\n+    std::unique_ptr<Sock> sock{CreateSock(to.GetSAFamily(), SOCK_STREAM, IPPROTO_TCP)};\n+    if (!sock) {\n+        err_msg = Untranslated(strprintf(\"Cannot create %s listen socket: %s\",\n+                                         to.ToStringAddrPort(),\n+                                         NetworkErrorString(WSAGetLastError())));\n+        return false;\n+    }\n+\n+    int one{1};\n+\n+    // Allow binding if the port is still in TIME_WAIT state after\n+    // the program was closed and restarted.\n+    if (sock->SetSockOpt(SOL_SOCKET, SO_REUSEADDR, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+        LogPrintLevel(BCLog::NET,\n+                      BCLog::Level::Info,\n+                      \"Cannot set SO_REUSEADDR on %s listen socket: %s, continuing anyway\\n\",\n+                      to.ToStringAddrPort(),\n+                      NetworkErrorString(WSAGetLastError()));\n+    }\n+\n+    // some systems don't have IPV6_V6ONLY but are always v6only; others do have the option\n+    // and enable it by default or not. Try to enable it, if possible.\n+    if (to.IsIPv6()) {\n+#ifdef IPV6_V6ONLY\n+        if (sock->SetSockOpt(IPPROTO_IPV6, IPV6_V6ONLY, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_V6ONLY on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+#ifdef WIN32\n+        int prot_level{PROTECTION_LEVEL_UNRESTRICTED};\n+        if (sock->SetSockOpt(IPPROTO_IPV6,\n+                             IPV6_PROTECTION_LEVEL,\n+                             reinterpret_cast<const char*>(&prot_level),\n+                             sizeof(prot_level)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_PROTECTION_LEVEL on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+    }\n+\n+    if (sock->Bind(reinterpret_cast<sockaddr*>(&storage), len) == SOCKET_ERROR) {\n+        const int err{WSAGetLastError()};\n+        if (err == WSAEADDRINUSE) {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\"),\n+                                to.ToStringAddrPort(),\n+                                CLIENT_NAME);\n+        } else {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\"),\n+                                to.ToStringAddrPort(),\n+                                NetworkErrorString(err));\n+        }\n+        return false;\n+    }\n+\n+    // Listen for incoming connections\n+    if (sock->Listen(SOMAXCONN) == SOCKET_ERROR) {\n+        err_msg = strprintf(_(\"Cannot listen on %s: %s\"), to.ToStringAddrPort(), NetworkErrorString(WSAGetLastError()));\n+        return false;\n+    }\n+\n+    m_listen.emplace_back(std::move(sock));\n+\n+    return true;\n+}\n+\n+void SockMan::StartSocketsThreads(const Options& options)\n+{\n+    m_thread_socket_handler = std::thread(\n+        &util::TraceThread, options.socket_handler_thread_name, [this] { ThreadSocketHandler(); });\n+\n+    if (options.i2p.has_value()) {\n+        m_i2p_sam_session = std::make_unique<i2p::sam::Session>(\n+            options.i2p->private_key_file, options.i2p->sam_proxy, &interruptNet);\n+\n+        m_thread_i2p_accept =\n+            std::thread(&util::TraceThread, options.i2p->accept_thread_name, [this] { ThreadI2PAccept(); });\n+    }\n+}\n+\n+void SockMan::JoinSocketsThreads()\n+{\n+    if (m_thread_i2p_accept.joinable()) {\n+        m_thread_i2p_accept.join();\n+    }\n+\n+    if (m_thread_socket_handler.joinable()) {\n+        m_thread_socket_handler.join();\n+    }\n+}\n+\n+std::optional<SockMan::Id>\n+SockMan::ConnectAndMakeId(const std::variant<CService, StringHostIntPort>& to,\n+                          bool is_important,\n+                          std::optional<Proxy> proxy,\n+                          bool& proxy_failed,\n+                          CService& me)\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+    AssertLockNotHeld(m_unused_i2p_sessions_mutex);\n+\n+    std::unique_ptr<Sock> sock;\n+    std::unique_ptr<i2p::sam::Session> i2p_transient_session;\n+\n+    Assume(!me.IsValid());\n+\n+    if (std::holds_alternative<CService>(to)) {\n+        const CService& addr_to{std::get<CService>(to)};\n+        if (addr_to.IsI2P()) {\n+            if (!Assume(proxy.has_value())) {\n+                return std::nullopt;\n+            }\n+\n+            i2p::Connection conn;\n+            bool connected{false};\n+\n+            if (m_i2p_sam_session) {\n+                connected = m_i2p_sam_session->Connect(addr_to, conn, proxy_failed);\n+            } else {\n+                {\n+                    LOCK(m_unused_i2p_sessions_mutex);\n+                    if (m_unused_i2p_sessions.empty()) {\n+                        i2p_transient_session = std::make_unique<i2p::sam::Session>(proxy.value(), &interruptNet);\n+                    } else {\n+                        i2p_transient_session.swap(m_unused_i2p_sessions.front());\n+                        m_unused_i2p_sessions.pop();\n+                    }\n+                }\n+                connected = i2p_transient_session->Connect(addr_to, conn, proxy_failed);\n+                if (!connected) {\n+                    LOCK(m_unused_i2p_sessions_mutex);\n+                    if (m_unused_i2p_sessions.size() < MAX_UNUSED_I2P_SESSIONS_SIZE) {\n+                        m_unused_i2p_sessions.emplace(i2p_transient_session.release());\n+                    }\n+                }\n+            }\n+\n+            if (connected) {\n+                sock = std::move(conn.sock);\n+                me = conn.me;\n+            }\n+        } else if (proxy.has_value()) {\n+            sock = ConnectThroughProxy(proxy.value(), addr_to.ToStringAddr(), addr_to.GetPort(), proxy_failed);\n+        } else {\n+            sock = ConnectDirectly(addr_to, is_important);\n+        }\n+    } else {\n+        if (!Assume(proxy.has_value())) {\n+            return std::nullopt;\n+        }\n+\n+        const auto& hostport{std::get<StringHostIntPort>(to)};\n+\n+        bool dummy_proxy_failed;\n+        sock = ConnectThroughProxy(proxy.value(), hostport.host, hostport.port, dummy_proxy_failed);\n+    }\n+\n+    if (!sock) {\n+        return std::nullopt;\n+    }\n+\n+    if (!me.IsValid()) {\n+        me = GetBindAddress(*sock);\n+    }\n+\n+    const Id id{GetNewId()};\n+\n+    {\n+        LOCK(m_connected_mutex);\n+        m_connected.emplace(id, std::make_shared<ConnectionSockets>(std::move(sock),\n+                                                                    std::move(i2p_transient_session)));\n+    }\n+\n+    return id;\n+}\n+\n+bool SockMan::CloseConnection(Id id)\n+{\n+    LOCK(m_connected_mutex);\n+    return m_connected.erase(id) > 0;\n+}\n+\n+ssize_t SockMan::SendBytes(Id id,\n+                           std::span<const unsigned char> data,\n+                           bool will_send_more,\n+                           std::string& errmsg) const\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    if (data.empty()) {\n+        return 0;\n+    }\n+\n+    auto sockets{GetConnectionSockets(id)};\n+    if (!sockets) {\n+        // Bail out immediately and just leave things in the caller's send queue.\n+        return 0;\n+    }\n+\n+    int flags{MSG_NOSIGNAL | MSG_DONTWAIT};\n+#ifdef MSG_MORE\n+    if (will_send_more) {\n+        flags |= MSG_MORE;\n+    }\n+#endif\n+\n+    const ssize_t sent{WITH_LOCK(\n+        sockets->mutex,\n+        return sockets->sock->Send(reinterpret_cast<const char*>(data.data()), data.size(), flags);)};\n+\n+    if (sent >= 0) {\n+        return sent;\n+    }\n+\n+    const int err{WSAGetLastError()};\n+    if (err == WSAEWOULDBLOCK || err == WSAEMSGSIZE || err == WSAEINTR || err == WSAEINPROGRESS) {\n+        return 0;\n+    }\n+    errmsg = NetworkErrorString(err);\n+    return -1;\n+}\n+\n+void SockMan::StopListening()\n+{\n+    m_listen.clear();\n+}\n+\n+bool SockMan::ShouldTryToSend(Id id) const { return true; }\n+\n+bool SockMan::ShouldTryToRecv(Id id) const { return true; }\n+\n+void SockMan::EventIOLoopCompletedForOne(Id id) {}\n+\n+void SockMan::EventIOLoopCompletedForAll() {}\n+\n+void SockMan::EventI2PStatus(const CService&, I2PStatus) {}\n+\n+void SockMan::TestOnlyAddExistentConnection(Id id, std::unique_ptr<Sock>&& sock)\n+{\n+    LOCK(m_connected_mutex);\n+    const auto result{m_connected.emplace(id, std::make_shared<ConnectionSockets>(std::move(sock)))};\n+    assert(result.second);\n+}\n+\n+void SockMan::ThreadI2PAccept()\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    static constexpr auto err_wait_begin = 1s;\n+    static constexpr auto err_wait_cap = 5min;\n+    auto err_wait = err_wait_begin;\n+\n+    i2p::Connection conn;\n+\n+    auto SleepOnFailure = [&]() {\n+        interruptNet.sleep_for(err_wait);\n+        if (err_wait < err_wait_cap) {\n+            err_wait += 1s;\n+        }\n+    };\n+\n+    while (!interruptNet) {\n+\n+        if (!m_i2p_sam_session->Listen(conn)) {\n+            EventI2PStatus(conn.me, SockMan::I2PStatus::STOP_LISTENING);\n+            SleepOnFailure();\n+            continue;\n+        }\n+\n+        EventI2PStatus(conn.me, SockMan::I2PStatus::START_LISTENING);\n+\n+        if (!m_i2p_sam_session->Accept(conn)) {\n+            SleepOnFailure();\n+            continue;\n+        }\n+\n+        Assume(conn.me.IsI2P());\n+        Assume(conn.peer.IsI2P());\n+\n+        NewSockAccepted(std::move(conn.sock), conn.me, conn.peer);\n+\n+        err_wait = err_wait_begin;\n+    }\n+}\n+\n+void SockMan::ThreadSocketHandler()\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    while (!interruptNet) {\n+        EventIOLoopCompletedForAll();\n+\n+        // Check for the readiness of the already connected sockets and the\n+        // listening sockets in one call (\"readiness\" as in poll(2) or\n+        // select(2)). If none are ready, wait for a short while and return\n+        // empty sets.\n+        auto io_readiness{GenerateWaitSockets()};\n+        if (io_readiness.events_per_sock.empty() ||\n+            // WaitMany() may as well be a static method, the context of the first Sock in the vector is not relevant.\n+            !io_readiness.events_per_sock.begin()->first->WaitMany(SELECT_TIMEOUT,\n+                                                                   io_readiness.events_per_sock)) {\n+            interruptNet.sleep_for(SELECT_TIMEOUT);\n+        }\n+\n+        // Service (send/receive) each of the already connected sockets.\n+        SocketHandlerConnected(io_readiness);\n+\n+        // Accept new connections from listening sockets.\n+        SocketHandlerListening(io_readiness.events_per_sock);\n+    }\n+}\n+\n+std::unique_ptr<Sock> SockMan::AcceptConnection(const Sock& listen_sock, CService& addr)\n+{\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+\n+    auto sock{listen_sock.Accept(reinterpret_cast<sockaddr*>(&storage), &len)};\n+\n+    if (!sock) {\n+        const int err{WSAGetLastError()};\n+        if (err != WSAEWOULDBLOCK) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Error,\n+                          \"Cannot accept new connection: %s\\n\",\n+                          NetworkErrorString(err));\n+        }\n+        return {};\n+    }\n+\n+    if (!addr.SetSockAddr(reinterpret_cast<sockaddr*>(&storage), len)) {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Unknown socket family\\n\");\n+    }\n+\n+    return sock;\n+}\n+\n+void SockMan::NewSockAccepted(std::unique_ptr<Sock>&& sock, const CService& me, const CService& them)\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    if (!sock->IsSelectable()) {\n+        LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", them.ToStringAddrPort());\n+        return;\n+    }\n+\n+    // According to the internet TCP_NODELAY is not carried into accepted sockets\n+    // on all platforms.  Set it again here just to be sure.",
      "path": "src/common/sockman.cpp",
      "position": null,
      "original_position": 396,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "cfe5eba4463ff289b46ba0b3f4708f7cd3f1e9fe",
      "in_reply_to_id": 2051985554,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This comment may need to be applied upstream in https://github.com/bitcoin/bitcoin/pull/30988\r\n\r\nFWIW, the `Sockman` backend might not be what we end up going with, as @theuni and I are considering an alternative.",
      "created_at": "2025-04-28T13:53:26Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063711938",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063711938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 396,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063725962",
      "pull_request_review_id": 2799390114,
      "id": 2063725962,
      "node_id": "PRRC_kwDOABII5857AfWK",
      "diff_hunk": "@@ -243,18 +243,18 @@ static bool InitHTTPAllowList()\n }\n \n /** HTTP request method as string - use for logging only */\n-std::string RequestMethodString(HTTPRequest::RequestMethod m)\n+std::string RequestMethodString(HTTPRequestMethod m)",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "90761d5026285d10ab89494fc44f3225e778d5a8",
      "in_reply_to_id": 2062578451,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2025-04-28T13:59:39Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063725962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063725962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063753329",
      "pull_request_review_id": 2799390114,
      "id": 2063753329,
      "node_id": "PRRC_kwDOABII5857AmBx",
      "diff_hunk": "@@ -941,6 +942,69 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+CService HTTPRequest::GetPeer() const\n+{\n+    return m_client->m_addr;\n+}\n+\n+HTTPRequestMethod HTTPRequest::GetRequestMethod() const\n+{\n+    if (m_method == \"GET\") return HTTPRequestMethod::GET;\n+    if (m_method == \"POST\") return HTTPRequestMethod::POST;\n+    if (m_method == \"HEAD\") return HTTPRequestMethod::HEAD;\n+    if (m_method == \"PUT\") return HTTPRequestMethod::PUT;\n+    return HTTPRequestMethod::UNKNOWN;\n+}\n+\n+std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+{\n+    return GetQueryParameterFromUri(GetURI(), key);\n+}\n+\n+// See libevent http.c evhttp_parse_query_impl()\n+// and https://www.rfc-editor.org/rfc/rfc3986#section-3.4\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key)\n+{\n+    // Handle %XX encoding\n+    std::string decoded_uri{UrlDecode(uri)};\n+\n+    // find query in URI\n+    size_t start = decoded_uri.find('?');\n+    if (start == std::string::npos) return std::nullopt;\n+    size_t end = decoded_uri.find('#', start);\n+    if (end == std::string::npos) {\n+        end = decoded_uri.length();\n+    }\n+    const std::string query{decoded_uri.substr(start + 1, end - start - 1)};\n+    // find requested parameter in query\n+    const std::vector<std::string> params{SplitString(query, \"&\")};",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "b828fa1e29f0baf5c08517512509a0138338bd50",
      "in_reply_to_id": 2062578725,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You're right thanks, I haven't been dilligent about using string_view when copying isn't needed. Fixed that here and also in `HTTPRequest::LoadControlData()`",
      "created_at": "2025-04-28T14:12:41Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063753329",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063753329"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 980,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063786403",
      "pull_request_review_id": 2799390114,
      "id": 2063786403,
      "node_id": "PRRC_kwDOABII5857AuGj",
      "diff_hunk": "@@ -941,6 +942,69 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+CService HTTPRequest::GetPeer() const\n+{\n+    return m_client->m_addr;\n+}\n+\n+HTTPRequestMethod HTTPRequest::GetRequestMethod() const\n+{\n+    if (m_method == \"GET\") return HTTPRequestMethod::GET;\n+    if (m_method == \"POST\") return HTTPRequestMethod::POST;\n+    if (m_method == \"HEAD\") return HTTPRequestMethod::HEAD;\n+    if (m_method == \"PUT\") return HTTPRequestMethod::PUT;\n+    return HTTPRequestMethod::UNKNOWN;\n+}\n+\n+std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+{\n+    return GetQueryParameterFromUri(GetURI(), key);\n+}\n+\n+// See libevent http.c evhttp_parse_query_impl()\n+// and https://www.rfc-editor.org/rfc/rfc3986#section-3.4\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key)\n+{\n+    // Handle %XX encoding\n+    std::string decoded_uri{UrlDecode(uri)};\n+\n+    // find query in URI\n+    size_t start = decoded_uri.find('?');\n+    if (start == std::string::npos) return std::nullopt;\n+    size_t end = decoded_uri.find('#', start);\n+    if (end == std::string::npos) {\n+        end = decoded_uri.length();\n+    }\n+    const std::string query{decoded_uri.substr(start + 1, end - start - 1)};\n+    // find requested parameter in query\n+    const std::vector<std::string> params{SplitString(query, \"&\")};\n+    for (const std::string& param : params) {\n+        size_t delim = param.find('=');\n+        if (key == param.substr(0, delim)) {\n+            if (delim == std::string::npos) {\n+                return \"\";\n+            } else {\n+                return param.substr(delim + 1);\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr) const",
      "path": "src/httpserver.cpp",
      "position": 616,
      "original_position": 61,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "b828fa1e29f0baf5c08517512509a0138338bd50",
      "in_reply_to_id": 2062578806,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "thanks, for this fix I added a new commit instead of a fixup. The reason is because in the \"story\" of the commits, `GetHeader()` is already defined and used by the legacy HTTP server returning a string, and the goal at this point is to match the exiting API. But we can optimize it after the big \"switch HTTP servers\" commit.",
      "created_at": "2025-04-28T14:28:45Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063786403",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063786403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 522,
      "original_line": 522,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063795724",
      "pull_request_review_id": 2799390114,
      "id": 2063795724,
      "node_id": "PRRC_kwDOABII5857AwYM",
      "diff_hunk": "@@ -940,6 +941,92 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)",
      "path": "src/httpserver.cpp",
      "position": 635,
      "original_position": 12,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": 2062569706,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could this be done in a followup? I actually just checked https://github.com/bitcoin/bitcoin/pull/30321 to see why we didn't do this back then -- I remember when that was authored and merged but I didn't realize you were the author!",
      "created_at": "2025-04-28T14:33:38Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063795724",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063795724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 536,
      "original_line": 536,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063873609",
      "pull_request_review_id": 2799390114,
      "id": 2063873609,
      "node_id": "PRRC_kwDOABII5857BDZJ",
      "diff_hunk": "@@ -940,6 +941,92 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)\n+{\n+    HTTPResponse res;\n+\n+    // Some response headers are determined in advance and stored in the request\n+    res.m_headers = std::move(m_response_headers);\n+\n+    // Response version matches request version\n+    res.m_version_major = m_version_major;\n+    res.m_version_minor = m_version_minor;\n+\n+    // Add response code and look up reason string\n+    res.m_status = status;\n+    res.m_reason = HTTPReason.find(status)->second;\n+\n+    // See libevent evhttp_response_needs_body()\n+    // Response headers are different if no body is needed\n+    bool needs_body{status != HTTP_NO_CONTENT && (status < 100 || status >= 200)};\n+\n+    // See libevent evhttp_make_header_response()\n+    // Expected response headers depend on protocol version\n+    if (m_version_major == 1) {\n+        // HTTP/1.0\n+        if (m_version_minor == 0) {\n+            auto connection_header{m_headers.Find(\"Connection\")};\n+            if (connection_header && ToLower(connection_header.value()) == \"keep-alive\") {\n+                res.m_headers.Write(\"Connection\", \"keep-alive\");\n+                res.m_keep_alive = true;\n+            }\n+        }\n+\n+        // HTTP/1.1\n+        if (m_version_minor >= 1) {\n+            const int64_t now_seconds{TicksSinceEpoch<std::chrono::seconds>(NodeClock::now())};\n+            res.m_headers.Write(\"Date\", FormatRFC7231DateTime(now_seconds));\n+\n+            if (needs_body) {\n+                res.m_headers.Write(\"Content-Length\", strprintf(\"%d\", reply_body.size()));\n+            }\n+\n+            // Default for HTTP/1.1\n+            res.m_keep_alive = true;\n+        }\n+    }\n+\n+    if (needs_body && !res.m_headers.Find(\"Content-Type\")) {\n+        // Default type from libevent evhttp_new_object()\n+        res.m_headers.Write(\"Content-Type\", \"text/html; charset=ISO-8859-1\");\n+    }\n+\n+    auto connection_header{m_headers.Find(\"Connection\")};\n+    if (connection_header && ToLower(connection_header.value()) == \"close\") {\n+        // Might not exist already but we need to replace it, not append to it\n+        res.m_headers.Remove(\"Connection\");\n+        res.m_headers.Write(\"Connection\", \"close\");\n+        res.m_keep_alive = false;\n+    }\n+\n+    // Serialize the response headers\n+    const std::string headers{res.StringifyHeaders()};\n+    const auto headers_bytes{std::as_bytes(std::span(headers.begin(), headers.end()))};\n+\n+    // Fill the send buffer with the complete serialized response headers + body\n+    {\n+        LOCK(m_client->m_send_mutex);\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), headers_bytes.begin(), headers_bytes.end());\n+\n+        // We've been using std::span up until now but it is finally time to copy\n+        // data. The original data will go out of scope when WriteReply() returns.\n+        // This is analogous to the memcpy() in libevent's evbuffer_add()\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), reply_body.begin(), reply_body.end());",
      "path": "src/httpserver.cpp",
      "position": 713,
      "original_position": 82,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": 2062570060,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't understand -- would that be an optimization? It's not really a FIFO, since we insert at the end of the buffer here but send data from the `begin()` of the buffer in `SendBytesFromBuffer()`",
      "created_at": "2025-04-28T15:06:58Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063873609",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063873609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 610,
      "original_line": 610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063909861",
      "pull_request_review_id": 2799390114,
      "id": 2063909861,
      "node_id": "PRRC_kwDOABII5857BMPl",
      "diff_hunk": "@@ -906,6 +906,24 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     return true;\n }\n \n+bool HTTPClient::ReadRequest(std::unique_ptr<HTTPRequest>& req)\n+{\n+    LineReader reader(m_recv_buffer, MAX_HEADERS_SIZE);\n+\n+    if (!req->LoadControlData(reader)) return false;\n+    if (!req->LoadHeaders(reader)) return false;\n+    if (!req->LoadBody(reader)) return false;\n+\n+    // Remove the bytes read out of the buffer.\n+    // If one of the above calls throws an error, the caller must\n+    // catch it and disconnect the client.\n+    m_recv_buffer.erase(",
      "path": "src/httpserver.cpp",
      "position": 753,
      "original_position": 15,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "482382bd1490fa3e0bdf0e82497a583dafd80a45",
      "in_reply_to_id": 2062566402,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we'd still want to erase the data after fulfilling the request though (if I'm understanding your comment correctly). Would it make more sense if `m_recv_buffer` was a `std::deque` or something where we can truncate the structure without copying/moving/shifting left?",
      "created_at": "2025-04-28T15:21:22Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063909861",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063909861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 648,
      "original_line": 648,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063946994",
      "pull_request_review_id": 2799390114,
      "id": 2063946994,
      "node_id": "PRRC_kwDOABII5857BVTy",
      "diff_hunk": "@@ -266,6 +266,15 @@ class HTTPRequest\n     bool LoadControlData(LineReader& reader);\n     bool LoadHeaders(LineReader& reader);\n     bool LoadBody(LineReader& reader);\n+\n+    // Response headers may be set in advance before response body is known\n+    HTTPHeaders m_response_headers;\n+    void WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body = {});\n+    void WriteReply(HTTPStatusCode status, const char* reply_body) {\n+        auto reply_body_view = std::string_view(reply_body);\n+        std::span<const std::byte> byte_span(reinterpret_cast<const std::byte*>(reply_body_view.data()), reply_body_view.size());",
      "path": "src/httpserver.h",
      "position": null,
      "original_position": 10,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": 2062572600,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "awesome thanks",
      "created_at": "2025-04-28T15:36:34Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063946994",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063946994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063947203",
      "pull_request_review_id": 2799390114,
      "id": 2063947203,
      "node_id": "PRRC_kwDOABII5857BVXD",
      "diff_hunk": "@@ -27,168 +34,316 @@ static const int DEFAULT_HTTP_WORKQUEUE=64;\n \n static const int DEFAULT_HTTP_SERVER_TIMEOUT=30;\n \n-struct evhttp_request;\n-struct event_base;\n-class CService;\n-class HTTPRequest;\n+enum HTTPRequestMethod {\n+    UNKNOWN,\n+    GET,\n+    POST,\n+    HEAD,\n+    PUT\n+};\n \n-/** Initialize HTTP server.\n- * Call this before RegisterHTTPHandler or EventBase().\n- */\n-bool InitHTTPServer(const util::SignalInterrupt& interrupt);\n-/** Start HTTP server.\n- * This is separate from InitHTTPServer to give users race-condition-free time\n- * to register their handlers between InitHTTPServer and StartHTTPServer.\n+/** Event handler closure.\n  */\n-void StartHTTPServer();\n-/** Interrupt HTTP server threads */\n-void InterruptHTTPServer();\n-/** Stop HTTP server */\n-void StopHTTPServer();\n+class HTTPClosure\n+{\n+public:\n+    virtual void operator()() = 0;\n+    virtual ~HTTPClosure() = default;\n+};\n \n-/** Change logging level for libevent. */\n-void UpdateHTTPServerLogging(bool enable);\n+namespace http_bitcoin {\n+using util::LineReader;\n+using NodeId = SockMan::Id;\n \n-/** Handler for requests to a certain HTTP path */\n-typedef std::function<bool(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n-/** Register handler for prefix.\n- * If multiple handlers match a prefix, the first-registered one will\n- * be invoked.\n- */\n-void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler);\n-/** Unregister handler for prefix */\n-void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch);\n+// shortest valid request line, used by libevent in evhttp_parse_request_line()\n+static const size_t MIN_REQUEST_LINE_LENGTH{strlen(\"GET / HTTP/1.0\")};\n+// maximum size of http request (request line + headers)\n+// see https://github.com/bitcoin/bitcoin/issues/6425\n+static const size_t MAX_HEADERS_SIZE{8192};\n \n-/** Return evhttp event base. This can be used by submodules to\n- * queue timers or custom events.\n- */\n-struct event_base* EventBase();\n+class HTTPHeaders\n+{\n+public:\n+    std::optional<std::string> Find(const std::string key) const;\n+    void Write(const std::string key, const std::string value);\n+    void Remove(const std::string key);\n+    bool Read(util::LineReader& reader);\n+    std::string Stringify() const;\n+\n+private:\n+    std::map<std::string, std::string, util::CaseInsensitiveComparator> m_map;\n+};\n+\n+class HTTPResponse\n+{\n+public:\n+    int m_version_major;\n+    int m_version_minor;\n+    HTTPStatusCode m_status;\n+    std::string m_reason;\n+    HTTPHeaders m_headers;\n+    std::vector<std::byte> m_body;\n+    bool m_keep_alive{false};\n+\n+    std::string StringifyHeaders() const;\n+};\n+\n+class HTTPClient;\n \n-/** In-flight HTTP request.\n- * Thin C++ wrapper around evhttp_request.\n- */\n class HTTPRequest\n {\n-private:\n-    struct evhttp_request* req;\n-    const util::SignalInterrupt& m_interrupt;\n-    bool replySent;\n+public:\n+    std::string m_method;\n+    std::string m_target;\n+    // Default protocol version is used by error responses to unreadable requests\n+    int m_version_major{1};\n+    int m_version_minor{1};\n+    HTTPHeaders m_headers;\n+    std::string m_body;\n+\n+    // Keep a pointer to the client that made the request so\n+    // we know who to respond to.\n+    std::shared_ptr<HTTPClient> m_client;\n+    explicit HTTPRequest(std::shared_ptr<HTTPClient> client) : m_client(client) {};\n+    // Null client for unit tests\n+    explicit HTTPRequest() : m_client(nullptr) {};\n+\n+    // Readers return false if they need more data from the\n+    // socket to parse properly. They throw errors if\n+    // the data is invalid.\n+    bool LoadControlData(LineReader& reader);\n+    bool LoadHeaders(LineReader& reader);\n+    bool LoadBody(LineReader& reader);\n \n+    // These methods reimplement the API from http_libevent::HTTPRequest\n+    // for downstream JSONRPC and REST modules.\n+    std::string GetURI() const {return m_target;};\n+    CService GetPeer() const;\n+    HTTPRequestMethod GetRequestMethod() const;\n+    std::optional<std::string> GetQueryParameter(const std::string& key) const;\n+    std::pair<bool, std::string> GetHeader(const std::string& hdr) const;\n+    std::string ReadBody() const {return m_body;};\n+    void WriteHeader(const std::string& hdr, const std::string& value);\n+\n+    // Response headers may be set in advance before response body is known\n+    HTTPHeaders m_response_headers;\n+    void WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body = {});\n+    void WriteReply(HTTPStatusCode status, const char* reply_body)\n+    {\n+        auto reply_body_view = std::string_view(reply_body);\n+        std::span<const std::byte> byte_span(reinterpret_cast<const std::byte*>(reply_body_view.data()), reply_body_view.size());\n+        WriteReply(status, byte_span);\n+    }\n+    void WriteReply(HTTPStatusCode status, const std::string& reply_body)",
      "path": "src/httpserver.h",
      "position": null,
      "original_position": 160,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "in_reply_to_id": 2062573530,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 ",
      "created_at": "2025-04-28T15:36:40Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063947203",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063947203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063952597",
      "pull_request_review_id": 2799390114,
      "id": 2063952597,
      "node_id": "PRRC_kwDOABII5857BWrV",
      "diff_hunk": "@@ -497,3 +497,10 @@ std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_mu\n     }\n     return *parsed_num * unit_amount;\n }\n+\n+std::vector<std::byte> StringToBuffer(const std::string& str)\n+{\n+    return std::vector<std::byte>(",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": 2051998964,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Great thanks, done.",
      "created_at": "2025-04-28T15:38:54Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063952597",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063952597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063962062",
      "pull_request_review_id": 2799390114,
      "id": 2063962062,
      "node_id": "PRRC_kwDOABII5857BY_O",
      "diff_hunk": "@@ -13,4 +13,42 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n     if (search.empty()) return;\n     in_out = std::regex_replace(in_out, std::regex(search), substitute);\n }\n+\n+LineReader::LineReader(std::span<const std::byte> buffer, size_t max_read)\n+    : start(buffer.begin()), end(buffer.end()), max_read(max_read), it(buffer.begin()) {}\n+\n+std::optional<std::string> LineReader::ReadLine()\n+{\n+    if (it == end) {\n+        return std::nullopt;\n+    }\n+\n+    auto line_start = it;\n+    std::string line{};\n+    while (it != end) {\n+        char c = static_cast<char>(*it);\n+        line += c;",
      "path": "src/util/string.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": 2052024440,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "awesome, done",
      "created_at": "2025-04-28T15:43:02Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063962062",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063962062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064155842",
      "pull_request_review_id": 2799390114,
      "id": 2064155842,
      "node_id": "PRRC_kwDOABII5857CITC",
      "diff_hunk": "@@ -13,4 +13,42 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n     if (search.empty()) return;\n     in_out = std::regex_replace(in_out, std::regex(search), substitute);\n }\n+\n+LineReader::LineReader(std::span<const std::byte> buffer, size_t max_read)\n+    : start(buffer.begin()), end(buffer.end()), max_read(max_read), it(buffer.begin()) {}\n+\n+std::optional<std::string> LineReader::ReadLine()\n+{\n+    if (it == end) {\n+        return std::nullopt;\n+    }\n+\n+    auto line_start = it;\n+    std::string line{};\n+    while (it != end) {\n+        char c = static_cast<char>(*it);\n+        line += c;\n+        ++it;\n+        if (c == '\\n') break;\n+        if ((size_t)std::distance(line_start, it) >= max_read) throw std::runtime_error(\"max_read exceeded by LineReader\");\n+    }\n+\n+    line = TrimString(line); // delete trailing \\r and/or \\n",
      "path": "src/util/string.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": 2052025637,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "by internal buffer I assume you mean `m_recv_buffer` which im trying to copy from into the HTTPRequest object, then clear the buffer. I left another response about maybe changing the type of that buffer to reduce unnecessary copies, but am going to leave it alone for this current rebase. What I did here though was swap out `TrimString()` with `TrimStringView()` so at least that's one less.",
      "created_at": "2025-04-28T17:31:28Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2064155842",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064155842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064165018",
      "pull_request_review_id": 2799390114,
      "id": 2064165018,
      "node_id": "PRRC_kwDOABII5857CKia",
      "diff_hunk": "@@ -13,4 +13,42 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n     if (search.empty()) return;\n     in_out = std::regex_replace(in_out, std::regex(search), substitute);\n }\n+\n+LineReader::LineReader(std::span<const std::byte> buffer, size_t max_read)\n+    : start(buffer.begin()), end(buffer.end()), max_read(max_read), it(buffer.begin()) {}\n+\n+std::optional<std::string> LineReader::ReadLine()\n+{\n+    if (it == end) {\n+        return std::nullopt;\n+    }\n+\n+    auto line_start = it;\n+    std::string line{};\n+    while (it != end) {\n+        char c = static_cast<char>(*it);\n+        line += c;\n+        ++it;\n+        if (c == '\\n') break;\n+        if ((size_t)std::distance(line_start, it) >= max_read) throw std::runtime_error(\"max_read exceeded by LineReader\");\n+    }\n+\n+    line = TrimString(line); // delete trailing \\r and/or \\n\n+    return line;\n+}\n+\n+// Ignores max_read but won't overflow\n+std::string LineReader::ReadLength(size_t len)\n+{\n+    if (len == 0) return \"\";\n+    if (Left() < len) throw std::runtime_error(\"Not enough data in buffer\");\n+    std::string out(reinterpret_cast<const char*>(&(*it)), len);",
      "path": "src/util/string.cpp",
      "position": 33,
      "original_position": 33,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": 2052027205,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I addressed this already by taking your suggestion here https://github.com/bitcoin/bitcoin/pull/32061/files#r2052024440",
      "created_at": "2025-04-28T17:36:51Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2064165018",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064165018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064167023",
      "pull_request_review_id": 2799390114,
      "id": 2064167023,
      "node_id": "PRRC_kwDOABII5857CLBv",
      "diff_hunk": "@@ -116,6 +119,20 @@ std::optional<int64_t> ParseISO8601DateTime(std::string_view str)\n     return int64_t{TicksSinceEpoch<std::chrono::seconds>(tp)};\n }\n \n+std::string FormatRFC7231DateTime(int64_t nTime)\n+{\n+    const std::chrono::sys_seconds secs{std::chrono::seconds{nTime}};\n+    const auto days{std::chrono::floor<std::chrono::days>(secs)};\n+    // 1970-01-01 was a Thursday\n+    std::string weekday{weekdays[(days.time_since_epoch().count() + 4) % 7]};",
      "path": "src/util/time.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "aeb8352a9de844073c10656e53e3d90b573b9eda",
      "in_reply_to_id": 2051989121,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2025-04-28T17:38:19Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2064167023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064167023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064398722",
      "pull_request_review_id": 2799390114,
      "id": 2064398722,
      "node_id": "PRRC_kwDOABII5857DDmC",
      "diff_hunk": "@@ -781,3 +781,69 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n         pathHandlers.erase(i);\n     }\n }\n+\n+\n+namespace http_bitcoin {\n+std::optional<std::string> HTTPHeaders::Find(const std::string key) const\n+{\n+    const auto it = m_map.find(key);\n+    if (it == m_map.end()) return std::nullopt;\n+    return it->second;\n+}\n+\n+void HTTPHeaders::Write(const std::string key, const std::string value)\n+{\n+    // If present, append value to list\n+    const auto existing_value = Find(key);\n+    if (existing_value) {\n+        m_map[key] = existing_value.value() + \", \" + value;\n+    } else {\n+        m_map[key] = value;\n+    }\n+}\n+\n+void HTTPHeaders::Remove(const std::string key)\n+{\n+    m_map.erase(key);\n+}\n+\n+bool HTTPHeaders::Read(util::LineReader& reader)\n+{\n+    // Headers https://httpwg.org/specs/rfc9110.html#rfc.section.6.3\n+    // A sequence of Field Lines https://httpwg.org/specs/rfc9110.html#rfc.section.5.2\n+    do {\n+        auto maybe_line = reader.ReadLine();\n+        if (!maybe_line) return false;\n+        const std::string& line = *maybe_line;\n+\n+        // An empty line indicates end of the headers section https://www.rfc-editor.org/rfc/rfc2616#section-4\n+        if (line.length() == 0) break;\n+\n+        // Header line must have at least one \":\"\n+        // keys are not allowed to have delimiters like \":\" but values are\n+        // https://httpwg.org/specs/rfc9110.html#rfc.section.5.6.2\n+        const size_t pos{line.find(':')};\n+        if (pos == std::string::npos) throw std::runtime_error(\"HTTP header missing colon (:)\");\n+\n+        // Whitespace is optional\n+        std::string key = util::TrimString(line.substr(0, pos));\n+        std::string value = util::TrimString(line.substr(pos + 1));\n+        Write(key, value);\n+    } while (true);\n+\n+    return true;\n+}\n+\n+std::string HTTPHeaders::Stringify() const\n+{\n+    std::string out;\n+    for (auto it = m_map.begin(); it != m_map.end(); ++it) {",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "70d003ca1028458bd6573bcd067e234e009f66c9",
      "in_reply_to_id": 2052664896,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "thanks I'll take it!",
      "created_at": "2025-04-28T19:41:16Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2064398722",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064398722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 840,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064400862",
      "pull_request_review_id": 2799390114,
      "id": 2064400862,
      "node_id": "PRRC_kwDOABII5857DEHe",
      "diff_hunk": "@@ -781,3 +781,69 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n         pathHandlers.erase(i);\n     }\n }\n+\n+\n+namespace http_bitcoin {\n+std::optional<std::string> HTTPHeaders::Find(const std::string key) const",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "70d003ca1028458bd6573bcd067e234e009f66c9",
      "in_reply_to_id": 2052036849,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done.",
      "created_at": "2025-04-28T19:42:06Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2064400862",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064400862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2067899705",
      "pull_request_review_id": 2805824400,
      "id": 2067899705,
      "node_id": "PRRC_kwDOABII5857QaU5",
      "diff_hunk": "@@ -906,6 +906,24 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     return true;\n }\n \n+bool HTTPClient::ReadRequest(std::unique_ptr<HTTPRequest>& req)\n+{\n+    LineReader reader(m_recv_buffer, MAX_HEADERS_SIZE);\n+\n+    if (!req->LoadControlData(reader)) return false;\n+    if (!req->LoadHeaders(reader)) return false;\n+    if (!req->LoadBody(reader)) return false;\n+\n+    // Remove the bytes read out of the buffer.\n+    // If one of the above calls throws an error, the caller must\n+    // catch it and disconnect the client.\n+    m_recv_buffer.erase(",
      "path": "src/httpserver.cpp",
      "position": 753,
      "original_position": 15,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "482382bd1490fa3e0bdf0e82497a583dafd80a45",
      "in_reply_to_id": 2062566402,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Would it make more sense if m_recv_buffer was a std::deque or something where we can truncate the structure without copying/moving/shifting left?\r\n\r\nSounds good :)",
      "created_at": "2025-04-30T05:53:58Z",
      "updated_at": "2025-04-30T05:53:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2067899705",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2067899705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 648,
      "original_line": 648,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2067900213",
      "pull_request_review_id": 2805825671,
      "id": 2067900213,
      "node_id": "PRRC_kwDOABII5857Qac1",
      "diff_hunk": "@@ -940,6 +941,92 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)",
      "path": "src/httpserver.cpp",
      "position": 635,
      "original_position": 12,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": 2062569706,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, thanks :)",
      "created_at": "2025-04-30T05:54:29Z",
      "updated_at": "2025-04-30T05:54:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2067900213",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2067900213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 536,
      "original_line": 536,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2067902920",
      "pull_request_review_id": 2805829662,
      "id": 2067902920,
      "node_id": "PRRC_kwDOABII5857QbHI",
      "diff_hunk": "@@ -940,6 +941,92 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)\n+{\n+    HTTPResponse res;\n+\n+    // Some response headers are determined in advance and stored in the request\n+    res.m_headers = std::move(m_response_headers);\n+\n+    // Response version matches request version\n+    res.m_version_major = m_version_major;\n+    res.m_version_minor = m_version_minor;\n+\n+    // Add response code and look up reason string\n+    res.m_status = status;\n+    res.m_reason = HTTPReason.find(status)->second;\n+\n+    // See libevent evhttp_response_needs_body()\n+    // Response headers are different if no body is needed\n+    bool needs_body{status != HTTP_NO_CONTENT && (status < 100 || status >= 200)};\n+\n+    // See libevent evhttp_make_header_response()\n+    // Expected response headers depend on protocol version\n+    if (m_version_major == 1) {\n+        // HTTP/1.0\n+        if (m_version_minor == 0) {\n+            auto connection_header{m_headers.Find(\"Connection\")};\n+            if (connection_header && ToLower(connection_header.value()) == \"keep-alive\") {\n+                res.m_headers.Write(\"Connection\", \"keep-alive\");\n+                res.m_keep_alive = true;\n+            }\n+        }\n+\n+        // HTTP/1.1\n+        if (m_version_minor >= 1) {\n+            const int64_t now_seconds{TicksSinceEpoch<std::chrono::seconds>(NodeClock::now())};\n+            res.m_headers.Write(\"Date\", FormatRFC7231DateTime(now_seconds));\n+\n+            if (needs_body) {\n+                res.m_headers.Write(\"Content-Length\", strprintf(\"%d\", reply_body.size()));\n+            }\n+\n+            // Default for HTTP/1.1\n+            res.m_keep_alive = true;\n+        }\n+    }\n+\n+    if (needs_body && !res.m_headers.Find(\"Content-Type\")) {\n+        // Default type from libevent evhttp_new_object()\n+        res.m_headers.Write(\"Content-Type\", \"text/html; charset=ISO-8859-1\");\n+    }\n+\n+    auto connection_header{m_headers.Find(\"Connection\")};\n+    if (connection_header && ToLower(connection_header.value()) == \"close\") {\n+        // Might not exist already but we need to replace it, not append to it\n+        res.m_headers.Remove(\"Connection\");\n+        res.m_headers.Write(\"Connection\", \"close\");\n+        res.m_keep_alive = false;\n+    }\n+\n+    // Serialize the response headers\n+    const std::string headers{res.StringifyHeaders()};\n+    const auto headers_bytes{std::as_bytes(std::span(headers.begin(), headers.end()))};\n+\n+    // Fill the send buffer with the complete serialized response headers + body\n+    {\n+        LOCK(m_client->m_send_mutex);\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), headers_bytes.begin(), headers_bytes.end());\n+\n+        // We've been using std::span up until now but it is finally time to copy\n+        // data. The original data will go out of scope when WriteReply() returns.\n+        // This is analogous to the memcpy() in libevent's evbuffer_add()\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), reply_body.begin(), reply_body.end());",
      "path": "src/httpserver.cpp",
      "position": 713,
      "original_position": 82,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": 2062570060,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I suggest considering a similar approach to `libevent`'s evbuffers:\r\n\r\n> evbuffers are represented using a linked list of memory chunks, with pointers to the first and last chunk in the chain.\r\n\r\nhttps://libevent.org/doc/buffer_8h.html",
      "created_at": "2025-04-30T05:57:12Z",
      "updated_at": "2025-04-30T05:57:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2067902920",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2067902920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 610,
      "original_line": 610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2069908553",
      "pull_request_review_id": 2809245150,
      "id": 2069908553,
      "node_id": "PRRC_kwDOABII5857YExJ",
      "diff_hunk": "@@ -940,6 +941,92 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)\n+{\n+    HTTPResponse res;\n+\n+    // Some response headers are determined in advance and stored in the request\n+    res.m_headers = std::move(m_response_headers);\n+\n+    // Response version matches request version\n+    res.m_version_major = m_version_major;\n+    res.m_version_minor = m_version_minor;\n+\n+    // Add response code and look up reason string\n+    res.m_status = status;\n+    res.m_reason = HTTPReason.find(status)->second;\n+\n+    // See libevent evhttp_response_needs_body()\n+    // Response headers are different if no body is needed\n+    bool needs_body{status != HTTP_NO_CONTENT && (status < 100 || status >= 200)};\n+\n+    // See libevent evhttp_make_header_response()\n+    // Expected response headers depend on protocol version\n+    if (m_version_major == 1) {\n+        // HTTP/1.0\n+        if (m_version_minor == 0) {\n+            auto connection_header{m_headers.Find(\"Connection\")};\n+            if (connection_header && ToLower(connection_header.value()) == \"keep-alive\") {\n+                res.m_headers.Write(\"Connection\", \"keep-alive\");\n+                res.m_keep_alive = true;\n+            }\n+        }\n+\n+        // HTTP/1.1\n+        if (m_version_minor >= 1) {\n+            const int64_t now_seconds{TicksSinceEpoch<std::chrono::seconds>(NodeClock::now())};\n+            res.m_headers.Write(\"Date\", FormatRFC7231DateTime(now_seconds));\n+\n+            if (needs_body) {\n+                res.m_headers.Write(\"Content-Length\", strprintf(\"%d\", reply_body.size()));\n+            }\n+\n+            // Default for HTTP/1.1\n+            res.m_keep_alive = true;\n+        }\n+    }\n+\n+    if (needs_body && !res.m_headers.Find(\"Content-Type\")) {\n+        // Default type from libevent evhttp_new_object()\n+        res.m_headers.Write(\"Content-Type\", \"text/html; charset=ISO-8859-1\");\n+    }\n+\n+    auto connection_header{m_headers.Find(\"Connection\")};\n+    if (connection_header && ToLower(connection_header.value()) == \"close\") {\n+        // Might not exist already but we need to replace it, not append to it\n+        res.m_headers.Remove(\"Connection\");\n+        res.m_headers.Write(\"Connection\", \"close\");\n+        res.m_keep_alive = false;\n+    }\n+\n+    // Serialize the response headers\n+    const std::string headers{res.StringifyHeaders()};\n+    const auto headers_bytes{std::as_bytes(std::span(headers.begin(), headers.end()))};\n+\n+    // Fill the send buffer with the complete serialized response headers + body\n+    {\n+        LOCK(m_client->m_send_mutex);\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), headers_bytes.begin(), headers_bytes.end());\n+\n+        // We've been using std::span up until now but it is finally time to copy\n+        // data. The original data will go out of scope when WriteReply() returns.\n+        // This is analogous to the memcpy() in libevent's evbuffer_add()\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), reply_body.begin(), reply_body.end());",
      "path": "src/httpserver.cpp",
      "position": 713,
      "original_position": 82,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": 2062570060,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thinking about it, doing the copy here is definitely fine for now ([we can optimize it in a following PR](https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063795724)).",
      "created_at": "2025-05-01T06:45:36Z",
      "updated_at": "2025-05-01T06:46:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2069908553",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2069908553"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 610,
      "original_line": 610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2072365927",
      "pull_request_review_id": 2813204501,
      "id": 2072365927,
      "node_id": "PRRC_kwDOABII5857hctn",
      "diff_hunk": "@@ -13,4 +13,42 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n     if (search.empty()) return;\n     in_out = std::regex_replace(in_out, std::regex(search), substitute);\n }\n+\n+LineReader::LineReader(std::span<const std::byte> buffer, size_t max_read)\n+    : start(buffer.begin()), end(buffer.end()), max_read(max_read), it(buffer.begin()) {}\n+\n+std::optional<std::string> LineReader::ReadLine()\n+{\n+    if (it == end) {\n+        return std::nullopt;\n+    }\n+\n+    auto line_start = it;\n+    std::string line{};\n+    while (it != end) {\n+        char c = static_cast<char>(*it);\n+        line += c;\n+        ++it;\n+        if (c == '\\n') break;\n+        if ((size_t)std::distance(line_start, it) >= max_read) throw std::runtime_error(\"max_read exceeded by LineReader\");\n+    }\n+\n+    line = TrimString(line); // delete trailing \\r and/or \\n\n+    return line;\n+}\n+\n+// Ignores max_read but won't overflow\n+std::string LineReader::ReadLength(size_t len)\n+{\n+    if (len == 0) return \"\";\n+    if (Left() < len) throw std::runtime_error(\"Not enough data in buffer\");\n+    std::string out(reinterpret_cast<const char*>(&(*it)), len);",
      "path": "src/util/string.cpp",
      "position": 33,
      "original_position": 33,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": 2052027205,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "7d30118401 seems to still return a `std::string`:\r\n```\r\n$ git grep ReadLength\r\nsrc/util/string.cpp:  std::string LineReader::ReadLength(size_t len)\r\nsrc/util/string.h:    std::string ReadLength(size_t len);\r\n\r\n```",
      "created_at": "2025-05-03T10:15:31Z",
      "updated_at": "2025-05-03T10:16:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2072365927",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2072365927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2072367360",
      "pull_request_review_id": 2813205684,
      "id": 2072367360,
      "node_id": "PRRC_kwDOABII5857hdEA",
      "diff_hunk": "@@ -781,3 +781,69 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n         pathHandlers.erase(i);\n     }\n }\n+\n+\n+namespace http_bitcoin {\n+std::optional<std::string> HTTPHeaders::Find(const std::string key) const",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "70d003ca1028458bd6573bcd067e234e009f66c9",
      "in_reply_to_id": 2052036849,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `key` & `value` can also be a `string_view` (here and below)",
      "created_at": "2025-05-03T10:23:58Z",
      "updated_at": "2025-05-03T10:23:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2072367360",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2072367360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2081728831",
      "pull_request_review_id": 2828429932,
      "id": 2081728831,
      "node_id": "PRRC_kwDOABII5858FKk_",
      "diff_hunk": "@@ -13,4 +13,42 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n     if (search.empty()) return;\n     in_out = std::regex_replace(in_out, std::regex(search), substitute);\n }\n+\n+LineReader::LineReader(std::span<const std::byte> buffer, size_t max_read)\n+    : start(buffer.begin()), end(buffer.end()), max_read(max_read), it(buffer.begin()) {}\n+\n+std::optional<std::string> LineReader::ReadLine()\n+{\n+    if (it == end) {\n+        return std::nullopt;\n+    }\n+\n+    auto line_start = it;\n+    std::string line{};\n+    while (it != end) {\n+        char c = static_cast<char>(*it);\n+        line += c;\n+        ++it;\n+        if (c == '\\n') break;\n+        if ((size_t)std::distance(line_start, it) >= max_read) throw std::runtime_error(\"max_read exceeded by LineReader\");\n+    }\n+\n+    line = TrimString(line); // delete trailing \\r and/or \\n\n+    return line;\n+}\n+\n+// Ignores max_read but won't overflow\n+std::string LineReader::ReadLength(size_t len)\n+{\n+    if (len == 0) return \"\";\n+    if (Left() < len) throw std::runtime_error(\"Not enough data in buffer\");\n+    std::string out(reinterpret_cast<const char*>(&(*it)), len);",
      "path": "src/util/string.cpp",
      "position": 33,
      "original_position": 33,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": 2052027205,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh I see I misunderstood. For now I want LineReader to return new string objects because it reads directly from the HTTPClient's `m_recv_buffer` which is then erased. I know we can prevent that copy by being more clever with `m_recv_buffer` and I still plan on exploring that, maybe as a follow up? It's nice and simple now and there is a clean separation between the socket layer receiving data and the `HTTPRequest`",
      "created_at": "2025-05-09T13:43:44Z",
      "updated_at": "2025-05-09T13:43:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2081728831",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2081728831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2081732772",
      "pull_request_review_id": 2828437016,
      "id": 2081732772,
      "node_id": "PRRC_kwDOABII5858FLik",
      "diff_hunk": "@@ -13,4 +13,42 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n     if (search.empty()) return;\n     in_out = std::regex_replace(in_out, std::regex(search), substitute);\n }\n+\n+LineReader::LineReader(std::span<const std::byte> buffer, size_t max_read)\n+    : start(buffer.begin()), end(buffer.end()), max_read(max_read), it(buffer.begin()) {}\n+\n+std::optional<std::string> LineReader::ReadLine()\n+{\n+    if (it == end) {\n+        return std::nullopt;\n+    }\n+\n+    auto line_start = it;\n+    std::string line{};\n+    while (it != end) {\n+        char c = static_cast<char>(*it);\n+        line += c;\n+        ++it;\n+        if (c == '\\n') break;\n+        if ((size_t)std::distance(line_start, it) >= max_read) throw std::runtime_error(\"max_read exceeded by LineReader\");\n+    }\n+\n+    line = TrimString(line); // delete trailing \\r and/or \\n\n+    return line;\n+}\n+\n+// Ignores max_read but won't overflow\n+std::string LineReader::ReadLength(size_t len)\n+{\n+    if (len == 0) return \"\";\n+    if (Left() < len) throw std::runtime_error(\"Not enough data in buffer\");\n+    std::string out(reinterpret_cast<const char*>(&(*it)), len);",
      "path": "src/util/string.cpp",
      "position": 33,
      "original_position": 33,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": 2052027205,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sounds good, thanks for the context :)",
      "created_at": "2025-05-09T13:46:06Z",
      "updated_at": "2025-05-09T13:46:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2081732772",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2081732772"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2081736316",
      "pull_request_review_id": 2828443585,
      "id": 2081736316,
      "node_id": "PRRC_kwDOABII5858FMZ8",
      "diff_hunk": "@@ -781,3 +781,69 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n         pathHandlers.erase(i);\n     }\n }\n+\n+\n+namespace http_bitcoin {\n+std::optional<std::string> HTTPHeaders::Find(const std::string key) const",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "70d003ca1028458bd6573bcd067e234e009f66c9",
      "in_reply_to_id": 2052036849,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Cool will address this nit on next rebase thanks!",
      "created_at": "2025-05-09T13:48:16Z",
      "updated_at": "2025-05-09T13:48:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2081736316",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2081736316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2089410867",
      "pull_request_review_id": 2840969740,
      "id": 2089410867,
      "node_id": "PRRC_kwDOABII5858ieEz",
      "diff_hunk": "@@ -781,3 +781,69 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n         pathHandlers.erase(i);\n     }\n }\n+\n+\n+namespace http_bitcoin {\n+std::optional<std::string> HTTPHeaders::Find(const std::string key) const",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "70d003ca1028458bd6573bcd067e234e009f66c9",
      "in_reply_to_id": 2052036849,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Bikeshed, feel free to ignore.\r\n\r\nIt is redundant to have \"http\" in both the namespace and in the class name: `http_bitcoin::HTTPHeaders::Find()`. Also no need to suffix anything with `_bitcoin` - if we would do that, then we would have to have e.g. `namespace common_bitcoin`, `namespace i2p_bitcoin`, `namespace node_bitcoin` etc. So `http_bitcoin::HTTPHeaders::Find()` could be shortened to `http::Headers::Find()`.",
      "created_at": "2025-05-14T17:25:44Z",
      "updated_at": "2025-05-14T17:25:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2089410867",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2089410867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2089484885",
      "pull_request_review_id": 2841090313,
      "id": 2089484885,
      "node_id": "PRRC_kwDOABII5858iwJV",
      "diff_hunk": "@@ -781,3 +781,69 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n         pathHandlers.erase(i);\n     }\n }\n+\n+\n+namespace http_bitcoin {\n+std::optional<std::string> HTTPHeaders::Find(const std::string key) const",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "70d003ca1028458bd6573bcd067e234e009f66c9",
      "in_reply_to_id": 2052036849,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Happy to change the names, I just needed to separate the old libevent server from the new one in the PR in the series of commits where each namespace has classes like `HTTPRequest`",
      "created_at": "2025-05-14T18:09:41Z",
      "updated_at": "2025-05-14T18:09:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2089484885",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2089484885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090504818",
      "pull_request_review_id": 2842608359,
      "id": 2090504818,
      "node_id": "PRRC_kwDOABII5858mpJy",
      "diff_hunk": "@@ -105,5 +106,127 @@ def run_test(self):\n         assert_equal(out1.status, http.client.BAD_REQUEST)\n \n \n+        self.log.info(\"Check pipelining\")\n+        # Requests are responded to in order they were received\n+        # See https://www.rfc-editor.org/rfc/rfc7230#section-6.3.2\n+        tip_height = self.nodes[2].getblockcount()\n+\n+        req = \"POST / HTTP/1.1\\r\\n\"\n+        req += f'Authorization: Basic {str_to_b64str(authpair)}\\r\\n'\n+\n+        # First request will take a long time to process\n+        body1 = f'{{\"method\": \"waitforblockheight\", \"params\": [{tip_height + 1}]}}'\n+        req1 = req\n+        req1 += f'Content-Length: {len(body1)}\\r\\n\\r\\n'\n+        req1 += body1\n+\n+        # Second request will process very fast\n+        body2 = '{\"method\": \"getblockcount\"}'\n+        req2 = req\n+        req2 += f'Content-Length: {len(body2)}\\r\\n\\r\\n'\n+        req2 += body2\n+        # Get the underlying socket from HTTP connection so we can send something unusual\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        sock = conn.sock\n+        sock.settimeout(1)",
      "path": "test/functional/interface_http.py",
      "position": null,
      "original_position": 35,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "1 second timeout to send or receive seems more than enough for local testing on a dev machine. However, CI virtual machines sometimes are surprisingly slow. To avoid unnecessary test failures maybe it would be better to have this be 5 or 10 seconds for the `sendall()` calls and then set to 1 for the `recv()` call which we expect to timeout.",
      "created_at": "2025-05-15T07:41:37Z",
      "updated_at": "2025-05-15T13:57:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2090504818",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090504818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090527952",
      "pull_request_review_id": 2842608359,
      "id": 2090527952,
      "node_id": "PRRC_kwDOABII5858muzQ",
      "diff_hunk": "@@ -105,5 +106,127 @@ def run_test(self):\n         assert_equal(out1.status, http.client.BAD_REQUEST)\n \n \n+        self.log.info(\"Check pipelining\")\n+        # Requests are responded to in order they were received\n+        # See https://www.rfc-editor.org/rfc/rfc7230#section-6.3.2\n+        tip_height = self.nodes[2].getblockcount()\n+\n+        req = \"POST / HTTP/1.1\\r\\n\"\n+        req += f'Authorization: Basic {str_to_b64str(authpair)}\\r\\n'\n+\n+        # First request will take a long time to process\n+        body1 = f'{{\"method\": \"waitforblockheight\", \"params\": [{tip_height + 1}]}}'\n+        req1 = req\n+        req1 += f'Content-Length: {len(body1)}\\r\\n\\r\\n'\n+        req1 += body1\n+\n+        # Second request will process very fast\n+        body2 = '{\"method\": \"getblockcount\"}'\n+        req2 = req\n+        req2 += f'Content-Length: {len(body2)}\\r\\n\\r\\n'\n+        req2 += body2\n+        # Get the underlying socket from HTTP connection so we can send something unusual\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        sock = conn.sock\n+        sock.settimeout(1)\n+        # Send two requests in a row. The first will block the second indefinitely\n+        sock.sendall(req1.encode(\"utf-8\"))\n+        sock.sendall(req2.encode(\"utf-8\"))\n+        try:\n+            # The server should not respond to the fast, second request\n+            # until the (very) slow first request has been handled:\n+            res = sock.recv(1024)\n+            assert not res",
      "path": "test/functional/interface_http.py",
      "position": null,
      "original_position": 43,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Shouldn't this be `assert False`? Here the expectation is that the `recv()` will throw an exception due to timeout.\r\n\r\nhttps://docs.python.org/3/library/socket.html#socket.socket.recv\r\n> A returned empty bytes object indicates that the client has disconnected.\r\n\r\nAn \"empty bytes object\" will not trigger the assert `assert not res` but if that happens (= disconnect) then the test should fail.\r\n\r\nsuggestion:\r\n```diff\r\n-            assert not res\r\n+            assert False\r\n```",
      "created_at": "2025-05-15T07:53:04Z",
      "updated_at": "2025-05-20T13:35:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2090527952",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090527952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090840593",
      "pull_request_review_id": 2842608359,
      "id": 2090840593,
      "node_id": "PRRC_kwDOABII5858n7IR",
      "diff_hunk": "@@ -105,5 +106,127 @@ def run_test(self):\n         assert_equal(out1.status, http.client.BAD_REQUEST)\n \n \n+        self.log.info(\"Check pipelining\")\n+        # Requests are responded to in order they were received\n+        # See https://www.rfc-editor.org/rfc/rfc7230#section-6.3.2\n+        tip_height = self.nodes[2].getblockcount()\n+\n+        req = \"POST / HTTP/1.1\\r\\n\"\n+        req += f'Authorization: Basic {str_to_b64str(authpair)}\\r\\n'\n+\n+        # First request will take a long time to process\n+        body1 = f'{{\"method\": \"waitforblockheight\", \"params\": [{tip_height + 1}]}}'\n+        req1 = req\n+        req1 += f'Content-Length: {len(body1)}\\r\\n\\r\\n'\n+        req1 += body1\n+\n+        # Second request will process very fast\n+        body2 = '{\"method\": \"getblockcount\"}'\n+        req2 = req\n+        req2 += f'Content-Length: {len(body2)}\\r\\n\\r\\n'\n+        req2 += body2\n+        # Get the underlying socket from HTTP connection so we can send something unusual\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        sock = conn.sock\n+        sock.settimeout(1)\n+        # Send two requests in a row. The first will block the second indefinitely\n+        sock.sendall(req1.encode(\"utf-8\"))\n+        sock.sendall(req2.encode(\"utf-8\"))\n+        try:\n+            # The server should not respond to the fast, second request\n+            # until the (very) slow first request has been handled:\n+            res = sock.recv(1024)\n+            assert not res\n+        except TimeoutError:\n+            pass\n+\n+        # Use a separate http connection to generate a block\n+        self.generate(self.nodes[2], 1, sync_fun=self.no_op)\n+\n+        # Wait for two responses to be received\n+        res = b\"\"\n+        while res.count(b\"result\") != 2:\n+            res += sock.recv(1024)\n+\n+        # waitforblockheight was responded to first, and then getblockcount\n+        # which includes the block added after the request was made\n+        chunks = res.split(b'\"result\":')\n+        assert chunks[1].startswith(b'{\"hash\":')\n+        assert chunks[2].startswith(bytes(f'{tip_height + 1}', 'utf8'))\n+\n+\n+        self.log.info(\"Check HTTP request encoded with chunked transfer\")\n+        headers_chunked = headers.copy()\n+        headers_chunked.update({\"Transfer-encoding\": \"chunked\"})\n+        body_chunked = [\n+            b'{\"method\": \"submitblock\", \"params\": [\"',\n+            b'0A' * 1000000,\n+            b'0B' * 1000000,\n+            b'0C' * 1000000,\n+            b'0D' * 1000000,\n+            b'\"]}'\n+        ]\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        conn.request(\n+            method='POST',\n+            url='/',\n+            body=iter(body_chunked),\n+            headers=headers_chunked,\n+            encode_chunked=True)\n+        out1 = conn.getresponse().read()\n+        assert out1 == b'{\"result\":\"high-hash\",\"error\":null}\\n'\n+\n+\n+        self.log.info(\"Check -rpcservertimeout\")\n+        # The test framework typically reuses a single persistent HTTP connection\n+        # for all RPCs to a TestNode. Because we are setting -rpcservertimeout\n+        # so low on this one node, its connection will quickly timeout and get dropped by\n+        # the server. Negating this setting will force the AuthServiceProxy\n+        # for this node to create a fresh new HTTP connection for every command\n+        # called for the remainder of this test.\n+        self.nodes[2].reuse_http_connections = False\n+\n+        self.restart_node(2, extra_args=[\"-rpcservertimeout=1\"])\n+        # This is the amount of time the server will wait for a client to\n+        # send a complete request. Test it by sending an incomplete but\n+        # so-far otherwise well-formed HTTP request, and never finishing it.\n+\n+        # Copied from http_incomplete_test_() in regress_http.c in libevent.\n+        # A complete request would have an additional \"\\r\\n\" at the end.\n+        http_request = \"GET /test1 HTTP/1.1\\r\\nHost: somehost\\r\\n\"\n+\n+        # Get the underlying socket from HTTP connection so we can send something unusual\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        sock = conn.sock\n+        sock.sendall(http_request.encode(\"utf-8\"))\n+        # Wait for response, but expect a timeout disconnection after 1 second\n+        start = time.time()\n+        res = sock.recv(1024)\n+        stop = time.time()\n+        assert res == b\"\"\n+        assert stop - start >= 1\n+        # definitely closed\n+        try:\n+            conn.request('GET', '/')\n+            conn.getresponse()\n+        #       macos/linux           windows\n+        except (ConnectionResetError, ConnectionAbortedError):\n+            pass",
      "path": "test/functional/interface_http.py",
      "position": null,
      "original_position": 120,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This will also pass if no exception is thrown. Either add `assert False` after line 214 or have a boolean variable to false before the `try` and set it to true inside `except` and assert that it is true afterwards.",
      "created_at": "2025-05-15T10:21:00Z",
      "updated_at": "2025-05-15T13:57:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2090840593",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090840593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": 211,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090912262",
      "pull_request_review_id": 2842608359,
      "id": 2090912262,
      "node_id": "PRRC_kwDOABII5858oMoG",
      "diff_hunk": "@@ -105,5 +106,127 @@ def run_test(self):\n         assert_equal(out1.status, http.client.BAD_REQUEST)\n \n \n+        self.log.info(\"Check pipelining\")\n+        # Requests are responded to in order they were received\n+        # See https://www.rfc-editor.org/rfc/rfc7230#section-6.3.2\n+        tip_height = self.nodes[2].getblockcount()\n+\n+        req = \"POST / HTTP/1.1\\r\\n\"\n+        req += f'Authorization: Basic {str_to_b64str(authpair)}\\r\\n'\n+\n+        # First request will take a long time to process\n+        body1 = f'{{\"method\": \"waitforblockheight\", \"params\": [{tip_height + 1}]}}'\n+        req1 = req\n+        req1 += f'Content-Length: {len(body1)}\\r\\n\\r\\n'\n+        req1 += body1\n+\n+        # Second request will process very fast\n+        body2 = '{\"method\": \"getblockcount\"}'\n+        req2 = req\n+        req2 += f'Content-Length: {len(body2)}\\r\\n\\r\\n'\n+        req2 += body2\n+        # Get the underlying socket from HTTP connection so we can send something unusual\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        sock = conn.sock\n+        sock.settimeout(1)\n+        # Send two requests in a row. The first will block the second indefinitely\n+        sock.sendall(req1.encode(\"utf-8\"))\n+        sock.sendall(req2.encode(\"utf-8\"))\n+        try:\n+            # The server should not respond to the fast, second request\n+            # until the (very) slow first request has been handled:\n+            res = sock.recv(1024)\n+            assert not res\n+        except TimeoutError:\n+            pass\n+\n+        # Use a separate http connection to generate a block\n+        self.generate(self.nodes[2], 1, sync_fun=self.no_op)\n+\n+        # Wait for two responses to be received\n+        res = b\"\"\n+        while res.count(b\"result\") != 2:\n+            res += sock.recv(1024)\n+\n+        # waitforblockheight was responded to first, and then getblockcount\n+        # which includes the block added after the request was made\n+        chunks = res.split(b'\"result\":')\n+        assert chunks[1].startswith(b'{\"hash\":')\n+        assert chunks[2].startswith(bytes(f'{tip_height + 1}', 'utf8'))\n+\n+\n+        self.log.info(\"Check HTTP request encoded with chunked transfer\")\n+        headers_chunked = headers.copy()\n+        headers_chunked.update({\"Transfer-encoding\": \"chunked\"})\n+        body_chunked = [\n+            b'{\"method\": \"submitblock\", \"params\": [\"',\n+            b'0A' * 1000000,\n+            b'0B' * 1000000,\n+            b'0C' * 1000000,\n+            b'0D' * 1000000,\n+            b'\"]}'\n+        ]",
      "path": "test/functional/interface_http.py",
      "position": null,
      "original_position": 72,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is the intention here to send 8MB of data?",
      "created_at": "2025-05-15T11:02:30Z",
      "updated_at": "2025-05-15T13:57:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2090912262",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090912262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": 162,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090917556",
      "pull_request_review_id": 2842608359,
      "id": 2090917556,
      "node_id": "PRRC_kwDOABII5858oN60",
      "diff_hunk": "@@ -105,5 +106,127 @@ def run_test(self):\n         assert_equal(out1.status, http.client.BAD_REQUEST)\n \n \n+        self.log.info(\"Check pipelining\")\n+        # Requests are responded to in order they were received\n+        # See https://www.rfc-editor.org/rfc/rfc7230#section-6.3.2\n+        tip_height = self.nodes[2].getblockcount()\n+\n+        req = \"POST / HTTP/1.1\\r\\n\"\n+        req += f'Authorization: Basic {str_to_b64str(authpair)}\\r\\n'\n+\n+        # First request will take a long time to process\n+        body1 = f'{{\"method\": \"waitforblockheight\", \"params\": [{tip_height + 1}]}}'\n+        req1 = req\n+        req1 += f'Content-Length: {len(body1)}\\r\\n\\r\\n'\n+        req1 += body1\n+\n+        # Second request will process very fast\n+        body2 = '{\"method\": \"getblockcount\"}'\n+        req2 = req\n+        req2 += f'Content-Length: {len(body2)}\\r\\n\\r\\n'\n+        req2 += body2\n+        # Get the underlying socket from HTTP connection so we can send something unusual\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        sock = conn.sock\n+        sock.settimeout(1)\n+        # Send two requests in a row. The first will block the second indefinitely\n+        sock.sendall(req1.encode(\"utf-8\"))\n+        sock.sendall(req2.encode(\"utf-8\"))\n+        try:\n+            # The server should not respond to the fast, second request\n+            # until the (very) slow first request has been handled:\n+            res = sock.recv(1024)\n+            assert not res\n+        except TimeoutError:\n+            pass\n+\n+        # Use a separate http connection to generate a block\n+        self.generate(self.nodes[2], 1, sync_fun=self.no_op)\n+\n+        # Wait for two responses to be received\n+        res = b\"\"\n+        while res.count(b\"result\") != 2:\n+            res += sock.recv(1024)\n+\n+        # waitforblockheight was responded to first, and then getblockcount\n+        # which includes the block added after the request was made\n+        chunks = res.split(b'\"result\":')\n+        assert chunks[1].startswith(b'{\"hash\":')\n+        assert chunks[2].startswith(bytes(f'{tip_height + 1}', 'utf8'))\n+\n+\n+        self.log.info(\"Check HTTP request encoded with chunked transfer\")\n+        headers_chunked = headers.copy()\n+        headers_chunked.update({\"Transfer-encoding\": \"chunked\"})\n+        body_chunked = [\n+            b'{\"method\": \"submitblock\", \"params\": [\"',\n+            b'0A' * 1000000,\n+            b'0B' * 1000000,\n+            b'0C' * 1000000,\n+            b'0D' * 1000000,\n+            b'\"]}'\n+        ]\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        conn.request(\n+            method='POST',\n+            url='/',\n+            body=iter(body_chunked),\n+            headers=headers_chunked,\n+            encode_chunked=True)\n+        out1 = conn.getresponse().read()\n+        assert out1 == b'{\"result\":\"high-hash\",\"error\":null}\\n'",
      "path": "test/functional/interface_http.py",
      "position": null,
      "original_position": 82,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Here and elsewhere in the added tests, `assert_equal()` produces a better error message:\r\n\r\n`assert` (value of `out1` is not printed):\r\n```\r\n    assert out1 == b'{\"result\":\"high-hash\",\"error\":null}\\n'\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAssertionError\r\n```\r\n\r\nvs\r\n\r\n`assert_equal()`:\r\n```\r\nAssertionError: not(b'{\"result\":null,\"error\":{\"code\":-32700,\"message\":\"Parse error\"},\"id\":null}\\n' == b'{\"result\":\"high-hash\",\"error\":null}\\n')\r\n```",
      "created_at": "2025-05-15T11:05:49Z",
      "updated_at": "2025-05-15T13:57:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2090917556",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090917556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091083332",
      "pull_request_review_id": 2842608359,
      "id": 2091083332,
      "node_id": "PRRC_kwDOABII5858o2ZE",
      "diff_hunk": "@@ -1045,6 +1052,26 @@ BOOST_AUTO_TEST_CASE(test_ParseUInt64)\n     BOOST_CHECK(!ParseUInt64(\"-1234\", &n));\n }\n \n+BOOST_AUTO_TEST_CASE(test_ParseUInt64Hex)\n+{\n+    uint64_t n;\n+    // Valid values\n+    BOOST_CHECK(ParseUInt64Hex(\"1234\", nullptr));\n+    BOOST_CHECK(ParseUInt64Hex(\"1234\", &n) && n == 4660);\n+    BOOST_CHECK(ParseUInt64Hex(\"a\", &n) && n == 10);\n+    BOOST_CHECK(ParseUInt64Hex(\"0000000a\", &n) && n == 10);\n+    BOOST_CHECK(ParseUInt64Hex(\"100\", &n) && n == 256);\n+    BOOST_CHECK(ParseUInt64Hex(\"DEADbeef\", &n) && n == 3735928559);\n+    BOOST_CHECK(ParseUInt64Hex(\"FfFfFfFf\", &n) && n == 4294967295);\n+    // Invalid values\n+    BOOST_CHECK(!ParseUInt64Hex(\"123456789\", &n));\n+    BOOST_CHECK(!ParseUInt64Hex(\"\", &n));\n+    BOOST_CHECK(!ParseUInt64Hex(\"-1\", &n));\n+    BOOST_CHECK(!ParseUInt64Hex(\"10 00\", &n));\n+    BOOST_CHECK(!ParseUInt64Hex(\"1 \", &n));\n+    BOOST_CHECK(!ParseUInt64Hex(\"0xAB\", &n));\n+}",
      "path": "src/test/util_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Add some more test cases and avoid `BOOST_CHECK(A && B)` because when that fails it is unclear which one of `A` or `B` was false. Prefer `BOOST_CHECK(A); BOOST_CHECK(B);`. Also, because `B` is `n == 123`, do `BOOST_CHECK_EQUAL(n, 123)`:\r\n\r\n```cpp\r\nBOOST_AUTO_TEST_CASE(test_ParseUInt64Hex)\r\n{\r\n    uint64_t n;\r\n    // Valid values\r\n    BOOST_CHECK(ParseUInt64Hex(\"1234\", nullptr));\r\n    BOOST_CHECK(ParseUInt64Hex(\"1234\", &n));\r\n    BOOST_CHECK_EQUAL(n, 0x1234);\r\n    BOOST_CHECK(ParseUInt64Hex(\"a\", &n));\r\n    BOOST_CHECK_EQUAL(n, 0xA);\r\n    BOOST_CHECK(ParseUInt64Hex(\"0000000a\", &n));\r\n    BOOST_CHECK_EQUAL(n, 0xA);\r\n    BOOST_CHECK(ParseUInt64Hex(\"100\", &n));\r\n    BOOST_CHECK_EQUAL(n, 0x100);\r\n    BOOST_CHECK(ParseUInt64Hex(\"DEADbeef\", &n));\r\n    BOOST_CHECK_EQUAL(n, 0xDEADbeef);\r\n    BOOST_CHECK(ParseUInt64Hex(\"FfFfFfFf\", &n));\r\n    BOOST_CHECK_EQUAL(n, 0xFfFfFfFf);\r\n    BOOST_CHECK(ParseUInt64Hex(\"123456789\", &n));                                      \r\n    BOOST_CHECK_EQUAL(n, 0x123456789ULL);\r\n    BOOST_CHECK(ParseUInt64Hex(\"0\", &n));\r\n    BOOST_CHECK_EQUAL(n, 0);\r\n    BOOST_CHECK(ParseUInt64Hex(\"FfFfFfFfFfFfFfFf\", &n));\r\n    BOOST_CHECK_EQUAL(n, 0xFfFfFfFfFfFfFfFfULL);\r\n    // Invalid values\r\n    BOOST_CHECK(!ParseUInt64Hex(\"\", &n));\r\n    BOOST_CHECK(!ParseUInt64Hex(\"-1\", &n));\r\n    BOOST_CHECK(!ParseUInt64Hex(\"10 00\", &n));\r\n    BOOST_CHECK(!ParseUInt64Hex(\"1 \", &n));\r\n    BOOST_CHECK(!ParseUInt64Hex(\"0xAB\", &n));\r\n    BOOST_CHECK(!ParseUInt64Hex(\"FfFfFfFfFfFfFfFf0\", &n));\r\n}\r\n```",
      "created_at": "2025-05-15T12:41:18Z",
      "updated_at": "2025-05-15T13:57:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2091083332",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091083332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": 1055,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 881,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091093913",
      "pull_request_review_id": 2842608359,
      "id": 2091093913,
      "node_id": "PRRC_kwDOABII5858o4-Z",
      "diff_hunk": "@@ -251,6 +251,24 @@ bool ParseUInt64(std::string_view str, uint64_t* out)\n     return ParseIntegral<uint64_t>(str, out);\n }\n \n+bool ParseUInt64Hex(std::string_view str, uint64_t* out)\n+{\n+    if (str.size() > 8) return false;\n+    if (str.size() < 1) return false;\n+    uint64_t total{0};\n+    auto it = str.begin();\n+    while (it != str.end()) {\n+        auto v = HexDigit(*(it++));\n+        if (v < 0) return false;\n+        total <<= 4;\n+        total |= v;\n+    }\n+    if (out != nullptr) {\n+        *out = total;\n+    }\n+    return true;\n+}",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This would not recognize numbers larger than `FFFFFFFF` (4 bytes, 8 chars). That should be `if (str.size() > 16) return false;` instead of `8`.\r\n\r\nBut better not roll our own and use `std::from_chars()` like the others:\r\n\r\n<details>\r\n<summary>[patch] Use ParseIntegral() which uses std::from_chars(), like the other Parse*() functions</summary>\r\n\r\n```diff\r\ndiff --git i/src/util/strencodings.cpp w/src/util/strencodings.cpp\r\nindex d923bdd121..05a5dced62 100644\r\n--- i/src/util/strencodings.cpp\r\n+++ w/src/util/strencodings.cpp\r\n@@ -199,21 +199,21 @@ std::optional<std::vector<unsigned char>> DecodeBase32(std::string_view str)\r\n \r\n     return ret;\r\n }\r\n \r\n namespace {\r\n template <typename T>\r\n-bool ParseIntegral(std::string_view str, T* out)\r\n+bool ParseIntegral(std::string_view str, T* out, size_t base = 10)\r\n {\r\n     static_assert(std::is_integral_v<T>);\r\n     // Replicate the exact behavior of strtol/strtoll/strtoul/strtoull when\r\n     // handling leading +/- for backwards compatibility.\r\n     if (str.length() >= 2 && str[0] == '+' && str[1] == '-') {\r\n         return false;\r\n     }\r\n-    const std::optional<T> opt_int = ToIntegral<T>((!str.empty() && str[0] == '+') ? str.substr(1) : str);\r\n+    const std::optional<T> opt_int = ToIntegral<T>((!str.empty() && str[0] == '+') ? str.substr(1) : str, base);\r\n     if (!opt_int) {\r\n         return false;\r\n     }\r\n     if (out != nullptr) {\r\n         *out = *opt_int;\r\n     }\r\n@@ -250,26 +250,13 @@ bool ParseUInt64(std::string_view str, uint64_t* out)\r\n {\r\n     return ParseIntegral<uint64_t>(str, out);\r\n }\r\n \r\n bool ParseUInt64Hex(std::string_view str, uint64_t* out)\r\n {\r\n-    if (str.size() > 8) return false;\r\n-    if (str.size() < 1) return false;\r\n-    uint64_t total{0};\r\n-    auto it = str.begin();\r\n-    while (it != str.end()) {\r\n-        auto v = HexDigit(*(it++));\r\n-        if (v < 0) return false;\r\n-        total <<= 4;\r\n-        total |= v;\r\n-    }\r\n-    if (out != nullptr) {\r\n-        *out = total;\r\n-    }\r\n-    return true;\r\n+    return ParseIntegral<uint64_t>(str, out, 16);\r\n }\r\n \r\n std::string FormatParagraph(std::string_view in, size_t width, size_t indent)\r\n {\r\n     assert(width >= indent);\r\n     std::stringstream out;\r\ndiff --git i/src/util/strencodings.h w/src/util/strencodings.h\r\nindex b95b21dafd..d83fa3c841 100644\r\n--- i/src/util/strencodings.h\r\n+++ w/src/util/strencodings.h\r\n@@ -173,17 +173,17 @@ constexpr inline bool IsSpace(char c) noexcept {\r\n  * is `-?[0-9]+`. The minus sign is only permitted for signed integer types.\r\n  *\r\n  * @returns std::nullopt if the entire string could not be parsed, or if the\r\n  *   parsed value is not in the range representable by the type T.\r\n  */\r\n template <typename T>\r\n-std::optional<T> ToIntegral(std::string_view str)\r\n+std::optional<T> ToIntegral(std::string_view str, size_t base = 10)\r\n {\r\n     static_assert(std::is_integral_v<T>);\r\n     T result;\r\n-    const auto [first_nonmatching, error_condition] = std::from_chars(str.data(), str.data() + str.size(), result);\r\n+    const auto [first_nonmatching, error_condition] = std::from_chars(str.data(), str.data() + str.size(), result, base);\r\n     if (first_nonmatching != str.data() + str.size() || error_condition != std::errc{}) {\r\n         return std::nullopt;\r\n     }\r\n     return result;\r\n }\r\n \r\n```",
      "created_at": "2025-05-15T12:46:52Z",
      "updated_at": "2025-05-15T13:57:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2091093913",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091093913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": 254,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092931817",
      "pull_request_review_id": 2846448811,
      "id": 2092931817,
      "node_id": "PRRC_kwDOABII5858v5rp",
      "diff_hunk": "@@ -116,6 +119,20 @@ std::optional<int64_t> ParseISO8601DateTime(std::string_view str)\n     return int64_t{TicksSinceEpoch<std::chrono::seconds>(tp)};\n }\n \n+std::string FormatRFC7231DateTime(int64_t nTime)\n+{\n+    const std::chrono::sys_seconds secs{std::chrono::seconds{nTime}};\n+    const auto days{std::chrono::floor<std::chrono::days>(secs)};\n+    // 1970-01-01 was a Thursday\n+    std::string_view weekday{weekdays[(days.time_since_epoch().count() + 4) % 7]};",
      "path": "src/util/time.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Passing `-1717429609` would make this code try to access `weekdays[-1]` :fire: \r\n\r\nFor modern style, better use `std::array` instead of C arrays and, more importantly, use the array's `at()` method which has boundary checks, just in case. Here is a change that adds some more tests and fixes the out-of-bounds access:\r\n\r\n<details>\r\n<summary>[patch] FormatRFC7231DateTime()</summary>\r\n\r\n```diff\r\ndiff --git i/src/test/util_tests.cpp w/src/test/util_tests.cpp\r\nindex 387493152d..ebb40dd713 100644\r\n--- i/src/test/util_tests.cpp\r\n+++ w/src/test/util_tests.cpp\r\n@@ -384,15 +384,23 @@ BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)\r\n     BOOST_CHECK_EQUAL(FormatISO8601Date(0), \"1970-01-01\");\r\n     BOOST_CHECK_EQUAL(FormatISO8601Date(1317425777), \"2011-09-30\");\r\n }\r\n \r\n BOOST_AUTO_TEST_CASE(util_FormatRFC7231DateTime)\r\n {\r\n+    BOOST_CHECK_EQUAL(FormatRFC7231DateTime(std::numeric_limits<int64_t>::max()), \"\");\r\n+    BOOST_CHECK_EQUAL(FormatRFC7231DateTime(253402300800), \"\");\r\n+    BOOST_CHECK_EQUAL(FormatRFC7231DateTime(253402300799), \"Fri, 31 Dec 9999 23:59:59 GMT\");\r\n     BOOST_CHECK_EQUAL(FormatRFC7231DateTime(253402214400), \"Fri, 31 Dec 9999 00:00:00 GMT\");\r\n     BOOST_CHECK_EQUAL(FormatRFC7231DateTime(1717429609), \"Mon, 03 Jun 2024 15:46:49 GMT\");\r\n     BOOST_CHECK_EQUAL(FormatRFC7231DateTime(0), \"Thu, 01 Jan 1970 00:00:00 GMT\");\r\n+    BOOST_CHECK_EQUAL(FormatRFC7231DateTime(-1), \"Wed, 31 Dec 1969 23:59:59 GMT\");\r\n+    BOOST_CHECK_EQUAL(FormatRFC7231DateTime(-1717429609), \"Sat, 31 Jul 1915 08:13:11 GMT\");\r\n+    BOOST_CHECK_EQUAL(FormatRFC7231DateTime(-62167219200), \"Sat, 01 Jan 0000 00:00:00 GMT\");\r\n+    BOOST_CHECK_EQUAL(FormatRFC7231DateTime(-62167219201), \"\");\r\n+    BOOST_CHECK_EQUAL(FormatRFC7231DateTime(std::numeric_limits<int64_t>::min()), \"\");\r\n }\r\n \r\n BOOST_AUTO_TEST_CASE(util_FormatMoney)\r\n {\r\n     BOOST_CHECK_EQUAL(FormatMoney(0), \"0.00\");\r\n     BOOST_CHECK_EQUAL(FormatMoney((COIN/10000)*123456789), \"12345.6789\");\r\ndiff --git i/src/util/time.cpp w/src/util/time.cpp\r\nindex 9b9167d19a..c0f375956a 100644\r\n--- i/src/util/time.cpp\r\n+++ w/src/util/time.cpp\r\n@@ -7,21 +7,22 @@\r\n \r\n #include <compat/compat.h>\r\n #include <tinyformat.h>\r\n #include <util/check.h>\r\n #include <util/strencodings.h>\r\n \r\n+#include <array>\r\n #include <atomic>\r\n #include <chrono>\r\n #include <optional>\r\n #include <string>\r\n #include <string_view>\r\n #include <thread>\r\n \r\n-static const std::string weekdays[7] = {\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"};\r\n-static const std::string months[12] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\r\n+static constexpr std::array<std::string_view, 7> weekdays{\"Thu\", \"Fri\", \"Sat\", \"Sun\", \"Mon\", \"Tue\", \"Wed\"}; // 1970-01-01 was a Thursday.\r\n+static constexpr std::array<std::string_view, 12> months{\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\r\n \r\n void UninterruptibleSleep(const std::chrono::microseconds& n) { std::this_thread::sleep_for(n); }\r\n \r\n static std::atomic<std::chrono::seconds> g_mock_time{}; //!< For testing\r\n std::atomic<bool> g_used_system_time{false};\r\n static std::atomic<std::chrono::milliseconds> g_mock_steady_time{}; //!< For testing\r\n@@ -116,20 +117,24 @@ std::optional<int64_t> ParseISO8601DateTime(std::string_view str)\r\n     }\r\n     const auto time{std::chrono::hours{*hour} + std::chrono::minutes{*min} + std::chrono::seconds{*sec}};\r\n     const auto tp{std::chrono::sys_days{ymd} + time};\r\n     return int64_t{TicksSinceEpoch<std::chrono::seconds>(tp)};\r\n }\r\n \r\n-std::string FormatRFC7231DateTime(int64_t nTime)\r\n+std::string FormatRFC7231DateTime(int64_t time)\r\n {\r\n-    const std::chrono::sys_seconds secs{std::chrono::seconds{nTime}};\r\n+    if (time < -62167219200 || 253402300799 < time) {\r\n+        // RFC7231 mandates 4-digit year, so only support years 0 to 9999\r\n+        return \"\";\r\n+    }\r\n+    const std::chrono::sys_seconds secs{std::chrono::seconds{time}};\r\n     const auto days{std::chrono::floor<std::chrono::days>(secs)};\r\n-    // 1970-01-01 was a Thursday\r\n-    std::string_view weekday{weekdays[(days.time_since_epoch().count() + 4) % 7]};\r\n+    const auto w{days.time_since_epoch().count() % 7}; // will be in the range [-6, 6]\r\n+    std::string_view weekday{weekdays.at(w >= 0 ? w : w + 7)};\r\n     const std::chrono::year_month_day ymd{days};\r\n-    std::string_view month{months[unsigned{ymd.month()} - 1]};\r\n+    std::string_view month{months.at(unsigned{ymd.month()} - 1)};\r\n     const std::chrono::hh_mm_ss hms{secs - days};\r\n     // examples: Mon, 27 Jul 2009 12:28:53 GMT\r\n     //           Fri, 31 May 2024 19:18:04 GMT\r\n     return strprintf(\"%03s, %02u %03s %04i %02i:%02i:%02i GMT\", weekday, unsigned{ymd.day()}, month, signed{ymd.year()}, hms.hours().count(), hms.minutes().count(), hms.seconds().count());\r\n }\r\n \r\n```\r\n</details>",
      "created_at": "2025-05-16T12:13:51Z",
      "updated_at": "2025-05-16T14:44:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2092931817",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2092931817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093076600",
      "pull_request_review_id": 2846448811,
      "id": 2093076600,
      "node_id": "PRRC_kwDOABII5858wdB4",
      "diff_hunk": "@@ -417,361 +286,708 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n     queue->Run();\n }\n \n-/** libevent event log callback */\n-static void libevent_log_cb(int severity, const char *msg)\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n {\n-    BCLog::Level level;\n-    switch (severity) {\n-    case EVENT_LOG_DEBUG:\n-        level = BCLog::Level::Debug;\n-        break;\n-    case EVENT_LOG_MSG:\n-        level = BCLog::Level::Info;\n-        break;\n-    case EVENT_LOG_WARN:\n-        level = BCLog::Level::Warning;\n-        break;\n-    default: // EVENT_LOG_ERR and others are mapped to error\n-        level = BCLog::Level::Error;\n-        break;\n+    LogDebug(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+    LOCK(g_httppathhandlers_mutex);\n+    pathHandlers.emplace_back(prefix, exactMatch, handler);\n+}\n+\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+{\n+    LOCK(g_httppathhandlers_mutex);\n+    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i)\n+        if (i->prefix == prefix && i->exactMatch == exactMatch)\n+            break;\n+    if (i != iend)\n+    {\n+        LogDebug(BCLog::HTTP, \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+        pathHandlers.erase(i);\n     }\n-    LogPrintLevel(BCLog::LIBEVENT, level, \"%s\\n\", msg);\n }\n \n-bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+namespace http_bitcoin {\n+using util::Split;\n+\n+std::optional<std::string_view> HTTPHeaders::Find(const std::string key) const",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 307,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "e95c6f5b6511ae35141b1e440e1f22e1004d3de6\r\n\r\nCopying strings is expensive:\r\n\r\n```suggestion\r\nstd::optional<std::string_view> HTTPHeaders::Find(const std::string& key) const\r\n```",
      "created_at": "2025-05-16T13:40:37Z",
      "updated_at": "2025-05-16T14:44:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2093076600",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093076600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093078641",
      "pull_request_review_id": 2846448811,
      "id": 2093078641,
      "node_id": "PRRC_kwDOABII5858wdhx",
      "diff_hunk": "@@ -417,361 +286,708 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n     queue->Run();\n }\n \n-/** libevent event log callback */\n-static void libevent_log_cb(int severity, const char *msg)\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n {\n-    BCLog::Level level;\n-    switch (severity) {\n-    case EVENT_LOG_DEBUG:\n-        level = BCLog::Level::Debug;\n-        break;\n-    case EVENT_LOG_MSG:\n-        level = BCLog::Level::Info;\n-        break;\n-    case EVENT_LOG_WARN:\n-        level = BCLog::Level::Warning;\n-        break;\n-    default: // EVENT_LOG_ERR and others are mapped to error\n-        level = BCLog::Level::Error;\n-        break;\n+    LogDebug(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+    LOCK(g_httppathhandlers_mutex);\n+    pathHandlers.emplace_back(prefix, exactMatch, handler);\n+}\n+\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+{\n+    LOCK(g_httppathhandlers_mutex);\n+    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i)\n+        if (i->prefix == prefix && i->exactMatch == exactMatch)\n+            break;\n+    if (i != iend)\n+    {\n+        LogDebug(BCLog::HTTP, \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+        pathHandlers.erase(i);\n     }\n-    LogPrintLevel(BCLog::LIBEVENT, level, \"%s\\n\", msg);\n }\n \n-bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+namespace http_bitcoin {\n+using util::Split;\n+\n+std::optional<std::string_view> HTTPHeaders::Find(const std::string key) const\n {\n-    if (!InitHTTPAllowList())\n-        return false;\n+    const auto it = m_map.find(key);\n+    if (it == m_map.end()) return std::nullopt;\n+    return std::string_view(it->second);\n+}\n \n-    // Redirect libevent's logging to our own log\n-    event_set_log_callback(&libevent_log_cb);\n-    // Update libevent's log handling.\n-    UpdateHTTPServerLogging(LogInstance().WillLogCategory(BCLog::LIBEVENT));\n+void HTTPHeaders::Write(const std::string key, const std::string value)",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 320,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nvoid HTTPHeaders::Write(const std::string& key, const std::string& value)\r\n```",
      "created_at": "2025-05-16T13:41:41Z",
      "updated_at": "2025-05-16T14:44:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2093078641",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093078641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093081846",
      "pull_request_review_id": 2846448811,
      "id": 2093081846,
      "node_id": "PRRC_kwDOABII5858weT2",
      "diff_hunk": "@@ -417,361 +286,708 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n     queue->Run();\n }\n \n-/** libevent event log callback */\n-static void libevent_log_cb(int severity, const char *msg)\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n {\n-    BCLog::Level level;\n-    switch (severity) {\n-    case EVENT_LOG_DEBUG:\n-        level = BCLog::Level::Debug;\n-        break;\n-    case EVENT_LOG_MSG:\n-        level = BCLog::Level::Info;\n-        break;\n-    case EVENT_LOG_WARN:\n-        level = BCLog::Level::Warning;\n-        break;\n-    default: // EVENT_LOG_ERR and others are mapped to error\n-        level = BCLog::Level::Error;\n-        break;\n+    LogDebug(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+    LOCK(g_httppathhandlers_mutex);\n+    pathHandlers.emplace_back(prefix, exactMatch, handler);\n+}\n+\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+{\n+    LOCK(g_httppathhandlers_mutex);\n+    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i)\n+        if (i->prefix == prefix && i->exactMatch == exactMatch)\n+            break;\n+    if (i != iend)\n+    {\n+        LogDebug(BCLog::HTTP, \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+        pathHandlers.erase(i);\n     }\n-    LogPrintLevel(BCLog::LIBEVENT, level, \"%s\\n\", msg);\n }\n \n-bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+namespace http_bitcoin {\n+using util::Split;\n+\n+std::optional<std::string_view> HTTPHeaders::Find(const std::string key) const\n {\n-    if (!InitHTTPAllowList())\n-        return false;\n+    const auto it = m_map.find(key);\n+    if (it == m_map.end()) return std::nullopt;\n+    return std::string_view(it->second);\n+}\n \n-    // Redirect libevent's logging to our own log\n-    event_set_log_callback(&libevent_log_cb);\n-    // Update libevent's log handling.\n-    UpdateHTTPServerLogging(LogInstance().WillLogCategory(BCLog::LIBEVENT));\n+void HTTPHeaders::Write(const std::string key, const std::string value)\n+{\n+    // If present, append value to list\n+    const auto existing_value = Find(key);\n+    if (existing_value) {\n+        m_map[key] = std::string(existing_value.value()) + \", \" + value;\n+    } else {\n+        m_map[key] = value;\n+    }\n+}\n \n-#ifdef WIN32\n-    evthread_use_windows_threads();\n-#else\n-    evthread_use_pthreads();\n-#endif\n+void HTTPHeaders::Remove(const std::string key)",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 336,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nvoid HTTPHeaders::Remove(const std::string& key)\r\n```",
      "created_at": "2025-05-16T13:43:35Z",
      "updated_at": "2025-05-16T14:44:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2093081846",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093081846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093181637",
      "pull_request_review_id": 2846448811,
      "id": 2093181637,
      "node_id": "PRRC_kwDOABII5858w2rF",
      "diff_hunk": "@@ -27,168 +34,309 @@ static const int DEFAULT_HTTP_WORKQUEUE=64;\n \n static const int DEFAULT_HTTP_SERVER_TIMEOUT=30;\n \n-struct evhttp_request;\n-struct event_base;\n-class CService;\n-class HTTPRequest;\n+enum HTTPRequestMethod {\n+    UNKNOWN,\n+    GET,\n+    POST,\n+    HEAD,\n+    PUT\n+};\n \n-/** Initialize HTTP server.\n- * Call this before RegisterHTTPHandler or EventBase().\n- */\n-bool InitHTTPServer(const util::SignalInterrupt& interrupt);\n-/** Start HTTP server.\n- * This is separate from InitHTTPServer to give users race-condition-free time\n- * to register their handlers between InitHTTPServer and StartHTTPServer.\n+/** Event handler closure.\n  */\n-void StartHTTPServer();\n-/** Interrupt HTTP server threads */\n-void InterruptHTTPServer();\n-/** Stop HTTP server */\n-void StopHTTPServer();\n+class HTTPClosure\n+{\n+public:\n+    virtual void operator()() = 0;\n+    virtual ~HTTPClosure() = default;\n+};\n \n-/** Change logging level for libevent. */\n-void UpdateHTTPServerLogging(bool enable);\n+namespace http_bitcoin {\n+using util::LineReader;\n+using NodeId = SockMan::Id;\n \n-/** Handler for requests to a certain HTTP path */\n-typedef std::function<bool(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n-/** Register handler for prefix.\n- * If multiple handlers match a prefix, the first-registered one will\n- * be invoked.\n- */\n-void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler);\n-/** Unregister handler for prefix */\n-void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch);\n+// shortest valid request line, used by libevent in evhttp_parse_request_line()\n+static const size_t MIN_REQUEST_LINE_LENGTH{strlen(\"GET / HTTP/1.0\")};\n+// maximum size of http request (request line + headers)\n+// see https://github.com/bitcoin/bitcoin/issues/6425\n+static const size_t MAX_HEADERS_SIZE{8192};\n \n-/** Return evhttp event base. This can be used by submodules to\n- * queue timers or custom events.\n- */\n-struct event_base* EventBase();\n+class HTTPHeaders\n+{\n+public:\n+    std::optional<std::string_view> Find(const std::string key) const;\n+    void Write(const std::string key, const std::string value);\n+    void Remove(const std::string key);\n+    bool Read(util::LineReader& reader);",
      "path": "src/httpserver.h",
      "position": 95,
      "original_position": 86,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would be good to document when `Read()` throws, returns true and false.",
      "created_at": "2025-05-16T14:38:22Z",
      "updated_at": "2025-05-16T14:44:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2093181637",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2093181637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094541457",
      "pull_request_review_id": 2849004885,
      "id": 2094541457,
      "node_id": "PRRC_kwDOABII58582CqR",
      "diff_hunk": "@@ -105,5 +106,127 @@ def run_test(self):\n         assert_equal(out1.status, http.client.BAD_REQUEST)\n \n \n+        self.log.info(\"Check pipelining\")\n+        # Requests are responded to in order they were received\n+        # See https://www.rfc-editor.org/rfc/rfc7230#section-6.3.2\n+        tip_height = self.nodes[2].getblockcount()\n+\n+        req = \"POST / HTTP/1.1\\r\\n\"\n+        req += f'Authorization: Basic {str_to_b64str(authpair)}\\r\\n'\n+\n+        # First request will take a long time to process\n+        body1 = f'{{\"method\": \"waitforblockheight\", \"params\": [{tip_height + 1}]}}'\n+        req1 = req\n+        req1 += f'Content-Length: {len(body1)}\\r\\n\\r\\n'\n+        req1 += body1\n+\n+        # Second request will process very fast\n+        body2 = '{\"method\": \"getblockcount\"}'\n+        req2 = req\n+        req2 += f'Content-Length: {len(body2)}\\r\\n\\r\\n'\n+        req2 += body2\n+        # Get the underlying socket from HTTP connection so we can send something unusual\n+        conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        sock = conn.sock\n+        sock.settimeout(1)",
      "path": "test/functional/interface_http.py",
      "position": null,
      "original_position": 35,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": 2090504818,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I should have mentioned the initial test commits have been split off into https://github.com/bitcoin/bitcoin/pull/32408 and the test as written here failed CI, so has been modified with `rpcservertimeout=2` and then expects a timeout between 1 and 4 seconds",
      "created_at": "2025-05-18T14:27:51Z",
      "updated_at": "2025-05-18T14:27:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2094541457",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2094541457"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102323308",
      "pull_request_review_id": 2860857095,
      "id": 2102323308,
      "node_id": "PRRC_kwDOABII5859Tuhs",
      "diff_hunk": "@@ -20,6 +20,20 @@ enum HTTPStatusCode\n     HTTP_SERVICE_UNAVAILABLE   = 503,\n };\n \n+// Copied from libevent http.c success_phrases[] and client_error_phrases[]\n+// TODO: Should HTTPStatusCode and HTTPReason be moved since they are not RPC protocols?\n+const std::map<HTTPStatusCode, std::string> HTTPReason{\n+    {HTTP_OK, \"OK\"},",
      "path": "src/rpc/protocol.h",
      "position": null,
      "original_position": 7,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> TODO: Should HTTPStatusCode and HTTPReason be moved since they are not RPC protocols?\r\n\r\nI think no because this file already contains generic HTTP constants, e.g. `HTTP_SERVICE_UNAVAILABLE = 503` above.",
      "created_at": "2025-05-22T11:24:40Z",
      "updated_at": "2025-05-22T14:57:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2102323308",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102323308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102548479",
      "pull_request_review_id": 2860857095,
      "id": 2102548479,
      "node_id": "PRRC_kwDOABII5859Ulf_",
      "diff_hunk": "@@ -27,168 +34,309 @@ static const int DEFAULT_HTTP_WORKQUEUE=64;\n \n static const int DEFAULT_HTTP_SERVER_TIMEOUT=30;\n \n-struct evhttp_request;\n-struct event_base;\n-class CService;\n-class HTTPRequest;\n+enum HTTPRequestMethod {\n+    UNKNOWN,\n+    GET,\n+    POST,\n+    HEAD,\n+    PUT\n+};\n \n-/** Initialize HTTP server.\n- * Call this before RegisterHTTPHandler or EventBase().\n- */\n-bool InitHTTPServer(const util::SignalInterrupt& interrupt);\n-/** Start HTTP server.\n- * This is separate from InitHTTPServer to give users race-condition-free time\n- * to register their handlers between InitHTTPServer and StartHTTPServer.\n+/** Event handler closure.\n  */\n-void StartHTTPServer();\n-/** Interrupt HTTP server threads */\n-void InterruptHTTPServer();\n-/** Stop HTTP server */\n-void StopHTTPServer();\n+class HTTPClosure\n+{\n+public:\n+    virtual void operator()() = 0;\n+    virtual ~HTTPClosure() = default;\n+};\n \n-/** Change logging level for libevent. */\n-void UpdateHTTPServerLogging(bool enable);\n+namespace http_bitcoin {\n+using util::LineReader;\n+using NodeId = SockMan::Id;\n \n-/** Handler for requests to a certain HTTP path */\n-typedef std::function<bool(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n-/** Register handler for prefix.\n- * If multiple handlers match a prefix, the first-registered one will\n- * be invoked.\n- */\n-void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler);\n-/** Unregister handler for prefix */\n-void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch);\n+// shortest valid request line, used by libevent in evhttp_parse_request_line()\n+static const size_t MIN_REQUEST_LINE_LENGTH{strlen(\"GET / HTTP/1.0\")};\n+// maximum size of http request (request line + headers)\n+// see https://github.com/bitcoin/bitcoin/issues/6425\n+static const size_t MAX_HEADERS_SIZE{8192};\n \n-/** Return evhttp event base. This can be used by submodules to\n- * queue timers or custom events.\n- */\n-struct event_base* EventBase();\n+class HTTPHeaders\n+{\n+public:\n+    std::optional<std::string_view> Find(const std::string key) const;\n+    void Write(const std::string key, const std::string value);\n+    void Remove(const std::string key);\n+    bool Read(util::LineReader& reader);\n+    std::string Stringify() const;\n+\n+private:\n+    std::map<std::string, std::string, util::CaseInsensitiveComparator> m_map;\n+};\n+\n+class HTTPResponse\n+{\n+public:\n+    int m_version_major;\n+    int m_version_minor;\n+    HTTPStatusCode m_status;\n+    std::string m_reason;\n+    HTTPHeaders m_headers;\n+    std::vector<std::byte> m_body;\n+    bool m_keep_alive{false};\n+\n+    std::string StringifyHeaders() const;\n+};\n+\n+class HTTPClient;\n \n-/** In-flight HTTP request.\n- * Thin C++ wrapper around evhttp_request.\n- */\n class HTTPRequest\n {\n-private:\n-    struct evhttp_request* req;\n-    const util::SignalInterrupt& m_interrupt;\n-    bool replySent;\n+public:\n+    std::string m_method;",
      "path": "src/httpserver.h",
      "position": null,
      "original_position": 119,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe enum is better for this?",
      "created_at": "2025-05-22T13:20:53Z",
      "updated_at": "2025-05-22T14:57:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2102548479",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102548479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102608338",
      "pull_request_review_id": 2860857095,
      "id": 2102608338,
      "node_id": "PRRC_kwDOABII5859U0HS",
      "diff_hunk": "@@ -35,8 +101,341 @@ BOOST_AUTO_TEST_CASE(test_query_parameters)\n     uri = \"/rest/endpoint/someresource.json&p1=v1&p2=v2\";\n     BOOST_CHECK(!GetQueryParameterFromUri(uri.c_str(), \"p1\").has_value());\n \n-    // URI with invalid characters (%) raises a runtime error regardless of which query parameter is queried\n-    uri = \"/rest/endpoint/someresource.json&p1=v1&p2=v2%\";\n-    BOOST_CHECK_EXCEPTION(GetQueryParameterFromUri(uri.c_str(), \"p1\"), std::runtime_error, HasReason(\"URI parsing failed, it likely contained RFC 3986 invalid characters\"));\n+    // Multiple parameters, some characters encoded\n+    uri = \"/rest/endpoint/someresource.json?p1=v1%20&p2=100%25\";\n+    BOOST_CHECK_EQUAL(GetQueryParameterFromUri(uri.c_str(), \"p1\").value(), \"v1 \");\n+    BOOST_CHECK_EQUAL(GetQueryParameterFromUri(uri.c_str(), \"p2\").value(), \"100%\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(test_query_parameters_bitcoin)\n+{\n+    test_query_parameters(http_bitcoin::GetQueryParameterFromUri);\n+}\n+\n+BOOST_AUTO_TEST_CASE(http_headers_tests)\n+{\n+    {\n+        // Writing response headers\n+        HTTPHeaders headers{};\n+        BOOST_CHECK(!headers.Find(\"Cache-Control\"));\n+        headers.Write(\"Cache-Control\", \"no-cache\");\n+        // Check case-insensitive key matching\n+        BOOST_CHECK_EQUAL(headers.Find(\"Cache-Control\").value(), \"no-cache\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"cache-control\").value(), \"no-cache\");\n+        // Additional values are comma-separated and appended\n+        headers.Write(\"Cache-Control\", \"no-store\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Cache-Control\").value(), \"no-cache, no-store\");\n+        // Add a few more\n+        headers.Write(\"Pie\", \"apple\");\n+        headers.Write(\"Sandwich\", \"ham\");\n+        headers.Write(\"Coffee\", \"black\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Pie\").value(), \"apple\");\n+        // Remove\n+        headers.Remove(\"Pie\");\n+        BOOST_CHECK(!headers.Find(\"Pie\"));\n+        // Combine for transmission\n+        // std::map sorts alphabetically by key, no order is specified for HTTP\n+        BOOST_CHECK_EQUAL(\n+            headers.Stringify(),\n+            \"Cache-Control: no-cache, no-store\\r\\n\"\n+            \"Coffee: black\\r\\n\"\n+            \"Sandwich: ham\\r\\n\\r\\n\");\n+    }\n+    {\n+        // Reading request headers captured from bitcoin-cli\n+        std::vector<std::byte> buffer{TryParseHex<std::byte>(\n+            \"486f73743a203132372e302e302e310d0a436f6e6e656374696f6e3a20636c6f73\"\n+            \"650d0a436f6e74656e742d547970653a206170706c69636174696f6e2f6a736f6e\"\n+            \"0d0a417574686f72697a6174696f6e3a204261736963205831396a623239726157\"\n+            \"5666587a6f7a597a4a6b4e5441784e44466c4d474a69596d56684d5449354f4467\"\n+            \"334e7a49354d544d334e54526d4e54686b4e6a63324f574d775a5459785a6a677a\"\n+            \"4e5467794e7a4577595459314f47526b596a566d5a4751330d0a436f6e74656e74\"\n+            \"2d4c656e6774683a2034360d0a0d0a\").value()};\n+        util::LineReader reader(buffer, /*max_read=*/1028);\n+        HTTPHeaders headers{};\n+        headers.Read(reader);\n+        BOOST_CHECK_EQUAL(headers.Find(\"Host\").value(), \"127.0.0.1\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Connection\").value(), \"close\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Content-Type\").value(), \"application/json\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Authorization\").value(), \"Basic X19jb29raWVfXzozYzJkNTAxNDFlMGJiYmVhMTI5ODg3NzI5MTM3NTRmNThkNjc2OWMwZTYxZjgzNTgyNzEwYTY1OGRkYjVmZGQ3\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Content-Length\").value(), \"46\");\n+        BOOST_CHECK(!headers.Find(\"Pizza\"));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(http_response_tests)\n+{\n+    // Typical HTTP 1.1 response headers\n+    HTTPHeaders headers{};\n+    headers.Write(\"Content-Type\", \"application/json\");\n+    headers.Write(\"Date\", \"Tue, 15 Oct 2024 17:54:12 GMT\");\n+    headers.Write(\"Content-Length\", \"41\");\n+    // Response points to headers which already exist because some of them\n+    // are set before we even know what the response will be.\n+    HTTPResponse res;\n+    res.m_version_major = 1;\n+    res.m_version_minor = 1;\n+    res.m_status = HTTP_OK;\n+    res.m_reason = HTTPReason.find(res.m_status)->second;\n+    res.m_body = StringToBuffer(\"{\\\"result\\\":865793,\\\"error\\\":null,\\\"id\\\":null\\\"}\");\n+    // Everything except the body, which might be raw bytes instead of a string\n+    res.m_headers = std::move(headers);\n+    BOOST_CHECK_EQUAL(\n+        res.StringifyHeaders(),\n+        \"HTTP/1.1 200 OK\\r\\n\"\n+        \"Content-Length: 41\\r\\n\"\n+        \"Content-Type: application/json\\r\\n\"\n+        \"Date: Tue, 15 Oct 2024 17:54:12 GMT\\r\\n\"\n+        \"\\r\\n\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(http_request_tests)\n+{\n+    {\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{TryParseHex<std::byte>(full_request).value()};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(req.LoadHeaders(reader));\n+        BOOST_CHECK(req.LoadBody(reader));\n+        BOOST_CHECK_EQUAL(req.m_method, \"POST\");\n+        BOOST_CHECK_EQUAL(req.GetRequestMethod(), HTTPRequestMethod::POST);\n+        BOOST_CHECK_EQUAL(req.m_target, \"/\");\n+        BOOST_CHECK_EQUAL(req.GetURI(), \"/\");\n+        BOOST_CHECK_EQUAL(req.m_version_major, 1);\n+        BOOST_CHECK_EQUAL(req.m_version_minor, 1);\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Host\").value(), \"127.0.0.1\");\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Connection\").value(), \"close\");\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Content-Type\").value(), \"application/json\");\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Authorization\").value(), \"Basic X19jb29raWVfXzo5OGQ5ODQ3MWNmNjg0NzAzYTkzN2EzNzk0ZDFlODQ1NjZmYTRkZjJiMzFkYjhhODI4ZGY4MjVjOTg5ZGI4OTVl\");\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Content-Length\").value(), \"46\");\n+        BOOST_CHECK_EQUAL(req.m_body.size(), 46);\n+        BOOST_CHECK_EQUAL(req.m_body, \"{\\\"method\\\":\\\"getblockcount\\\",\\\"params\\\":[],\\\"id\\\":1}\\n\");\n+    }\n+    {\n+        const std::string too_short_request_line = \"GET/HTTP/1.0\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(too_short_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK_THROW(req.LoadControlData(reader), std::runtime_error);\n+    }\n+    {\n+        const std::string malformed_request_line = \"GET / HTTP / 1.0\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(malformed_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK_THROW(req.LoadControlData(reader), std::runtime_error);\n+    }\n+    {\n+        const std::string malformed_request_line = \"GET / HTTP1.0\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(malformed_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK_THROW(req.LoadControlData(reader), std::runtime_error);\n+    }\n+    {\n+        const std::string malformed_request_line = \"GET / HTTP/11\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(malformed_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK_THROW(req.LoadControlData(reader), std::runtime_error);\n+    }\n+    {\n+        const std::string malformed_request_line = \"GET / HTTP/1.x\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(malformed_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK_THROW(req.LoadControlData(reader), std::runtime_error);\n+    }\n+    {\n+        const std::string ok_request_line = \"GET / HTTP/1.0\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(ok_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(req.LoadHeaders(reader));\n+        BOOST_CHECK(req.LoadBody(reader));\n+        BOOST_CHECK_EQUAL(req.m_method, \"GET\");\n+        BOOST_CHECK_EQUAL(req.m_target, \"/\");\n+        BOOST_CHECK_EQUAL(req.m_version_major, 1);\n+        BOOST_CHECK_EQUAL(req.m_version_minor, 0);\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Host\").value(), \"127.0.0.1\");\n+        // no body is OK\n+        BOOST_CHECK_EQUAL(req.m_body.size(), 0);\n+    }\n+    {\n+        const std::string malformed_headers = \"GET / HTTP/1.0\\r\\nHost=127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(malformed_headers)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK_THROW(req.LoadHeaders(reader), std::runtime_error);\n+    }\n+    {\n+        // We might not have received enough data from the client which is not\n+        // an error. We return false so the caller can try again later when the\n+        // buffer has more data.\n+        const std::string incomplete_headers = \"GET / HTTP/1.0\\r\\nHost: \";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(incomplete_headers)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(!req.LoadHeaders(reader));\n+    }\n+    {\n+        const std::string no_content_length = \"GET / HTTP/1.0\\r\\n\\r\\n{\\\"method\\\":\\\"getblockcount\\\"}\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(no_content_length)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(req.LoadHeaders(reader));\n+        BOOST_CHECK(req.LoadBody(reader));\n+        // Don't try to read request body if Content-Length is missing\n+        BOOST_CHECK_EQUAL(req.m_body.size(), 0);\n+    }\n+    {\n+        const std::string bad_content_length = \"GET / HTTP/1.0\\r\\nContent-Length: eleven\\r\\n\\r\\n{\\\"method\\\":\\\"getblockcount\\\"}\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(bad_content_length)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(req.LoadHeaders(reader));\n+        BOOST_CHECK_THROW(req.LoadBody(reader), std::runtime_error);",
      "path": "src/test/httpserver_tests.cpp",
      "position": 286,
      "original_position": 289,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is fine as it is. I am just wondering if it is not more appropriate for `LoadHeaders()` to `throw` instead of succeeding because the header `Content-Length: eleven` is already not according to the spec: https://httpwg.org/specs/rfc9110.html#field.content-length:\r\n\r\n> [Content-Length](https://httpwg.org/specs/rfc9110.html#field.content-length) = 1*[DIGIT](https://httpwg.org/specs/rfc9110.html#core.rules)",
      "created_at": "2025-05-22T13:45:48Z",
      "updated_at": "2025-05-22T14:57:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2102608338",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102608338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": 294,
      "original_start_line": 297,
      "start_side": "RIGHT",
      "line": 300,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102677611",
      "pull_request_review_id": 2860857095,
      "id": 2102677611,
      "node_id": "PRRC_kwDOABII5859VFBr",
      "diff_hunk": "@@ -417,361 +286,708 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n     queue->Run();\n }\n \n-/** libevent event log callback */\n-static void libevent_log_cb(int severity, const char *msg)\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n {\n-    BCLog::Level level;\n-    switch (severity) {\n-    case EVENT_LOG_DEBUG:\n-        level = BCLog::Level::Debug;\n-        break;\n-    case EVENT_LOG_MSG:\n-        level = BCLog::Level::Info;\n-        break;\n-    case EVENT_LOG_WARN:\n-        level = BCLog::Level::Warning;\n-        break;\n-    default: // EVENT_LOG_ERR and others are mapped to error\n-        level = BCLog::Level::Error;\n-        break;\n+    LogDebug(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+    LOCK(g_httppathhandlers_mutex);\n+    pathHandlers.emplace_back(prefix, exactMatch, handler);\n+}\n+\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+{\n+    LOCK(g_httppathhandlers_mutex);\n+    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i)\n+        if (i->prefix == prefix && i->exactMatch == exactMatch)\n+            break;\n+    if (i != iend)\n+    {\n+        LogDebug(BCLog::HTTP, \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+        pathHandlers.erase(i);\n     }\n-    LogPrintLevel(BCLog::LIBEVENT, level, \"%s\\n\", msg);\n }\n \n-bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+namespace http_bitcoin {\n+using util::Split;\n+\n+std::optional<std::string_view> HTTPHeaders::Find(const std::string key) const\n {\n-    if (!InitHTTPAllowList())\n-        return false;\n+    const auto it = m_map.find(key);\n+    if (it == m_map.end()) return std::nullopt;\n+    return std::string_view(it->second);\n+}\n \n-    // Redirect libevent's logging to our own log\n-    event_set_log_callback(&libevent_log_cb);\n-    // Update libevent's log handling.\n-    UpdateHTTPServerLogging(LogInstance().WillLogCategory(BCLog::LIBEVENT));\n+void HTTPHeaders::Write(const std::string key, const std::string value)\n+{\n+    // If present, append value to list\n+    const auto existing_value = Find(key);\n+    if (existing_value) {\n+        m_map[key] = std::string(existing_value.value()) + \", \" + value;\n+    } else {\n+        m_map[key] = value;\n+    }\n+}\n \n-#ifdef WIN32\n-    evthread_use_windows_threads();\n-#else\n-    evthread_use_pthreads();\n-#endif\n+void HTTPHeaders::Remove(const std::string key)\n+{\n+    m_map.erase(key);\n+}\n \n-    raii_event_base base_ctr = obtain_event_base();\n+bool HTTPHeaders::Read(util::LineReader& reader)\n+{\n+    // Headers https://httpwg.org/specs/rfc9110.html#rfc.section.6.3\n+    // A sequence of Field Lines https://httpwg.org/specs/rfc9110.html#rfc.section.5.2\n+    do {\n+        auto maybe_line = reader.ReadLine();\n+        if (!maybe_line) return false;\n+        const std::string& line = *maybe_line;\n \n-    /* Create a new evhttp object to handle requests. */\n-    raii_evhttp http_ctr = obtain_evhttp(base_ctr.get());\n-    struct evhttp* http = http_ctr.get();\n-    if (!http) {\n-        LogPrintf(\"couldn't create evhttp. Exiting.\\n\");\n-        return false;\n-    }\n+        // An empty line indicates end of the headers section https://www.rfc-editor.org/rfc/rfc2616#section-4\n+        if (line.length() == 0) break;\n \n-    evhttp_set_timeout(http, gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n-    evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n-    evhttp_set_max_body_size(http, MAX_SIZE);\n-    evhttp_set_gencb(http, http_request_cb, (void*)&interrupt);\n+        // Header line must have at least one \":\"\n+        // keys are not allowed to have delimiters like \":\" but values are\n+        // https://httpwg.org/specs/rfc9110.html#rfc.section.5.6.2\n+        const size_t pos{line.find(':')};\n+        if (pos == std::string::npos) throw std::runtime_error(\"HTTP header missing colon (:)\");\n \n-    if (!HTTPBindAddresses(http)) {\n-        LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n-        return false;\n+        // Whitespace is optional\n+        std::string key = util::TrimString(line.substr(0, pos));\n+        std::string value = util::TrimString(line.substr(pos + 1));\n+        Write(key, value);\n+    } while (true);\n+\n+    return true;\n+}\n+\n+std::string HTTPHeaders::Stringify() const\n+{\n+    std::string out;\n+    for (const auto& [key, value] : m_map) {\n+        out += key + \": \" + value + \"\\r\\n\";\n     }\n \n-    LogDebug(BCLog::HTTP, \"Initialized HTTP server\\n\");\n-    int workQueueDepth = std::max((long)gArgs.GetIntArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n-    LogDebug(BCLog::HTTP, \"creating work queue of depth %d\\n\", workQueueDepth);\n+    // Headers are terminated by an empty line\n+    out += \"\\r\\n\";\n+\n+    return out;\n+}\n+\n+std::string HTTPResponse::StringifyHeaders() const\n+{\n+    return strprintf(\"HTTP/%d.%d %d %s\\r\\n%s\", m_version_major, m_version_minor, m_status, m_reason, m_headers.Stringify());\n+}\n+\n+bool HTTPRequest::LoadControlData(LineReader& reader)\n+{\n+    auto maybe_line = reader.ReadLine();\n+    if (!maybe_line) return false;\n+    const std::string& request_line = *maybe_line;\n+\n+    // Request Line aka Control Data https://httpwg.org/specs/rfc9110.html#rfc.section.6.2\n+    // Three words separated by spaces, terminated by \\n or \\r\\n\n+    if (request_line.length() < MIN_REQUEST_LINE_LENGTH) throw std::runtime_error(\"HTTP request line too short\");\n+\n+    const std::vector<std::string_view> parts{Split<std::string_view>(request_line, \" \")};\n+    if (parts.size() != 3) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_method = parts[0];\n+    m_target = parts[1];\n+\n+    if (parts[2].rfind(\"HTTP/\") != 0) throw std::runtime_error(\"HTTP request line malformed\");\n+    const std::vector<std::string_view> version_parts{Split<std::string_view>(parts[2].substr(5), \".\")};\n+    if (version_parts.size() != 2) throw std::runtime_error(\"HTTP request line malformed\");\n+    auto major = ToIntegral<int>(version_parts[0]);\n+    auto minor = ToIntegral<int>(version_parts[1]);\n+    if (!major || !minor) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_version_major = major.value();\n+    m_version_minor = minor.value();\n \n-    g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n-    // transfer ownership to eventBase/HTTP via .release()\n-    eventBase = base_ctr.release();\n-    eventHTTP = http_ctr.release();\n     return true;\n }\n \n-void UpdateHTTPServerLogging(bool enable) {\n-    if (enable) {\n-        event_enable_debug_logging(EVENT_DBG_ALL);\n+bool HTTPRequest::LoadHeaders(LineReader& reader)\n+{\n+    return m_headers.Read(reader);\n+}\n+\n+bool HTTPRequest::LoadBody(LineReader& reader)\n+{\n+    // https://httpwg.org/specs/rfc9112.html#message.body\n+\n+    auto transfer_encoding_header = m_headers.Find(\"Transfer-Encoding\");\n+    if (transfer_encoding_header && ToLower(transfer_encoding_header.value()) == \"chunked\") {\n+        // Transfer-Encoding: https://datatracker.ietf.org/doc/html/rfc7230.html#section-3.3.1\n+        // Chunked Transfer Coding: https://datatracker.ietf.org/doc/html/rfc7230.html#section-4.1\n+        // see evhttp_handle_chunked_read() in libevent http.c\n+        while (reader.Left() > 0) {\n+            auto maybe_chunk_size = reader.ReadLine();\n+            if (!maybe_chunk_size) return false;\n+            uint64_t chunk_size;\n+\n+            if (!ParseUInt64Hex(maybe_chunk_size.value(), &chunk_size)) throw std::runtime_error(\"Invalid chunk size\");\n+\n+            bool last_chunk{chunk_size == 0};\n+\n+            if (!last_chunk) {\n+                // We are still expecting more data for this chunk\n+                if (reader.Left() < chunk_size) {\n+                    return false;\n+                }\n+                // Pack chunk onto body\n+                m_body += reader.ReadLength(chunk_size);\n+            }\n+\n+            // Even though every chunk size is explicitly declared,\n+            // they are still terminated by a CRLF we don't need.\n+            auto crlf = reader.ReadLine();\n+            if (!crlf || crlf.value().size() != 0) throw std::runtime_error(\"Improperly terminated chunk\");\n+\n+            if (last_chunk) return true;\n+        }\n+\n+        // We read all the chunks but never got the last chunk, wait for client to send more\n+        return false;\n     } else {\n-        event_enable_debug_logging(EVENT_DBG_NONE);\n+        // No Content-length or Transfer-Encoding header means no body, see libevent evhttp_get_body()\n+        auto content_length_value{m_headers.Find(\"Content-Length\")};\n+        if (!content_length_value) return true;\n+\n+        uint64_t content_length;\n+        if (!ParseUInt64(content_length_value.value(), &content_length)) throw std::runtime_error(\"Cannot parse Content-Length value\");\n+\n+        // Not enough data in buffer for expected body\n+        if (reader.Left() < content_length) return false;\n+\n+        m_body = reader.ReadLength(content_length);",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 492,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If the body comes in pieces, then this parsing will be repeated for every piece and the `return` on line 460 will be executed a few times until enough data is received. This is suboptimal - to parse the same thing multiple times. I guess it is fine because we are not building a top performance HTTP server.\r\n\r\nIf this becomes an issue at some point, then it would be better to remember that it has been parsed until e.g. byte 456 and only continue parsing from there as new data is received over the socket. I guess this will complicate the current implementation significantly.",
      "created_at": "2025-05-22T14:13:23Z",
      "updated_at": "2025-05-22T14:57:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2102677611",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102677611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": 453,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 462,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102764352",
      "pull_request_review_id": 2860857095,
      "id": 2102764352,
      "node_id": "PRRC_kwDOABII5859VaNA",
      "diff_hunk": "@@ -35,8 +101,341 @@ BOOST_AUTO_TEST_CASE(test_query_parameters)\n     uri = \"/rest/endpoint/someresource.json&p1=v1&p2=v2\";\n     BOOST_CHECK(!GetQueryParameterFromUri(uri.c_str(), \"p1\").has_value());\n \n-    // URI with invalid characters (%) raises a runtime error regardless of which query parameter is queried\n-    uri = \"/rest/endpoint/someresource.json&p1=v1&p2=v2%\";\n-    BOOST_CHECK_EXCEPTION(GetQueryParameterFromUri(uri.c_str(), \"p1\"), std::runtime_error, HasReason(\"URI parsing failed, it likely contained RFC 3986 invalid characters\"));\n+    // Multiple parameters, some characters encoded\n+    uri = \"/rest/endpoint/someresource.json?p1=v1%20&p2=100%25\";\n+    BOOST_CHECK_EQUAL(GetQueryParameterFromUri(uri.c_str(), \"p1\").value(), \"v1 \");\n+    BOOST_CHECK_EQUAL(GetQueryParameterFromUri(uri.c_str(), \"p2\").value(), \"100%\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(test_query_parameters_bitcoin)\n+{\n+    test_query_parameters(http_bitcoin::GetQueryParameterFromUri);\n+}\n+\n+BOOST_AUTO_TEST_CASE(http_headers_tests)\n+{\n+    {\n+        // Writing response headers\n+        HTTPHeaders headers{};\n+        BOOST_CHECK(!headers.Find(\"Cache-Control\"));\n+        headers.Write(\"Cache-Control\", \"no-cache\");\n+        // Check case-insensitive key matching\n+        BOOST_CHECK_EQUAL(headers.Find(\"Cache-Control\").value(), \"no-cache\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"cache-control\").value(), \"no-cache\");\n+        // Additional values are comma-separated and appended\n+        headers.Write(\"Cache-Control\", \"no-store\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Cache-Control\").value(), \"no-cache, no-store\");\n+        // Add a few more\n+        headers.Write(\"Pie\", \"apple\");\n+        headers.Write(\"Sandwich\", \"ham\");\n+        headers.Write(\"Coffee\", \"black\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Pie\").value(), \"apple\");\n+        // Remove\n+        headers.Remove(\"Pie\");\n+        BOOST_CHECK(!headers.Find(\"Pie\"));\n+        // Combine for transmission\n+        // std::map sorts alphabetically by key, no order is specified for HTTP\n+        BOOST_CHECK_EQUAL(\n+            headers.Stringify(),\n+            \"Cache-Control: no-cache, no-store\\r\\n\"\n+            \"Coffee: black\\r\\n\"\n+            \"Sandwich: ham\\r\\n\\r\\n\");\n+    }\n+    {\n+        // Reading request headers captured from bitcoin-cli\n+        std::vector<std::byte> buffer{TryParseHex<std::byte>(\n+            \"486f73743a203132372e302e302e310d0a436f6e6e656374696f6e3a20636c6f73\"\n+            \"650d0a436f6e74656e742d547970653a206170706c69636174696f6e2f6a736f6e\"\n+            \"0d0a417574686f72697a6174696f6e3a204261736963205831396a623239726157\"\n+            \"5666587a6f7a597a4a6b4e5441784e44466c4d474a69596d56684d5449354f4467\"\n+            \"334e7a49354d544d334e54526d4e54686b4e6a63324f574d775a5459785a6a677a\"\n+            \"4e5467794e7a4577595459314f47526b596a566d5a4751330d0a436f6e74656e74\"\n+            \"2d4c656e6774683a2034360d0a0d0a\").value()};\n+        util::LineReader reader(buffer, /*max_read=*/1028);\n+        HTTPHeaders headers{};\n+        headers.Read(reader);\n+        BOOST_CHECK_EQUAL(headers.Find(\"Host\").value(), \"127.0.0.1\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Connection\").value(), \"close\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Content-Type\").value(), \"application/json\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Authorization\").value(), \"Basic X19jb29raWVfXzozYzJkNTAxNDFlMGJiYmVhMTI5ODg3NzI5MTM3NTRmNThkNjc2OWMwZTYxZjgzNTgyNzEwYTY1OGRkYjVmZGQ3\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Content-Length\").value(), \"46\");\n+        BOOST_CHECK(!headers.Find(\"Pizza\"));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(http_response_tests)\n+{\n+    // Typical HTTP 1.1 response headers\n+    HTTPHeaders headers{};\n+    headers.Write(\"Content-Type\", \"application/json\");\n+    headers.Write(\"Date\", \"Tue, 15 Oct 2024 17:54:12 GMT\");\n+    headers.Write(\"Content-Length\", \"41\");\n+    // Response points to headers which already exist because some of them\n+    // are set before we even know what the response will be.\n+    HTTPResponse res;\n+    res.m_version_major = 1;\n+    res.m_version_minor = 1;\n+    res.m_status = HTTP_OK;\n+    res.m_reason = HTTPReason.find(res.m_status)->second;\n+    res.m_body = StringToBuffer(\"{\\\"result\\\":865793,\\\"error\\\":null,\\\"id\\\":null\\\"}\");\n+    // Everything except the body, which might be raw bytes instead of a string\n+    res.m_headers = std::move(headers);\n+    BOOST_CHECK_EQUAL(\n+        res.StringifyHeaders(),\n+        \"HTTP/1.1 200 OK\\r\\n\"\n+        \"Content-Length: 41\\r\\n\"\n+        \"Content-Type: application/json\\r\\n\"\n+        \"Date: Tue, 15 Oct 2024 17:54:12 GMT\\r\\n\"\n+        \"\\r\\n\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(http_request_tests)\n+{\n+    {\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{TryParseHex<std::byte>(full_request).value()};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(req.LoadHeaders(reader));\n+        BOOST_CHECK(req.LoadBody(reader));\n+        BOOST_CHECK_EQUAL(req.m_method, \"POST\");\n+        BOOST_CHECK_EQUAL(req.GetRequestMethod(), HTTPRequestMethod::POST);\n+        BOOST_CHECK_EQUAL(req.m_target, \"/\");\n+        BOOST_CHECK_EQUAL(req.GetURI(), \"/\");\n+        BOOST_CHECK_EQUAL(req.m_version_major, 1);\n+        BOOST_CHECK_EQUAL(req.m_version_minor, 1);\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Host\").value(), \"127.0.0.1\");\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Connection\").value(), \"close\");\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Content-Type\").value(), \"application/json\");\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Authorization\").value(), \"Basic X19jb29raWVfXzo5OGQ5ODQ3MWNmNjg0NzAzYTkzN2EzNzk0ZDFlODQ1NjZmYTRkZjJiMzFkYjhhODI4ZGY4MjVjOTg5ZGI4OTVl\");\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Content-Length\").value(), \"46\");\n+        BOOST_CHECK_EQUAL(req.m_body.size(), 46);\n+        BOOST_CHECK_EQUAL(req.m_body, \"{\\\"method\\\":\\\"getblockcount\\\",\\\"params\\\":[],\\\"id\\\":1}\\n\");\n+    }\n+    {\n+        const std::string too_short_request_line = \"GET/HTTP/1.0\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(too_short_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK_THROW(req.LoadControlData(reader), std::runtime_error);\n+    }\n+    {\n+        const std::string malformed_request_line = \"GET / HTTP / 1.0\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(malformed_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK_THROW(req.LoadControlData(reader), std::runtime_error);\n+    }\n+    {\n+        const std::string malformed_request_line = \"GET / HTTP1.0\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(malformed_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK_THROW(req.LoadControlData(reader), std::runtime_error);\n+    }\n+    {\n+        const std::string malformed_request_line = \"GET / HTTP/11\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(malformed_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK_THROW(req.LoadControlData(reader), std::runtime_error);\n+    }\n+    {\n+        const std::string malformed_request_line = \"GET / HTTP/1.x\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(malformed_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK_THROW(req.LoadControlData(reader), std::runtime_error);\n+    }\n+    {\n+        const std::string ok_request_line = \"GET / HTTP/1.0\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(ok_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(req.LoadHeaders(reader));\n+        BOOST_CHECK(req.LoadBody(reader));\n+        BOOST_CHECK_EQUAL(req.m_method, \"GET\");\n+        BOOST_CHECK_EQUAL(req.m_target, \"/\");\n+        BOOST_CHECK_EQUAL(req.m_version_major, 1);\n+        BOOST_CHECK_EQUAL(req.m_version_minor, 0);\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Host\").value(), \"127.0.0.1\");\n+        // no body is OK\n+        BOOST_CHECK_EQUAL(req.m_body.size(), 0);\n+    }\n+    {\n+        const std::string malformed_headers = \"GET / HTTP/1.0\\r\\nHost=127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(malformed_headers)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK_THROW(req.LoadHeaders(reader), std::runtime_error);\n+    }\n+    {\n+        // We might not have received enough data from the client which is not\n+        // an error. We return false so the caller can try again later when the\n+        // buffer has more data.\n+        const std::string incomplete_headers = \"GET / HTTP/1.0\\r\\nHost: \";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(incomplete_headers)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(!req.LoadHeaders(reader));\n+    }\n+    {\n+        const std::string no_content_length = \"GET / HTTP/1.0\\r\\n\\r\\n{\\\"method\\\":\\\"getblockcount\\\"}\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(no_content_length)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(req.LoadHeaders(reader));\n+        BOOST_CHECK(req.LoadBody(reader));\n+        // Don't try to read request body if Content-Length is missing\n+        BOOST_CHECK_EQUAL(req.m_body.size(), 0);\n+    }\n+    {\n+        const std::string bad_content_length = \"GET / HTTP/1.0\\r\\nContent-Length: eleven\\r\\n\\r\\n{\\\"method\\\":\\\"getblockcount\\\"}\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(bad_content_length)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(req.LoadHeaders(reader));\n+        BOOST_CHECK_THROW(req.LoadBody(reader), std::runtime_error);\n+    }\n+    {\n+        // Content-Length indicates more data than we have in the buffer.\n+        // Again, not an error just try again later.\n+        const std::string excessive_content_length = \"GET / HTTP/1.0\\r\\nContent-Length: 1024\\r\\n\\r\\n{\\\"method\\\":\\\"getblockcount\\\"}\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(excessive_content_length)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(req.LoadHeaders(reader));\n+        BOOST_CHECK(!req.LoadBody(reader));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(http_client_server_tests)\n+{\n+    // Hard code the timestamp for the Date header in the HTTP response\n+    // Wed Dec 11 00:47:09 2024 UTC\n+    SetMockTime(1733878029);\n+\n+    // Queue of connected sockets returned by listening socket (represents network interface)\n+    std::shared_ptr<DynSock::Queue> accepted_sockets{std::make_shared<DynSock::Queue>()};\n+\n+    CreateSock = [&accepted_sockets](int, int, int) {\n+        // This is a mock Listening Socket that the HTTP server will \"bind\" to and\n+        // listen to for incoming connections. We won't need to access its I/O\n+        // pipes because we don't read or write directly to it. It will return\n+        // Connected Sockets from the queue via its Accept() method.\n+        return std::make_unique<DynSock>(std::make_shared<DynSock::Pipes>(), accepted_sockets);\n+    };\n+\n+    {\n+        // I/O pipes of one mock Connected Socket we can read and write to.\n+        std::shared_ptr<DynSock::Pipes> connected_socket_pipes(std::make_shared<DynSock::Pipes>());\n+\n+        // Insert the payload: a correctly formatted HTTP request\n+        std::vector<std::byte> buffer{TryParseHex<std::byte>(full_request).value()};\n+        connected_socket_pipes->recv.PushBytes(buffer.data(), buffer.size());\n+\n+        // Mock Connected Socket that represents a client.\n+        // It needs I/O pipes but its queue can remain empty\n+        std::unique_ptr<DynSock> connected_socket{std::make_unique<DynSock>(connected_socket_pipes, std::make_shared<DynSock::Queue>())};\n+\n+        // Prepare queue of accepted_sockets: just one connection with no data\n+        accepted_sockets->Push(std::move(connected_socket));\n+\n+        // Prepare a request handler that just stores received requests so we can examine them\n+        // Mutex is required to prevent a race between this test's main thread and the Sockman I/O loop.\n+        Mutex requests_mutex;\n+        std::deque<std::unique_ptr<HTTPRequest>> requests;",
      "path": "src/test/httpserver_tests.cpp",
      "position": 336,
      "original_position": 339,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        Mutex requests_mutex;\r\n        std::deque<std::unique_ptr<HTTPRequest>> requests GUARDED_BY(requests_mutex);\r\n```",
      "created_at": "2025-05-22T14:50:53Z",
      "updated_at": "2025-05-22T14:57:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2102764352",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102764352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": 349,
      "original_start_line": 352,
      "start_side": "RIGHT",
      "line": 350,
      "original_line": 350,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102772840",
      "pull_request_review_id": 2860857095,
      "id": 2102772840,
      "node_id": "PRRC_kwDOABII5859VcRo",
      "diff_hunk": "@@ -35,8 +101,341 @@ BOOST_AUTO_TEST_CASE(test_query_parameters)\n     uri = \"/rest/endpoint/someresource.json&p1=v1&p2=v2\";\n     BOOST_CHECK(!GetQueryParameterFromUri(uri.c_str(), \"p1\").has_value());\n \n-    // URI with invalid characters (%) raises a runtime error regardless of which query parameter is queried\n-    uri = \"/rest/endpoint/someresource.json&p1=v1&p2=v2%\";\n-    BOOST_CHECK_EXCEPTION(GetQueryParameterFromUri(uri.c_str(), \"p1\"), std::runtime_error, HasReason(\"URI parsing failed, it likely contained RFC 3986 invalid characters\"));\n+    // Multiple parameters, some characters encoded\n+    uri = \"/rest/endpoint/someresource.json?p1=v1%20&p2=100%25\";\n+    BOOST_CHECK_EQUAL(GetQueryParameterFromUri(uri.c_str(), \"p1\").value(), \"v1 \");\n+    BOOST_CHECK_EQUAL(GetQueryParameterFromUri(uri.c_str(), \"p2\").value(), \"100%\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(test_query_parameters_bitcoin)\n+{\n+    test_query_parameters(http_bitcoin::GetQueryParameterFromUri);\n+}\n+\n+BOOST_AUTO_TEST_CASE(http_headers_tests)\n+{\n+    {\n+        // Writing response headers\n+        HTTPHeaders headers{};\n+        BOOST_CHECK(!headers.Find(\"Cache-Control\"));\n+        headers.Write(\"Cache-Control\", \"no-cache\");\n+        // Check case-insensitive key matching\n+        BOOST_CHECK_EQUAL(headers.Find(\"Cache-Control\").value(), \"no-cache\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"cache-control\").value(), \"no-cache\");\n+        // Additional values are comma-separated and appended\n+        headers.Write(\"Cache-Control\", \"no-store\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Cache-Control\").value(), \"no-cache, no-store\");\n+        // Add a few more\n+        headers.Write(\"Pie\", \"apple\");\n+        headers.Write(\"Sandwich\", \"ham\");\n+        headers.Write(\"Coffee\", \"black\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Pie\").value(), \"apple\");\n+        // Remove\n+        headers.Remove(\"Pie\");\n+        BOOST_CHECK(!headers.Find(\"Pie\"));\n+        // Combine for transmission\n+        // std::map sorts alphabetically by key, no order is specified for HTTP\n+        BOOST_CHECK_EQUAL(\n+            headers.Stringify(),\n+            \"Cache-Control: no-cache, no-store\\r\\n\"\n+            \"Coffee: black\\r\\n\"\n+            \"Sandwich: ham\\r\\n\\r\\n\");\n+    }\n+    {\n+        // Reading request headers captured from bitcoin-cli\n+        std::vector<std::byte> buffer{TryParseHex<std::byte>(\n+            \"486f73743a203132372e302e302e310d0a436f6e6e656374696f6e3a20636c6f73\"\n+            \"650d0a436f6e74656e742d547970653a206170706c69636174696f6e2f6a736f6e\"\n+            \"0d0a417574686f72697a6174696f6e3a204261736963205831396a623239726157\"\n+            \"5666587a6f7a597a4a6b4e5441784e44466c4d474a69596d56684d5449354f4467\"\n+            \"334e7a49354d544d334e54526d4e54686b4e6a63324f574d775a5459785a6a677a\"\n+            \"4e5467794e7a4577595459314f47526b596a566d5a4751330d0a436f6e74656e74\"\n+            \"2d4c656e6774683a2034360d0a0d0a\").value()};\n+        util::LineReader reader(buffer, /*max_read=*/1028);\n+        HTTPHeaders headers{};\n+        headers.Read(reader);\n+        BOOST_CHECK_EQUAL(headers.Find(\"Host\").value(), \"127.0.0.1\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Connection\").value(), \"close\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Content-Type\").value(), \"application/json\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Authorization\").value(), \"Basic X19jb29raWVfXzozYzJkNTAxNDFlMGJiYmVhMTI5ODg3NzI5MTM3NTRmNThkNjc2OWMwZTYxZjgzNTgyNzEwYTY1OGRkYjVmZGQ3\");\n+        BOOST_CHECK_EQUAL(headers.Find(\"Content-Length\").value(), \"46\");\n+        BOOST_CHECK(!headers.Find(\"Pizza\"));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(http_response_tests)\n+{\n+    // Typical HTTP 1.1 response headers\n+    HTTPHeaders headers{};\n+    headers.Write(\"Content-Type\", \"application/json\");\n+    headers.Write(\"Date\", \"Tue, 15 Oct 2024 17:54:12 GMT\");\n+    headers.Write(\"Content-Length\", \"41\");\n+    // Response points to headers which already exist because some of them\n+    // are set before we even know what the response will be.\n+    HTTPResponse res;\n+    res.m_version_major = 1;\n+    res.m_version_minor = 1;\n+    res.m_status = HTTP_OK;\n+    res.m_reason = HTTPReason.find(res.m_status)->second;\n+    res.m_body = StringToBuffer(\"{\\\"result\\\":865793,\\\"error\\\":null,\\\"id\\\":null\\\"}\");\n+    // Everything except the body, which might be raw bytes instead of a string\n+    res.m_headers = std::move(headers);\n+    BOOST_CHECK_EQUAL(\n+        res.StringifyHeaders(),\n+        \"HTTP/1.1 200 OK\\r\\n\"\n+        \"Content-Length: 41\\r\\n\"\n+        \"Content-Type: application/json\\r\\n\"\n+        \"Date: Tue, 15 Oct 2024 17:54:12 GMT\\r\\n\"\n+        \"\\r\\n\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(http_request_tests)\n+{\n+    {\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{TryParseHex<std::byte>(full_request).value()};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(req.LoadHeaders(reader));\n+        BOOST_CHECK(req.LoadBody(reader));\n+        BOOST_CHECK_EQUAL(req.m_method, \"POST\");\n+        BOOST_CHECK_EQUAL(req.GetRequestMethod(), HTTPRequestMethod::POST);\n+        BOOST_CHECK_EQUAL(req.m_target, \"/\");\n+        BOOST_CHECK_EQUAL(req.GetURI(), \"/\");\n+        BOOST_CHECK_EQUAL(req.m_version_major, 1);\n+        BOOST_CHECK_EQUAL(req.m_version_minor, 1);\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Host\").value(), \"127.0.0.1\");\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Connection\").value(), \"close\");\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Content-Type\").value(), \"application/json\");\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Authorization\").value(), \"Basic X19jb29raWVfXzo5OGQ5ODQ3MWNmNjg0NzAzYTkzN2EzNzk0ZDFlODQ1NjZmYTRkZjJiMzFkYjhhODI4ZGY4MjVjOTg5ZGI4OTVl\");\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Content-Length\").value(), \"46\");\n+        BOOST_CHECK_EQUAL(req.m_body.size(), 46);\n+        BOOST_CHECK_EQUAL(req.m_body, \"{\\\"method\\\":\\\"getblockcount\\\",\\\"params\\\":[],\\\"id\\\":1}\\n\");\n+    }\n+    {\n+        const std::string too_short_request_line = \"GET/HTTP/1.0\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(too_short_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK_THROW(req.LoadControlData(reader), std::runtime_error);\n+    }\n+    {\n+        const std::string malformed_request_line = \"GET / HTTP / 1.0\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(malformed_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK_THROW(req.LoadControlData(reader), std::runtime_error);\n+    }\n+    {\n+        const std::string malformed_request_line = \"GET / HTTP1.0\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(malformed_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK_THROW(req.LoadControlData(reader), std::runtime_error);\n+    }\n+    {\n+        const std::string malformed_request_line = \"GET / HTTP/11\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(malformed_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK_THROW(req.LoadControlData(reader), std::runtime_error);\n+    }\n+    {\n+        const std::string malformed_request_line = \"GET / HTTP/1.x\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(malformed_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK_THROW(req.LoadControlData(reader), std::runtime_error);\n+    }\n+    {\n+        const std::string ok_request_line = \"GET / HTTP/1.0\\r\\nHost: 127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(ok_request_line)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(req.LoadHeaders(reader));\n+        BOOST_CHECK(req.LoadBody(reader));\n+        BOOST_CHECK_EQUAL(req.m_method, \"GET\");\n+        BOOST_CHECK_EQUAL(req.m_target, \"/\");\n+        BOOST_CHECK_EQUAL(req.m_version_major, 1);\n+        BOOST_CHECK_EQUAL(req.m_version_minor, 0);\n+        BOOST_CHECK_EQUAL(req.m_headers.Find(\"Host\").value(), \"127.0.0.1\");\n+        // no body is OK\n+        BOOST_CHECK_EQUAL(req.m_body.size(), 0);\n+    }\n+    {\n+        const std::string malformed_headers = \"GET / HTTP/1.0\\r\\nHost=127.0.0.1\\r\\n\\r\\n\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(malformed_headers)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK_THROW(req.LoadHeaders(reader), std::runtime_error);\n+    }\n+    {\n+        // We might not have received enough data from the client which is not\n+        // an error. We return false so the caller can try again later when the\n+        // buffer has more data.\n+        const std::string incomplete_headers = \"GET / HTTP/1.0\\r\\nHost: \";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(incomplete_headers)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(!req.LoadHeaders(reader));\n+    }\n+    {\n+        const std::string no_content_length = \"GET / HTTP/1.0\\r\\n\\r\\n{\\\"method\\\":\\\"getblockcount\\\"}\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(no_content_length)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(req.LoadHeaders(reader));\n+        BOOST_CHECK(req.LoadBody(reader));\n+        // Don't try to read request body if Content-Length is missing\n+        BOOST_CHECK_EQUAL(req.m_body.size(), 0);\n+    }\n+    {\n+        const std::string bad_content_length = \"GET / HTTP/1.0\\r\\nContent-Length: eleven\\r\\n\\r\\n{\\\"method\\\":\\\"getblockcount\\\"}\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(bad_content_length)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(req.LoadHeaders(reader));\n+        BOOST_CHECK_THROW(req.LoadBody(reader), std::runtime_error);\n+    }\n+    {\n+        // Content-Length indicates more data than we have in the buffer.\n+        // Again, not an error just try again later.\n+        const std::string excessive_content_length = \"GET / HTTP/1.0\\r\\nContent-Length: 1024\\r\\n\\r\\n{\\\"method\\\":\\\"getblockcount\\\"}\";\n+        HTTPRequest req;\n+        std::vector<std::byte> buffer{StringToBuffer(excessive_content_length)};\n+        LineReader reader(buffer, MAX_HEADERS_SIZE);\n+        BOOST_CHECK(req.LoadControlData(reader));\n+        BOOST_CHECK(req.LoadHeaders(reader));\n+        BOOST_CHECK(!req.LoadBody(reader));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(http_client_server_tests)\n+{\n+    // Hard code the timestamp for the Date header in the HTTP response\n+    // Wed Dec 11 00:47:09 2024 UTC\n+    SetMockTime(1733878029);\n+\n+    // Queue of connected sockets returned by listening socket (represents network interface)\n+    std::shared_ptr<DynSock::Queue> accepted_sockets{std::make_shared<DynSock::Queue>()};\n+\n+    CreateSock = [&accepted_sockets](int, int, int) {\n+        // This is a mock Listening Socket that the HTTP server will \"bind\" to and\n+        // listen to for incoming connections. We won't need to access its I/O\n+        // pipes because we don't read or write directly to it. It will return\n+        // Connected Sockets from the queue via its Accept() method.\n+        return std::make_unique<DynSock>(std::make_shared<DynSock::Pipes>(), accepted_sockets);\n+    };\n+\n+    {\n+        // I/O pipes of one mock Connected Socket we can read and write to.\n+        std::shared_ptr<DynSock::Pipes> connected_socket_pipes(std::make_shared<DynSock::Pipes>());\n+\n+        // Insert the payload: a correctly formatted HTTP request\n+        std::vector<std::byte> buffer{TryParseHex<std::byte>(full_request).value()};\n+        connected_socket_pipes->recv.PushBytes(buffer.data(), buffer.size());\n+\n+        // Mock Connected Socket that represents a client.\n+        // It needs I/O pipes but its queue can remain empty\n+        std::unique_ptr<DynSock> connected_socket{std::make_unique<DynSock>(connected_socket_pipes, std::make_shared<DynSock::Queue>())};\n+\n+        // Prepare queue of accepted_sockets: just one connection with no data\n+        accepted_sockets->Push(std::move(connected_socket));\n+\n+        // Prepare a request handler that just stores received requests so we can examine them\n+        // Mutex is required to prevent a race between this test's main thread and the Sockman I/O loop.\n+        Mutex requests_mutex;\n+        std::deque<std::unique_ptr<HTTPRequest>> requests;\n+        auto StoreRequest = [&](std::unique_ptr<HTTPRequest> req) {",
      "path": "src/test/httpserver_tests.cpp",
      "position": null,
      "original_position": 340,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Passing `unique_ptr` by value looks a bit strange since it is not supposed to be copied. I guess this works when the caller `std::move`s the object, but isn't it more clear to use `std::unique_ptr<HTTPRequest>&& req`?",
      "created_at": "2025-05-22T14:54:49Z",
      "updated_at": "2025-05-22T14:57:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2102772840",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2102772840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 354,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128494930",
      "pull_request_review_id": 2899730748,
      "id": 2128494930,
      "node_id": "PRRC_kwDOABII585-3kFS",
      "diff_hunk": "@@ -417,361 +286,708 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n     queue->Run();\n }\n \n-/** libevent event log callback */\n-static void libevent_log_cb(int severity, const char *msg)\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n {\n-    BCLog::Level level;\n-    switch (severity) {\n-    case EVENT_LOG_DEBUG:\n-        level = BCLog::Level::Debug;\n-        break;\n-    case EVENT_LOG_MSG:\n-        level = BCLog::Level::Info;\n-        break;\n-    case EVENT_LOG_WARN:\n-        level = BCLog::Level::Warning;\n-        break;\n-    default: // EVENT_LOG_ERR and others are mapped to error\n-        level = BCLog::Level::Error;\n-        break;\n+    LogDebug(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+    LOCK(g_httppathhandlers_mutex);\n+    pathHandlers.emplace_back(prefix, exactMatch, handler);\n+}\n+\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+{\n+    LOCK(g_httppathhandlers_mutex);\n+    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i)\n+        if (i->prefix == prefix && i->exactMatch == exactMatch)\n+            break;\n+    if (i != iend)\n+    {\n+        LogDebug(BCLog::HTTP, \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+        pathHandlers.erase(i);\n     }\n-    LogPrintLevel(BCLog::LIBEVENT, level, \"%s\\n\", msg);\n }\n \n-bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+namespace http_bitcoin {\n+using util::Split;\n+\n+std::optional<std::string_view> HTTPHeaders::Find(const std::string key) const\n {\n-    if (!InitHTTPAllowList())\n-        return false;\n+    const auto it = m_map.find(key);\n+    if (it == m_map.end()) return std::nullopt;\n+    return std::string_view(it->second);\n+}\n \n-    // Redirect libevent's logging to our own log\n-    event_set_log_callback(&libevent_log_cb);\n-    // Update libevent's log handling.\n-    UpdateHTTPServerLogging(LogInstance().WillLogCategory(BCLog::LIBEVENT));\n+void HTTPHeaders::Write(const std::string key, const std::string value)\n+{\n+    // If present, append value to list\n+    const auto existing_value = Find(key);\n+    if (existing_value) {\n+        m_map[key] = std::string(existing_value.value()) + \", \" + value;\n+    } else {\n+        m_map[key] = value;\n+    }\n+}\n \n-#ifdef WIN32\n-    evthread_use_windows_threads();\n-#else\n-    evthread_use_pthreads();\n-#endif\n+void HTTPHeaders::Remove(const std::string key)\n+{\n+    m_map.erase(key);\n+}\n \n-    raii_event_base base_ctr = obtain_event_base();\n+bool HTTPHeaders::Read(util::LineReader& reader)\n+{\n+    // Headers https://httpwg.org/specs/rfc9110.html#rfc.section.6.3\n+    // A sequence of Field Lines https://httpwg.org/specs/rfc9110.html#rfc.section.5.2\n+    do {\n+        auto maybe_line = reader.ReadLine();\n+        if (!maybe_line) return false;\n+        const std::string& line = *maybe_line;\n \n-    /* Create a new evhttp object to handle requests. */\n-    raii_evhttp http_ctr = obtain_evhttp(base_ctr.get());\n-    struct evhttp* http = http_ctr.get();\n-    if (!http) {\n-        LogPrintf(\"couldn't create evhttp. Exiting.\\n\");\n-        return false;\n-    }\n+        // An empty line indicates end of the headers section https://www.rfc-editor.org/rfc/rfc2616#section-4\n+        if (line.length() == 0) break;\n \n-    evhttp_set_timeout(http, gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n-    evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n-    evhttp_set_max_body_size(http, MAX_SIZE);\n-    evhttp_set_gencb(http, http_request_cb, (void*)&interrupt);\n+        // Header line must have at least one \":\"\n+        // keys are not allowed to have delimiters like \":\" but values are\n+        // https://httpwg.org/specs/rfc9110.html#rfc.section.5.6.2\n+        const size_t pos{line.find(':')};\n+        if (pos == std::string::npos) throw std::runtime_error(\"HTTP header missing colon (:)\");\n \n-    if (!HTTPBindAddresses(http)) {\n-        LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n-        return false;\n+        // Whitespace is optional\n+        std::string key = util::TrimString(line.substr(0, pos));\n+        std::string value = util::TrimString(line.substr(pos + 1));\n+        Write(key, value);\n+    } while (true);\n+\n+    return true;\n+}\n+\n+std::string HTTPHeaders::Stringify() const\n+{\n+    std::string out;\n+    for (const auto& [key, value] : m_map) {\n+        out += key + \": \" + value + \"\\r\\n\";\n     }\n \n-    LogDebug(BCLog::HTTP, \"Initialized HTTP server\\n\");\n-    int workQueueDepth = std::max((long)gArgs.GetIntArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n-    LogDebug(BCLog::HTTP, \"creating work queue of depth %d\\n\", workQueueDepth);\n+    // Headers are terminated by an empty line\n+    out += \"\\r\\n\";\n+\n+    return out;\n+}\n+\n+std::string HTTPResponse::StringifyHeaders() const\n+{\n+    return strprintf(\"HTTP/%d.%d %d %s\\r\\n%s\", m_version_major, m_version_minor, m_status, m_reason, m_headers.Stringify());\n+}\n+\n+bool HTTPRequest::LoadControlData(LineReader& reader)\n+{\n+    auto maybe_line = reader.ReadLine();\n+    if (!maybe_line) return false;\n+    const std::string& request_line = *maybe_line;\n+\n+    // Request Line aka Control Data https://httpwg.org/specs/rfc9110.html#rfc.section.6.2\n+    // Three words separated by spaces, terminated by \\n or \\r\\n\n+    if (request_line.length() < MIN_REQUEST_LINE_LENGTH) throw std::runtime_error(\"HTTP request line too short\");\n+\n+    const std::vector<std::string_view> parts{Split<std::string_view>(request_line, \" \")};\n+    if (parts.size() != 3) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_method = parts[0];\n+    m_target = parts[1];\n+\n+    if (parts[2].rfind(\"HTTP/\") != 0) throw std::runtime_error(\"HTTP request line malformed\");\n+    const std::vector<std::string_view> version_parts{Split<std::string_view>(parts[2].substr(5), \".\")};\n+    if (version_parts.size() != 2) throw std::runtime_error(\"HTTP request line malformed\");\n+    auto major = ToIntegral<int>(version_parts[0]);\n+    auto minor = ToIntegral<int>(version_parts[1]);\n+    if (!major || !minor) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_version_major = major.value();\n+    m_version_minor = minor.value();\n \n-    g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n-    // transfer ownership to eventBase/HTTP via .release()\n-    eventBase = base_ctr.release();\n-    eventHTTP = http_ctr.release();\n     return true;\n }\n \n-void UpdateHTTPServerLogging(bool enable) {\n-    if (enable) {\n-        event_enable_debug_logging(EVENT_DBG_ALL);\n+bool HTTPRequest::LoadHeaders(LineReader& reader)\n+{\n+    return m_headers.Read(reader);\n+}\n+\n+bool HTTPRequest::LoadBody(LineReader& reader)\n+{\n+    // https://httpwg.org/specs/rfc9112.html#message.body\n+\n+    auto transfer_encoding_header = m_headers.Find(\"Transfer-Encoding\");\n+    if (transfer_encoding_header && ToLower(transfer_encoding_header.value()) == \"chunked\") {",
      "path": "src/httpserver.cpp",
      "position": 487,
      "original_position": 448,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would be good to have tests to exercise the chunked transfer encoding from d7778f426c `http: support \"chunked\" Transfer-Encoding`.",
      "created_at": "2025-06-05T10:18:53Z",
      "updated_at": "2025-06-05T14:02:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2128494930",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128494930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 433,
      "original_line": 433,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128594514",
      "pull_request_review_id": 2899730748,
      "id": 2128594514,
      "node_id": "PRRC_kwDOABII585-38ZS",
      "diff_hunk": "@@ -417,361 +286,708 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n     queue->Run();\n }\n \n-/** libevent event log callback */\n-static void libevent_log_cb(int severity, const char *msg)\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n {\n-    BCLog::Level level;\n-    switch (severity) {\n-    case EVENT_LOG_DEBUG:\n-        level = BCLog::Level::Debug;\n-        break;\n-    case EVENT_LOG_MSG:\n-        level = BCLog::Level::Info;\n-        break;\n-    case EVENT_LOG_WARN:\n-        level = BCLog::Level::Warning;\n-        break;\n-    default: // EVENT_LOG_ERR and others are mapped to error\n-        level = BCLog::Level::Error;\n-        break;\n+    LogDebug(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+    LOCK(g_httppathhandlers_mutex);\n+    pathHandlers.emplace_back(prefix, exactMatch, handler);\n+}\n+\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+{\n+    LOCK(g_httppathhandlers_mutex);\n+    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i)\n+        if (i->prefix == prefix && i->exactMatch == exactMatch)\n+            break;\n+    if (i != iend)\n+    {\n+        LogDebug(BCLog::HTTP, \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+        pathHandlers.erase(i);\n     }\n-    LogPrintLevel(BCLog::LIBEVENT, level, \"%s\\n\", msg);\n }\n \n-bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+namespace http_bitcoin {\n+using util::Split;\n+\n+std::optional<std::string_view> HTTPHeaders::Find(const std::string key) const\n {\n-    if (!InitHTTPAllowList())\n-        return false;\n+    const auto it = m_map.find(key);\n+    if (it == m_map.end()) return std::nullopt;\n+    return std::string_view(it->second);\n+}\n \n-    // Redirect libevent's logging to our own log\n-    event_set_log_callback(&libevent_log_cb);\n-    // Update libevent's log handling.\n-    UpdateHTTPServerLogging(LogInstance().WillLogCategory(BCLog::LIBEVENT));\n+void HTTPHeaders::Write(const std::string key, const std::string value)\n+{\n+    // If present, append value to list\n+    const auto existing_value = Find(key);\n+    if (existing_value) {\n+        m_map[key] = std::string(existing_value.value()) + \", \" + value;\n+    } else {\n+        m_map[key] = value;\n+    }\n+}\n \n-#ifdef WIN32\n-    evthread_use_windows_threads();\n-#else\n-    evthread_use_pthreads();\n-#endif\n+void HTTPHeaders::Remove(const std::string key)\n+{\n+    m_map.erase(key);\n+}\n \n-    raii_event_base base_ctr = obtain_event_base();\n+bool HTTPHeaders::Read(util::LineReader& reader)\n+{\n+    // Headers https://httpwg.org/specs/rfc9110.html#rfc.section.6.3\n+    // A sequence of Field Lines https://httpwg.org/specs/rfc9110.html#rfc.section.5.2\n+    do {\n+        auto maybe_line = reader.ReadLine();\n+        if (!maybe_line) return false;\n+        const std::string& line = *maybe_line;\n \n-    /* Create a new evhttp object to handle requests. */\n-    raii_evhttp http_ctr = obtain_evhttp(base_ctr.get());\n-    struct evhttp* http = http_ctr.get();\n-    if (!http) {\n-        LogPrintf(\"couldn't create evhttp. Exiting.\\n\");\n-        return false;\n-    }\n+        // An empty line indicates end of the headers section https://www.rfc-editor.org/rfc/rfc2616#section-4\n+        if (line.length() == 0) break;\n \n-    evhttp_set_timeout(http, gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n-    evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n-    evhttp_set_max_body_size(http, MAX_SIZE);\n-    evhttp_set_gencb(http, http_request_cb, (void*)&interrupt);\n+        // Header line must have at least one \":\"\n+        // keys are not allowed to have delimiters like \":\" but values are\n+        // https://httpwg.org/specs/rfc9110.html#rfc.section.5.6.2\n+        const size_t pos{line.find(':')};\n+        if (pos == std::string::npos) throw std::runtime_error(\"HTTP header missing colon (:)\");\n \n-    if (!HTTPBindAddresses(http)) {\n-        LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n-        return false;\n+        // Whitespace is optional\n+        std::string key = util::TrimString(line.substr(0, pos));\n+        std::string value = util::TrimString(line.substr(pos + 1));\n+        Write(key, value);\n+    } while (true);\n+\n+    return true;\n+}\n+\n+std::string HTTPHeaders::Stringify() const\n+{\n+    std::string out;\n+    for (const auto& [key, value] : m_map) {\n+        out += key + \": \" + value + \"\\r\\n\";\n     }\n \n-    LogDebug(BCLog::HTTP, \"Initialized HTTP server\\n\");\n-    int workQueueDepth = std::max((long)gArgs.GetIntArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n-    LogDebug(BCLog::HTTP, \"creating work queue of depth %d\\n\", workQueueDepth);\n+    // Headers are terminated by an empty line\n+    out += \"\\r\\n\";\n+\n+    return out;\n+}\n+\n+std::string HTTPResponse::StringifyHeaders() const\n+{\n+    return strprintf(\"HTTP/%d.%d %d %s\\r\\n%s\", m_version_major, m_version_minor, m_status, m_reason, m_headers.Stringify());\n+}\n+\n+bool HTTPRequest::LoadControlData(LineReader& reader)\n+{\n+    auto maybe_line = reader.ReadLine();\n+    if (!maybe_line) return false;\n+    const std::string& request_line = *maybe_line;\n+\n+    // Request Line aka Control Data https://httpwg.org/specs/rfc9110.html#rfc.section.6.2\n+    // Three words separated by spaces, terminated by \\n or \\r\\n\n+    if (request_line.length() < MIN_REQUEST_LINE_LENGTH) throw std::runtime_error(\"HTTP request line too short\");\n+\n+    const std::vector<std::string_view> parts{Split<std::string_view>(request_line, \" \")};\n+    if (parts.size() != 3) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_method = parts[0];\n+    m_target = parts[1];\n+\n+    if (parts[2].rfind(\"HTTP/\") != 0) throw std::runtime_error(\"HTTP request line malformed\");\n+    const std::vector<std::string_view> version_parts{Split<std::string_view>(parts[2].substr(5), \".\")};\n+    if (version_parts.size() != 2) throw std::runtime_error(\"HTTP request line malformed\");\n+    auto major = ToIntegral<int>(version_parts[0]);\n+    auto minor = ToIntegral<int>(version_parts[1]);\n+    if (!major || !minor) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_version_major = major.value();\n+    m_version_minor = minor.value();\n \n-    g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n-    // transfer ownership to eventBase/HTTP via .release()\n-    eventBase = base_ctr.release();\n-    eventHTTP = http_ctr.release();\n     return true;\n }\n \n-void UpdateHTTPServerLogging(bool enable) {\n-    if (enable) {\n-        event_enable_debug_logging(EVENT_DBG_ALL);\n+bool HTTPRequest::LoadHeaders(LineReader& reader)\n+{\n+    return m_headers.Read(reader);\n+}\n+\n+bool HTTPRequest::LoadBody(LineReader& reader)\n+{\n+    // https://httpwg.org/specs/rfc9112.html#message.body\n+\n+    auto transfer_encoding_header = m_headers.Find(\"Transfer-Encoding\");\n+    if (transfer_encoding_header && ToLower(transfer_encoding_header.value()) == \"chunked\") {\n+        // Transfer-Encoding: https://datatracker.ietf.org/doc/html/rfc7230.html#section-3.3.1\n+        // Chunked Transfer Coding: https://datatracker.ietf.org/doc/html/rfc7230.html#section-4.1\n+        // see evhttp_handle_chunked_read() in libevent http.c\n+        while (reader.Left() > 0) {\n+            auto maybe_chunk_size = reader.ReadLine();\n+            if (!maybe_chunk_size) return false;\n+            uint64_t chunk_size;\n+\n+            if (!ParseUInt64Hex(maybe_chunk_size.value(), &chunk_size)) throw std::runtime_error(\"Invalid chunk size\");\n+\n+            bool last_chunk{chunk_size == 0};\n+\n+            if (!last_chunk) {\n+                // We are still expecting more data for this chunk\n+                if (reader.Left() < chunk_size) {\n+                    return false;\n+                }\n+                // Pack chunk onto body\n+                m_body += reader.ReadLength(chunk_size);\n+            }\n+\n+            // Even though every chunk size is explicitly declared,\n+            // they are still terminated by a CRLF we don't need.\n+            auto crlf = reader.ReadLine();\n+            if (!crlf || crlf.value().size() != 0) throw std::runtime_error(\"Improperly terminated chunk\");\n+\n+            if (last_chunk) return true;\n+        }\n+\n+        // We read all the chunks but never got the last chunk, wait for client to send more\n+        return false;\n     } else {\n-        event_enable_debug_logging(EVENT_DBG_NONE);\n+        // No Content-length or Transfer-Encoding header means no body, see libevent evhttp_get_body()\n+        auto content_length_value{m_headers.Find(\"Content-Length\")};\n+        if (!content_length_value) return true;\n+\n+        uint64_t content_length;\n+        if (!ParseUInt64(content_length_value.value(), &content_length)) throw std::runtime_error(\"Cannot parse Content-Length value\");\n+\n+        // Not enough data in buffer for expected body\n+        if (reader.Left() < content_length) return false;\n+\n+        m_body = reader.ReadLength(content_length);\n+\n+        return true;\n     }\n }\n \n-static std::thread g_thread_http;\n-static std::vector<std::thread> g_thread_http_workers;\n+CService HTTPRequest::GetPeer() const\n+{\n+    return m_client->m_addr;\n+}\n \n-void StartHTTPServer()\n+HTTPRequestMethod HTTPRequest::GetRequestMethod() const\n {\n-    int rpcThreads = std::max((long)gArgs.GetIntArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n-    LogInfo(\"Starting HTTP server with %d worker threads\\n\", rpcThreads);\n-    g_thread_http = std::thread(ThreadHTTP, eventBase);\n+    if (m_method == \"GET\") return HTTPRequestMethod::GET;\n+    if (m_method == \"POST\") return HTTPRequestMethod::POST;\n+    if (m_method == \"HEAD\") return HTTPRequestMethod::HEAD;\n+    if (m_method == \"PUT\") return HTTPRequestMethod::PUT;\n+    return HTTPRequestMethod::UNKNOWN;\n+}\n \n-    for (int i = 0; i < rpcThreads; i++) {\n-        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, g_work_queue.get(), i);\n+std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+{\n+    return GetQueryParameterFromUri(GetURI(), key);\n+}\n+\n+// See libevent http.c evhttp_parse_query_impl()\n+// and https://www.rfc-editor.org/rfc/rfc3986#section-3.4\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key)\n+{\n+    // Handle %XX encoding\n+    std::string decoded_uri{UrlDecode(uri)};\n+\n+    // find query in URI\n+    size_t start = decoded_uri.find('?');\n+    if (start == std::string::npos) return std::nullopt;\n+    size_t end = decoded_uri.find('#', start);\n+    if (end == std::string::npos) {\n+        end = decoded_uri.length();\n+    }\n+    const std::string_view query{decoded_uri.data() + start + 1, end - start - 1};\n+    // find requested parameter in query\n+    const std::vector<std::string_view> params{Split<std::string_view>(query, \"&\")};\n+    for (const std::string_view& param : params) {\n+        size_t delim = param.find('=');\n+        if (key == param.substr(0, delim)) {\n+            if (delim == std::string::npos) {\n+                return \"\";\n+            } else {\n+                return std::string(param.substr(delim + 1));\n+            }\n+        }\n     }\n+    return std::nullopt;\n }\n \n-void InterruptHTTPServer()\n+std::pair<bool, std::string_view> HTTPRequest::GetHeader(const std::string& hdr) const\n {\n-    LogDebug(BCLog::HTTP, \"Interrupting HTTP server\\n\");\n-    if (eventHTTP) {\n-        // Reject requests on current connections\n-        evhttp_set_gencb(eventHTTP, http_reject_request_cb, nullptr);\n-    }\n-    if (g_work_queue) {\n-        g_work_queue->Interrupt();\n-    }\n+    std::optional<std::string_view> found{m_headers.Find(hdr)};\n+    if (found.has_value()) {\n+        return std::make_pair(true, found.value());\n+    } else\n+        return std::make_pair(false, \"\");\n }\n \n-void StopHTTPServer()\n+void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n {\n-    LogDebug(BCLog::HTTP, \"Stopping HTTP server\\n\");\n-    if (g_work_queue) {\n-        LogDebug(BCLog::HTTP, \"Waiting for HTTP worker threads to exit\\n\");\n-        for (auto& thread : g_thread_http_workers) {\n-            thread.join();\n+    m_response_headers.Write(hdr, value);\n+}\n+\n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)\n+{\n+    HTTPResponse res;\n+\n+    // Some response headers are determined in advance and stored in the request\n+    res.m_headers = std::move(m_response_headers);\n+\n+    // Response version matches request version\n+    res.m_version_major = m_version_major;\n+    res.m_version_minor = m_version_minor;\n+\n+    // Add response code and look up reason string\n+    res.m_status = status;\n+    res.m_reason = HTTPReason.find(status)->second;\n+\n+    // See libevent evhttp_response_needs_body()\n+    // Response headers are different if no body is needed\n+    bool needs_body{status != HTTP_NO_CONTENT && (status < 100 || status >= 200)};\n+\n+    // See libevent evhttp_make_header_response()\n+    // Expected response headers depend on protocol version\n+    if (m_version_major == 1) {\n+        // HTTP/1.0\n+        if (m_version_minor == 0) {\n+            auto connection_header{m_headers.Find(\"Connection\")};\n+            if (connection_header && ToLower(connection_header.value()) == \"keep-alive\") {\n+                res.m_headers.Write(\"Connection\", \"keep-alive\");\n+                res.m_keep_alive = true;\n+            }\n+        }\n+\n+        // HTTP/1.1\n+        if (m_version_minor >= 1) {\n+            const int64_t now_seconds{TicksSinceEpoch<std::chrono::seconds>(NodeClock::now())};\n+            res.m_headers.Write(\"Date\", FormatRFC7231DateTime(now_seconds));\n+\n+            if (needs_body) {\n+                res.m_headers.Write(\"Content-Length\", strprintf(\"%d\", reply_body.size()));\n+            }\n+\n+            // Default for HTTP/1.1\n+            res.m_keep_alive = true;\n         }\n-        g_thread_http_workers.clear();\n     }\n-    // Unlisten sockets, these are what make the event loop running, which means\n-    // that after this and all connections are closed the event loop will quit.\n-    for (evhttp_bound_socket *socket : boundSockets) {\n-        evhttp_del_accept_socket(eventHTTP, socket);\n+\n+    if (needs_body && !res.m_headers.Find(\"Content-Type\")) {\n+        // Default type from libevent evhttp_new_object()\n+        res.m_headers.Write(\"Content-Type\", \"text/html; charset=ISO-8859-1\");\n     }\n-    boundSockets.clear();\n+\n+    auto connection_header{m_headers.Find(\"Connection\")};\n+    if (connection_header && ToLower(connection_header.value()) == \"close\") {\n+        // Might not exist already but we need to replace it, not append to it\n+        res.m_headers.Remove(\"Connection\");\n+        res.m_headers.Write(\"Connection\", \"close\");\n+        res.m_keep_alive = false;\n+    }\n+\n+    m_client->m_keep_alive = res.m_keep_alive;\n+\n+    // Serialize the response headers\n+    const std::string headers{res.StringifyHeaders()};\n+    const auto headers_bytes{std::as_bytes(std::span(headers.begin(), headers.end()))};\n+\n+    bool send_buffer_was_empty{false};\n+    // Fill the send buffer with the complete serialized response headers + body\n     {\n-        if (const auto n_connections{g_requests.CountActiveConnections()}; n_connections != 0) {\n-            LogDebug(BCLog::HTTP, \"Waiting for %d connections to stop HTTP server\\n\", n_connections);\n-        }\n-        g_requests.WaitUntilEmpty();\n-    }\n-    if (eventHTTP) {\n-        // Schedule a callback to call evhttp_free in the event base thread, so\n-        // that evhttp_free does not need to be called again after the handling\n-        // of unfinished request connections that follows.\n-        event_base_once(eventBase, -1, EV_TIMEOUT, [](evutil_socket_t, short, void*) {\n-            evhttp_free(eventHTTP);\n-            eventHTTP = nullptr;\n-        }, nullptr, nullptr);\n-    }\n-    if (eventBase) {\n-        LogDebug(BCLog::HTTP, \"Waiting for HTTP event thread to exit\\n\");\n-        if (g_thread_http.joinable()) g_thread_http.join();\n-        event_base_free(eventBase);\n-        eventBase = nullptr;\n-    }\n-    g_work_queue.reset();\n-    LogDebug(BCLog::HTTP, \"Stopped HTTP server\\n\");\n-}\n+        LOCK(m_client->m_send_mutex);\n+        send_buffer_was_empty = m_client->m_send_buffer.empty();\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), headers_bytes.begin(), headers_bytes.end());\n+\n+        // We've been using std::span up until now but it is finally time to copy\n+        // data. The original data will go out of scope when WriteReply() returns.\n+        // This is analogous to the memcpy() in libevent's evbuffer_add()\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), reply_body.begin(), reply_body.end());\n+    }\n+\n+    LogDebug(\n+        BCLog::HTTP,\n+        \"HTTPResponse (status code: %d size: %lld) added to send buffer for client %s (id=%lld)\\n\",\n+        status,\n+        headers_bytes.size() + reply_body.size(),\n+        m_client->m_origin,\n+        m_client->m_node_id);\n+\n+    // If the send buffer was empty before we wrote this reply, we can try an\n+    // optimistic send akin to CConnman::PushMessage() in which we\n+    // push the data directly out the socket to client right now, instead\n+    // of waiting for the next iteration of the Sockman I/O loop.\n+    if (send_buffer_was_empty) {\n+        m_client->SendBytesFromBuffer();\n+    } else {\n+        // Inform Sockman I/O there is data that is ready to be sent to this client\n+        // in the next loop iteration.\n+        m_client->m_send_ready = true;\n+    }\n \n-struct event_base* EventBase()\n-{\n-    return eventBase;\n+    // Signal to the Sockman I/O loop that we are ready to handle the next request.\n+    m_client->m_req_busy = false;\n }\n \n-static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n+bool HTTPClient::ReadRequest(std::unique_ptr<HTTPRequest>& req)\n {\n-    // Static handler: simply call inner handler\n-    HTTPEvent *self = static_cast<HTTPEvent*>(data);\n-    self->handler();\n-    if (self->deleteWhenTriggered)\n-        delete self;\n+    LineReader reader(m_recv_buffer, MAX_HEADERS_SIZE);\n+\n+    if (!req->LoadControlData(reader)) return false;\n+    if (!req->LoadHeaders(reader)) return false;\n+    if (!req->LoadBody(reader)) return false;\n+\n+    // Remove the bytes read out of the buffer.\n+    // If one of the above calls throws an error, the caller must\n+    // catch it and disconnect the client.\n+    m_recv_buffer.erase(\n+        m_recv_buffer.begin(),\n+        m_recv_buffer.begin() + (reader.it - reader.start));\n+\n+    return true;\n }\n \n-HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void()>& _handler):\n-    deleteWhenTriggered(_deleteWhenTriggered), handler(_handler)\n-{\n-    ev = event_new(base, -1, 0, httpevent_callback_fn, this);\n-    assert(ev);\n+bool HTTPClient::SendBytesFromBuffer()\n+{\n+    Assume(m_server);\n+\n+    // Send as much data from this client's buffer as we can\n+    LOCK(m_send_mutex);\n+    if (!m_send_buffer.empty()) {\n+        std::string err;\n+        // We don't intend to \"send more\" because http responses are usually small and we want the kernel to send them right away.\n+        ssize_t bytes_sent = m_server->SendBytes(m_node_id, MakeUCharSpan(m_send_buffer), /*will_send_more=*/false, err);\n+        if (bytes_sent < 0) {\n+            LogDebug(\n+                BCLog::HTTP,\n+                \"Error sending HTTP response data to client %s (id=%lld): %s\\n\",\n+                m_origin,\n+                m_node_id,\n+                err);\n+            m_send_ready = false;\n+            m_prevent_disconnect = false;\n+            m_disconnect = true;\n+            return false;\n+        }\n+\n+        Assume(static_cast<size_t>(bytes_sent) <= m_send_buffer.size());\n+        m_send_buffer.erase(m_send_buffer.begin(), m_send_buffer.begin() + bytes_sent);\n+\n+        LogDebug(\n+            BCLog::HTTP,\n+            \"Sent %d bytes to client %s (id=%lld)\\n\",\n+            bytes_sent,\n+            m_origin,\n+            m_node_id);\n+\n+        // This check is inside the if(!empty) block meaning \"there was data but now its gone\".\n+        // We shouldn't even be calling SendBytesFromBuffer() when the send buffer is empty,\n+        // but for belt-and-suspenders, we don't want to modify the disconnect flags if SendBytesFromBuffer() was a no-op.\n+        if (m_send_buffer.empty()) {\n+            m_send_ready = false;\n+            m_prevent_disconnect = false;\n+\n+            // Our work is done here\n+            if (!m_keep_alive) {\n+                m_disconnect = true;\n+                return false;\n+            }\n+        } else {\n+            m_send_ready = true;\n+            m_prevent_disconnect = true;\n+        }\n+    }\n+\n+    return true;\n }\n-HTTPEvent::~HTTPEvent()\n+\n+void HTTPServer::CloseConnectionInternal(std::shared_ptr<HTTPClient>& client)\n {\n-    event_free(ev);\n+    if (CloseConnection(client->m_node_id)) {\n+        LogDebug(BCLog::HTTP, \"Disconnected HTTP client %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    } else {\n+        LogDebug(BCLog::HTTP, \"Failed to disconnect non-existent HTTP client %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    }\n }",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 809,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The `CloseConnectionInternal()` method can and should take just a reference, no need for shared pointer:\r\n\r\n```diff\r\n- void HTTPServer::CloseConnectionInternal(std::shared_ptr<HTTPClient>& client)\r\n+ void HTTPServer::CloseConnectionInternal(const HTTPClient& client)\r\n```",
      "created_at": "2025-06-05T11:16:12Z",
      "updated_at": "2025-06-05T14:02:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2128594514",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128594514"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": 704,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 716,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128627105",
      "pull_request_review_id": 2899730748,
      "id": 2128627105,
      "node_id": "PRRC_kwDOABII585-4EWh",
      "diff_hunk": "@@ -27,168 +34,309 @@ static const int DEFAULT_HTTP_WORKQUEUE=64;\n \n static const int DEFAULT_HTTP_SERVER_TIMEOUT=30;\n \n-struct evhttp_request;\n-struct event_base;\n-class CService;\n-class HTTPRequest;\n+enum HTTPRequestMethod {\n+    UNKNOWN,\n+    GET,\n+    POST,\n+    HEAD,\n+    PUT\n+};\n \n-/** Initialize HTTP server.\n- * Call this before RegisterHTTPHandler or EventBase().\n- */\n-bool InitHTTPServer(const util::SignalInterrupt& interrupt);\n-/** Start HTTP server.\n- * This is separate from InitHTTPServer to give users race-condition-free time\n- * to register their handlers between InitHTTPServer and StartHTTPServer.\n+/** Event handler closure.\n  */\n-void StartHTTPServer();\n-/** Interrupt HTTP server threads */\n-void InterruptHTTPServer();\n-/** Stop HTTP server */\n-void StopHTTPServer();\n+class HTTPClosure\n+{\n+public:\n+    virtual void operator()() = 0;\n+    virtual ~HTTPClosure() = default;\n+};\n \n-/** Change logging level for libevent. */\n-void UpdateHTTPServerLogging(bool enable);\n+namespace http_bitcoin {\n+using util::LineReader;\n+using NodeId = SockMan::Id;\n \n-/** Handler for requests to a certain HTTP path */\n-typedef std::function<bool(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n-/** Register handler for prefix.\n- * If multiple handlers match a prefix, the first-registered one will\n- * be invoked.\n- */\n-void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler);\n-/** Unregister handler for prefix */\n-void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch);\n+// shortest valid request line, used by libevent in evhttp_parse_request_line()\n+static const size_t MIN_REQUEST_LINE_LENGTH{strlen(\"GET / HTTP/1.0\")};\n+// maximum size of http request (request line + headers)\n+// see https://github.com/bitcoin/bitcoin/issues/6425\n+static const size_t MAX_HEADERS_SIZE{8192};\n \n-/** Return evhttp event base. This can be used by submodules to\n- * queue timers or custom events.\n- */\n-struct event_base* EventBase();\n+class HTTPHeaders\n+{\n+public:\n+    std::optional<std::string_view> Find(const std::string key) const;\n+    void Write(const std::string key, const std::string value);\n+    void Remove(const std::string key);\n+    bool Read(util::LineReader& reader);\n+    std::string Stringify() const;\n+\n+private:\n+    std::map<std::string, std::string, util::CaseInsensitiveComparator> m_map;\n+};\n+\n+class HTTPResponse\n+{\n+public:\n+    int m_version_major;\n+    int m_version_minor;\n+    HTTPStatusCode m_status;\n+    std::string m_reason;\n+    HTTPHeaders m_headers;\n+    std::vector<std::byte> m_body;\n+    bool m_keep_alive{false};\n+\n+    std::string StringifyHeaders() const;\n+};\n+\n+class HTTPClient;\n \n-/** In-flight HTTP request.\n- * Thin C++ wrapper around evhttp_request.\n- */\n class HTTPRequest\n {\n-private:\n-    struct evhttp_request* req;\n-    const util::SignalInterrupt& m_interrupt;\n-    bool replySent;\n+public:\n+    std::string m_method;\n+    std::string m_target;\n+    // Default protocol version is used by error responses to unreadable requests\n+    int m_version_major{1};\n+    int m_version_minor{1};\n+    HTTPHeaders m_headers;\n+    std::string m_body;\n+\n+    // Keep a pointer to the client that made the request so\n+    // we know who to respond to.\n+    std::shared_ptr<HTTPClient> m_client;\n+    explicit HTTPRequest(std::shared_ptr<HTTPClient> client) : m_client(client) {};\n+    // Null client for unit tests\n+    explicit HTTPRequest() : m_client(nullptr) {};\n+\n+    // Readers return false if they need more data from the\n+    // socket to parse properly. They throw errors if\n+    // the data is invalid.\n+    bool LoadControlData(LineReader& reader);\n+    bool LoadHeaders(LineReader& reader);\n+    bool LoadBody(LineReader& reader);\n+\n+    // These methods reimplement the API from http_libevent::HTTPRequest\n+    // for downstream JSONRPC and REST modules.\n+    std::string GetURI() const {return m_target;};\n+    CService GetPeer() const;\n+    HTTPRequestMethod GetRequestMethod() const;\n+    std::optional<std::string> GetQueryParameter(const std::string& key) const;\n+    std::pair<bool, std::string_view> GetHeader(const std::string& hdr) const;\n+    std::string ReadBody() const {return m_body;};\n+    void WriteHeader(const std::string& hdr, const std::string& value);\n+\n+    // Response headers may be set in advance before response body is known\n+    HTTPHeaders m_response_headers;\n+    void WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body = {});\n+    void WriteReply(HTTPStatusCode status, std::string_view reply_body_view)\n+    {\n+        WriteReply(status, std::as_bytes(std::span{reply_body_view}));\n+    }\n+};\n+\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key);\n+\n+class HTTPServer;\n \n+class HTTPClient\n+{\n public:\n-    explicit HTTPRequest(struct evhttp_request* req, const util::SignalInterrupt& interrupt, bool replySent = false);\n-    ~HTTPRequest();\n-\n-    enum RequestMethod {\n-        UNKNOWN,\n-        GET,\n-        POST,\n-        HEAD,\n-        PUT\n+    // ID provided by SockMan, inherited by HTTPServer\n+    NodeId m_node_id;\n+    // Remote address of connected client\n+    CService m_addr;\n+    // IP:port of connected client, cached for logging purposes\n+    std::string m_origin;\n+    // Pointer back to the server so we can call Sockman I/O methods from the client\n+    // Ok to remain null for unit tests.\n+    HTTPServer* m_server;\n+\n+    // In lieu of an intermediate transport class like p2p uses,\n+    // we copy data from the socket buffer to the client object\n+    // and attempt to read HTTP requests from here.\n+    std::vector<std::byte> m_recv_buffer{};\n+\n+    // Requests from a client must be processed in the order in which\n+    // they were received, blocking on a per-client basis. We won't\n+    // process the next request in the queue if we are currently busy\n+    // handling a previous request.\n+    std::deque<std::unique_ptr<HTTPRequest>> m_req_queue;\n+    // Set to true by the main thread when a request is popped off\n+    // and passed to a worker, reset to false by the worker thread.\n+    std::atomic_bool m_req_busy{false};\n+\n+    // Response data destined for this client.\n+    // Written to directly by http worker threads, read and erased by Sockman I/O\n+    Mutex m_send_mutex;\n+    std::vector<std::byte> m_send_buffer GUARDED_BY(m_send_mutex);\n+    // Set true by worker threads after writing a response to m_send_buffer.\n+    // Set false by the Sockman I/O thread after flushing m_send_buffer.\n+    // Checked in the Sockman I/O loop to avoid locking m_send_mutex if there's nothing to send.\n+    std::atomic_bool m_send_ready{false};\n+\n+    // Set to true when we receive request data and set to false once m_send_buffer is cleared.\n+    // Checked during DisconnectClients(). All of these operations take place in the Sockman I/O loop,\n+    // however it may get set my a worker thread during an \"optimistic send\".\n+    std::atomic_bool m_prevent_disconnect{false};",
      "path": "src/httpserver.h",
      "position": null,
      "original_position": 212,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would be good to note that this overrides `m_disconnect`:\r\n\r\n```cpp\r\n// If set, then the client will not be disconnected even if `m_disconnect` is true.\r\n```",
      "created_at": "2025-06-05T11:35:50Z",
      "updated_at": "2025-06-05T14:02:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2128627105",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128627105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": 177,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128628047",
      "pull_request_review_id": 2899730748,
      "id": 2128628047,
      "node_id": "PRRC_kwDOABII585-4ElP",
      "diff_hunk": "@@ -27,168 +34,309 @@ static const int DEFAULT_HTTP_WORKQUEUE=64;\n \n static const int DEFAULT_HTTP_SERVER_TIMEOUT=30;\n \n-struct evhttp_request;\n-struct event_base;\n-class CService;\n-class HTTPRequest;\n+enum HTTPRequestMethod {\n+    UNKNOWN,\n+    GET,\n+    POST,\n+    HEAD,\n+    PUT\n+};\n \n-/** Initialize HTTP server.\n- * Call this before RegisterHTTPHandler or EventBase().\n- */\n-bool InitHTTPServer(const util::SignalInterrupt& interrupt);\n-/** Start HTTP server.\n- * This is separate from InitHTTPServer to give users race-condition-free time\n- * to register their handlers between InitHTTPServer and StartHTTPServer.\n+/** Event handler closure.\n  */\n-void StartHTTPServer();\n-/** Interrupt HTTP server threads */\n-void InterruptHTTPServer();\n-/** Stop HTTP server */\n-void StopHTTPServer();\n+class HTTPClosure\n+{\n+public:\n+    virtual void operator()() = 0;\n+    virtual ~HTTPClosure() = default;\n+};\n \n-/** Change logging level for libevent. */\n-void UpdateHTTPServerLogging(bool enable);\n+namespace http_bitcoin {\n+using util::LineReader;\n+using NodeId = SockMan::Id;\n \n-/** Handler for requests to a certain HTTP path */\n-typedef std::function<bool(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n-/** Register handler for prefix.\n- * If multiple handlers match a prefix, the first-registered one will\n- * be invoked.\n- */\n-void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler);\n-/** Unregister handler for prefix */\n-void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch);\n+// shortest valid request line, used by libevent in evhttp_parse_request_line()\n+static const size_t MIN_REQUEST_LINE_LENGTH{strlen(\"GET / HTTP/1.0\")};\n+// maximum size of http request (request line + headers)\n+// see https://github.com/bitcoin/bitcoin/issues/6425\n+static const size_t MAX_HEADERS_SIZE{8192};\n \n-/** Return evhttp event base. This can be used by submodules to\n- * queue timers or custom events.\n- */\n-struct event_base* EventBase();\n+class HTTPHeaders\n+{\n+public:\n+    std::optional<std::string_view> Find(const std::string key) const;\n+    void Write(const std::string key, const std::string value);\n+    void Remove(const std::string key);\n+    bool Read(util::LineReader& reader);\n+    std::string Stringify() const;\n+\n+private:\n+    std::map<std::string, std::string, util::CaseInsensitiveComparator> m_map;\n+};\n+\n+class HTTPResponse\n+{\n+public:\n+    int m_version_major;\n+    int m_version_minor;\n+    HTTPStatusCode m_status;\n+    std::string m_reason;\n+    HTTPHeaders m_headers;\n+    std::vector<std::byte> m_body;\n+    bool m_keep_alive{false};\n+\n+    std::string StringifyHeaders() const;\n+};\n+\n+class HTTPClient;\n \n-/** In-flight HTTP request.\n- * Thin C++ wrapper around evhttp_request.\n- */\n class HTTPRequest\n {\n-private:\n-    struct evhttp_request* req;\n-    const util::SignalInterrupt& m_interrupt;\n-    bool replySent;\n+public:\n+    std::string m_method;\n+    std::string m_target;\n+    // Default protocol version is used by error responses to unreadable requests\n+    int m_version_major{1};\n+    int m_version_minor{1};\n+    HTTPHeaders m_headers;\n+    std::string m_body;\n+\n+    // Keep a pointer to the client that made the request so\n+    // we know who to respond to.\n+    std::shared_ptr<HTTPClient> m_client;\n+    explicit HTTPRequest(std::shared_ptr<HTTPClient> client) : m_client(client) {};\n+    // Null client for unit tests\n+    explicit HTTPRequest() : m_client(nullptr) {};\n+\n+    // Readers return false if they need more data from the\n+    // socket to parse properly. They throw errors if\n+    // the data is invalid.\n+    bool LoadControlData(LineReader& reader);\n+    bool LoadHeaders(LineReader& reader);\n+    bool LoadBody(LineReader& reader);\n+\n+    // These methods reimplement the API from http_libevent::HTTPRequest\n+    // for downstream JSONRPC and REST modules.\n+    std::string GetURI() const {return m_target;};\n+    CService GetPeer() const;\n+    HTTPRequestMethod GetRequestMethod() const;\n+    std::optional<std::string> GetQueryParameter(const std::string& key) const;\n+    std::pair<bool, std::string_view> GetHeader(const std::string& hdr) const;\n+    std::string ReadBody() const {return m_body;};\n+    void WriteHeader(const std::string& hdr, const std::string& value);\n+\n+    // Response headers may be set in advance before response body is known\n+    HTTPHeaders m_response_headers;\n+    void WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body = {});\n+    void WriteReply(HTTPStatusCode status, std::string_view reply_body_view)\n+    {\n+        WriteReply(status, std::as_bytes(std::span{reply_body_view}));\n+    }\n+};\n+\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key);\n+\n+class HTTPServer;\n \n+class HTTPClient\n+{\n public:\n-    explicit HTTPRequest(struct evhttp_request* req, const util::SignalInterrupt& interrupt, bool replySent = false);\n-    ~HTTPRequest();\n-\n-    enum RequestMethod {\n-        UNKNOWN,\n-        GET,\n-        POST,\n-        HEAD,\n-        PUT\n+    // ID provided by SockMan, inherited by HTTPServer\n+    NodeId m_node_id;\n+    // Remote address of connected client\n+    CService m_addr;\n+    // IP:port of connected client, cached for logging purposes\n+    std::string m_origin;\n+    // Pointer back to the server so we can call Sockman I/O methods from the client\n+    // Ok to remain null for unit tests.\n+    HTTPServer* m_server;\n+\n+    // In lieu of an intermediate transport class like p2p uses,\n+    // we copy data from the socket buffer to the client object\n+    // and attempt to read HTTP requests from here.\n+    std::vector<std::byte> m_recv_buffer{};\n+\n+    // Requests from a client must be processed in the order in which\n+    // they were received, blocking on a per-client basis. We won't\n+    // process the next request in the queue if we are currently busy\n+    // handling a previous request.\n+    std::deque<std::unique_ptr<HTTPRequest>> m_req_queue;\n+    // Set to true by the main thread when a request is popped off\n+    // and passed to a worker, reset to false by the worker thread.\n+    std::atomic_bool m_req_busy{false};\n+\n+    // Response data destined for this client.\n+    // Written to directly by http worker threads, read and erased by Sockman I/O\n+    Mutex m_send_mutex;\n+    std::vector<std::byte> m_send_buffer GUARDED_BY(m_send_mutex);\n+    // Set true by worker threads after writing a response to m_send_buffer.\n+    // Set false by the Sockman I/O thread after flushing m_send_buffer.\n+    // Checked in the Sockman I/O loop to avoid locking m_send_mutex if there's nothing to send.\n+    std::atomic_bool m_send_ready{false};\n+\n+    // Set to true when we receive request data and set to false once m_send_buffer is cleared.\n+    // Checked during DisconnectClients(). All of these operations take place in the Sockman I/O loop,\n+    // however it may get set my a worker thread during an \"optimistic send\".\n+    std::atomic_bool m_prevent_disconnect{false};\n+\n+    // Client request to keep connection open after all requests have been responded to.",
      "path": "src/httpserver.h",
      "position": null,
      "original_position": 214,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n    // Client requested to keep the connection open after all requests have been responded to.\r\n```",
      "created_at": "2025-06-05T11:36:21Z",
      "updated_at": "2025-06-05T14:02:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2128628047",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128628047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128770318",
      "pull_request_review_id": 2899730748,
      "id": 2128770318,
      "node_id": "PRRC_kwDOABII585-4nUO",
      "diff_hunk": "@@ -417,361 +286,708 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n     queue->Run();\n }\n \n-/** libevent event log callback */\n-static void libevent_log_cb(int severity, const char *msg)\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n {\n-    BCLog::Level level;\n-    switch (severity) {\n-    case EVENT_LOG_DEBUG:\n-        level = BCLog::Level::Debug;\n-        break;\n-    case EVENT_LOG_MSG:\n-        level = BCLog::Level::Info;\n-        break;\n-    case EVENT_LOG_WARN:\n-        level = BCLog::Level::Warning;\n-        break;\n-    default: // EVENT_LOG_ERR and others are mapped to error\n-        level = BCLog::Level::Error;\n-        break;\n+    LogDebug(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+    LOCK(g_httppathhandlers_mutex);\n+    pathHandlers.emplace_back(prefix, exactMatch, handler);\n+}\n+\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+{\n+    LOCK(g_httppathhandlers_mutex);\n+    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i)\n+        if (i->prefix == prefix && i->exactMatch == exactMatch)\n+            break;\n+    if (i != iend)\n+    {\n+        LogDebug(BCLog::HTTP, \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+        pathHandlers.erase(i);\n     }\n-    LogPrintLevel(BCLog::LIBEVENT, level, \"%s\\n\", msg);\n }\n \n-bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+namespace http_bitcoin {\n+using util::Split;\n+\n+std::optional<std::string_view> HTTPHeaders::Find(const std::string key) const\n {\n-    if (!InitHTTPAllowList())\n-        return false;\n+    const auto it = m_map.find(key);\n+    if (it == m_map.end()) return std::nullopt;\n+    return std::string_view(it->second);\n+}\n \n-    // Redirect libevent's logging to our own log\n-    event_set_log_callback(&libevent_log_cb);\n-    // Update libevent's log handling.\n-    UpdateHTTPServerLogging(LogInstance().WillLogCategory(BCLog::LIBEVENT));\n+void HTTPHeaders::Write(const std::string key, const std::string value)\n+{\n+    // If present, append value to list\n+    const auto existing_value = Find(key);\n+    if (existing_value) {\n+        m_map[key] = std::string(existing_value.value()) + \", \" + value;\n+    } else {\n+        m_map[key] = value;\n+    }\n+}\n \n-#ifdef WIN32\n-    evthread_use_windows_threads();\n-#else\n-    evthread_use_pthreads();\n-#endif\n+void HTTPHeaders::Remove(const std::string key)\n+{\n+    m_map.erase(key);\n+}\n \n-    raii_event_base base_ctr = obtain_event_base();\n+bool HTTPHeaders::Read(util::LineReader& reader)\n+{\n+    // Headers https://httpwg.org/specs/rfc9110.html#rfc.section.6.3\n+    // A sequence of Field Lines https://httpwg.org/specs/rfc9110.html#rfc.section.5.2\n+    do {\n+        auto maybe_line = reader.ReadLine();\n+        if (!maybe_line) return false;\n+        const std::string& line = *maybe_line;\n \n-    /* Create a new evhttp object to handle requests. */\n-    raii_evhttp http_ctr = obtain_evhttp(base_ctr.get());\n-    struct evhttp* http = http_ctr.get();\n-    if (!http) {\n-        LogPrintf(\"couldn't create evhttp. Exiting.\\n\");\n-        return false;\n-    }\n+        // An empty line indicates end of the headers section https://www.rfc-editor.org/rfc/rfc2616#section-4\n+        if (line.length() == 0) break;\n \n-    evhttp_set_timeout(http, gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n-    evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n-    evhttp_set_max_body_size(http, MAX_SIZE);\n-    evhttp_set_gencb(http, http_request_cb, (void*)&interrupt);\n+        // Header line must have at least one \":\"\n+        // keys are not allowed to have delimiters like \":\" but values are\n+        // https://httpwg.org/specs/rfc9110.html#rfc.section.5.6.2\n+        const size_t pos{line.find(':')};\n+        if (pos == std::string::npos) throw std::runtime_error(\"HTTP header missing colon (:)\");\n \n-    if (!HTTPBindAddresses(http)) {\n-        LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n-        return false;\n+        // Whitespace is optional\n+        std::string key = util::TrimString(line.substr(0, pos));\n+        std::string value = util::TrimString(line.substr(pos + 1));\n+        Write(key, value);\n+    } while (true);\n+\n+    return true;\n+}\n+\n+std::string HTTPHeaders::Stringify() const\n+{\n+    std::string out;\n+    for (const auto& [key, value] : m_map) {\n+        out += key + \": \" + value + \"\\r\\n\";\n     }\n \n-    LogDebug(BCLog::HTTP, \"Initialized HTTP server\\n\");\n-    int workQueueDepth = std::max((long)gArgs.GetIntArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n-    LogDebug(BCLog::HTTP, \"creating work queue of depth %d\\n\", workQueueDepth);\n+    // Headers are terminated by an empty line\n+    out += \"\\r\\n\";\n+\n+    return out;\n+}\n+\n+std::string HTTPResponse::StringifyHeaders() const\n+{\n+    return strprintf(\"HTTP/%d.%d %d %s\\r\\n%s\", m_version_major, m_version_minor, m_status, m_reason, m_headers.Stringify());\n+}\n+\n+bool HTTPRequest::LoadControlData(LineReader& reader)\n+{\n+    auto maybe_line = reader.ReadLine();\n+    if (!maybe_line) return false;\n+    const std::string& request_line = *maybe_line;\n+\n+    // Request Line aka Control Data https://httpwg.org/specs/rfc9110.html#rfc.section.6.2\n+    // Three words separated by spaces, terminated by \\n or \\r\\n\n+    if (request_line.length() < MIN_REQUEST_LINE_LENGTH) throw std::runtime_error(\"HTTP request line too short\");\n+\n+    const std::vector<std::string_view> parts{Split<std::string_view>(request_line, \" \")};\n+    if (parts.size() != 3) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_method = parts[0];\n+    m_target = parts[1];\n+\n+    if (parts[2].rfind(\"HTTP/\") != 0) throw std::runtime_error(\"HTTP request line malformed\");\n+    const std::vector<std::string_view> version_parts{Split<std::string_view>(parts[2].substr(5), \".\")};\n+    if (version_parts.size() != 2) throw std::runtime_error(\"HTTP request line malformed\");\n+    auto major = ToIntegral<int>(version_parts[0]);\n+    auto minor = ToIntegral<int>(version_parts[1]);\n+    if (!major || !minor) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_version_major = major.value();\n+    m_version_minor = minor.value();\n \n-    g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n-    // transfer ownership to eventBase/HTTP via .release()\n-    eventBase = base_ctr.release();\n-    eventHTTP = http_ctr.release();\n     return true;\n }\n \n-void UpdateHTTPServerLogging(bool enable) {\n-    if (enable) {\n-        event_enable_debug_logging(EVENT_DBG_ALL);\n+bool HTTPRequest::LoadHeaders(LineReader& reader)\n+{\n+    return m_headers.Read(reader);\n+}\n+\n+bool HTTPRequest::LoadBody(LineReader& reader)\n+{\n+    // https://httpwg.org/specs/rfc9112.html#message.body\n+\n+    auto transfer_encoding_header = m_headers.Find(\"Transfer-Encoding\");\n+    if (transfer_encoding_header && ToLower(transfer_encoding_header.value()) == \"chunked\") {\n+        // Transfer-Encoding: https://datatracker.ietf.org/doc/html/rfc7230.html#section-3.3.1\n+        // Chunked Transfer Coding: https://datatracker.ietf.org/doc/html/rfc7230.html#section-4.1\n+        // see evhttp_handle_chunked_read() in libevent http.c\n+        while (reader.Left() > 0) {\n+            auto maybe_chunk_size = reader.ReadLine();\n+            if (!maybe_chunk_size) return false;\n+            uint64_t chunk_size;\n+\n+            if (!ParseUInt64Hex(maybe_chunk_size.value(), &chunk_size)) throw std::runtime_error(\"Invalid chunk size\");\n+\n+            bool last_chunk{chunk_size == 0};\n+\n+            if (!last_chunk) {\n+                // We are still expecting more data for this chunk\n+                if (reader.Left() < chunk_size) {\n+                    return false;\n+                }\n+                // Pack chunk onto body\n+                m_body += reader.ReadLength(chunk_size);\n+            }\n+\n+            // Even though every chunk size is explicitly declared,\n+            // they are still terminated by a CRLF we don't need.\n+            auto crlf = reader.ReadLine();\n+            if (!crlf || crlf.value().size() != 0) throw std::runtime_error(\"Improperly terminated chunk\");\n+\n+            if (last_chunk) return true;\n+        }\n+\n+        // We read all the chunks but never got the last chunk, wait for client to send more\n+        return false;\n     } else {\n-        event_enable_debug_logging(EVENT_DBG_NONE);\n+        // No Content-length or Transfer-Encoding header means no body, see libevent evhttp_get_body()\n+        auto content_length_value{m_headers.Find(\"Content-Length\")};\n+        if (!content_length_value) return true;\n+\n+        uint64_t content_length;\n+        if (!ParseUInt64(content_length_value.value(), &content_length)) throw std::runtime_error(\"Cannot parse Content-Length value\");\n+\n+        // Not enough data in buffer for expected body\n+        if (reader.Left() < content_length) return false;\n+\n+        m_body = reader.ReadLength(content_length);\n+\n+        return true;\n     }\n }\n \n-static std::thread g_thread_http;\n-static std::vector<std::thread> g_thread_http_workers;\n+CService HTTPRequest::GetPeer() const\n+{\n+    return m_client->m_addr;\n+}\n \n-void StartHTTPServer()\n+HTTPRequestMethod HTTPRequest::GetRequestMethod() const\n {\n-    int rpcThreads = std::max((long)gArgs.GetIntArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n-    LogInfo(\"Starting HTTP server with %d worker threads\\n\", rpcThreads);\n-    g_thread_http = std::thread(ThreadHTTP, eventBase);\n+    if (m_method == \"GET\") return HTTPRequestMethod::GET;\n+    if (m_method == \"POST\") return HTTPRequestMethod::POST;\n+    if (m_method == \"HEAD\") return HTTPRequestMethod::HEAD;\n+    if (m_method == \"PUT\") return HTTPRequestMethod::PUT;\n+    return HTTPRequestMethod::UNKNOWN;\n+}\n \n-    for (int i = 0; i < rpcThreads; i++) {\n-        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, g_work_queue.get(), i);\n+std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+{\n+    return GetQueryParameterFromUri(GetURI(), key);\n+}\n+\n+// See libevent http.c evhttp_parse_query_impl()\n+// and https://www.rfc-editor.org/rfc/rfc3986#section-3.4\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key)\n+{\n+    // Handle %XX encoding\n+    std::string decoded_uri{UrlDecode(uri)};\n+\n+    // find query in URI\n+    size_t start = decoded_uri.find('?');\n+    if (start == std::string::npos) return std::nullopt;\n+    size_t end = decoded_uri.find('#', start);\n+    if (end == std::string::npos) {\n+        end = decoded_uri.length();\n+    }\n+    const std::string_view query{decoded_uri.data() + start + 1, end - start - 1};\n+    // find requested parameter in query\n+    const std::vector<std::string_view> params{Split<std::string_view>(query, \"&\")};\n+    for (const std::string_view& param : params) {\n+        size_t delim = param.find('=');\n+        if (key == param.substr(0, delim)) {\n+            if (delim == std::string::npos) {\n+                return \"\";\n+            } else {\n+                return std::string(param.substr(delim + 1));\n+            }\n+        }\n     }\n+    return std::nullopt;\n }\n \n-void InterruptHTTPServer()\n+std::pair<bool, std::string_view> HTTPRequest::GetHeader(const std::string& hdr) const\n {\n-    LogDebug(BCLog::HTTP, \"Interrupting HTTP server\\n\");\n-    if (eventHTTP) {\n-        // Reject requests on current connections\n-        evhttp_set_gencb(eventHTTP, http_reject_request_cb, nullptr);\n-    }\n-    if (g_work_queue) {\n-        g_work_queue->Interrupt();\n-    }\n+    std::optional<std::string_view> found{m_headers.Find(hdr)};\n+    if (found.has_value()) {\n+        return std::make_pair(true, found.value());\n+    } else\n+        return std::make_pair(false, \"\");\n }\n \n-void StopHTTPServer()\n+void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n {\n-    LogDebug(BCLog::HTTP, \"Stopping HTTP server\\n\");\n-    if (g_work_queue) {\n-        LogDebug(BCLog::HTTP, \"Waiting for HTTP worker threads to exit\\n\");\n-        for (auto& thread : g_thread_http_workers) {\n-            thread.join();\n+    m_response_headers.Write(hdr, value);\n+}\n+\n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)\n+{\n+    HTTPResponse res;\n+\n+    // Some response headers are determined in advance and stored in the request\n+    res.m_headers = std::move(m_response_headers);\n+\n+    // Response version matches request version\n+    res.m_version_major = m_version_major;\n+    res.m_version_minor = m_version_minor;\n+\n+    // Add response code and look up reason string\n+    res.m_status = status;\n+    res.m_reason = HTTPReason.find(status)->second;\n+\n+    // See libevent evhttp_response_needs_body()\n+    // Response headers are different if no body is needed\n+    bool needs_body{status != HTTP_NO_CONTENT && (status < 100 || status >= 200)};\n+\n+    // See libevent evhttp_make_header_response()\n+    // Expected response headers depend on protocol version\n+    if (m_version_major == 1) {\n+        // HTTP/1.0\n+        if (m_version_minor == 0) {\n+            auto connection_header{m_headers.Find(\"Connection\")};\n+            if (connection_header && ToLower(connection_header.value()) == \"keep-alive\") {\n+                res.m_headers.Write(\"Connection\", \"keep-alive\");\n+                res.m_keep_alive = true;\n+            }\n+        }\n+\n+        // HTTP/1.1\n+        if (m_version_minor >= 1) {\n+            const int64_t now_seconds{TicksSinceEpoch<std::chrono::seconds>(NodeClock::now())};\n+            res.m_headers.Write(\"Date\", FormatRFC7231DateTime(now_seconds));\n+\n+            if (needs_body) {\n+                res.m_headers.Write(\"Content-Length\", strprintf(\"%d\", reply_body.size()));\n+            }\n+\n+            // Default for HTTP/1.1\n+            res.m_keep_alive = true;\n         }\n-        g_thread_http_workers.clear();\n     }\n-    // Unlisten sockets, these are what make the event loop running, which means\n-    // that after this and all connections are closed the event loop will quit.\n-    for (evhttp_bound_socket *socket : boundSockets) {\n-        evhttp_del_accept_socket(eventHTTP, socket);\n+\n+    if (needs_body && !res.m_headers.Find(\"Content-Type\")) {\n+        // Default type from libevent evhttp_new_object()\n+        res.m_headers.Write(\"Content-Type\", \"text/html; charset=ISO-8859-1\");\n     }\n-    boundSockets.clear();\n+\n+    auto connection_header{m_headers.Find(\"Connection\")};\n+    if (connection_header && ToLower(connection_header.value()) == \"close\") {\n+        // Might not exist already but we need to replace it, not append to it\n+        res.m_headers.Remove(\"Connection\");\n+        res.m_headers.Write(\"Connection\", \"close\");\n+        res.m_keep_alive = false;\n+    }\n+\n+    m_client->m_keep_alive = res.m_keep_alive;\n+\n+    // Serialize the response headers\n+    const std::string headers{res.StringifyHeaders()};\n+    const auto headers_bytes{std::as_bytes(std::span(headers.begin(), headers.end()))};\n+\n+    bool send_buffer_was_empty{false};\n+    // Fill the send buffer with the complete serialized response headers + body\n     {\n-        if (const auto n_connections{g_requests.CountActiveConnections()}; n_connections != 0) {\n-            LogDebug(BCLog::HTTP, \"Waiting for %d connections to stop HTTP server\\n\", n_connections);\n-        }\n-        g_requests.WaitUntilEmpty();\n-    }\n-    if (eventHTTP) {\n-        // Schedule a callback to call evhttp_free in the event base thread, so\n-        // that evhttp_free does not need to be called again after the handling\n-        // of unfinished request connections that follows.\n-        event_base_once(eventBase, -1, EV_TIMEOUT, [](evutil_socket_t, short, void*) {\n-            evhttp_free(eventHTTP);\n-            eventHTTP = nullptr;\n-        }, nullptr, nullptr);\n-    }\n-    if (eventBase) {\n-        LogDebug(BCLog::HTTP, \"Waiting for HTTP event thread to exit\\n\");\n-        if (g_thread_http.joinable()) g_thread_http.join();\n-        event_base_free(eventBase);\n-        eventBase = nullptr;\n-    }\n-    g_work_queue.reset();\n-    LogDebug(BCLog::HTTP, \"Stopped HTTP server\\n\");\n-}\n+        LOCK(m_client->m_send_mutex);\n+        send_buffer_was_empty = m_client->m_send_buffer.empty();\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), headers_bytes.begin(), headers_bytes.end());\n+\n+        // We've been using std::span up until now but it is finally time to copy\n+        // data. The original data will go out of scope when WriteReply() returns.\n+        // This is analogous to the memcpy() in libevent's evbuffer_add()\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), reply_body.begin(), reply_body.end());\n+    }\n+\n+    LogDebug(\n+        BCLog::HTTP,\n+        \"HTTPResponse (status code: %d size: %lld) added to send buffer for client %s (id=%lld)\\n\",\n+        status,\n+        headers_bytes.size() + reply_body.size(),\n+        m_client->m_origin,\n+        m_client->m_node_id);\n+\n+    // If the send buffer was empty before we wrote this reply, we can try an\n+    // optimistic send akin to CConnman::PushMessage() in which we\n+    // push the data directly out the socket to client right now, instead\n+    // of waiting for the next iteration of the Sockman I/O loop.\n+    if (send_buffer_was_empty) {\n+        m_client->SendBytesFromBuffer();\n+    } else {\n+        // Inform Sockman I/O there is data that is ready to be sent to this client\n+        // in the next loop iteration.\n+        m_client->m_send_ready = true;\n+    }\n \n-struct event_base* EventBase()\n-{\n-    return eventBase;\n+    // Signal to the Sockman I/O loop that we are ready to handle the next request.\n+    m_client->m_req_busy = false;\n }\n \n-static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n+bool HTTPClient::ReadRequest(std::unique_ptr<HTTPRequest>& req)\n {\n-    // Static handler: simply call inner handler\n-    HTTPEvent *self = static_cast<HTTPEvent*>(data);\n-    self->handler();\n-    if (self->deleteWhenTriggered)\n-        delete self;\n+    LineReader reader(m_recv_buffer, MAX_HEADERS_SIZE);\n+\n+    if (!req->LoadControlData(reader)) return false;\n+    if (!req->LoadHeaders(reader)) return false;\n+    if (!req->LoadBody(reader)) return false;\n+\n+    // Remove the bytes read out of the buffer.\n+    // If one of the above calls throws an error, the caller must\n+    // catch it and disconnect the client.\n+    m_recv_buffer.erase(\n+        m_recv_buffer.begin(),\n+        m_recv_buffer.begin() + (reader.it - reader.start));\n+\n+    return true;\n }\n \n-HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void()>& _handler):\n-    deleteWhenTriggered(_deleteWhenTriggered), handler(_handler)\n-{\n-    ev = event_new(base, -1, 0, httpevent_callback_fn, this);\n-    assert(ev);\n+bool HTTPClient::SendBytesFromBuffer()\n+{\n+    Assume(m_server);\n+\n+    // Send as much data from this client's buffer as we can\n+    LOCK(m_send_mutex);\n+    if (!m_send_buffer.empty()) {\n+        std::string err;\n+        // We don't intend to \"send more\" because http responses are usually small and we want the kernel to send them right away.\n+        ssize_t bytes_sent = m_server->SendBytes(m_node_id, MakeUCharSpan(m_send_buffer), /*will_send_more=*/false, err);\n+        if (bytes_sent < 0) {\n+            LogDebug(\n+                BCLog::HTTP,\n+                \"Error sending HTTP response data to client %s (id=%lld): %s\\n\",\n+                m_origin,\n+                m_node_id,\n+                err);\n+            m_send_ready = false;\n+            m_prevent_disconnect = false;\n+            m_disconnect = true;\n+            return false;\n+        }\n+\n+        Assume(static_cast<size_t>(bytes_sent) <= m_send_buffer.size());\n+        m_send_buffer.erase(m_send_buffer.begin(), m_send_buffer.begin() + bytes_sent);\n+\n+        LogDebug(\n+            BCLog::HTTP,\n+            \"Sent %d bytes to client %s (id=%lld)\\n\",\n+            bytes_sent,\n+            m_origin,\n+            m_node_id);\n+\n+        // This check is inside the if(!empty) block meaning \"there was data but now its gone\".\n+        // We shouldn't even be calling SendBytesFromBuffer() when the send buffer is empty,\n+        // but for belt-and-suspenders, we don't want to modify the disconnect flags if SendBytesFromBuffer() was a no-op.\n+        if (m_send_buffer.empty()) {\n+            m_send_ready = false;\n+            m_prevent_disconnect = false;\n+\n+            // Our work is done here\n+            if (!m_keep_alive) {\n+                m_disconnect = true;\n+                return false;\n+            }\n+        } else {\n+            m_send_ready = true;\n+            m_prevent_disconnect = true;\n+        }\n+    }\n+\n+    return true;\n }\n-HTTPEvent::~HTTPEvent()\n+\n+void HTTPServer::CloseConnectionInternal(std::shared_ptr<HTTPClient>& client)\n {\n-    event_free(ev);\n+    if (CloseConnection(client->m_node_id)) {\n+        LogDebug(BCLog::HTTP, \"Disconnected HTTP client %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    } else {\n+        LogDebug(BCLog::HTTP, \"Failed to disconnect non-existent HTTP client %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    }\n }\n-void HTTPEvent::trigger(struct timeval* tv)\n+\n+void HTTPServer::DisconnectClients()\n {\n-    if (tv == nullptr)\n-        event_active(ev, 0, 0); // immediately trigger event in main thread\n-    else\n-        evtimer_add(ev, tv); // trigger after timeval passed\n+    const auto now{Now<SteadySeconds>()};\n+    for (auto it = m_connected_clients.begin(); it != m_connected_clients.end();) {\n+        bool timeout{now - it->second->m_idle_since > m_rpcservertimeout};\n+        if (((it->second->m_disconnect || m_disconnect_all_clients) && !it->second->m_prevent_disconnect)\n+            || timeout) {\n+            CloseConnectionInternal(it->second);\n+            it = m_connected_clients.erase(it);\n+        } else {\n+            ++it;\n+        }\n+    }\n+    m_no_clients = m_connected_clients.size() == 0;\n }\n-HTTPRequest::HTTPRequest(struct evhttp_request* _req, const util::SignalInterrupt& interrupt, bool _replySent)\n-    : req(_req), m_interrupt(interrupt), replySent(_replySent)\n+\n+bool HTTPServer::EventNewConnectionAccepted(NodeId node_id,\n+                                            const CService& me,\n+                                            const CService& them)\n {\n+    auto client = std::make_shared<HTTPClient>(node_id, them);\n+    // Point back to the server\n+    client->m_server = this;\n+    // Set timeout\n+    client->m_idle_since = Now<SteadySeconds>();\n+    LogDebug(BCLog::HTTP, \"HTTP Connection accepted from %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    m_connected_clients.emplace(client->m_node_id, std::move(client));\n+    m_no_clients = false;\n+    return true;\n }\n \n-HTTPRequest::~HTTPRequest()\n+void HTTPServer::EventReadyToSend(NodeId node_id, bool& cancel_recv)\n {\n-    if (!replySent) {\n-        // Keep track of whether reply was sent to avoid request leaks\n-        LogPrintf(\"%s: Unhandled request\\n\", __func__);\n-        WriteReply(HTTP_INTERNAL_SERVER_ERROR, \"Unhandled request\");\n+    // Next attempt to receive data from this node is permitted\n+    cancel_recv = false;\n+\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n     }\n-    // evhttpd cleans up the request, as long as a reply was sent.\n+\n+    // SendBytesFromBuffer() returns true if we should keep the client around,\n+    // false if we are done with it. Invert that boolean to inform Sockman\n+    // whether it should cancel the next receive attempt from this client.\n+    cancel_recv = !client->SendBytesFromBuffer();\n }\n \n-std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr) const\n+void HTTPServer::EventGotData(NodeId node_id, std::span<const uint8_t> data)\n {\n-    const struct evkeyvalq* headers = evhttp_request_get_input_headers(req);\n-    assert(headers);\n-    const char* val = evhttp_find_header(headers, hdr.c_str());\n-    if (val)\n-        return std::make_pair(true, val);\n-    else\n-        return std::make_pair(false, \"\");\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n+\n+    // Reset idle timeout\n+    client->m_idle_since = Now<SteadySeconds>();\n+\n+    // Prevent disconnect until all requests are completely handled.\n+    client->m_prevent_disconnect = true;\n+\n+    // Copy data from socket buffer to client receive buffer\n+    client->m_recv_buffer.insert(\n+        client->m_recv_buffer.end(),\n+        reinterpret_cast<const std::byte*>(data.data()),\n+        reinterpret_cast<const std::byte*>(data.data() + data.size())\n+    );\n+\n+    // Try reading (potentially multiple) HTTP requests from the buffer\n+    while (client->m_recv_buffer.size() > 0) {\n+        // Create a new request object and try to fill it with data from the receive buffer\n+        auto req = std::make_unique<HTTPRequest>(client);\n+        try {\n+            // Stop reading if we need more data from the client to parse a complete request\n+            if (!client->ReadRequest(req)) break;\n+        } catch (const std::runtime_error& e) {\n+            LogDebug(\n+                BCLog::HTTP,\n+                \"Error reading HTTP request from client %s (id=%lld): %s\\n\",\n+                client->m_origin,\n+                client->m_node_id,\n+                e.what());\n+\n+            // We failed to read a complete request from the buffer\n+            req->WriteReply(HTTP_BAD_REQUEST);\n+            client->m_disconnect = true;\n+            break;\n+        }\n+\n+        // We read a complete request from the buffer into the queue\n+        LogDebug(\n+            BCLog::HTTP,\n+            \"Received a %s request for %s from %s (id=%lld)\\n\",\n+            req->m_method,\n+            req->m_target,\n+            req->m_client->m_origin,\n+            req->m_client->m_node_id);\n+\n+        // add request to client queue\n+        client->m_req_queue.push_back(std::move(req));\n+    }\n }\n \n-std::string HTTPRequest::ReadBody()\n+void HTTPServer::EventGotEOF(NodeId node_id)\n {\n-    struct evbuffer* buf = evhttp_request_get_input_buffer(req);\n-    if (!buf)\n-        return \"\";\n-    size_t size = evbuffer_get_length(buf);\n-    /** Trivial implementation: if this is ever a performance bottleneck,\n-     * internal copying can be avoided in multi-segment buffers by using\n-     * evbuffer_peek and an awkward loop. Though in that case, it'd be even\n-     * better to not copy into an intermediate string but use a stream\n-     * abstraction to consume the evbuffer on the fly in the parsing algorithm.\n-     */\n-    const char* data = (const char*)evbuffer_pullup(buf, size);\n-    if (!data) // returns nullptr in case of empty buffer\n-        return \"\";\n-    std::string rv(data, size);\n-    evbuffer_drain(buf, size);\n-    return rv;\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n+\n+    client->m_disconnect = true;\n }\n \n-void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n+void HTTPServer::EventGotPermanentReadError(NodeId node_id, const std::string& errmsg)\n {\n-    struct evkeyvalq* headers = evhttp_request_get_output_headers(req);\n-    assert(headers);\n-    evhttp_add_header(headers, hdr.c_str(), value.c_str());\n-}\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n \n-/** Closure sent to main thread to request a reply to be sent to\n- * a HTTP request.\n- * Replies must be sent in the main loop in the main http thread,\n- * this cannot be done from worker threads.\n- */\n-void HTTPRequest::WriteReply(int nStatus, std::span<const std::byte> reply)\n-{\n-    assert(!replySent && req);\n-    if (m_interrupt) {\n-        WriteHeader(\"Connection\", \"close\");\n-    }\n-    // Send event to main http thread to send reply message\n-    struct evbuffer* evb = evhttp_request_get_output_buffer(req);\n-    assert(evb);\n-    evbuffer_add(evb, reply.data(), reply.size());\n-    auto req_copy = req;\n-    HTTPEvent* ev = new HTTPEvent(eventBase, true, [req_copy, nStatus]{\n-        evhttp_send_reply(req_copy, nStatus, nullptr, nullptr);\n-        // Re-enable reading from the socket. This is the second part of the libevent\n-        // workaround above.\n-        if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02010900) {\n-            evhttp_connection* conn = evhttp_request_get_connection(req_copy);\n-            if (conn) {\n-                bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n-                if (bev) {\n-                    bufferevent_enable(bev, EV_READ | EV_WRITE);\n-                }\n-            }\n-        }\n-    });\n-    ev->trigger(nullptr);\n-    replySent = true;\n-    req = nullptr; // transferred back to main thread\n+    client->m_disconnect = true;\n }\n \n-CService HTTPRequest::GetPeer() const\n+void HTTPServer::EventIOLoopCompletedForOne(NodeId node_id)\n {\n-    evhttp_connection* con = evhttp_request_get_connection(req);\n-    CService peer;\n-    if (con) {\n-        // evhttp retains ownership over returned address string\n-        const char* address = \"\";\n-        uint16_t port = 0;\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n \n-#ifdef HAVE_EVHTTP_CONNECTION_GET_PEER_CONST_CHAR\n-        evhttp_connection_get_peer(con, &address, &port);\n-#else\n-        evhttp_connection_get_peer(con, (char**)&address, &port);\n-#endif // HAVE_EVHTTP_CONNECTION_GET_PEER_CONST_CHAR\n+    // If we are already handling a request from\n+    // this client, do nothing.\n+    if (client->m_req_busy) return;\n \n-        peer = MaybeFlipIPv6toCJDNS(LookupNumeric(address, port));\n+    // Otherwise, if there is a new pending request, handle it.\n+    if (!client->m_req_queue.empty()) {\n+        client->m_req_busy = true;\n+        m_request_dispatcher(std::move(client->m_req_queue.front()));\n+        client->m_req_queue.pop_front();\n     }\n-    return peer;\n }\n \n-std::string HTTPRequest::GetURI() const\n+void HTTPServer::EventIOLoopCompletedForAll()\n {\n-    return evhttp_request_get_uri(req);\n+    DisconnectClients();\n }\n \n-HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod() const\n+bool HTTPServer::ShouldTryToSend(NodeId node_id) const\n {\n-    switch (evhttp_request_get_command(req)) {\n-    case EVHTTP_REQ_GET:\n-        return GET;\n-    case EVHTTP_REQ_POST:\n-        return POST;\n-    case EVHTTP_REQ_HEAD:\n-        return HEAD;\n-    case EVHTTP_REQ_PUT:\n-        return PUT;\n-    default:\n-        return UNKNOWN;\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return false;\n     }\n+\n+    return client->m_send_ready;\n }\n \n-std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+bool HTTPServer::ShouldTryToRecv(NodeId node_id) const\n {\n-    const char* uri{evhttp_request_get_uri(req)};\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return false;\n+    }\n \n-    return GetQueryParameterFromUri(uri, key);\n+    // Don't try to receive again until we've cleared the send buffer to this client\n+    return !client->m_send_ready;\n }\n \n-std::optional<std::string> GetQueryParameterFromUri(const char* uri, const std::string& key)\n+std::shared_ptr<HTTPClient> HTTPServer::GetClientById(NodeId node_id) const\n {\n-    evhttp_uri* uri_parsed{evhttp_uri_parse(uri)};\n-    if (!uri_parsed) {\n-        throw std::runtime_error(\"URI parsing failed, it likely contained RFC 3986 invalid characters\");\n+    auto it{m_connected_clients.find(node_id)};\n+    if (it != m_connected_clients.end()) {\n+        return it->second;\n     }\n-    const char* query{evhttp_uri_get_query(uri_parsed)};\n-    std::optional<std::string> result;\n+    return nullptr;\n+}\n \n-    if (query) {\n-        // Parse the query string into a key-value queue and iterate over it\n-        struct evkeyvalq params_q;\n-        evhttp_parse_query_str(query, &params_q);\n+bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+{\n+    if (!InitHTTPAllowList())\n+        return false;",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 1114,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n    if (!InitHTTPAllowList()) {\r\n        return false;\r\n    }\r\n```",
      "created_at": "2025-06-05T12:45:28Z",
      "updated_at": "2025-06-05T14:02:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2128770318",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128770318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": 898,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 904,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128776391",
      "pull_request_review_id": 2899730748,
      "id": 2128776391,
      "node_id": "PRRC_kwDOABII585-4ozH",
      "diff_hunk": "@@ -417,361 +286,708 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n     queue->Run();\n }\n \n-/** libevent event log callback */\n-static void libevent_log_cb(int severity, const char *msg)\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n {\n-    BCLog::Level level;\n-    switch (severity) {\n-    case EVENT_LOG_DEBUG:\n-        level = BCLog::Level::Debug;\n-        break;\n-    case EVENT_LOG_MSG:\n-        level = BCLog::Level::Info;\n-        break;\n-    case EVENT_LOG_WARN:\n-        level = BCLog::Level::Warning;\n-        break;\n-    default: // EVENT_LOG_ERR and others are mapped to error\n-        level = BCLog::Level::Error;\n-        break;\n+    LogDebug(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+    LOCK(g_httppathhandlers_mutex);\n+    pathHandlers.emplace_back(prefix, exactMatch, handler);\n+}\n+\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+{\n+    LOCK(g_httppathhandlers_mutex);\n+    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i)\n+        if (i->prefix == prefix && i->exactMatch == exactMatch)\n+            break;\n+    if (i != iend)\n+    {\n+        LogDebug(BCLog::HTTP, \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+        pathHandlers.erase(i);\n     }\n-    LogPrintLevel(BCLog::LIBEVENT, level, \"%s\\n\", msg);\n }\n \n-bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+namespace http_bitcoin {\n+using util::Split;\n+\n+std::optional<std::string_view> HTTPHeaders::Find(const std::string key) const\n {\n-    if (!InitHTTPAllowList())\n-        return false;\n+    const auto it = m_map.find(key);\n+    if (it == m_map.end()) return std::nullopt;\n+    return std::string_view(it->second);\n+}\n \n-    // Redirect libevent's logging to our own log\n-    event_set_log_callback(&libevent_log_cb);\n-    // Update libevent's log handling.\n-    UpdateHTTPServerLogging(LogInstance().WillLogCategory(BCLog::LIBEVENT));\n+void HTTPHeaders::Write(const std::string key, const std::string value)\n+{\n+    // If present, append value to list\n+    const auto existing_value = Find(key);\n+    if (existing_value) {\n+        m_map[key] = std::string(existing_value.value()) + \", \" + value;\n+    } else {\n+        m_map[key] = value;\n+    }\n+}\n \n-#ifdef WIN32\n-    evthread_use_windows_threads();\n-#else\n-    evthread_use_pthreads();\n-#endif\n+void HTTPHeaders::Remove(const std::string key)\n+{\n+    m_map.erase(key);\n+}\n \n-    raii_event_base base_ctr = obtain_event_base();\n+bool HTTPHeaders::Read(util::LineReader& reader)\n+{\n+    // Headers https://httpwg.org/specs/rfc9110.html#rfc.section.6.3\n+    // A sequence of Field Lines https://httpwg.org/specs/rfc9110.html#rfc.section.5.2\n+    do {\n+        auto maybe_line = reader.ReadLine();\n+        if (!maybe_line) return false;\n+        const std::string& line = *maybe_line;\n \n-    /* Create a new evhttp object to handle requests. */\n-    raii_evhttp http_ctr = obtain_evhttp(base_ctr.get());\n-    struct evhttp* http = http_ctr.get();\n-    if (!http) {\n-        LogPrintf(\"couldn't create evhttp. Exiting.\\n\");\n-        return false;\n-    }\n+        // An empty line indicates end of the headers section https://www.rfc-editor.org/rfc/rfc2616#section-4\n+        if (line.length() == 0) break;\n \n-    evhttp_set_timeout(http, gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n-    evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n-    evhttp_set_max_body_size(http, MAX_SIZE);\n-    evhttp_set_gencb(http, http_request_cb, (void*)&interrupt);\n+        // Header line must have at least one \":\"\n+        // keys are not allowed to have delimiters like \":\" but values are\n+        // https://httpwg.org/specs/rfc9110.html#rfc.section.5.6.2\n+        const size_t pos{line.find(':')};\n+        if (pos == std::string::npos) throw std::runtime_error(\"HTTP header missing colon (:)\");\n \n-    if (!HTTPBindAddresses(http)) {\n-        LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n-        return false;\n+        // Whitespace is optional\n+        std::string key = util::TrimString(line.substr(0, pos));\n+        std::string value = util::TrimString(line.substr(pos + 1));\n+        Write(key, value);\n+    } while (true);\n+\n+    return true;\n+}\n+\n+std::string HTTPHeaders::Stringify() const\n+{\n+    std::string out;\n+    for (const auto& [key, value] : m_map) {\n+        out += key + \": \" + value + \"\\r\\n\";\n     }\n \n-    LogDebug(BCLog::HTTP, \"Initialized HTTP server\\n\");\n-    int workQueueDepth = std::max((long)gArgs.GetIntArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n-    LogDebug(BCLog::HTTP, \"creating work queue of depth %d\\n\", workQueueDepth);\n+    // Headers are terminated by an empty line\n+    out += \"\\r\\n\";\n+\n+    return out;\n+}\n+\n+std::string HTTPResponse::StringifyHeaders() const\n+{\n+    return strprintf(\"HTTP/%d.%d %d %s\\r\\n%s\", m_version_major, m_version_minor, m_status, m_reason, m_headers.Stringify());\n+}\n+\n+bool HTTPRequest::LoadControlData(LineReader& reader)\n+{\n+    auto maybe_line = reader.ReadLine();\n+    if (!maybe_line) return false;\n+    const std::string& request_line = *maybe_line;\n+\n+    // Request Line aka Control Data https://httpwg.org/specs/rfc9110.html#rfc.section.6.2\n+    // Three words separated by spaces, terminated by \\n or \\r\\n\n+    if (request_line.length() < MIN_REQUEST_LINE_LENGTH) throw std::runtime_error(\"HTTP request line too short\");\n+\n+    const std::vector<std::string_view> parts{Split<std::string_view>(request_line, \" \")};\n+    if (parts.size() != 3) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_method = parts[0];\n+    m_target = parts[1];\n+\n+    if (parts[2].rfind(\"HTTP/\") != 0) throw std::runtime_error(\"HTTP request line malformed\");\n+    const std::vector<std::string_view> version_parts{Split<std::string_view>(parts[2].substr(5), \".\")};\n+    if (version_parts.size() != 2) throw std::runtime_error(\"HTTP request line malformed\");\n+    auto major = ToIntegral<int>(version_parts[0]);\n+    auto minor = ToIntegral<int>(version_parts[1]);\n+    if (!major || !minor) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_version_major = major.value();\n+    m_version_minor = minor.value();\n \n-    g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n-    // transfer ownership to eventBase/HTTP via .release()\n-    eventBase = base_ctr.release();\n-    eventHTTP = http_ctr.release();\n     return true;\n }\n \n-void UpdateHTTPServerLogging(bool enable) {\n-    if (enable) {\n-        event_enable_debug_logging(EVENT_DBG_ALL);\n+bool HTTPRequest::LoadHeaders(LineReader& reader)\n+{\n+    return m_headers.Read(reader);\n+}\n+\n+bool HTTPRequest::LoadBody(LineReader& reader)\n+{\n+    // https://httpwg.org/specs/rfc9112.html#message.body\n+\n+    auto transfer_encoding_header = m_headers.Find(\"Transfer-Encoding\");\n+    if (transfer_encoding_header && ToLower(transfer_encoding_header.value()) == \"chunked\") {\n+        // Transfer-Encoding: https://datatracker.ietf.org/doc/html/rfc7230.html#section-3.3.1\n+        // Chunked Transfer Coding: https://datatracker.ietf.org/doc/html/rfc7230.html#section-4.1\n+        // see evhttp_handle_chunked_read() in libevent http.c\n+        while (reader.Left() > 0) {\n+            auto maybe_chunk_size = reader.ReadLine();\n+            if (!maybe_chunk_size) return false;\n+            uint64_t chunk_size;\n+\n+            if (!ParseUInt64Hex(maybe_chunk_size.value(), &chunk_size)) throw std::runtime_error(\"Invalid chunk size\");\n+\n+            bool last_chunk{chunk_size == 0};\n+\n+            if (!last_chunk) {\n+                // We are still expecting more data for this chunk\n+                if (reader.Left() < chunk_size) {\n+                    return false;\n+                }\n+                // Pack chunk onto body\n+                m_body += reader.ReadLength(chunk_size);\n+            }\n+\n+            // Even though every chunk size is explicitly declared,\n+            // they are still terminated by a CRLF we don't need.\n+            auto crlf = reader.ReadLine();\n+            if (!crlf || crlf.value().size() != 0) throw std::runtime_error(\"Improperly terminated chunk\");\n+\n+            if (last_chunk) return true;\n+        }\n+\n+        // We read all the chunks but never got the last chunk, wait for client to send more\n+        return false;\n     } else {\n-        event_enable_debug_logging(EVENT_DBG_NONE);\n+        // No Content-length or Transfer-Encoding header means no body, see libevent evhttp_get_body()\n+        auto content_length_value{m_headers.Find(\"Content-Length\")};\n+        if (!content_length_value) return true;\n+\n+        uint64_t content_length;\n+        if (!ParseUInt64(content_length_value.value(), &content_length)) throw std::runtime_error(\"Cannot parse Content-Length value\");\n+\n+        // Not enough data in buffer for expected body\n+        if (reader.Left() < content_length) return false;\n+\n+        m_body = reader.ReadLength(content_length);\n+\n+        return true;\n     }\n }\n \n-static std::thread g_thread_http;\n-static std::vector<std::thread> g_thread_http_workers;\n+CService HTTPRequest::GetPeer() const\n+{\n+    return m_client->m_addr;\n+}\n \n-void StartHTTPServer()\n+HTTPRequestMethod HTTPRequest::GetRequestMethod() const\n {\n-    int rpcThreads = std::max((long)gArgs.GetIntArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n-    LogInfo(\"Starting HTTP server with %d worker threads\\n\", rpcThreads);\n-    g_thread_http = std::thread(ThreadHTTP, eventBase);\n+    if (m_method == \"GET\") return HTTPRequestMethod::GET;\n+    if (m_method == \"POST\") return HTTPRequestMethod::POST;\n+    if (m_method == \"HEAD\") return HTTPRequestMethod::HEAD;\n+    if (m_method == \"PUT\") return HTTPRequestMethod::PUT;\n+    return HTTPRequestMethod::UNKNOWN;\n+}\n \n-    for (int i = 0; i < rpcThreads; i++) {\n-        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, g_work_queue.get(), i);\n+std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+{\n+    return GetQueryParameterFromUri(GetURI(), key);\n+}\n+\n+// See libevent http.c evhttp_parse_query_impl()\n+// and https://www.rfc-editor.org/rfc/rfc3986#section-3.4\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key)\n+{\n+    // Handle %XX encoding\n+    std::string decoded_uri{UrlDecode(uri)};\n+\n+    // find query in URI\n+    size_t start = decoded_uri.find('?');\n+    if (start == std::string::npos) return std::nullopt;\n+    size_t end = decoded_uri.find('#', start);\n+    if (end == std::string::npos) {\n+        end = decoded_uri.length();\n+    }\n+    const std::string_view query{decoded_uri.data() + start + 1, end - start - 1};\n+    // find requested parameter in query\n+    const std::vector<std::string_view> params{Split<std::string_view>(query, \"&\")};\n+    for (const std::string_view& param : params) {\n+        size_t delim = param.find('=');\n+        if (key == param.substr(0, delim)) {\n+            if (delim == std::string::npos) {\n+                return \"\";\n+            } else {\n+                return std::string(param.substr(delim + 1));\n+            }\n+        }\n     }\n+    return std::nullopt;\n }\n \n-void InterruptHTTPServer()\n+std::pair<bool, std::string_view> HTTPRequest::GetHeader(const std::string& hdr) const\n {\n-    LogDebug(BCLog::HTTP, \"Interrupting HTTP server\\n\");\n-    if (eventHTTP) {\n-        // Reject requests on current connections\n-        evhttp_set_gencb(eventHTTP, http_reject_request_cb, nullptr);\n-    }\n-    if (g_work_queue) {\n-        g_work_queue->Interrupt();\n-    }\n+    std::optional<std::string_view> found{m_headers.Find(hdr)};\n+    if (found.has_value()) {\n+        return std::make_pair(true, found.value());\n+    } else\n+        return std::make_pair(false, \"\");\n }\n \n-void StopHTTPServer()\n+void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n {\n-    LogDebug(BCLog::HTTP, \"Stopping HTTP server\\n\");\n-    if (g_work_queue) {\n-        LogDebug(BCLog::HTTP, \"Waiting for HTTP worker threads to exit\\n\");\n-        for (auto& thread : g_thread_http_workers) {\n-            thread.join();\n+    m_response_headers.Write(hdr, value);\n+}\n+\n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)\n+{\n+    HTTPResponse res;\n+\n+    // Some response headers are determined in advance and stored in the request\n+    res.m_headers = std::move(m_response_headers);\n+\n+    // Response version matches request version\n+    res.m_version_major = m_version_major;\n+    res.m_version_minor = m_version_minor;\n+\n+    // Add response code and look up reason string\n+    res.m_status = status;\n+    res.m_reason = HTTPReason.find(status)->second;\n+\n+    // See libevent evhttp_response_needs_body()\n+    // Response headers are different if no body is needed\n+    bool needs_body{status != HTTP_NO_CONTENT && (status < 100 || status >= 200)};\n+\n+    // See libevent evhttp_make_header_response()\n+    // Expected response headers depend on protocol version\n+    if (m_version_major == 1) {\n+        // HTTP/1.0\n+        if (m_version_minor == 0) {\n+            auto connection_header{m_headers.Find(\"Connection\")};\n+            if (connection_header && ToLower(connection_header.value()) == \"keep-alive\") {\n+                res.m_headers.Write(\"Connection\", \"keep-alive\");\n+                res.m_keep_alive = true;\n+            }\n+        }\n+\n+        // HTTP/1.1\n+        if (m_version_minor >= 1) {\n+            const int64_t now_seconds{TicksSinceEpoch<std::chrono::seconds>(NodeClock::now())};\n+            res.m_headers.Write(\"Date\", FormatRFC7231DateTime(now_seconds));\n+\n+            if (needs_body) {\n+                res.m_headers.Write(\"Content-Length\", strprintf(\"%d\", reply_body.size()));\n+            }\n+\n+            // Default for HTTP/1.1\n+            res.m_keep_alive = true;\n         }\n-        g_thread_http_workers.clear();\n     }\n-    // Unlisten sockets, these are what make the event loop running, which means\n-    // that after this and all connections are closed the event loop will quit.\n-    for (evhttp_bound_socket *socket : boundSockets) {\n-        evhttp_del_accept_socket(eventHTTP, socket);\n+\n+    if (needs_body && !res.m_headers.Find(\"Content-Type\")) {\n+        // Default type from libevent evhttp_new_object()\n+        res.m_headers.Write(\"Content-Type\", \"text/html; charset=ISO-8859-1\");\n     }\n-    boundSockets.clear();\n+\n+    auto connection_header{m_headers.Find(\"Connection\")};\n+    if (connection_header && ToLower(connection_header.value()) == \"close\") {\n+        // Might not exist already but we need to replace it, not append to it\n+        res.m_headers.Remove(\"Connection\");\n+        res.m_headers.Write(\"Connection\", \"close\");\n+        res.m_keep_alive = false;\n+    }\n+\n+    m_client->m_keep_alive = res.m_keep_alive;\n+\n+    // Serialize the response headers\n+    const std::string headers{res.StringifyHeaders()};\n+    const auto headers_bytes{std::as_bytes(std::span(headers.begin(), headers.end()))};\n+\n+    bool send_buffer_was_empty{false};\n+    // Fill the send buffer with the complete serialized response headers + body\n     {\n-        if (const auto n_connections{g_requests.CountActiveConnections()}; n_connections != 0) {\n-            LogDebug(BCLog::HTTP, \"Waiting for %d connections to stop HTTP server\\n\", n_connections);\n-        }\n-        g_requests.WaitUntilEmpty();\n-    }\n-    if (eventHTTP) {\n-        // Schedule a callback to call evhttp_free in the event base thread, so\n-        // that evhttp_free does not need to be called again after the handling\n-        // of unfinished request connections that follows.\n-        event_base_once(eventBase, -1, EV_TIMEOUT, [](evutil_socket_t, short, void*) {\n-            evhttp_free(eventHTTP);\n-            eventHTTP = nullptr;\n-        }, nullptr, nullptr);\n-    }\n-    if (eventBase) {\n-        LogDebug(BCLog::HTTP, \"Waiting for HTTP event thread to exit\\n\");\n-        if (g_thread_http.joinable()) g_thread_http.join();\n-        event_base_free(eventBase);\n-        eventBase = nullptr;\n-    }\n-    g_work_queue.reset();\n-    LogDebug(BCLog::HTTP, \"Stopped HTTP server\\n\");\n-}\n+        LOCK(m_client->m_send_mutex);\n+        send_buffer_was_empty = m_client->m_send_buffer.empty();\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), headers_bytes.begin(), headers_bytes.end());\n+\n+        // We've been using std::span up until now but it is finally time to copy\n+        // data. The original data will go out of scope when WriteReply() returns.\n+        // This is analogous to the memcpy() in libevent's evbuffer_add()\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), reply_body.begin(), reply_body.end());\n+    }\n+\n+    LogDebug(\n+        BCLog::HTTP,\n+        \"HTTPResponse (status code: %d size: %lld) added to send buffer for client %s (id=%lld)\\n\",\n+        status,\n+        headers_bytes.size() + reply_body.size(),\n+        m_client->m_origin,\n+        m_client->m_node_id);\n+\n+    // If the send buffer was empty before we wrote this reply, we can try an\n+    // optimistic send akin to CConnman::PushMessage() in which we\n+    // push the data directly out the socket to client right now, instead\n+    // of waiting for the next iteration of the Sockman I/O loop.\n+    if (send_buffer_was_empty) {\n+        m_client->SendBytesFromBuffer();\n+    } else {\n+        // Inform Sockman I/O there is data that is ready to be sent to this client\n+        // in the next loop iteration.\n+        m_client->m_send_ready = true;\n+    }\n \n-struct event_base* EventBase()\n-{\n-    return eventBase;\n+    // Signal to the Sockman I/O loop that we are ready to handle the next request.\n+    m_client->m_req_busy = false;\n }\n \n-static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n+bool HTTPClient::ReadRequest(std::unique_ptr<HTTPRequest>& req)\n {\n-    // Static handler: simply call inner handler\n-    HTTPEvent *self = static_cast<HTTPEvent*>(data);\n-    self->handler();\n-    if (self->deleteWhenTriggered)\n-        delete self;\n+    LineReader reader(m_recv_buffer, MAX_HEADERS_SIZE);\n+\n+    if (!req->LoadControlData(reader)) return false;\n+    if (!req->LoadHeaders(reader)) return false;\n+    if (!req->LoadBody(reader)) return false;\n+\n+    // Remove the bytes read out of the buffer.\n+    // If one of the above calls throws an error, the caller must\n+    // catch it and disconnect the client.\n+    m_recv_buffer.erase(\n+        m_recv_buffer.begin(),\n+        m_recv_buffer.begin() + (reader.it - reader.start));\n+\n+    return true;\n }\n \n-HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void()>& _handler):\n-    deleteWhenTriggered(_deleteWhenTriggered), handler(_handler)\n-{\n-    ev = event_new(base, -1, 0, httpevent_callback_fn, this);\n-    assert(ev);\n+bool HTTPClient::SendBytesFromBuffer()\n+{\n+    Assume(m_server);\n+\n+    // Send as much data from this client's buffer as we can\n+    LOCK(m_send_mutex);\n+    if (!m_send_buffer.empty()) {\n+        std::string err;\n+        // We don't intend to \"send more\" because http responses are usually small and we want the kernel to send them right away.\n+        ssize_t bytes_sent = m_server->SendBytes(m_node_id, MakeUCharSpan(m_send_buffer), /*will_send_more=*/false, err);\n+        if (bytes_sent < 0) {\n+            LogDebug(\n+                BCLog::HTTP,\n+                \"Error sending HTTP response data to client %s (id=%lld): %s\\n\",\n+                m_origin,\n+                m_node_id,\n+                err);\n+            m_send_ready = false;\n+            m_prevent_disconnect = false;\n+            m_disconnect = true;\n+            return false;\n+        }\n+\n+        Assume(static_cast<size_t>(bytes_sent) <= m_send_buffer.size());\n+        m_send_buffer.erase(m_send_buffer.begin(), m_send_buffer.begin() + bytes_sent);\n+\n+        LogDebug(\n+            BCLog::HTTP,\n+            \"Sent %d bytes to client %s (id=%lld)\\n\",\n+            bytes_sent,\n+            m_origin,\n+            m_node_id);\n+\n+        // This check is inside the if(!empty) block meaning \"there was data but now its gone\".\n+        // We shouldn't even be calling SendBytesFromBuffer() when the send buffer is empty,\n+        // but for belt-and-suspenders, we don't want to modify the disconnect flags if SendBytesFromBuffer() was a no-op.\n+        if (m_send_buffer.empty()) {\n+            m_send_ready = false;\n+            m_prevent_disconnect = false;\n+\n+            // Our work is done here\n+            if (!m_keep_alive) {\n+                m_disconnect = true;\n+                return false;\n+            }\n+        } else {\n+            m_send_ready = true;\n+            m_prevent_disconnect = true;\n+        }\n+    }\n+\n+    return true;\n }\n-HTTPEvent::~HTTPEvent()\n+\n+void HTTPServer::CloseConnectionInternal(std::shared_ptr<HTTPClient>& client)\n {\n-    event_free(ev);\n+    if (CloseConnection(client->m_node_id)) {\n+        LogDebug(BCLog::HTTP, \"Disconnected HTTP client %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    } else {\n+        LogDebug(BCLog::HTTP, \"Failed to disconnect non-existent HTTP client %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    }\n }\n-void HTTPEvent::trigger(struct timeval* tv)\n+\n+void HTTPServer::DisconnectClients()\n {\n-    if (tv == nullptr)\n-        event_active(ev, 0, 0); // immediately trigger event in main thread\n-    else\n-        evtimer_add(ev, tv); // trigger after timeval passed\n+    const auto now{Now<SteadySeconds>()};\n+    for (auto it = m_connected_clients.begin(); it != m_connected_clients.end();) {\n+        bool timeout{now - it->second->m_idle_since > m_rpcservertimeout};\n+        if (((it->second->m_disconnect || m_disconnect_all_clients) && !it->second->m_prevent_disconnect)\n+            || timeout) {\n+            CloseConnectionInternal(it->second);\n+            it = m_connected_clients.erase(it);\n+        } else {\n+            ++it;\n+        }\n+    }\n+    m_no_clients = m_connected_clients.size() == 0;\n }\n-HTTPRequest::HTTPRequest(struct evhttp_request* _req, const util::SignalInterrupt& interrupt, bool _replySent)\n-    : req(_req), m_interrupt(interrupt), replySent(_replySent)\n+\n+bool HTTPServer::EventNewConnectionAccepted(NodeId node_id,\n+                                            const CService& me,\n+                                            const CService& them)\n {\n+    auto client = std::make_shared<HTTPClient>(node_id, them);\n+    // Point back to the server\n+    client->m_server = this;\n+    // Set timeout\n+    client->m_idle_since = Now<SteadySeconds>();\n+    LogDebug(BCLog::HTTP, \"HTTP Connection accepted from %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    m_connected_clients.emplace(client->m_node_id, std::move(client));\n+    m_no_clients = false;\n+    return true;\n }\n \n-HTTPRequest::~HTTPRequest()\n+void HTTPServer::EventReadyToSend(NodeId node_id, bool& cancel_recv)\n {\n-    if (!replySent) {\n-        // Keep track of whether reply was sent to avoid request leaks\n-        LogPrintf(\"%s: Unhandled request\\n\", __func__);\n-        WriteReply(HTTP_INTERNAL_SERVER_ERROR, \"Unhandled request\");\n+    // Next attempt to receive data from this node is permitted\n+    cancel_recv = false;\n+\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n     }\n-    // evhttpd cleans up the request, as long as a reply was sent.\n+\n+    // SendBytesFromBuffer() returns true if we should keep the client around,\n+    // false if we are done with it. Invert that boolean to inform Sockman\n+    // whether it should cancel the next receive attempt from this client.\n+    cancel_recv = !client->SendBytesFromBuffer();\n }\n \n-std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr) const\n+void HTTPServer::EventGotData(NodeId node_id, std::span<const uint8_t> data)\n {\n-    const struct evkeyvalq* headers = evhttp_request_get_input_headers(req);\n-    assert(headers);\n-    const char* val = evhttp_find_header(headers, hdr.c_str());\n-    if (val)\n-        return std::make_pair(true, val);\n-    else\n-        return std::make_pair(false, \"\");\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n+\n+    // Reset idle timeout\n+    client->m_idle_since = Now<SteadySeconds>();\n+\n+    // Prevent disconnect until all requests are completely handled.\n+    client->m_prevent_disconnect = true;\n+\n+    // Copy data from socket buffer to client receive buffer\n+    client->m_recv_buffer.insert(\n+        client->m_recv_buffer.end(),\n+        reinterpret_cast<const std::byte*>(data.data()),\n+        reinterpret_cast<const std::byte*>(data.data() + data.size())\n+    );\n+\n+    // Try reading (potentially multiple) HTTP requests from the buffer\n+    while (client->m_recv_buffer.size() > 0) {\n+        // Create a new request object and try to fill it with data from the receive buffer\n+        auto req = std::make_unique<HTTPRequest>(client);\n+        try {\n+            // Stop reading if we need more data from the client to parse a complete request\n+            if (!client->ReadRequest(req)) break;\n+        } catch (const std::runtime_error& e) {\n+            LogDebug(\n+                BCLog::HTTP,\n+                \"Error reading HTTP request from client %s (id=%lld): %s\\n\",\n+                client->m_origin,\n+                client->m_node_id,\n+                e.what());\n+\n+            // We failed to read a complete request from the buffer\n+            req->WriteReply(HTTP_BAD_REQUEST);\n+            client->m_disconnect = true;\n+            break;\n+        }\n+\n+        // We read a complete request from the buffer into the queue\n+        LogDebug(\n+            BCLog::HTTP,\n+            \"Received a %s request for %s from %s (id=%lld)\\n\",\n+            req->m_method,\n+            req->m_target,\n+            req->m_client->m_origin,\n+            req->m_client->m_node_id);\n+\n+        // add request to client queue\n+        client->m_req_queue.push_back(std::move(req));\n+    }\n }\n \n-std::string HTTPRequest::ReadBody()\n+void HTTPServer::EventGotEOF(NodeId node_id)\n {\n-    struct evbuffer* buf = evhttp_request_get_input_buffer(req);\n-    if (!buf)\n-        return \"\";\n-    size_t size = evbuffer_get_length(buf);\n-    /** Trivial implementation: if this is ever a performance bottleneck,\n-     * internal copying can be avoided in multi-segment buffers by using\n-     * evbuffer_peek and an awkward loop. Though in that case, it'd be even\n-     * better to not copy into an intermediate string but use a stream\n-     * abstraction to consume the evbuffer on the fly in the parsing algorithm.\n-     */\n-    const char* data = (const char*)evbuffer_pullup(buf, size);\n-    if (!data) // returns nullptr in case of empty buffer\n-        return \"\";\n-    std::string rv(data, size);\n-    evbuffer_drain(buf, size);\n-    return rv;\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n+\n+    client->m_disconnect = true;\n }\n \n-void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n+void HTTPServer::EventGotPermanentReadError(NodeId node_id, const std::string& errmsg)\n {\n-    struct evkeyvalq* headers = evhttp_request_get_output_headers(req);\n-    assert(headers);\n-    evhttp_add_header(headers, hdr.c_str(), value.c_str());\n-}\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n \n-/** Closure sent to main thread to request a reply to be sent to\n- * a HTTP request.\n- * Replies must be sent in the main loop in the main http thread,\n- * this cannot be done from worker threads.\n- */\n-void HTTPRequest::WriteReply(int nStatus, std::span<const std::byte> reply)\n-{\n-    assert(!replySent && req);\n-    if (m_interrupt) {\n-        WriteHeader(\"Connection\", \"close\");\n-    }\n-    // Send event to main http thread to send reply message\n-    struct evbuffer* evb = evhttp_request_get_output_buffer(req);\n-    assert(evb);\n-    evbuffer_add(evb, reply.data(), reply.size());\n-    auto req_copy = req;\n-    HTTPEvent* ev = new HTTPEvent(eventBase, true, [req_copy, nStatus]{\n-        evhttp_send_reply(req_copy, nStatus, nullptr, nullptr);\n-        // Re-enable reading from the socket. This is the second part of the libevent\n-        // workaround above.\n-        if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02010900) {\n-            evhttp_connection* conn = evhttp_request_get_connection(req_copy);\n-            if (conn) {\n-                bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n-                if (bev) {\n-                    bufferevent_enable(bev, EV_READ | EV_WRITE);\n-                }\n-            }\n-        }\n-    });\n-    ev->trigger(nullptr);\n-    replySent = true;\n-    req = nullptr; // transferred back to main thread\n+    client->m_disconnect = true;\n }\n \n-CService HTTPRequest::GetPeer() const\n+void HTTPServer::EventIOLoopCompletedForOne(NodeId node_id)\n {\n-    evhttp_connection* con = evhttp_request_get_connection(req);\n-    CService peer;\n-    if (con) {\n-        // evhttp retains ownership over returned address string\n-        const char* address = \"\";\n-        uint16_t port = 0;\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n \n-#ifdef HAVE_EVHTTP_CONNECTION_GET_PEER_CONST_CHAR\n-        evhttp_connection_get_peer(con, &address, &port);\n-#else\n-        evhttp_connection_get_peer(con, (char**)&address, &port);\n-#endif // HAVE_EVHTTP_CONNECTION_GET_PEER_CONST_CHAR\n+    // If we are already handling a request from\n+    // this client, do nothing.\n+    if (client->m_req_busy) return;\n \n-        peer = MaybeFlipIPv6toCJDNS(LookupNumeric(address, port));\n+    // Otherwise, if there is a new pending request, handle it.\n+    if (!client->m_req_queue.empty()) {\n+        client->m_req_busy = true;\n+        m_request_dispatcher(std::move(client->m_req_queue.front()));\n+        client->m_req_queue.pop_front();\n     }\n-    return peer;\n }\n \n-std::string HTTPRequest::GetURI() const\n+void HTTPServer::EventIOLoopCompletedForAll()\n {\n-    return evhttp_request_get_uri(req);\n+    DisconnectClients();\n }\n \n-HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod() const\n+bool HTTPServer::ShouldTryToSend(NodeId node_id) const\n {\n-    switch (evhttp_request_get_command(req)) {\n-    case EVHTTP_REQ_GET:\n-        return GET;\n-    case EVHTTP_REQ_POST:\n-        return POST;\n-    case EVHTTP_REQ_HEAD:\n-        return HEAD;\n-    case EVHTTP_REQ_PUT:\n-        return PUT;\n-    default:\n-        return UNKNOWN;\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return false;\n     }\n+\n+    return client->m_send_ready;\n }\n \n-std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+bool HTTPServer::ShouldTryToRecv(NodeId node_id) const\n {\n-    const char* uri{evhttp_request_get_uri(req)};\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return false;\n+    }\n \n-    return GetQueryParameterFromUri(uri, key);\n+    // Don't try to receive again until we've cleared the send buffer to this client\n+    return !client->m_send_ready;\n }\n \n-std::optional<std::string> GetQueryParameterFromUri(const char* uri, const std::string& key)\n+std::shared_ptr<HTTPClient> HTTPServer::GetClientById(NodeId node_id) const\n {\n-    evhttp_uri* uri_parsed{evhttp_uri_parse(uri)};\n-    if (!uri_parsed) {\n-        throw std::runtime_error(\"URI parsing failed, it likely contained RFC 3986 invalid characters\");\n+    auto it{m_connected_clients.find(node_id)};\n+    if (it != m_connected_clients.end()) {\n+        return it->second;\n     }\n-    const char* query{evhttp_uri_get_query(uri_parsed)};\n-    std::optional<std::string> result;\n+    return nullptr;\n+}\n \n-    if (query) {\n-        // Parse the query string into a key-value queue and iterate over it\n-        struct evkeyvalq params_q;\n-        evhttp_parse_query_str(query, &params_q);\n+bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+{\n+    if (!InitHTTPAllowList())\n+        return false;\n \n-        for (struct evkeyval* param{params_q.tqh_first}; param != nullptr; param = param->next.tqe_next) {\n-            if (param->key == key) {\n-                result = param->value;\n-                break;\n+    // Create HTTPServer\n+    g_http_server = std::make_unique<HTTPServer>(MaybeDispatchRequestToWorker);\n+\n+    g_http_server->m_rpcservertimeout = std::chrono::seconds(gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n+\n+    // Bind HTTP server to specified addresses\n+    std::vector<std::pair<std::string, uint16_t>> endpoints{GetBindAddresses()};\n+    bool bind_success{false};\n+    for (std::vector<std::pair<std::string, uint16_t> >::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 1128,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    for (std::vector<std::pair<std::string, uint16_t>>::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\r\n```",
      "created_at": "2025-06-05T12:48:32Z",
      "updated_at": "2025-06-05T14:02:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2128776391",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128776391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 909,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128778896",
      "pull_request_review_id": 2899730748,
      "id": 2128778896,
      "node_id": "PRRC_kwDOABII585-4paQ",
      "diff_hunk": "@@ -417,361 +286,708 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n     queue->Run();\n }\n \n-/** libevent event log callback */\n-static void libevent_log_cb(int severity, const char *msg)\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n {\n-    BCLog::Level level;\n-    switch (severity) {\n-    case EVENT_LOG_DEBUG:\n-        level = BCLog::Level::Debug;\n-        break;\n-    case EVENT_LOG_MSG:\n-        level = BCLog::Level::Info;\n-        break;\n-    case EVENT_LOG_WARN:\n-        level = BCLog::Level::Warning;\n-        break;\n-    default: // EVENT_LOG_ERR and others are mapped to error\n-        level = BCLog::Level::Error;\n-        break;\n+    LogDebug(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+    LOCK(g_httppathhandlers_mutex);\n+    pathHandlers.emplace_back(prefix, exactMatch, handler);\n+}\n+\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+{\n+    LOCK(g_httppathhandlers_mutex);\n+    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i)\n+        if (i->prefix == prefix && i->exactMatch == exactMatch)\n+            break;\n+    if (i != iend)\n+    {\n+        LogDebug(BCLog::HTTP, \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+        pathHandlers.erase(i);\n     }\n-    LogPrintLevel(BCLog::LIBEVENT, level, \"%s\\n\", msg);\n }\n \n-bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+namespace http_bitcoin {\n+using util::Split;\n+\n+std::optional<std::string_view> HTTPHeaders::Find(const std::string key) const\n {\n-    if (!InitHTTPAllowList())\n-        return false;\n+    const auto it = m_map.find(key);\n+    if (it == m_map.end()) return std::nullopt;\n+    return std::string_view(it->second);\n+}\n \n-    // Redirect libevent's logging to our own log\n-    event_set_log_callback(&libevent_log_cb);\n-    // Update libevent's log handling.\n-    UpdateHTTPServerLogging(LogInstance().WillLogCategory(BCLog::LIBEVENT));\n+void HTTPHeaders::Write(const std::string key, const std::string value)\n+{\n+    // If present, append value to list\n+    const auto existing_value = Find(key);\n+    if (existing_value) {\n+        m_map[key] = std::string(existing_value.value()) + \", \" + value;\n+    } else {\n+        m_map[key] = value;\n+    }\n+}\n \n-#ifdef WIN32\n-    evthread_use_windows_threads();\n-#else\n-    evthread_use_pthreads();\n-#endif\n+void HTTPHeaders::Remove(const std::string key)\n+{\n+    m_map.erase(key);\n+}\n \n-    raii_event_base base_ctr = obtain_event_base();\n+bool HTTPHeaders::Read(util::LineReader& reader)\n+{\n+    // Headers https://httpwg.org/specs/rfc9110.html#rfc.section.6.3\n+    // A sequence of Field Lines https://httpwg.org/specs/rfc9110.html#rfc.section.5.2\n+    do {\n+        auto maybe_line = reader.ReadLine();\n+        if (!maybe_line) return false;\n+        const std::string& line = *maybe_line;\n \n-    /* Create a new evhttp object to handle requests. */\n-    raii_evhttp http_ctr = obtain_evhttp(base_ctr.get());\n-    struct evhttp* http = http_ctr.get();\n-    if (!http) {\n-        LogPrintf(\"couldn't create evhttp. Exiting.\\n\");\n-        return false;\n-    }\n+        // An empty line indicates end of the headers section https://www.rfc-editor.org/rfc/rfc2616#section-4\n+        if (line.length() == 0) break;\n \n-    evhttp_set_timeout(http, gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n-    evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n-    evhttp_set_max_body_size(http, MAX_SIZE);\n-    evhttp_set_gencb(http, http_request_cb, (void*)&interrupt);\n+        // Header line must have at least one \":\"\n+        // keys are not allowed to have delimiters like \":\" but values are\n+        // https://httpwg.org/specs/rfc9110.html#rfc.section.5.6.2\n+        const size_t pos{line.find(':')};\n+        if (pos == std::string::npos) throw std::runtime_error(\"HTTP header missing colon (:)\");\n \n-    if (!HTTPBindAddresses(http)) {\n-        LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n-        return false;\n+        // Whitespace is optional\n+        std::string key = util::TrimString(line.substr(0, pos));\n+        std::string value = util::TrimString(line.substr(pos + 1));\n+        Write(key, value);\n+    } while (true);\n+\n+    return true;\n+}\n+\n+std::string HTTPHeaders::Stringify() const\n+{\n+    std::string out;\n+    for (const auto& [key, value] : m_map) {\n+        out += key + \": \" + value + \"\\r\\n\";\n     }\n \n-    LogDebug(BCLog::HTTP, \"Initialized HTTP server\\n\");\n-    int workQueueDepth = std::max((long)gArgs.GetIntArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n-    LogDebug(BCLog::HTTP, \"creating work queue of depth %d\\n\", workQueueDepth);\n+    // Headers are terminated by an empty line\n+    out += \"\\r\\n\";\n+\n+    return out;\n+}\n+\n+std::string HTTPResponse::StringifyHeaders() const\n+{\n+    return strprintf(\"HTTP/%d.%d %d %s\\r\\n%s\", m_version_major, m_version_minor, m_status, m_reason, m_headers.Stringify());\n+}\n+\n+bool HTTPRequest::LoadControlData(LineReader& reader)\n+{\n+    auto maybe_line = reader.ReadLine();\n+    if (!maybe_line) return false;\n+    const std::string& request_line = *maybe_line;\n+\n+    // Request Line aka Control Data https://httpwg.org/specs/rfc9110.html#rfc.section.6.2\n+    // Three words separated by spaces, terminated by \\n or \\r\\n\n+    if (request_line.length() < MIN_REQUEST_LINE_LENGTH) throw std::runtime_error(\"HTTP request line too short\");\n+\n+    const std::vector<std::string_view> parts{Split<std::string_view>(request_line, \" \")};\n+    if (parts.size() != 3) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_method = parts[0];\n+    m_target = parts[1];\n+\n+    if (parts[2].rfind(\"HTTP/\") != 0) throw std::runtime_error(\"HTTP request line malformed\");\n+    const std::vector<std::string_view> version_parts{Split<std::string_view>(parts[2].substr(5), \".\")};\n+    if (version_parts.size() != 2) throw std::runtime_error(\"HTTP request line malformed\");\n+    auto major = ToIntegral<int>(version_parts[0]);\n+    auto minor = ToIntegral<int>(version_parts[1]);\n+    if (!major || !minor) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_version_major = major.value();\n+    m_version_minor = minor.value();\n \n-    g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n-    // transfer ownership to eventBase/HTTP via .release()\n-    eventBase = base_ctr.release();\n-    eventHTTP = http_ctr.release();\n     return true;\n }\n \n-void UpdateHTTPServerLogging(bool enable) {\n-    if (enable) {\n-        event_enable_debug_logging(EVENT_DBG_ALL);\n+bool HTTPRequest::LoadHeaders(LineReader& reader)\n+{\n+    return m_headers.Read(reader);\n+}\n+\n+bool HTTPRequest::LoadBody(LineReader& reader)\n+{\n+    // https://httpwg.org/specs/rfc9112.html#message.body\n+\n+    auto transfer_encoding_header = m_headers.Find(\"Transfer-Encoding\");\n+    if (transfer_encoding_header && ToLower(transfer_encoding_header.value()) == \"chunked\") {\n+        // Transfer-Encoding: https://datatracker.ietf.org/doc/html/rfc7230.html#section-3.3.1\n+        // Chunked Transfer Coding: https://datatracker.ietf.org/doc/html/rfc7230.html#section-4.1\n+        // see evhttp_handle_chunked_read() in libevent http.c\n+        while (reader.Left() > 0) {\n+            auto maybe_chunk_size = reader.ReadLine();\n+            if (!maybe_chunk_size) return false;\n+            uint64_t chunk_size;\n+\n+            if (!ParseUInt64Hex(maybe_chunk_size.value(), &chunk_size)) throw std::runtime_error(\"Invalid chunk size\");\n+\n+            bool last_chunk{chunk_size == 0};\n+\n+            if (!last_chunk) {\n+                // We are still expecting more data for this chunk\n+                if (reader.Left() < chunk_size) {\n+                    return false;\n+                }\n+                // Pack chunk onto body\n+                m_body += reader.ReadLength(chunk_size);\n+            }\n+\n+            // Even though every chunk size is explicitly declared,\n+            // they are still terminated by a CRLF we don't need.\n+            auto crlf = reader.ReadLine();\n+            if (!crlf || crlf.value().size() != 0) throw std::runtime_error(\"Improperly terminated chunk\");\n+\n+            if (last_chunk) return true;\n+        }\n+\n+        // We read all the chunks but never got the last chunk, wait for client to send more\n+        return false;\n     } else {\n-        event_enable_debug_logging(EVENT_DBG_NONE);\n+        // No Content-length or Transfer-Encoding header means no body, see libevent evhttp_get_body()\n+        auto content_length_value{m_headers.Find(\"Content-Length\")};\n+        if (!content_length_value) return true;\n+\n+        uint64_t content_length;\n+        if (!ParseUInt64(content_length_value.value(), &content_length)) throw std::runtime_error(\"Cannot parse Content-Length value\");\n+\n+        // Not enough data in buffer for expected body\n+        if (reader.Left() < content_length) return false;\n+\n+        m_body = reader.ReadLength(content_length);\n+\n+        return true;\n     }\n }\n \n-static std::thread g_thread_http;\n-static std::vector<std::thread> g_thread_http_workers;\n+CService HTTPRequest::GetPeer() const\n+{\n+    return m_client->m_addr;\n+}\n \n-void StartHTTPServer()\n+HTTPRequestMethod HTTPRequest::GetRequestMethod() const\n {\n-    int rpcThreads = std::max((long)gArgs.GetIntArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n-    LogInfo(\"Starting HTTP server with %d worker threads\\n\", rpcThreads);\n-    g_thread_http = std::thread(ThreadHTTP, eventBase);\n+    if (m_method == \"GET\") return HTTPRequestMethod::GET;\n+    if (m_method == \"POST\") return HTTPRequestMethod::POST;\n+    if (m_method == \"HEAD\") return HTTPRequestMethod::HEAD;\n+    if (m_method == \"PUT\") return HTTPRequestMethod::PUT;\n+    return HTTPRequestMethod::UNKNOWN;\n+}\n \n-    for (int i = 0; i < rpcThreads; i++) {\n-        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, g_work_queue.get(), i);\n+std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+{\n+    return GetQueryParameterFromUri(GetURI(), key);\n+}\n+\n+// See libevent http.c evhttp_parse_query_impl()\n+// and https://www.rfc-editor.org/rfc/rfc3986#section-3.4\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key)\n+{\n+    // Handle %XX encoding\n+    std::string decoded_uri{UrlDecode(uri)};\n+\n+    // find query in URI\n+    size_t start = decoded_uri.find('?');\n+    if (start == std::string::npos) return std::nullopt;\n+    size_t end = decoded_uri.find('#', start);\n+    if (end == std::string::npos) {\n+        end = decoded_uri.length();\n+    }\n+    const std::string_view query{decoded_uri.data() + start + 1, end - start - 1};\n+    // find requested parameter in query\n+    const std::vector<std::string_view> params{Split<std::string_view>(query, \"&\")};\n+    for (const std::string_view& param : params) {\n+        size_t delim = param.find('=');\n+        if (key == param.substr(0, delim)) {\n+            if (delim == std::string::npos) {\n+                return \"\";\n+            } else {\n+                return std::string(param.substr(delim + 1));\n+            }\n+        }\n     }\n+    return std::nullopt;\n }\n \n-void InterruptHTTPServer()\n+std::pair<bool, std::string_view> HTTPRequest::GetHeader(const std::string& hdr) const\n {\n-    LogDebug(BCLog::HTTP, \"Interrupting HTTP server\\n\");\n-    if (eventHTTP) {\n-        // Reject requests on current connections\n-        evhttp_set_gencb(eventHTTP, http_reject_request_cb, nullptr);\n-    }\n-    if (g_work_queue) {\n-        g_work_queue->Interrupt();\n-    }\n+    std::optional<std::string_view> found{m_headers.Find(hdr)};\n+    if (found.has_value()) {\n+        return std::make_pair(true, found.value());\n+    } else\n+        return std::make_pair(false, \"\");\n }\n \n-void StopHTTPServer()\n+void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n {\n-    LogDebug(BCLog::HTTP, \"Stopping HTTP server\\n\");\n-    if (g_work_queue) {\n-        LogDebug(BCLog::HTTP, \"Waiting for HTTP worker threads to exit\\n\");\n-        for (auto& thread : g_thread_http_workers) {\n-            thread.join();\n+    m_response_headers.Write(hdr, value);\n+}\n+\n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)\n+{\n+    HTTPResponse res;\n+\n+    // Some response headers are determined in advance and stored in the request\n+    res.m_headers = std::move(m_response_headers);\n+\n+    // Response version matches request version\n+    res.m_version_major = m_version_major;\n+    res.m_version_minor = m_version_minor;\n+\n+    // Add response code and look up reason string\n+    res.m_status = status;\n+    res.m_reason = HTTPReason.find(status)->second;\n+\n+    // See libevent evhttp_response_needs_body()\n+    // Response headers are different if no body is needed\n+    bool needs_body{status != HTTP_NO_CONTENT && (status < 100 || status >= 200)};\n+\n+    // See libevent evhttp_make_header_response()\n+    // Expected response headers depend on protocol version\n+    if (m_version_major == 1) {\n+        // HTTP/1.0\n+        if (m_version_minor == 0) {\n+            auto connection_header{m_headers.Find(\"Connection\")};\n+            if (connection_header && ToLower(connection_header.value()) == \"keep-alive\") {\n+                res.m_headers.Write(\"Connection\", \"keep-alive\");\n+                res.m_keep_alive = true;\n+            }\n+        }\n+\n+        // HTTP/1.1\n+        if (m_version_minor >= 1) {\n+            const int64_t now_seconds{TicksSinceEpoch<std::chrono::seconds>(NodeClock::now())};\n+            res.m_headers.Write(\"Date\", FormatRFC7231DateTime(now_seconds));\n+\n+            if (needs_body) {\n+                res.m_headers.Write(\"Content-Length\", strprintf(\"%d\", reply_body.size()));\n+            }\n+\n+            // Default for HTTP/1.1\n+            res.m_keep_alive = true;\n         }\n-        g_thread_http_workers.clear();\n     }\n-    // Unlisten sockets, these are what make the event loop running, which means\n-    // that after this and all connections are closed the event loop will quit.\n-    for (evhttp_bound_socket *socket : boundSockets) {\n-        evhttp_del_accept_socket(eventHTTP, socket);\n+\n+    if (needs_body && !res.m_headers.Find(\"Content-Type\")) {\n+        // Default type from libevent evhttp_new_object()\n+        res.m_headers.Write(\"Content-Type\", \"text/html; charset=ISO-8859-1\");\n     }\n-    boundSockets.clear();\n+\n+    auto connection_header{m_headers.Find(\"Connection\")};\n+    if (connection_header && ToLower(connection_header.value()) == \"close\") {\n+        // Might not exist already but we need to replace it, not append to it\n+        res.m_headers.Remove(\"Connection\");\n+        res.m_headers.Write(\"Connection\", \"close\");\n+        res.m_keep_alive = false;\n+    }\n+\n+    m_client->m_keep_alive = res.m_keep_alive;\n+\n+    // Serialize the response headers\n+    const std::string headers{res.StringifyHeaders()};\n+    const auto headers_bytes{std::as_bytes(std::span(headers.begin(), headers.end()))};\n+\n+    bool send_buffer_was_empty{false};\n+    // Fill the send buffer with the complete serialized response headers + body\n     {\n-        if (const auto n_connections{g_requests.CountActiveConnections()}; n_connections != 0) {\n-            LogDebug(BCLog::HTTP, \"Waiting for %d connections to stop HTTP server\\n\", n_connections);\n-        }\n-        g_requests.WaitUntilEmpty();\n-    }\n-    if (eventHTTP) {\n-        // Schedule a callback to call evhttp_free in the event base thread, so\n-        // that evhttp_free does not need to be called again after the handling\n-        // of unfinished request connections that follows.\n-        event_base_once(eventBase, -1, EV_TIMEOUT, [](evutil_socket_t, short, void*) {\n-            evhttp_free(eventHTTP);\n-            eventHTTP = nullptr;\n-        }, nullptr, nullptr);\n-    }\n-    if (eventBase) {\n-        LogDebug(BCLog::HTTP, \"Waiting for HTTP event thread to exit\\n\");\n-        if (g_thread_http.joinable()) g_thread_http.join();\n-        event_base_free(eventBase);\n-        eventBase = nullptr;\n-    }\n-    g_work_queue.reset();\n-    LogDebug(BCLog::HTTP, \"Stopped HTTP server\\n\");\n-}\n+        LOCK(m_client->m_send_mutex);\n+        send_buffer_was_empty = m_client->m_send_buffer.empty();\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), headers_bytes.begin(), headers_bytes.end());\n+\n+        // We've been using std::span up until now but it is finally time to copy\n+        // data. The original data will go out of scope when WriteReply() returns.\n+        // This is analogous to the memcpy() in libevent's evbuffer_add()\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), reply_body.begin(), reply_body.end());\n+    }\n+\n+    LogDebug(\n+        BCLog::HTTP,\n+        \"HTTPResponse (status code: %d size: %lld) added to send buffer for client %s (id=%lld)\\n\",\n+        status,\n+        headers_bytes.size() + reply_body.size(),\n+        m_client->m_origin,\n+        m_client->m_node_id);\n+\n+    // If the send buffer was empty before we wrote this reply, we can try an\n+    // optimistic send akin to CConnman::PushMessage() in which we\n+    // push the data directly out the socket to client right now, instead\n+    // of waiting for the next iteration of the Sockman I/O loop.\n+    if (send_buffer_was_empty) {\n+        m_client->SendBytesFromBuffer();\n+    } else {\n+        // Inform Sockman I/O there is data that is ready to be sent to this client\n+        // in the next loop iteration.\n+        m_client->m_send_ready = true;\n+    }\n \n-struct event_base* EventBase()\n-{\n-    return eventBase;\n+    // Signal to the Sockman I/O loop that we are ready to handle the next request.\n+    m_client->m_req_busy = false;\n }\n \n-static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n+bool HTTPClient::ReadRequest(std::unique_ptr<HTTPRequest>& req)\n {\n-    // Static handler: simply call inner handler\n-    HTTPEvent *self = static_cast<HTTPEvent*>(data);\n-    self->handler();\n-    if (self->deleteWhenTriggered)\n-        delete self;\n+    LineReader reader(m_recv_buffer, MAX_HEADERS_SIZE);\n+\n+    if (!req->LoadControlData(reader)) return false;\n+    if (!req->LoadHeaders(reader)) return false;\n+    if (!req->LoadBody(reader)) return false;\n+\n+    // Remove the bytes read out of the buffer.\n+    // If one of the above calls throws an error, the caller must\n+    // catch it and disconnect the client.\n+    m_recv_buffer.erase(\n+        m_recv_buffer.begin(),\n+        m_recv_buffer.begin() + (reader.it - reader.start));\n+\n+    return true;\n }\n \n-HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void()>& _handler):\n-    deleteWhenTriggered(_deleteWhenTriggered), handler(_handler)\n-{\n-    ev = event_new(base, -1, 0, httpevent_callback_fn, this);\n-    assert(ev);\n+bool HTTPClient::SendBytesFromBuffer()\n+{\n+    Assume(m_server);\n+\n+    // Send as much data from this client's buffer as we can\n+    LOCK(m_send_mutex);\n+    if (!m_send_buffer.empty()) {\n+        std::string err;\n+        // We don't intend to \"send more\" because http responses are usually small and we want the kernel to send them right away.\n+        ssize_t bytes_sent = m_server->SendBytes(m_node_id, MakeUCharSpan(m_send_buffer), /*will_send_more=*/false, err);\n+        if (bytes_sent < 0) {\n+            LogDebug(\n+                BCLog::HTTP,\n+                \"Error sending HTTP response data to client %s (id=%lld): %s\\n\",\n+                m_origin,\n+                m_node_id,\n+                err);\n+            m_send_ready = false;\n+            m_prevent_disconnect = false;\n+            m_disconnect = true;\n+            return false;\n+        }\n+\n+        Assume(static_cast<size_t>(bytes_sent) <= m_send_buffer.size());\n+        m_send_buffer.erase(m_send_buffer.begin(), m_send_buffer.begin() + bytes_sent);\n+\n+        LogDebug(\n+            BCLog::HTTP,\n+            \"Sent %d bytes to client %s (id=%lld)\\n\",\n+            bytes_sent,\n+            m_origin,\n+            m_node_id);\n+\n+        // This check is inside the if(!empty) block meaning \"there was data but now its gone\".\n+        // We shouldn't even be calling SendBytesFromBuffer() when the send buffer is empty,\n+        // but for belt-and-suspenders, we don't want to modify the disconnect flags if SendBytesFromBuffer() was a no-op.\n+        if (m_send_buffer.empty()) {\n+            m_send_ready = false;\n+            m_prevent_disconnect = false;\n+\n+            // Our work is done here\n+            if (!m_keep_alive) {\n+                m_disconnect = true;\n+                return false;\n+            }\n+        } else {\n+            m_send_ready = true;\n+            m_prevent_disconnect = true;\n+        }\n+    }\n+\n+    return true;\n }\n-HTTPEvent::~HTTPEvent()\n+\n+void HTTPServer::CloseConnectionInternal(std::shared_ptr<HTTPClient>& client)\n {\n-    event_free(ev);\n+    if (CloseConnection(client->m_node_id)) {\n+        LogDebug(BCLog::HTTP, \"Disconnected HTTP client %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    } else {\n+        LogDebug(BCLog::HTTP, \"Failed to disconnect non-existent HTTP client %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    }\n }\n-void HTTPEvent::trigger(struct timeval* tv)\n+\n+void HTTPServer::DisconnectClients()\n {\n-    if (tv == nullptr)\n-        event_active(ev, 0, 0); // immediately trigger event in main thread\n-    else\n-        evtimer_add(ev, tv); // trigger after timeval passed\n+    const auto now{Now<SteadySeconds>()};\n+    for (auto it = m_connected_clients.begin(); it != m_connected_clients.end();) {\n+        bool timeout{now - it->second->m_idle_since > m_rpcservertimeout};\n+        if (((it->second->m_disconnect || m_disconnect_all_clients) && !it->second->m_prevent_disconnect)\n+            || timeout) {\n+            CloseConnectionInternal(it->second);\n+            it = m_connected_clients.erase(it);\n+        } else {\n+            ++it;\n+        }\n+    }\n+    m_no_clients = m_connected_clients.size() == 0;\n }\n-HTTPRequest::HTTPRequest(struct evhttp_request* _req, const util::SignalInterrupt& interrupt, bool _replySent)\n-    : req(_req), m_interrupt(interrupt), replySent(_replySent)\n+\n+bool HTTPServer::EventNewConnectionAccepted(NodeId node_id,\n+                                            const CService& me,\n+                                            const CService& them)\n {\n+    auto client = std::make_shared<HTTPClient>(node_id, them);\n+    // Point back to the server\n+    client->m_server = this;\n+    // Set timeout\n+    client->m_idle_since = Now<SteadySeconds>();\n+    LogDebug(BCLog::HTTP, \"HTTP Connection accepted from %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    m_connected_clients.emplace(client->m_node_id, std::move(client));\n+    m_no_clients = false;\n+    return true;\n }\n \n-HTTPRequest::~HTTPRequest()\n+void HTTPServer::EventReadyToSend(NodeId node_id, bool& cancel_recv)\n {\n-    if (!replySent) {\n-        // Keep track of whether reply was sent to avoid request leaks\n-        LogPrintf(\"%s: Unhandled request\\n\", __func__);\n-        WriteReply(HTTP_INTERNAL_SERVER_ERROR, \"Unhandled request\");\n+    // Next attempt to receive data from this node is permitted\n+    cancel_recv = false;\n+\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n     }\n-    // evhttpd cleans up the request, as long as a reply was sent.\n+\n+    // SendBytesFromBuffer() returns true if we should keep the client around,\n+    // false if we are done with it. Invert that boolean to inform Sockman\n+    // whether it should cancel the next receive attempt from this client.\n+    cancel_recv = !client->SendBytesFromBuffer();\n }\n \n-std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr) const\n+void HTTPServer::EventGotData(NodeId node_id, std::span<const uint8_t> data)\n {\n-    const struct evkeyvalq* headers = evhttp_request_get_input_headers(req);\n-    assert(headers);\n-    const char* val = evhttp_find_header(headers, hdr.c_str());\n-    if (val)\n-        return std::make_pair(true, val);\n-    else\n-        return std::make_pair(false, \"\");\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n+\n+    // Reset idle timeout\n+    client->m_idle_since = Now<SteadySeconds>();\n+\n+    // Prevent disconnect until all requests are completely handled.\n+    client->m_prevent_disconnect = true;\n+\n+    // Copy data from socket buffer to client receive buffer\n+    client->m_recv_buffer.insert(\n+        client->m_recv_buffer.end(),\n+        reinterpret_cast<const std::byte*>(data.data()),\n+        reinterpret_cast<const std::byte*>(data.data() + data.size())\n+    );\n+\n+    // Try reading (potentially multiple) HTTP requests from the buffer\n+    while (client->m_recv_buffer.size() > 0) {\n+        // Create a new request object and try to fill it with data from the receive buffer\n+        auto req = std::make_unique<HTTPRequest>(client);\n+        try {\n+            // Stop reading if we need more data from the client to parse a complete request\n+            if (!client->ReadRequest(req)) break;\n+        } catch (const std::runtime_error& e) {\n+            LogDebug(\n+                BCLog::HTTP,\n+                \"Error reading HTTP request from client %s (id=%lld): %s\\n\",\n+                client->m_origin,\n+                client->m_node_id,\n+                e.what());\n+\n+            // We failed to read a complete request from the buffer\n+            req->WriteReply(HTTP_BAD_REQUEST);\n+            client->m_disconnect = true;\n+            break;\n+        }\n+\n+        // We read a complete request from the buffer into the queue\n+        LogDebug(\n+            BCLog::HTTP,\n+            \"Received a %s request for %s from %s (id=%lld)\\n\",\n+            req->m_method,\n+            req->m_target,\n+            req->m_client->m_origin,\n+            req->m_client->m_node_id);\n+\n+        // add request to client queue\n+        client->m_req_queue.push_back(std::move(req));\n+    }\n }\n \n-std::string HTTPRequest::ReadBody()\n+void HTTPServer::EventGotEOF(NodeId node_id)\n {\n-    struct evbuffer* buf = evhttp_request_get_input_buffer(req);\n-    if (!buf)\n-        return \"\";\n-    size_t size = evbuffer_get_length(buf);\n-    /** Trivial implementation: if this is ever a performance bottleneck,\n-     * internal copying can be avoided in multi-segment buffers by using\n-     * evbuffer_peek and an awkward loop. Though in that case, it'd be even\n-     * better to not copy into an intermediate string but use a stream\n-     * abstraction to consume the evbuffer on the fly in the parsing algorithm.\n-     */\n-    const char* data = (const char*)evbuffer_pullup(buf, size);\n-    if (!data) // returns nullptr in case of empty buffer\n-        return \"\";\n-    std::string rv(data, size);\n-    evbuffer_drain(buf, size);\n-    return rv;\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n+\n+    client->m_disconnect = true;\n }\n \n-void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n+void HTTPServer::EventGotPermanentReadError(NodeId node_id, const std::string& errmsg)\n {\n-    struct evkeyvalq* headers = evhttp_request_get_output_headers(req);\n-    assert(headers);\n-    evhttp_add_header(headers, hdr.c_str(), value.c_str());\n-}\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n \n-/** Closure sent to main thread to request a reply to be sent to\n- * a HTTP request.\n- * Replies must be sent in the main loop in the main http thread,\n- * this cannot be done from worker threads.\n- */\n-void HTTPRequest::WriteReply(int nStatus, std::span<const std::byte> reply)\n-{\n-    assert(!replySent && req);\n-    if (m_interrupt) {\n-        WriteHeader(\"Connection\", \"close\");\n-    }\n-    // Send event to main http thread to send reply message\n-    struct evbuffer* evb = evhttp_request_get_output_buffer(req);\n-    assert(evb);\n-    evbuffer_add(evb, reply.data(), reply.size());\n-    auto req_copy = req;\n-    HTTPEvent* ev = new HTTPEvent(eventBase, true, [req_copy, nStatus]{\n-        evhttp_send_reply(req_copy, nStatus, nullptr, nullptr);\n-        // Re-enable reading from the socket. This is the second part of the libevent\n-        // workaround above.\n-        if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02010900) {\n-            evhttp_connection* conn = evhttp_request_get_connection(req_copy);\n-            if (conn) {\n-                bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n-                if (bev) {\n-                    bufferevent_enable(bev, EV_READ | EV_WRITE);\n-                }\n-            }\n-        }\n-    });\n-    ev->trigger(nullptr);\n-    replySent = true;\n-    req = nullptr; // transferred back to main thread\n+    client->m_disconnect = true;\n }\n \n-CService HTTPRequest::GetPeer() const\n+void HTTPServer::EventIOLoopCompletedForOne(NodeId node_id)\n {\n-    evhttp_connection* con = evhttp_request_get_connection(req);\n-    CService peer;\n-    if (con) {\n-        // evhttp retains ownership over returned address string\n-        const char* address = \"\";\n-        uint16_t port = 0;\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n \n-#ifdef HAVE_EVHTTP_CONNECTION_GET_PEER_CONST_CHAR\n-        evhttp_connection_get_peer(con, &address, &port);\n-#else\n-        evhttp_connection_get_peer(con, (char**)&address, &port);\n-#endif // HAVE_EVHTTP_CONNECTION_GET_PEER_CONST_CHAR\n+    // If we are already handling a request from\n+    // this client, do nothing.\n+    if (client->m_req_busy) return;\n \n-        peer = MaybeFlipIPv6toCJDNS(LookupNumeric(address, port));\n+    // Otherwise, if there is a new pending request, handle it.\n+    if (!client->m_req_queue.empty()) {\n+        client->m_req_busy = true;\n+        m_request_dispatcher(std::move(client->m_req_queue.front()));\n+        client->m_req_queue.pop_front();\n     }\n-    return peer;\n }\n \n-std::string HTTPRequest::GetURI() const\n+void HTTPServer::EventIOLoopCompletedForAll()\n {\n-    return evhttp_request_get_uri(req);\n+    DisconnectClients();\n }\n \n-HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod() const\n+bool HTTPServer::ShouldTryToSend(NodeId node_id) const\n {\n-    switch (evhttp_request_get_command(req)) {\n-    case EVHTTP_REQ_GET:\n-        return GET;\n-    case EVHTTP_REQ_POST:\n-        return POST;\n-    case EVHTTP_REQ_HEAD:\n-        return HEAD;\n-    case EVHTTP_REQ_PUT:\n-        return PUT;\n-    default:\n-        return UNKNOWN;\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return false;\n     }\n+\n+    return client->m_send_ready;\n }\n \n-std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+bool HTTPServer::ShouldTryToRecv(NodeId node_id) const\n {\n-    const char* uri{evhttp_request_get_uri(req)};\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return false;\n+    }\n \n-    return GetQueryParameterFromUri(uri, key);\n+    // Don't try to receive again until we've cleared the send buffer to this client\n+    return !client->m_send_ready;\n }\n \n-std::optional<std::string> GetQueryParameterFromUri(const char* uri, const std::string& key)\n+std::shared_ptr<HTTPClient> HTTPServer::GetClientById(NodeId node_id) const\n {\n-    evhttp_uri* uri_parsed{evhttp_uri_parse(uri)};\n-    if (!uri_parsed) {\n-        throw std::runtime_error(\"URI parsing failed, it likely contained RFC 3986 invalid characters\");\n+    auto it{m_connected_clients.find(node_id)};\n+    if (it != m_connected_clients.end()) {\n+        return it->second;\n     }\n-    const char* query{evhttp_uri_get_query(uri_parsed)};\n-    std::optional<std::string> result;\n+    return nullptr;\n+}\n \n-    if (query) {\n-        // Parse the query string into a key-value queue and iterate over it\n-        struct evkeyvalq params_q;\n-        evhttp_parse_query_str(query, &params_q);\n+bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+{\n+    if (!InitHTTPAllowList())\n+        return false;\n \n-        for (struct evkeyval* param{params_q.tqh_first}; param != nullptr; param = param->next.tqe_next) {\n-            if (param->key == key) {\n-                result = param->value;\n-                break;\n+    // Create HTTPServer\n+    g_http_server = std::make_unique<HTTPServer>(MaybeDispatchRequestToWorker);\n+\n+    g_http_server->m_rpcservertimeout = std::chrono::seconds(gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n+\n+    // Bind HTTP server to specified addresses\n+    std::vector<std::pair<std::string, uint16_t>> endpoints{GetBindAddresses()};\n+    bool bind_success{false};\n+    for (std::vector<std::pair<std::string, uint16_t> >::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\n+        LogPrintf(\"Binding RPC on address %s port %i\\n\", i->first, i->second);\n+        const std::optional<CService> addr{Lookup(i->first, i->second, false)};\n+        if (addr) {\n+            if (addr->IsBindAny()) {\n+                LogPrintf(\"WARNING: the RPC server is not safe to expose to untrusted networks such as the public internet\\n\");",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 1133,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`LogPrintf()` is using the `Info` severity.\r\n\r\n```suggestion\r\n                LogWarning(\"The RPC server is not safe to expose to untrusted networks such as the public internet\\n\");\r\n```",
      "created_at": "2025-06-05T12:49:47Z",
      "updated_at": "2025-06-05T14:02:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2128778896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128778896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 914,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128815408",
      "pull_request_review_id": 2899730748,
      "id": 2128815408,
      "node_id": "PRRC_kwDOABII585-4yUw",
      "diff_hunk": "@@ -417,361 +286,708 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n     queue->Run();\n }\n \n-/** libevent event log callback */\n-static void libevent_log_cb(int severity, const char *msg)\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n {\n-    BCLog::Level level;\n-    switch (severity) {\n-    case EVENT_LOG_DEBUG:\n-        level = BCLog::Level::Debug;\n-        break;\n-    case EVENT_LOG_MSG:\n-        level = BCLog::Level::Info;\n-        break;\n-    case EVENT_LOG_WARN:\n-        level = BCLog::Level::Warning;\n-        break;\n-    default: // EVENT_LOG_ERR and others are mapped to error\n-        level = BCLog::Level::Error;\n-        break;\n+    LogDebug(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+    LOCK(g_httppathhandlers_mutex);\n+    pathHandlers.emplace_back(prefix, exactMatch, handler);\n+}\n+\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+{\n+    LOCK(g_httppathhandlers_mutex);\n+    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i)\n+        if (i->prefix == prefix && i->exactMatch == exactMatch)\n+            break;\n+    if (i != iend)\n+    {\n+        LogDebug(BCLog::HTTP, \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+        pathHandlers.erase(i);\n     }\n-    LogPrintLevel(BCLog::LIBEVENT, level, \"%s\\n\", msg);\n }\n \n-bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+namespace http_bitcoin {\n+using util::Split;\n+\n+std::optional<std::string_view> HTTPHeaders::Find(const std::string key) const\n {\n-    if (!InitHTTPAllowList())\n-        return false;\n+    const auto it = m_map.find(key);\n+    if (it == m_map.end()) return std::nullopt;\n+    return std::string_view(it->second);\n+}\n \n-    // Redirect libevent's logging to our own log\n-    event_set_log_callback(&libevent_log_cb);\n-    // Update libevent's log handling.\n-    UpdateHTTPServerLogging(LogInstance().WillLogCategory(BCLog::LIBEVENT));\n+void HTTPHeaders::Write(const std::string key, const std::string value)\n+{\n+    // If present, append value to list\n+    const auto existing_value = Find(key);\n+    if (existing_value) {\n+        m_map[key] = std::string(existing_value.value()) + \", \" + value;\n+    } else {\n+        m_map[key] = value;\n+    }\n+}\n \n-#ifdef WIN32\n-    evthread_use_windows_threads();\n-#else\n-    evthread_use_pthreads();\n-#endif\n+void HTTPHeaders::Remove(const std::string key)\n+{\n+    m_map.erase(key);\n+}\n \n-    raii_event_base base_ctr = obtain_event_base();\n+bool HTTPHeaders::Read(util::LineReader& reader)\n+{\n+    // Headers https://httpwg.org/specs/rfc9110.html#rfc.section.6.3\n+    // A sequence of Field Lines https://httpwg.org/specs/rfc9110.html#rfc.section.5.2\n+    do {\n+        auto maybe_line = reader.ReadLine();\n+        if (!maybe_line) return false;\n+        const std::string& line = *maybe_line;\n \n-    /* Create a new evhttp object to handle requests. */\n-    raii_evhttp http_ctr = obtain_evhttp(base_ctr.get());\n-    struct evhttp* http = http_ctr.get();\n-    if (!http) {\n-        LogPrintf(\"couldn't create evhttp. Exiting.\\n\");\n-        return false;\n-    }\n+        // An empty line indicates end of the headers section https://www.rfc-editor.org/rfc/rfc2616#section-4\n+        if (line.length() == 0) break;\n \n-    evhttp_set_timeout(http, gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n-    evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n-    evhttp_set_max_body_size(http, MAX_SIZE);\n-    evhttp_set_gencb(http, http_request_cb, (void*)&interrupt);\n+        // Header line must have at least one \":\"\n+        // keys are not allowed to have delimiters like \":\" but values are\n+        // https://httpwg.org/specs/rfc9110.html#rfc.section.5.6.2\n+        const size_t pos{line.find(':')};\n+        if (pos == std::string::npos) throw std::runtime_error(\"HTTP header missing colon (:)\");\n \n-    if (!HTTPBindAddresses(http)) {\n-        LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n-        return false;\n+        // Whitespace is optional\n+        std::string key = util::TrimString(line.substr(0, pos));\n+        std::string value = util::TrimString(line.substr(pos + 1));\n+        Write(key, value);\n+    } while (true);\n+\n+    return true;\n+}\n+\n+std::string HTTPHeaders::Stringify() const\n+{\n+    std::string out;\n+    for (const auto& [key, value] : m_map) {\n+        out += key + \": \" + value + \"\\r\\n\";\n     }\n \n-    LogDebug(BCLog::HTTP, \"Initialized HTTP server\\n\");\n-    int workQueueDepth = std::max((long)gArgs.GetIntArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n-    LogDebug(BCLog::HTTP, \"creating work queue of depth %d\\n\", workQueueDepth);\n+    // Headers are terminated by an empty line\n+    out += \"\\r\\n\";\n+\n+    return out;\n+}\n+\n+std::string HTTPResponse::StringifyHeaders() const\n+{\n+    return strprintf(\"HTTP/%d.%d %d %s\\r\\n%s\", m_version_major, m_version_minor, m_status, m_reason, m_headers.Stringify());\n+}\n+\n+bool HTTPRequest::LoadControlData(LineReader& reader)\n+{\n+    auto maybe_line = reader.ReadLine();\n+    if (!maybe_line) return false;\n+    const std::string& request_line = *maybe_line;\n+\n+    // Request Line aka Control Data https://httpwg.org/specs/rfc9110.html#rfc.section.6.2\n+    // Three words separated by spaces, terminated by \\n or \\r\\n\n+    if (request_line.length() < MIN_REQUEST_LINE_LENGTH) throw std::runtime_error(\"HTTP request line too short\");\n+\n+    const std::vector<std::string_view> parts{Split<std::string_view>(request_line, \" \")};\n+    if (parts.size() != 3) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_method = parts[0];\n+    m_target = parts[1];\n+\n+    if (parts[2].rfind(\"HTTP/\") != 0) throw std::runtime_error(\"HTTP request line malformed\");\n+    const std::vector<std::string_view> version_parts{Split<std::string_view>(parts[2].substr(5), \".\")};\n+    if (version_parts.size() != 2) throw std::runtime_error(\"HTTP request line malformed\");\n+    auto major = ToIntegral<int>(version_parts[0]);\n+    auto minor = ToIntegral<int>(version_parts[1]);\n+    if (!major || !minor) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_version_major = major.value();\n+    m_version_minor = minor.value();\n \n-    g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n-    // transfer ownership to eventBase/HTTP via .release()\n-    eventBase = base_ctr.release();\n-    eventHTTP = http_ctr.release();\n     return true;\n }\n \n-void UpdateHTTPServerLogging(bool enable) {\n-    if (enable) {\n-        event_enable_debug_logging(EVENT_DBG_ALL);\n+bool HTTPRequest::LoadHeaders(LineReader& reader)\n+{\n+    return m_headers.Read(reader);\n+}\n+\n+bool HTTPRequest::LoadBody(LineReader& reader)\n+{\n+    // https://httpwg.org/specs/rfc9112.html#message.body\n+\n+    auto transfer_encoding_header = m_headers.Find(\"Transfer-Encoding\");\n+    if (transfer_encoding_header && ToLower(transfer_encoding_header.value()) == \"chunked\") {\n+        // Transfer-Encoding: https://datatracker.ietf.org/doc/html/rfc7230.html#section-3.3.1\n+        // Chunked Transfer Coding: https://datatracker.ietf.org/doc/html/rfc7230.html#section-4.1\n+        // see evhttp_handle_chunked_read() in libevent http.c\n+        while (reader.Left() > 0) {\n+            auto maybe_chunk_size = reader.ReadLine();\n+            if (!maybe_chunk_size) return false;\n+            uint64_t chunk_size;\n+\n+            if (!ParseUInt64Hex(maybe_chunk_size.value(), &chunk_size)) throw std::runtime_error(\"Invalid chunk size\");\n+\n+            bool last_chunk{chunk_size == 0};\n+\n+            if (!last_chunk) {\n+                // We are still expecting more data for this chunk\n+                if (reader.Left() < chunk_size) {\n+                    return false;\n+                }\n+                // Pack chunk onto body\n+                m_body += reader.ReadLength(chunk_size);\n+            }\n+\n+            // Even though every chunk size is explicitly declared,\n+            // they are still terminated by a CRLF we don't need.\n+            auto crlf = reader.ReadLine();\n+            if (!crlf || crlf.value().size() != 0) throw std::runtime_error(\"Improperly terminated chunk\");\n+\n+            if (last_chunk) return true;\n+        }\n+\n+        // We read all the chunks but never got the last chunk, wait for client to send more\n+        return false;\n     } else {\n-        event_enable_debug_logging(EVENT_DBG_NONE);\n+        // No Content-length or Transfer-Encoding header means no body, see libevent evhttp_get_body()\n+        auto content_length_value{m_headers.Find(\"Content-Length\")};\n+        if (!content_length_value) return true;\n+\n+        uint64_t content_length;\n+        if (!ParseUInt64(content_length_value.value(), &content_length)) throw std::runtime_error(\"Cannot parse Content-Length value\");\n+\n+        // Not enough data in buffer for expected body\n+        if (reader.Left() < content_length) return false;\n+\n+        m_body = reader.ReadLength(content_length);\n+\n+        return true;\n     }\n }\n \n-static std::thread g_thread_http;\n-static std::vector<std::thread> g_thread_http_workers;\n+CService HTTPRequest::GetPeer() const\n+{\n+    return m_client->m_addr;\n+}\n \n-void StartHTTPServer()\n+HTTPRequestMethod HTTPRequest::GetRequestMethod() const\n {\n-    int rpcThreads = std::max((long)gArgs.GetIntArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n-    LogInfo(\"Starting HTTP server with %d worker threads\\n\", rpcThreads);\n-    g_thread_http = std::thread(ThreadHTTP, eventBase);\n+    if (m_method == \"GET\") return HTTPRequestMethod::GET;\n+    if (m_method == \"POST\") return HTTPRequestMethod::POST;\n+    if (m_method == \"HEAD\") return HTTPRequestMethod::HEAD;\n+    if (m_method == \"PUT\") return HTTPRequestMethod::PUT;\n+    return HTTPRequestMethod::UNKNOWN;\n+}\n \n-    for (int i = 0; i < rpcThreads; i++) {\n-        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, g_work_queue.get(), i);\n+std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+{\n+    return GetQueryParameterFromUri(GetURI(), key);\n+}\n+\n+// See libevent http.c evhttp_parse_query_impl()\n+// and https://www.rfc-editor.org/rfc/rfc3986#section-3.4\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key)\n+{\n+    // Handle %XX encoding\n+    std::string decoded_uri{UrlDecode(uri)};\n+\n+    // find query in URI\n+    size_t start = decoded_uri.find('?');\n+    if (start == std::string::npos) return std::nullopt;\n+    size_t end = decoded_uri.find('#', start);\n+    if (end == std::string::npos) {\n+        end = decoded_uri.length();\n+    }\n+    const std::string_view query{decoded_uri.data() + start + 1, end - start - 1};\n+    // find requested parameter in query\n+    const std::vector<std::string_view> params{Split<std::string_view>(query, \"&\")};\n+    for (const std::string_view& param : params) {\n+        size_t delim = param.find('=');\n+        if (key == param.substr(0, delim)) {\n+            if (delim == std::string::npos) {\n+                return \"\";\n+            } else {\n+                return std::string(param.substr(delim + 1));\n+            }\n+        }\n     }\n+    return std::nullopt;\n }\n \n-void InterruptHTTPServer()\n+std::pair<bool, std::string_view> HTTPRequest::GetHeader(const std::string& hdr) const\n {\n-    LogDebug(BCLog::HTTP, \"Interrupting HTTP server\\n\");\n-    if (eventHTTP) {\n-        // Reject requests on current connections\n-        evhttp_set_gencb(eventHTTP, http_reject_request_cb, nullptr);\n-    }\n-    if (g_work_queue) {\n-        g_work_queue->Interrupt();\n-    }\n+    std::optional<std::string_view> found{m_headers.Find(hdr)};\n+    if (found.has_value()) {\n+        return std::make_pair(true, found.value());\n+    } else\n+        return std::make_pair(false, \"\");\n }\n \n-void StopHTTPServer()\n+void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n {\n-    LogDebug(BCLog::HTTP, \"Stopping HTTP server\\n\");\n-    if (g_work_queue) {\n-        LogDebug(BCLog::HTTP, \"Waiting for HTTP worker threads to exit\\n\");\n-        for (auto& thread : g_thread_http_workers) {\n-            thread.join();\n+    m_response_headers.Write(hdr, value);\n+}\n+\n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)\n+{\n+    HTTPResponse res;\n+\n+    // Some response headers are determined in advance and stored in the request\n+    res.m_headers = std::move(m_response_headers);\n+\n+    // Response version matches request version\n+    res.m_version_major = m_version_major;\n+    res.m_version_minor = m_version_minor;\n+\n+    // Add response code and look up reason string\n+    res.m_status = status;\n+    res.m_reason = HTTPReason.find(status)->second;\n+\n+    // See libevent evhttp_response_needs_body()\n+    // Response headers are different if no body is needed\n+    bool needs_body{status != HTTP_NO_CONTENT && (status < 100 || status >= 200)};\n+\n+    // See libevent evhttp_make_header_response()\n+    // Expected response headers depend on protocol version\n+    if (m_version_major == 1) {\n+        // HTTP/1.0\n+        if (m_version_minor == 0) {\n+            auto connection_header{m_headers.Find(\"Connection\")};\n+            if (connection_header && ToLower(connection_header.value()) == \"keep-alive\") {\n+                res.m_headers.Write(\"Connection\", \"keep-alive\");\n+                res.m_keep_alive = true;\n+            }\n+        }\n+\n+        // HTTP/1.1\n+        if (m_version_minor >= 1) {\n+            const int64_t now_seconds{TicksSinceEpoch<std::chrono::seconds>(NodeClock::now())};\n+            res.m_headers.Write(\"Date\", FormatRFC7231DateTime(now_seconds));\n+\n+            if (needs_body) {\n+                res.m_headers.Write(\"Content-Length\", strprintf(\"%d\", reply_body.size()));\n+            }\n+\n+            // Default for HTTP/1.1\n+            res.m_keep_alive = true;\n         }\n-        g_thread_http_workers.clear();\n     }\n-    // Unlisten sockets, these are what make the event loop running, which means\n-    // that after this and all connections are closed the event loop will quit.\n-    for (evhttp_bound_socket *socket : boundSockets) {\n-        evhttp_del_accept_socket(eventHTTP, socket);\n+\n+    if (needs_body && !res.m_headers.Find(\"Content-Type\")) {\n+        // Default type from libevent evhttp_new_object()\n+        res.m_headers.Write(\"Content-Type\", \"text/html; charset=ISO-8859-1\");\n     }\n-    boundSockets.clear();\n+\n+    auto connection_header{m_headers.Find(\"Connection\")};\n+    if (connection_header && ToLower(connection_header.value()) == \"close\") {\n+        // Might not exist already but we need to replace it, not append to it\n+        res.m_headers.Remove(\"Connection\");\n+        res.m_headers.Write(\"Connection\", \"close\");\n+        res.m_keep_alive = false;\n+    }\n+\n+    m_client->m_keep_alive = res.m_keep_alive;\n+\n+    // Serialize the response headers\n+    const std::string headers{res.StringifyHeaders()};\n+    const auto headers_bytes{std::as_bytes(std::span(headers.begin(), headers.end()))};\n+\n+    bool send_buffer_was_empty{false};\n+    // Fill the send buffer with the complete serialized response headers + body\n     {\n-        if (const auto n_connections{g_requests.CountActiveConnections()}; n_connections != 0) {\n-            LogDebug(BCLog::HTTP, \"Waiting for %d connections to stop HTTP server\\n\", n_connections);\n-        }\n-        g_requests.WaitUntilEmpty();\n-    }\n-    if (eventHTTP) {\n-        // Schedule a callback to call evhttp_free in the event base thread, so\n-        // that evhttp_free does not need to be called again after the handling\n-        // of unfinished request connections that follows.\n-        event_base_once(eventBase, -1, EV_TIMEOUT, [](evutil_socket_t, short, void*) {\n-            evhttp_free(eventHTTP);\n-            eventHTTP = nullptr;\n-        }, nullptr, nullptr);\n-    }\n-    if (eventBase) {\n-        LogDebug(BCLog::HTTP, \"Waiting for HTTP event thread to exit\\n\");\n-        if (g_thread_http.joinable()) g_thread_http.join();\n-        event_base_free(eventBase);\n-        eventBase = nullptr;\n-    }\n-    g_work_queue.reset();\n-    LogDebug(BCLog::HTTP, \"Stopped HTTP server\\n\");\n-}\n+        LOCK(m_client->m_send_mutex);\n+        send_buffer_was_empty = m_client->m_send_buffer.empty();\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), headers_bytes.begin(), headers_bytes.end());\n+\n+        // We've been using std::span up until now but it is finally time to copy\n+        // data. The original data will go out of scope when WriteReply() returns.\n+        // This is analogous to the memcpy() in libevent's evbuffer_add()\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), reply_body.begin(), reply_body.end());\n+    }\n+\n+    LogDebug(\n+        BCLog::HTTP,\n+        \"HTTPResponse (status code: %d size: %lld) added to send buffer for client %s (id=%lld)\\n\",\n+        status,\n+        headers_bytes.size() + reply_body.size(),\n+        m_client->m_origin,\n+        m_client->m_node_id);\n+\n+    // If the send buffer was empty before we wrote this reply, we can try an\n+    // optimistic send akin to CConnman::PushMessage() in which we\n+    // push the data directly out the socket to client right now, instead\n+    // of waiting for the next iteration of the Sockman I/O loop.\n+    if (send_buffer_was_empty) {\n+        m_client->SendBytesFromBuffer();\n+    } else {\n+        // Inform Sockman I/O there is data that is ready to be sent to this client\n+        // in the next loop iteration.\n+        m_client->m_send_ready = true;\n+    }\n \n-struct event_base* EventBase()\n-{\n-    return eventBase;\n+    // Signal to the Sockman I/O loop that we are ready to handle the next request.\n+    m_client->m_req_busy = false;\n }\n \n-static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n+bool HTTPClient::ReadRequest(std::unique_ptr<HTTPRequest>& req)\n {\n-    // Static handler: simply call inner handler\n-    HTTPEvent *self = static_cast<HTTPEvent*>(data);\n-    self->handler();\n-    if (self->deleteWhenTriggered)\n-        delete self;\n+    LineReader reader(m_recv_buffer, MAX_HEADERS_SIZE);\n+\n+    if (!req->LoadControlData(reader)) return false;\n+    if (!req->LoadHeaders(reader)) return false;\n+    if (!req->LoadBody(reader)) return false;\n+\n+    // Remove the bytes read out of the buffer.\n+    // If one of the above calls throws an error, the caller must\n+    // catch it and disconnect the client.\n+    m_recv_buffer.erase(\n+        m_recv_buffer.begin(),\n+        m_recv_buffer.begin() + (reader.it - reader.start));\n+\n+    return true;\n }\n \n-HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void()>& _handler):\n-    deleteWhenTriggered(_deleteWhenTriggered), handler(_handler)\n-{\n-    ev = event_new(base, -1, 0, httpevent_callback_fn, this);\n-    assert(ev);\n+bool HTTPClient::SendBytesFromBuffer()\n+{\n+    Assume(m_server);\n+\n+    // Send as much data from this client's buffer as we can\n+    LOCK(m_send_mutex);\n+    if (!m_send_buffer.empty()) {\n+        std::string err;\n+        // We don't intend to \"send more\" because http responses are usually small and we want the kernel to send them right away.\n+        ssize_t bytes_sent = m_server->SendBytes(m_node_id, MakeUCharSpan(m_send_buffer), /*will_send_more=*/false, err);\n+        if (bytes_sent < 0) {\n+            LogDebug(\n+                BCLog::HTTP,\n+                \"Error sending HTTP response data to client %s (id=%lld): %s\\n\",\n+                m_origin,\n+                m_node_id,\n+                err);\n+            m_send_ready = false;\n+            m_prevent_disconnect = false;\n+            m_disconnect = true;\n+            return false;\n+        }\n+\n+        Assume(static_cast<size_t>(bytes_sent) <= m_send_buffer.size());\n+        m_send_buffer.erase(m_send_buffer.begin(), m_send_buffer.begin() + bytes_sent);\n+\n+        LogDebug(\n+            BCLog::HTTP,\n+            \"Sent %d bytes to client %s (id=%lld)\\n\",\n+            bytes_sent,\n+            m_origin,\n+            m_node_id);\n+\n+        // This check is inside the if(!empty) block meaning \"there was data but now its gone\".\n+        // We shouldn't even be calling SendBytesFromBuffer() when the send buffer is empty,\n+        // but for belt-and-suspenders, we don't want to modify the disconnect flags if SendBytesFromBuffer() was a no-op.\n+        if (m_send_buffer.empty()) {\n+            m_send_ready = false;\n+            m_prevent_disconnect = false;\n+\n+            // Our work is done here\n+            if (!m_keep_alive) {\n+                m_disconnect = true;\n+                return false;\n+            }\n+        } else {\n+            m_send_ready = true;\n+            m_prevent_disconnect = true;\n+        }\n+    }\n+\n+    return true;\n }\n-HTTPEvent::~HTTPEvent()\n+\n+void HTTPServer::CloseConnectionInternal(std::shared_ptr<HTTPClient>& client)\n {\n-    event_free(ev);\n+    if (CloseConnection(client->m_node_id)) {\n+        LogDebug(BCLog::HTTP, \"Disconnected HTTP client %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    } else {\n+        LogDebug(BCLog::HTTP, \"Failed to disconnect non-existent HTTP client %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    }\n }\n-void HTTPEvent::trigger(struct timeval* tv)\n+\n+void HTTPServer::DisconnectClients()\n {\n-    if (tv == nullptr)\n-        event_active(ev, 0, 0); // immediately trigger event in main thread\n-    else\n-        evtimer_add(ev, tv); // trigger after timeval passed\n+    const auto now{Now<SteadySeconds>()};\n+    for (auto it = m_connected_clients.begin(); it != m_connected_clients.end();) {\n+        bool timeout{now - it->second->m_idle_since > m_rpcservertimeout};\n+        if (((it->second->m_disconnect || m_disconnect_all_clients) && !it->second->m_prevent_disconnect)\n+            || timeout) {\n+            CloseConnectionInternal(it->second);\n+            it = m_connected_clients.erase(it);\n+        } else {\n+            ++it;\n+        }\n+    }\n+    m_no_clients = m_connected_clients.size() == 0;\n }\n-HTTPRequest::HTTPRequest(struct evhttp_request* _req, const util::SignalInterrupt& interrupt, bool _replySent)\n-    : req(_req), m_interrupt(interrupt), replySent(_replySent)\n+\n+bool HTTPServer::EventNewConnectionAccepted(NodeId node_id,\n+                                            const CService& me,\n+                                            const CService& them)\n {\n+    auto client = std::make_shared<HTTPClient>(node_id, them);\n+    // Point back to the server\n+    client->m_server = this;\n+    // Set timeout\n+    client->m_idle_since = Now<SteadySeconds>();\n+    LogDebug(BCLog::HTTP, \"HTTP Connection accepted from %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    m_connected_clients.emplace(client->m_node_id, std::move(client));\n+    m_no_clients = false;\n+    return true;\n }\n \n-HTTPRequest::~HTTPRequest()\n+void HTTPServer::EventReadyToSend(NodeId node_id, bool& cancel_recv)\n {\n-    if (!replySent) {\n-        // Keep track of whether reply was sent to avoid request leaks\n-        LogPrintf(\"%s: Unhandled request\\n\", __func__);\n-        WriteReply(HTTP_INTERNAL_SERVER_ERROR, \"Unhandled request\");\n+    // Next attempt to receive data from this node is permitted\n+    cancel_recv = false;\n+\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n     }\n-    // evhttpd cleans up the request, as long as a reply was sent.\n+\n+    // SendBytesFromBuffer() returns true if we should keep the client around,\n+    // false if we are done with it. Invert that boolean to inform Sockman\n+    // whether it should cancel the next receive attempt from this client.\n+    cancel_recv = !client->SendBytesFromBuffer();\n }\n \n-std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr) const\n+void HTTPServer::EventGotData(NodeId node_id, std::span<const uint8_t> data)\n {\n-    const struct evkeyvalq* headers = evhttp_request_get_input_headers(req);\n-    assert(headers);\n-    const char* val = evhttp_find_header(headers, hdr.c_str());\n-    if (val)\n-        return std::make_pair(true, val);\n-    else\n-        return std::make_pair(false, \"\");\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n+\n+    // Reset idle timeout\n+    client->m_idle_since = Now<SteadySeconds>();\n+\n+    // Prevent disconnect until all requests are completely handled.\n+    client->m_prevent_disconnect = true;\n+\n+    // Copy data from socket buffer to client receive buffer\n+    client->m_recv_buffer.insert(\n+        client->m_recv_buffer.end(),\n+        reinterpret_cast<const std::byte*>(data.data()),\n+        reinterpret_cast<const std::byte*>(data.data() + data.size())\n+    );\n+\n+    // Try reading (potentially multiple) HTTP requests from the buffer\n+    while (client->m_recv_buffer.size() > 0) {\n+        // Create a new request object and try to fill it with data from the receive buffer\n+        auto req = std::make_unique<HTTPRequest>(client);\n+        try {\n+            // Stop reading if we need more data from the client to parse a complete request\n+            if (!client->ReadRequest(req)) break;\n+        } catch (const std::runtime_error& e) {\n+            LogDebug(\n+                BCLog::HTTP,\n+                \"Error reading HTTP request from client %s (id=%lld): %s\\n\",\n+                client->m_origin,\n+                client->m_node_id,\n+                e.what());\n+\n+            // We failed to read a complete request from the buffer\n+            req->WriteReply(HTTP_BAD_REQUEST);\n+            client->m_disconnect = true;\n+            break;\n+        }\n+\n+        // We read a complete request from the buffer into the queue\n+        LogDebug(\n+            BCLog::HTTP,\n+            \"Received a %s request for %s from %s (id=%lld)\\n\",\n+            req->m_method,\n+            req->m_target,\n+            req->m_client->m_origin,\n+            req->m_client->m_node_id);\n+\n+        // add request to client queue\n+        client->m_req_queue.push_back(std::move(req));\n+    }\n }\n \n-std::string HTTPRequest::ReadBody()\n+void HTTPServer::EventGotEOF(NodeId node_id)\n {\n-    struct evbuffer* buf = evhttp_request_get_input_buffer(req);\n-    if (!buf)\n-        return \"\";\n-    size_t size = evbuffer_get_length(buf);\n-    /** Trivial implementation: if this is ever a performance bottleneck,\n-     * internal copying can be avoided in multi-segment buffers by using\n-     * evbuffer_peek and an awkward loop. Though in that case, it'd be even\n-     * better to not copy into an intermediate string but use a stream\n-     * abstraction to consume the evbuffer on the fly in the parsing algorithm.\n-     */\n-    const char* data = (const char*)evbuffer_pullup(buf, size);\n-    if (!data) // returns nullptr in case of empty buffer\n-        return \"\";\n-    std::string rv(data, size);\n-    evbuffer_drain(buf, size);\n-    return rv;\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n+\n+    client->m_disconnect = true;\n }\n \n-void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n+void HTTPServer::EventGotPermanentReadError(NodeId node_id, const std::string& errmsg)\n {\n-    struct evkeyvalq* headers = evhttp_request_get_output_headers(req);\n-    assert(headers);\n-    evhttp_add_header(headers, hdr.c_str(), value.c_str());\n-}\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n \n-/** Closure sent to main thread to request a reply to be sent to\n- * a HTTP request.\n- * Replies must be sent in the main loop in the main http thread,\n- * this cannot be done from worker threads.\n- */\n-void HTTPRequest::WriteReply(int nStatus, std::span<const std::byte> reply)\n-{\n-    assert(!replySent && req);\n-    if (m_interrupt) {\n-        WriteHeader(\"Connection\", \"close\");\n-    }\n-    // Send event to main http thread to send reply message\n-    struct evbuffer* evb = evhttp_request_get_output_buffer(req);\n-    assert(evb);\n-    evbuffer_add(evb, reply.data(), reply.size());\n-    auto req_copy = req;\n-    HTTPEvent* ev = new HTTPEvent(eventBase, true, [req_copy, nStatus]{\n-        evhttp_send_reply(req_copy, nStatus, nullptr, nullptr);\n-        // Re-enable reading from the socket. This is the second part of the libevent\n-        // workaround above.\n-        if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02010900) {\n-            evhttp_connection* conn = evhttp_request_get_connection(req_copy);\n-            if (conn) {\n-                bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n-                if (bev) {\n-                    bufferevent_enable(bev, EV_READ | EV_WRITE);\n-                }\n-            }\n-        }\n-    });\n-    ev->trigger(nullptr);\n-    replySent = true;\n-    req = nullptr; // transferred back to main thread\n+    client->m_disconnect = true;\n }\n \n-CService HTTPRequest::GetPeer() const\n+void HTTPServer::EventIOLoopCompletedForOne(NodeId node_id)\n {\n-    evhttp_connection* con = evhttp_request_get_connection(req);\n-    CService peer;\n-    if (con) {\n-        // evhttp retains ownership over returned address string\n-        const char* address = \"\";\n-        uint16_t port = 0;\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n \n-#ifdef HAVE_EVHTTP_CONNECTION_GET_PEER_CONST_CHAR\n-        evhttp_connection_get_peer(con, &address, &port);\n-#else\n-        evhttp_connection_get_peer(con, (char**)&address, &port);\n-#endif // HAVE_EVHTTP_CONNECTION_GET_PEER_CONST_CHAR\n+    // If we are already handling a request from\n+    // this client, do nothing.\n+    if (client->m_req_busy) return;\n \n-        peer = MaybeFlipIPv6toCJDNS(LookupNumeric(address, port));\n+    // Otherwise, if there is a new pending request, handle it.\n+    if (!client->m_req_queue.empty()) {\n+        client->m_req_busy = true;\n+        m_request_dispatcher(std::move(client->m_req_queue.front()));\n+        client->m_req_queue.pop_front();\n     }\n-    return peer;\n }\n \n-std::string HTTPRequest::GetURI() const\n+void HTTPServer::EventIOLoopCompletedForAll()\n {\n-    return evhttp_request_get_uri(req);\n+    DisconnectClients();\n }\n \n-HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod() const\n+bool HTTPServer::ShouldTryToSend(NodeId node_id) const\n {\n-    switch (evhttp_request_get_command(req)) {\n-    case EVHTTP_REQ_GET:\n-        return GET;\n-    case EVHTTP_REQ_POST:\n-        return POST;\n-    case EVHTTP_REQ_HEAD:\n-        return HEAD;\n-    case EVHTTP_REQ_PUT:\n-        return PUT;\n-    default:\n-        return UNKNOWN;\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return false;\n     }\n+\n+    return client->m_send_ready;\n }\n \n-std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+bool HTTPServer::ShouldTryToRecv(NodeId node_id) const\n {\n-    const char* uri{evhttp_request_get_uri(req)};\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return false;\n+    }\n \n-    return GetQueryParameterFromUri(uri, key);\n+    // Don't try to receive again until we've cleared the send buffer to this client\n+    return !client->m_send_ready;\n }\n \n-std::optional<std::string> GetQueryParameterFromUri(const char* uri, const std::string& key)\n+std::shared_ptr<HTTPClient> HTTPServer::GetClientById(NodeId node_id) const\n {\n-    evhttp_uri* uri_parsed{evhttp_uri_parse(uri)};\n-    if (!uri_parsed) {\n-        throw std::runtime_error(\"URI parsing failed, it likely contained RFC 3986 invalid characters\");\n+    auto it{m_connected_clients.find(node_id)};\n+    if (it != m_connected_clients.end()) {\n+        return it->second;\n     }\n-    const char* query{evhttp_uri_get_query(uri_parsed)};\n-    std::optional<std::string> result;\n+    return nullptr;\n+}\n \n-    if (query) {\n-        // Parse the query string into a key-value queue and iterate over it\n-        struct evkeyvalq params_q;\n-        evhttp_parse_query_str(query, &params_q);\n+bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+{\n+    if (!InitHTTPAllowList())\n+        return false;\n \n-        for (struct evkeyval* param{params_q.tqh_first}; param != nullptr; param = param->next.tqe_next) {\n-            if (param->key == key) {\n-                result = param->value;\n-                break;\n+    // Create HTTPServer\n+    g_http_server = std::make_unique<HTTPServer>(MaybeDispatchRequestToWorker);\n+\n+    g_http_server->m_rpcservertimeout = std::chrono::seconds(gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n+\n+    // Bind HTTP server to specified addresses\n+    std::vector<std::pair<std::string, uint16_t>> endpoints{GetBindAddresses()};\n+    bool bind_success{false};\n+    for (std::vector<std::pair<std::string, uint16_t> >::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\n+        LogPrintf(\"Binding RPC on address %s port %i\\n\", i->first, i->second);\n+        const std::optional<CService> addr{Lookup(i->first, i->second, false)};\n+        if (addr) {\n+            if (addr->IsBindAny()) {\n+                LogPrintf(\"WARNING: the RPC server is not safe to expose to untrusted networks such as the public internet\\n\");\n             }\n+            bilingual_str strError;\n+            if (!g_http_server->BindAndStartListening(addr.value(), strError)) {\n+                LogPrintf(\"Binding RPC on address %s failed: %s\\n\", addr->ToStringAddrPort(), strError.original);\n+            } else {\n+                bind_success = true;\n+            }\n+        } else {\n+            LogPrintf(\"Binding RPC on address %s port %i failed.\\n\", i->first, i->second);\n         }\n-        evhttp_clear_headers(&params_q);\n     }\n-    evhttp_uri_free(uri_parsed);\n \n-    return result;\n+    if (!bind_success) {\n+        LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n+        return false;\n+    }\n+\n+    LogDebug(BCLog::HTTP, \"Initialized HTTP server\\n\");\n+    int workQueueDepth = std::max((long)gArgs.GetIntArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n+    LogDebug(BCLog::HTTP, \"creating work queue of depth %d\\n\", workQueueDepth);\n+\n+    g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n+\n+    return true;\n }\n \n-void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n+static std::vector<std::thread> g_thread_http_workers;\n+\n+void StartHTTPServer()\n {\n-    LogDebug(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n-    LOCK(g_httppathhandlers_mutex);\n-    pathHandlers.emplace_back(prefix, exactMatch, handler);\n+    int rpcThreads = std::max((long)gArgs.GetIntArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n+    LogInfo(\"Starting HTTP server with %d worker threads\\n\", rpcThreads);\n+    SockMan::Options sockman_options;\n+    sockman_options.socket_handler_thread_name = \"http\";\n+    g_http_server->StartSocketsThreads(sockman_options);\n+\n+    for (int i = 0; i < rpcThreads; i++) {\n+        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, g_work_queue.get(), i);\n+    }\n }\n \n-void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+void InterruptHTTPServer()\n {\n-    LOCK(g_httppathhandlers_mutex);\n-    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n-    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n-    for (; i != iend; ++i)\n-        if (i->prefix == prefix && i->exactMatch == exactMatch)\n-            break;\n-    if (i != iend)\n-    {\n-        LogDebug(BCLog::HTTP, \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n-        pathHandlers.erase(i);\n+    LogDebug(BCLog::HTTP, \"Interrupting HTTP server\\n\");\n+    if (g_http_server) {\n+        // Reject all new requests\n+        g_http_server->m_request_dispatcher = RejectAllRequests;\n     }\n+    if (g_work_queue) {\n+        // Stop workers, killing requests we haven't processed or responded to yet\n+        g_work_queue->Interrupt();\n+    }\n+}\n+\n+void StopHTTPServer()\n+{\n+    LogDebug(BCLog::HTTP, \"Stopping HTTP server\\n\");\n+    if (g_work_queue) {\n+        LogDebug(BCLog::HTTP, \"Waiting for HTTP worker threads to exit\\n\");\n+        for (auto& thread : g_thread_http_workers) {\n+            thread.join();\n+        }\n+        g_thread_http_workers.clear();\n+    }\n+    if (g_http_server) {\n+        // Disconnect clients as their remaining responses are flushed\n+        g_http_server->m_disconnect_all_clients = true;\n+        // Wait for all disconnections\n+        while (!g_http_server->m_no_clients) {\n+            std::this_thread::sleep_for(std::chrono::milliseconds{50});",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 1221,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n            std::this_thread::sleep_for(50ms);\r\n```",
      "created_at": "2025-06-05T13:07:30Z",
      "updated_at": "2025-06-05T14:02:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2128815408",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128815408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 984,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128818962",
      "pull_request_review_id": 2899730748,
      "id": 2128818962,
      "node_id": "PRRC_kwDOABII585-4zMS",
      "diff_hunk": "@@ -417,361 +286,708 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n     queue->Run();\n }\n \n-/** libevent event log callback */\n-static void libevent_log_cb(int severity, const char *msg)\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n {\n-    BCLog::Level level;\n-    switch (severity) {\n-    case EVENT_LOG_DEBUG:\n-        level = BCLog::Level::Debug;\n-        break;\n-    case EVENT_LOG_MSG:\n-        level = BCLog::Level::Info;\n-        break;\n-    case EVENT_LOG_WARN:\n-        level = BCLog::Level::Warning;\n-        break;\n-    default: // EVENT_LOG_ERR and others are mapped to error\n-        level = BCLog::Level::Error;\n-        break;\n+    LogDebug(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+    LOCK(g_httppathhandlers_mutex);\n+    pathHandlers.emplace_back(prefix, exactMatch, handler);\n+}\n+\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+{\n+    LOCK(g_httppathhandlers_mutex);\n+    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i)\n+        if (i->prefix == prefix && i->exactMatch == exactMatch)\n+            break;\n+    if (i != iend)\n+    {\n+        LogDebug(BCLog::HTTP, \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+        pathHandlers.erase(i);\n     }\n-    LogPrintLevel(BCLog::LIBEVENT, level, \"%s\\n\", msg);\n }\n \n-bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+namespace http_bitcoin {\n+using util::Split;\n+\n+std::optional<std::string_view> HTTPHeaders::Find(const std::string key) const\n {\n-    if (!InitHTTPAllowList())\n-        return false;\n+    const auto it = m_map.find(key);\n+    if (it == m_map.end()) return std::nullopt;\n+    return std::string_view(it->second);\n+}\n \n-    // Redirect libevent's logging to our own log\n-    event_set_log_callback(&libevent_log_cb);\n-    // Update libevent's log handling.\n-    UpdateHTTPServerLogging(LogInstance().WillLogCategory(BCLog::LIBEVENT));\n+void HTTPHeaders::Write(const std::string key, const std::string value)\n+{\n+    // If present, append value to list\n+    const auto existing_value = Find(key);\n+    if (existing_value) {\n+        m_map[key] = std::string(existing_value.value()) + \", \" + value;\n+    } else {\n+        m_map[key] = value;\n+    }\n+}\n \n-#ifdef WIN32\n-    evthread_use_windows_threads();\n-#else\n-    evthread_use_pthreads();\n-#endif\n+void HTTPHeaders::Remove(const std::string key)\n+{\n+    m_map.erase(key);\n+}\n \n-    raii_event_base base_ctr = obtain_event_base();\n+bool HTTPHeaders::Read(util::LineReader& reader)\n+{\n+    // Headers https://httpwg.org/specs/rfc9110.html#rfc.section.6.3\n+    // A sequence of Field Lines https://httpwg.org/specs/rfc9110.html#rfc.section.5.2\n+    do {\n+        auto maybe_line = reader.ReadLine();\n+        if (!maybe_line) return false;\n+        const std::string& line = *maybe_line;\n \n-    /* Create a new evhttp object to handle requests. */\n-    raii_evhttp http_ctr = obtain_evhttp(base_ctr.get());\n-    struct evhttp* http = http_ctr.get();\n-    if (!http) {\n-        LogPrintf(\"couldn't create evhttp. Exiting.\\n\");\n-        return false;\n-    }\n+        // An empty line indicates end of the headers section https://www.rfc-editor.org/rfc/rfc2616#section-4\n+        if (line.length() == 0) break;\n \n-    evhttp_set_timeout(http, gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n-    evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n-    evhttp_set_max_body_size(http, MAX_SIZE);\n-    evhttp_set_gencb(http, http_request_cb, (void*)&interrupt);\n+        // Header line must have at least one \":\"\n+        // keys are not allowed to have delimiters like \":\" but values are\n+        // https://httpwg.org/specs/rfc9110.html#rfc.section.5.6.2\n+        const size_t pos{line.find(':')};\n+        if (pos == std::string::npos) throw std::runtime_error(\"HTTP header missing colon (:)\");\n \n-    if (!HTTPBindAddresses(http)) {\n-        LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n-        return false;\n+        // Whitespace is optional\n+        std::string key = util::TrimString(line.substr(0, pos));\n+        std::string value = util::TrimString(line.substr(pos + 1));\n+        Write(key, value);\n+    } while (true);\n+\n+    return true;\n+}\n+\n+std::string HTTPHeaders::Stringify() const\n+{\n+    std::string out;\n+    for (const auto& [key, value] : m_map) {\n+        out += key + \": \" + value + \"\\r\\n\";\n     }\n \n-    LogDebug(BCLog::HTTP, \"Initialized HTTP server\\n\");\n-    int workQueueDepth = std::max((long)gArgs.GetIntArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n-    LogDebug(BCLog::HTTP, \"creating work queue of depth %d\\n\", workQueueDepth);\n+    // Headers are terminated by an empty line\n+    out += \"\\r\\n\";\n+\n+    return out;\n+}\n+\n+std::string HTTPResponse::StringifyHeaders() const\n+{\n+    return strprintf(\"HTTP/%d.%d %d %s\\r\\n%s\", m_version_major, m_version_minor, m_status, m_reason, m_headers.Stringify());\n+}\n+\n+bool HTTPRequest::LoadControlData(LineReader& reader)\n+{\n+    auto maybe_line = reader.ReadLine();\n+    if (!maybe_line) return false;\n+    const std::string& request_line = *maybe_line;\n+\n+    // Request Line aka Control Data https://httpwg.org/specs/rfc9110.html#rfc.section.6.2\n+    // Three words separated by spaces, terminated by \\n or \\r\\n\n+    if (request_line.length() < MIN_REQUEST_LINE_LENGTH) throw std::runtime_error(\"HTTP request line too short\");\n+\n+    const std::vector<std::string_view> parts{Split<std::string_view>(request_line, \" \")};\n+    if (parts.size() != 3) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_method = parts[0];\n+    m_target = parts[1];\n+\n+    if (parts[2].rfind(\"HTTP/\") != 0) throw std::runtime_error(\"HTTP request line malformed\");\n+    const std::vector<std::string_view> version_parts{Split<std::string_view>(parts[2].substr(5), \".\")};\n+    if (version_parts.size() != 2) throw std::runtime_error(\"HTTP request line malformed\");\n+    auto major = ToIntegral<int>(version_parts[0]);\n+    auto minor = ToIntegral<int>(version_parts[1]);\n+    if (!major || !minor) throw std::runtime_error(\"HTTP request line malformed\");\n+    m_version_major = major.value();\n+    m_version_minor = minor.value();\n \n-    g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n-    // transfer ownership to eventBase/HTTP via .release()\n-    eventBase = base_ctr.release();\n-    eventHTTP = http_ctr.release();\n     return true;\n }\n \n-void UpdateHTTPServerLogging(bool enable) {\n-    if (enable) {\n-        event_enable_debug_logging(EVENT_DBG_ALL);\n+bool HTTPRequest::LoadHeaders(LineReader& reader)\n+{\n+    return m_headers.Read(reader);\n+}\n+\n+bool HTTPRequest::LoadBody(LineReader& reader)\n+{\n+    // https://httpwg.org/specs/rfc9112.html#message.body\n+\n+    auto transfer_encoding_header = m_headers.Find(\"Transfer-Encoding\");\n+    if (transfer_encoding_header && ToLower(transfer_encoding_header.value()) == \"chunked\") {\n+        // Transfer-Encoding: https://datatracker.ietf.org/doc/html/rfc7230.html#section-3.3.1\n+        // Chunked Transfer Coding: https://datatracker.ietf.org/doc/html/rfc7230.html#section-4.1\n+        // see evhttp_handle_chunked_read() in libevent http.c\n+        while (reader.Left() > 0) {\n+            auto maybe_chunk_size = reader.ReadLine();\n+            if (!maybe_chunk_size) return false;\n+            uint64_t chunk_size;\n+\n+            if (!ParseUInt64Hex(maybe_chunk_size.value(), &chunk_size)) throw std::runtime_error(\"Invalid chunk size\");\n+\n+            bool last_chunk{chunk_size == 0};\n+\n+            if (!last_chunk) {\n+                // We are still expecting more data for this chunk\n+                if (reader.Left() < chunk_size) {\n+                    return false;\n+                }\n+                // Pack chunk onto body\n+                m_body += reader.ReadLength(chunk_size);\n+            }\n+\n+            // Even though every chunk size is explicitly declared,\n+            // they are still terminated by a CRLF we don't need.\n+            auto crlf = reader.ReadLine();\n+            if (!crlf || crlf.value().size() != 0) throw std::runtime_error(\"Improperly terminated chunk\");\n+\n+            if (last_chunk) return true;\n+        }\n+\n+        // We read all the chunks but never got the last chunk, wait for client to send more\n+        return false;\n     } else {\n-        event_enable_debug_logging(EVENT_DBG_NONE);\n+        // No Content-length or Transfer-Encoding header means no body, see libevent evhttp_get_body()\n+        auto content_length_value{m_headers.Find(\"Content-Length\")};\n+        if (!content_length_value) return true;\n+\n+        uint64_t content_length;\n+        if (!ParseUInt64(content_length_value.value(), &content_length)) throw std::runtime_error(\"Cannot parse Content-Length value\");\n+\n+        // Not enough data in buffer for expected body\n+        if (reader.Left() < content_length) return false;\n+\n+        m_body = reader.ReadLength(content_length);\n+\n+        return true;\n     }\n }\n \n-static std::thread g_thread_http;\n-static std::vector<std::thread> g_thread_http_workers;\n+CService HTTPRequest::GetPeer() const\n+{\n+    return m_client->m_addr;\n+}\n \n-void StartHTTPServer()\n+HTTPRequestMethod HTTPRequest::GetRequestMethod() const\n {\n-    int rpcThreads = std::max((long)gArgs.GetIntArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n-    LogInfo(\"Starting HTTP server with %d worker threads\\n\", rpcThreads);\n-    g_thread_http = std::thread(ThreadHTTP, eventBase);\n+    if (m_method == \"GET\") return HTTPRequestMethod::GET;\n+    if (m_method == \"POST\") return HTTPRequestMethod::POST;\n+    if (m_method == \"HEAD\") return HTTPRequestMethod::HEAD;\n+    if (m_method == \"PUT\") return HTTPRequestMethod::PUT;\n+    return HTTPRequestMethod::UNKNOWN;\n+}\n \n-    for (int i = 0; i < rpcThreads; i++) {\n-        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, g_work_queue.get(), i);\n+std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+{\n+    return GetQueryParameterFromUri(GetURI(), key);\n+}\n+\n+// See libevent http.c evhttp_parse_query_impl()\n+// and https://www.rfc-editor.org/rfc/rfc3986#section-3.4\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key)\n+{\n+    // Handle %XX encoding\n+    std::string decoded_uri{UrlDecode(uri)};\n+\n+    // find query in URI\n+    size_t start = decoded_uri.find('?');\n+    if (start == std::string::npos) return std::nullopt;\n+    size_t end = decoded_uri.find('#', start);\n+    if (end == std::string::npos) {\n+        end = decoded_uri.length();\n+    }\n+    const std::string_view query{decoded_uri.data() + start + 1, end - start - 1};\n+    // find requested parameter in query\n+    const std::vector<std::string_view> params{Split<std::string_view>(query, \"&\")};\n+    for (const std::string_view& param : params) {\n+        size_t delim = param.find('=');\n+        if (key == param.substr(0, delim)) {\n+            if (delim == std::string::npos) {\n+                return \"\";\n+            } else {\n+                return std::string(param.substr(delim + 1));\n+            }\n+        }\n     }\n+    return std::nullopt;\n }\n \n-void InterruptHTTPServer()\n+std::pair<bool, std::string_view> HTTPRequest::GetHeader(const std::string& hdr) const\n {\n-    LogDebug(BCLog::HTTP, \"Interrupting HTTP server\\n\");\n-    if (eventHTTP) {\n-        // Reject requests on current connections\n-        evhttp_set_gencb(eventHTTP, http_reject_request_cb, nullptr);\n-    }\n-    if (g_work_queue) {\n-        g_work_queue->Interrupt();\n-    }\n+    std::optional<std::string_view> found{m_headers.Find(hdr)};\n+    if (found.has_value()) {\n+        return std::make_pair(true, found.value());\n+    } else\n+        return std::make_pair(false, \"\");\n }\n \n-void StopHTTPServer()\n+void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n {\n-    LogDebug(BCLog::HTTP, \"Stopping HTTP server\\n\");\n-    if (g_work_queue) {\n-        LogDebug(BCLog::HTTP, \"Waiting for HTTP worker threads to exit\\n\");\n-        for (auto& thread : g_thread_http_workers) {\n-            thread.join();\n+    m_response_headers.Write(hdr, value);\n+}\n+\n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)\n+{\n+    HTTPResponse res;\n+\n+    // Some response headers are determined in advance and stored in the request\n+    res.m_headers = std::move(m_response_headers);\n+\n+    // Response version matches request version\n+    res.m_version_major = m_version_major;\n+    res.m_version_minor = m_version_minor;\n+\n+    // Add response code and look up reason string\n+    res.m_status = status;\n+    res.m_reason = HTTPReason.find(status)->second;\n+\n+    // See libevent evhttp_response_needs_body()\n+    // Response headers are different if no body is needed\n+    bool needs_body{status != HTTP_NO_CONTENT && (status < 100 || status >= 200)};\n+\n+    // See libevent evhttp_make_header_response()\n+    // Expected response headers depend on protocol version\n+    if (m_version_major == 1) {\n+        // HTTP/1.0\n+        if (m_version_minor == 0) {\n+            auto connection_header{m_headers.Find(\"Connection\")};\n+            if (connection_header && ToLower(connection_header.value()) == \"keep-alive\") {\n+                res.m_headers.Write(\"Connection\", \"keep-alive\");\n+                res.m_keep_alive = true;\n+            }\n+        }\n+\n+        // HTTP/1.1\n+        if (m_version_minor >= 1) {\n+            const int64_t now_seconds{TicksSinceEpoch<std::chrono::seconds>(NodeClock::now())};\n+            res.m_headers.Write(\"Date\", FormatRFC7231DateTime(now_seconds));\n+\n+            if (needs_body) {\n+                res.m_headers.Write(\"Content-Length\", strprintf(\"%d\", reply_body.size()));\n+            }\n+\n+            // Default for HTTP/1.1\n+            res.m_keep_alive = true;\n         }\n-        g_thread_http_workers.clear();\n     }\n-    // Unlisten sockets, these are what make the event loop running, which means\n-    // that after this and all connections are closed the event loop will quit.\n-    for (evhttp_bound_socket *socket : boundSockets) {\n-        evhttp_del_accept_socket(eventHTTP, socket);\n+\n+    if (needs_body && !res.m_headers.Find(\"Content-Type\")) {\n+        // Default type from libevent evhttp_new_object()\n+        res.m_headers.Write(\"Content-Type\", \"text/html; charset=ISO-8859-1\");\n     }\n-    boundSockets.clear();\n+\n+    auto connection_header{m_headers.Find(\"Connection\")};\n+    if (connection_header && ToLower(connection_header.value()) == \"close\") {\n+        // Might not exist already but we need to replace it, not append to it\n+        res.m_headers.Remove(\"Connection\");\n+        res.m_headers.Write(\"Connection\", \"close\");\n+        res.m_keep_alive = false;\n+    }\n+\n+    m_client->m_keep_alive = res.m_keep_alive;\n+\n+    // Serialize the response headers\n+    const std::string headers{res.StringifyHeaders()};\n+    const auto headers_bytes{std::as_bytes(std::span(headers.begin(), headers.end()))};\n+\n+    bool send_buffer_was_empty{false};\n+    // Fill the send buffer with the complete serialized response headers + body\n     {\n-        if (const auto n_connections{g_requests.CountActiveConnections()}; n_connections != 0) {\n-            LogDebug(BCLog::HTTP, \"Waiting for %d connections to stop HTTP server\\n\", n_connections);\n-        }\n-        g_requests.WaitUntilEmpty();\n-    }\n-    if (eventHTTP) {\n-        // Schedule a callback to call evhttp_free in the event base thread, so\n-        // that evhttp_free does not need to be called again after the handling\n-        // of unfinished request connections that follows.\n-        event_base_once(eventBase, -1, EV_TIMEOUT, [](evutil_socket_t, short, void*) {\n-            evhttp_free(eventHTTP);\n-            eventHTTP = nullptr;\n-        }, nullptr, nullptr);\n-    }\n-    if (eventBase) {\n-        LogDebug(BCLog::HTTP, \"Waiting for HTTP event thread to exit\\n\");\n-        if (g_thread_http.joinable()) g_thread_http.join();\n-        event_base_free(eventBase);\n-        eventBase = nullptr;\n-    }\n-    g_work_queue.reset();\n-    LogDebug(BCLog::HTTP, \"Stopped HTTP server\\n\");\n-}\n+        LOCK(m_client->m_send_mutex);\n+        send_buffer_was_empty = m_client->m_send_buffer.empty();\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), headers_bytes.begin(), headers_bytes.end());\n+\n+        // We've been using std::span up until now but it is finally time to copy\n+        // data. The original data will go out of scope when WriteReply() returns.\n+        // This is analogous to the memcpy() in libevent's evbuffer_add()\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), reply_body.begin(), reply_body.end());\n+    }\n+\n+    LogDebug(\n+        BCLog::HTTP,\n+        \"HTTPResponse (status code: %d size: %lld) added to send buffer for client %s (id=%lld)\\n\",\n+        status,\n+        headers_bytes.size() + reply_body.size(),\n+        m_client->m_origin,\n+        m_client->m_node_id);\n+\n+    // If the send buffer was empty before we wrote this reply, we can try an\n+    // optimistic send akin to CConnman::PushMessage() in which we\n+    // push the data directly out the socket to client right now, instead\n+    // of waiting for the next iteration of the Sockman I/O loop.\n+    if (send_buffer_was_empty) {\n+        m_client->SendBytesFromBuffer();\n+    } else {\n+        // Inform Sockman I/O there is data that is ready to be sent to this client\n+        // in the next loop iteration.\n+        m_client->m_send_ready = true;\n+    }\n \n-struct event_base* EventBase()\n-{\n-    return eventBase;\n+    // Signal to the Sockman I/O loop that we are ready to handle the next request.\n+    m_client->m_req_busy = false;\n }\n \n-static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n+bool HTTPClient::ReadRequest(std::unique_ptr<HTTPRequest>& req)\n {\n-    // Static handler: simply call inner handler\n-    HTTPEvent *self = static_cast<HTTPEvent*>(data);\n-    self->handler();\n-    if (self->deleteWhenTriggered)\n-        delete self;\n+    LineReader reader(m_recv_buffer, MAX_HEADERS_SIZE);\n+\n+    if (!req->LoadControlData(reader)) return false;\n+    if (!req->LoadHeaders(reader)) return false;\n+    if (!req->LoadBody(reader)) return false;\n+\n+    // Remove the bytes read out of the buffer.\n+    // If one of the above calls throws an error, the caller must\n+    // catch it and disconnect the client.\n+    m_recv_buffer.erase(\n+        m_recv_buffer.begin(),\n+        m_recv_buffer.begin() + (reader.it - reader.start));\n+\n+    return true;\n }\n \n-HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void()>& _handler):\n-    deleteWhenTriggered(_deleteWhenTriggered), handler(_handler)\n-{\n-    ev = event_new(base, -1, 0, httpevent_callback_fn, this);\n-    assert(ev);\n+bool HTTPClient::SendBytesFromBuffer()\n+{\n+    Assume(m_server);\n+\n+    // Send as much data from this client's buffer as we can\n+    LOCK(m_send_mutex);\n+    if (!m_send_buffer.empty()) {\n+        std::string err;\n+        // We don't intend to \"send more\" because http responses are usually small and we want the kernel to send them right away.\n+        ssize_t bytes_sent = m_server->SendBytes(m_node_id, MakeUCharSpan(m_send_buffer), /*will_send_more=*/false, err);\n+        if (bytes_sent < 0) {\n+            LogDebug(\n+                BCLog::HTTP,\n+                \"Error sending HTTP response data to client %s (id=%lld): %s\\n\",\n+                m_origin,\n+                m_node_id,\n+                err);\n+            m_send_ready = false;\n+            m_prevent_disconnect = false;\n+            m_disconnect = true;\n+            return false;\n+        }\n+\n+        Assume(static_cast<size_t>(bytes_sent) <= m_send_buffer.size());\n+        m_send_buffer.erase(m_send_buffer.begin(), m_send_buffer.begin() + bytes_sent);\n+\n+        LogDebug(\n+            BCLog::HTTP,\n+            \"Sent %d bytes to client %s (id=%lld)\\n\",\n+            bytes_sent,\n+            m_origin,\n+            m_node_id);\n+\n+        // This check is inside the if(!empty) block meaning \"there was data but now its gone\".\n+        // We shouldn't even be calling SendBytesFromBuffer() when the send buffer is empty,\n+        // but for belt-and-suspenders, we don't want to modify the disconnect flags if SendBytesFromBuffer() was a no-op.\n+        if (m_send_buffer.empty()) {\n+            m_send_ready = false;\n+            m_prevent_disconnect = false;\n+\n+            // Our work is done here\n+            if (!m_keep_alive) {\n+                m_disconnect = true;\n+                return false;\n+            }\n+        } else {\n+            m_send_ready = true;\n+            m_prevent_disconnect = true;\n+        }\n+    }\n+\n+    return true;\n }\n-HTTPEvent::~HTTPEvent()\n+\n+void HTTPServer::CloseConnectionInternal(std::shared_ptr<HTTPClient>& client)\n {\n-    event_free(ev);\n+    if (CloseConnection(client->m_node_id)) {\n+        LogDebug(BCLog::HTTP, \"Disconnected HTTP client %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    } else {\n+        LogDebug(BCLog::HTTP, \"Failed to disconnect non-existent HTTP client %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    }\n }\n-void HTTPEvent::trigger(struct timeval* tv)\n+\n+void HTTPServer::DisconnectClients()\n {\n-    if (tv == nullptr)\n-        event_active(ev, 0, 0); // immediately trigger event in main thread\n-    else\n-        evtimer_add(ev, tv); // trigger after timeval passed\n+    const auto now{Now<SteadySeconds>()};\n+    for (auto it = m_connected_clients.begin(); it != m_connected_clients.end();) {\n+        bool timeout{now - it->second->m_idle_since > m_rpcservertimeout};\n+        if (((it->second->m_disconnect || m_disconnect_all_clients) && !it->second->m_prevent_disconnect)\n+            || timeout) {\n+            CloseConnectionInternal(it->second);\n+            it = m_connected_clients.erase(it);\n+        } else {\n+            ++it;\n+        }\n+    }\n+    m_no_clients = m_connected_clients.size() == 0;\n }\n-HTTPRequest::HTTPRequest(struct evhttp_request* _req, const util::SignalInterrupt& interrupt, bool _replySent)\n-    : req(_req), m_interrupt(interrupt), replySent(_replySent)\n+\n+bool HTTPServer::EventNewConnectionAccepted(NodeId node_id,\n+                                            const CService& me,\n+                                            const CService& them)\n {\n+    auto client = std::make_shared<HTTPClient>(node_id, them);\n+    // Point back to the server\n+    client->m_server = this;\n+    // Set timeout\n+    client->m_idle_since = Now<SteadySeconds>();\n+    LogDebug(BCLog::HTTP, \"HTTP Connection accepted from %s (id=%d)\\n\", client->m_origin, client->m_node_id);\n+    m_connected_clients.emplace(client->m_node_id, std::move(client));\n+    m_no_clients = false;\n+    return true;\n }\n \n-HTTPRequest::~HTTPRequest()\n+void HTTPServer::EventReadyToSend(NodeId node_id, bool& cancel_recv)\n {\n-    if (!replySent) {\n-        // Keep track of whether reply was sent to avoid request leaks\n-        LogPrintf(\"%s: Unhandled request\\n\", __func__);\n-        WriteReply(HTTP_INTERNAL_SERVER_ERROR, \"Unhandled request\");\n+    // Next attempt to receive data from this node is permitted\n+    cancel_recv = false;\n+\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n     }\n-    // evhttpd cleans up the request, as long as a reply was sent.\n+\n+    // SendBytesFromBuffer() returns true if we should keep the client around,\n+    // false if we are done with it. Invert that boolean to inform Sockman\n+    // whether it should cancel the next receive attempt from this client.\n+    cancel_recv = !client->SendBytesFromBuffer();\n }\n \n-std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr) const\n+void HTTPServer::EventGotData(NodeId node_id, std::span<const uint8_t> data)\n {\n-    const struct evkeyvalq* headers = evhttp_request_get_input_headers(req);\n-    assert(headers);\n-    const char* val = evhttp_find_header(headers, hdr.c_str());\n-    if (val)\n-        return std::make_pair(true, val);\n-    else\n-        return std::make_pair(false, \"\");\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n+\n+    // Reset idle timeout\n+    client->m_idle_since = Now<SteadySeconds>();\n+\n+    // Prevent disconnect until all requests are completely handled.\n+    client->m_prevent_disconnect = true;\n+\n+    // Copy data from socket buffer to client receive buffer\n+    client->m_recv_buffer.insert(\n+        client->m_recv_buffer.end(),\n+        reinterpret_cast<const std::byte*>(data.data()),\n+        reinterpret_cast<const std::byte*>(data.data() + data.size())\n+    );\n+\n+    // Try reading (potentially multiple) HTTP requests from the buffer\n+    while (client->m_recv_buffer.size() > 0) {\n+        // Create a new request object and try to fill it with data from the receive buffer\n+        auto req = std::make_unique<HTTPRequest>(client);\n+        try {\n+            // Stop reading if we need more data from the client to parse a complete request\n+            if (!client->ReadRequest(req)) break;\n+        } catch (const std::runtime_error& e) {\n+            LogDebug(\n+                BCLog::HTTP,\n+                \"Error reading HTTP request from client %s (id=%lld): %s\\n\",\n+                client->m_origin,\n+                client->m_node_id,\n+                e.what());\n+\n+            // We failed to read a complete request from the buffer\n+            req->WriteReply(HTTP_BAD_REQUEST);\n+            client->m_disconnect = true;\n+            break;\n+        }\n+\n+        // We read a complete request from the buffer into the queue\n+        LogDebug(\n+            BCLog::HTTP,\n+            \"Received a %s request for %s from %s (id=%lld)\\n\",\n+            req->m_method,\n+            req->m_target,\n+            req->m_client->m_origin,\n+            req->m_client->m_node_id);\n+\n+        // add request to client queue\n+        client->m_req_queue.push_back(std::move(req));\n+    }\n }\n \n-std::string HTTPRequest::ReadBody()\n+void HTTPServer::EventGotEOF(NodeId node_id)\n {\n-    struct evbuffer* buf = evhttp_request_get_input_buffer(req);\n-    if (!buf)\n-        return \"\";\n-    size_t size = evbuffer_get_length(buf);\n-    /** Trivial implementation: if this is ever a performance bottleneck,\n-     * internal copying can be avoided in multi-segment buffers by using\n-     * evbuffer_peek and an awkward loop. Though in that case, it'd be even\n-     * better to not copy into an intermediate string but use a stream\n-     * abstraction to consume the evbuffer on the fly in the parsing algorithm.\n-     */\n-    const char* data = (const char*)evbuffer_pullup(buf, size);\n-    if (!data) // returns nullptr in case of empty buffer\n-        return \"\";\n-    std::string rv(data, size);\n-    evbuffer_drain(buf, size);\n-    return rv;\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n+\n+    client->m_disconnect = true;\n }\n \n-void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n+void HTTPServer::EventGotPermanentReadError(NodeId node_id, const std::string& errmsg)\n {\n-    struct evkeyvalq* headers = evhttp_request_get_output_headers(req);\n-    assert(headers);\n-    evhttp_add_header(headers, hdr.c_str(), value.c_str());\n-}\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n \n-/** Closure sent to main thread to request a reply to be sent to\n- * a HTTP request.\n- * Replies must be sent in the main loop in the main http thread,\n- * this cannot be done from worker threads.\n- */\n-void HTTPRequest::WriteReply(int nStatus, std::span<const std::byte> reply)\n-{\n-    assert(!replySent && req);\n-    if (m_interrupt) {\n-        WriteHeader(\"Connection\", \"close\");\n-    }\n-    // Send event to main http thread to send reply message\n-    struct evbuffer* evb = evhttp_request_get_output_buffer(req);\n-    assert(evb);\n-    evbuffer_add(evb, reply.data(), reply.size());\n-    auto req_copy = req;\n-    HTTPEvent* ev = new HTTPEvent(eventBase, true, [req_copy, nStatus]{\n-        evhttp_send_reply(req_copy, nStatus, nullptr, nullptr);\n-        // Re-enable reading from the socket. This is the second part of the libevent\n-        // workaround above.\n-        if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02010900) {\n-            evhttp_connection* conn = evhttp_request_get_connection(req_copy);\n-            if (conn) {\n-                bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n-                if (bev) {\n-                    bufferevent_enable(bev, EV_READ | EV_WRITE);\n-                }\n-            }\n-        }\n-    });\n-    ev->trigger(nullptr);\n-    replySent = true;\n-    req = nullptr; // transferred back to main thread\n+    client->m_disconnect = true;\n }\n \n-CService HTTPRequest::GetPeer() const\n+void HTTPServer::EventIOLoopCompletedForOne(NodeId node_id)\n {\n-    evhttp_connection* con = evhttp_request_get_connection(req);\n-    CService peer;\n-    if (con) {\n-        // evhttp retains ownership over returned address string\n-        const char* address = \"\";\n-        uint16_t port = 0;\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return;\n+    }\n \n-#ifdef HAVE_EVHTTP_CONNECTION_GET_PEER_CONST_CHAR\n-        evhttp_connection_get_peer(con, &address, &port);\n-#else\n-        evhttp_connection_get_peer(con, (char**)&address, &port);\n-#endif // HAVE_EVHTTP_CONNECTION_GET_PEER_CONST_CHAR\n+    // If we are already handling a request from\n+    // this client, do nothing.\n+    if (client->m_req_busy) return;\n \n-        peer = MaybeFlipIPv6toCJDNS(LookupNumeric(address, port));\n+    // Otherwise, if there is a new pending request, handle it.\n+    if (!client->m_req_queue.empty()) {\n+        client->m_req_busy = true;\n+        m_request_dispatcher(std::move(client->m_req_queue.front()));\n+        client->m_req_queue.pop_front();\n     }\n-    return peer;\n }\n \n-std::string HTTPRequest::GetURI() const\n+void HTTPServer::EventIOLoopCompletedForAll()\n {\n-    return evhttp_request_get_uri(req);\n+    DisconnectClients();\n }\n \n-HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod() const\n+bool HTTPServer::ShouldTryToSend(NodeId node_id) const\n {\n-    switch (evhttp_request_get_command(req)) {\n-    case EVHTTP_REQ_GET:\n-        return GET;\n-    case EVHTTP_REQ_POST:\n-        return POST;\n-    case EVHTTP_REQ_HEAD:\n-        return HEAD;\n-    case EVHTTP_REQ_PUT:\n-        return PUT;\n-    default:\n-        return UNKNOWN;\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return false;\n     }\n+\n+    return client->m_send_ready;\n }\n \n-std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+bool HTTPServer::ShouldTryToRecv(NodeId node_id) const\n {\n-    const char* uri{evhttp_request_get_uri(req)};\n+    // Get the HTTPClient\n+    auto client{GetClientById(node_id)};\n+    if (client == nullptr) {\n+        return false;\n+    }\n \n-    return GetQueryParameterFromUri(uri, key);\n+    // Don't try to receive again until we've cleared the send buffer to this client\n+    return !client->m_send_ready;\n }\n \n-std::optional<std::string> GetQueryParameterFromUri(const char* uri, const std::string& key)\n+std::shared_ptr<HTTPClient> HTTPServer::GetClientById(NodeId node_id) const\n {\n-    evhttp_uri* uri_parsed{evhttp_uri_parse(uri)};\n-    if (!uri_parsed) {\n-        throw std::runtime_error(\"URI parsing failed, it likely contained RFC 3986 invalid characters\");\n+    auto it{m_connected_clients.find(node_id)};\n+    if (it != m_connected_clients.end()) {\n+        return it->second;\n     }\n-    const char* query{evhttp_uri_get_query(uri_parsed)};\n-    std::optional<std::string> result;\n+    return nullptr;\n+}\n \n-    if (query) {\n-        // Parse the query string into a key-value queue and iterate over it\n-        struct evkeyvalq params_q;\n-        evhttp_parse_query_str(query, &params_q);\n+bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+{\n+    if (!InitHTTPAllowList())\n+        return false;\n \n-        for (struct evkeyval* param{params_q.tqh_first}; param != nullptr; param = param->next.tqe_next) {\n-            if (param->key == key) {\n-                result = param->value;\n-                break;\n+    // Create HTTPServer\n+    g_http_server = std::make_unique<HTTPServer>(MaybeDispatchRequestToWorker);\n+\n+    g_http_server->m_rpcservertimeout = std::chrono::seconds(gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n+\n+    // Bind HTTP server to specified addresses\n+    std::vector<std::pair<std::string, uint16_t>> endpoints{GetBindAddresses()};\n+    bool bind_success{false};\n+    for (std::vector<std::pair<std::string, uint16_t> >::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\n+        LogPrintf(\"Binding RPC on address %s port %i\\n\", i->first, i->second);\n+        const std::optional<CService> addr{Lookup(i->first, i->second, false)};\n+        if (addr) {\n+            if (addr->IsBindAny()) {\n+                LogPrintf(\"WARNING: the RPC server is not safe to expose to untrusted networks such as the public internet\\n\");\n             }\n+            bilingual_str strError;\n+            if (!g_http_server->BindAndStartListening(addr.value(), strError)) {\n+                LogPrintf(\"Binding RPC on address %s failed: %s\\n\", addr->ToStringAddrPort(), strError.original);\n+            } else {\n+                bind_success = true;\n+            }\n+        } else {\n+            LogPrintf(\"Binding RPC on address %s port %i failed.\\n\", i->first, i->second);\n         }\n-        evhttp_clear_headers(&params_q);\n     }\n-    evhttp_uri_free(uri_parsed);\n \n-    return result;\n+    if (!bind_success) {\n+        LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n+        return false;\n+    }\n+\n+    LogDebug(BCLog::HTTP, \"Initialized HTTP server\\n\");\n+    int workQueueDepth = std::max((long)gArgs.GetIntArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n+    LogDebug(BCLog::HTTP, \"creating work queue of depth %d\\n\", workQueueDepth);\n+\n+    g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n+\n+    return true;\n }\n \n-void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n+static std::vector<std::thread> g_thread_http_workers;\n+\n+void StartHTTPServer()\n {\n-    LogDebug(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n-    LOCK(g_httppathhandlers_mutex);\n-    pathHandlers.emplace_back(prefix, exactMatch, handler);\n+    int rpcThreads = std::max((long)gArgs.GetIntArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n+    LogInfo(\"Starting HTTP server with %d worker threads\\n\", rpcThreads);\n+    SockMan::Options sockman_options;\n+    sockman_options.socket_handler_thread_name = \"http\";\n+    g_http_server->StartSocketsThreads(sockman_options);\n+\n+    for (int i = 0; i < rpcThreads; i++) {\n+        g_thread_http_workers.emplace_back(HTTPWorkQueueRun, g_work_queue.get(), i);\n+    }\n }\n \n-void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+void InterruptHTTPServer()\n {\n-    LOCK(g_httppathhandlers_mutex);\n-    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n-    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n-    for (; i != iend; ++i)\n-        if (i->prefix == prefix && i->exactMatch == exactMatch)\n-            break;\n-    if (i != iend)\n-    {\n-        LogDebug(BCLog::HTTP, \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n-        pathHandlers.erase(i);\n+    LogDebug(BCLog::HTTP, \"Interrupting HTTP server\\n\");\n+    if (g_http_server) {\n+        // Reject all new requests\n+        g_http_server->m_request_dispatcher = RejectAllRequests;\n     }\n+    if (g_work_queue) {\n+        // Stop workers, killing requests we haven't processed or responded to yet\n+        g_work_queue->Interrupt();\n+    }\n+}\n+\n+void StopHTTPServer()\n+{\n+    LogDebug(BCLog::HTTP, \"Stopping HTTP server\\n\");\n+    if (g_work_queue) {\n+        LogDebug(BCLog::HTTP, \"Waiting for HTTP worker threads to exit\\n\");\n+        for (auto& thread : g_thread_http_workers) {\n+            thread.join();\n+        }\n+        g_thread_http_workers.clear();\n+    }\n+    if (g_http_server) {\n+        // Disconnect clients as their remaining responses are flushed\n+        g_http_server->m_disconnect_all_clients = true;\n+        // Wait for all disconnections\n+        while (!g_http_server->m_no_clients) {\n+            std::this_thread::sleep_for(std::chrono::milliseconds{50});\n+        }\n+        // Break sockman I/O loop: stop accepting connections, sending and receiving data\n+        g_http_server->interruptNet();\n+        // Wait for sockman threads to exit\n+        g_http_server->JoinSocketsThreads();",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 1226,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could a new client sneak in after the loop `while (!g_http_server->m_no_clients)` exits? Shouldn't that loop be after `interruptNet()` so that new clients cannot be accepted?",
      "created_at": "2025-06-05T13:09:19Z",
      "updated_at": "2025-06-05T14:02:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2128818962",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128818962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": 982,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 995,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131476990",
      "pull_request_review_id": 2903739719,
      "id": 2131476990,
      "node_id": "PRRC_kwDOABII585_C8H-",
      "diff_hunk": "@@ -38,22 +42,16 @@ static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n class HTTPRPCTimer : public RPCTimerBase\n {\n public:\n-    HTTPRPCTimer(struct event_base* eventBase, std::function<void()>& func, int64_t millis) :\n-        ev(eventBase, false, func)\n+    HTTPRPCTimer(NodeContext* context, std::function<void()>& func, int64_t millis)\n     {\n-        struct timeval tv;\n-        tv.tv_sec = millis/1000;\n-        tv.tv_usec = (millis%1000)*1000;\n-        ev.trigger(&tv);\n+        context->scheduler->scheduleFromNow(func, std::chrono::milliseconds(millis));",
      "path": "src/httprpc.cpp",
      "position": 32,
      "original_position": 32,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Might use `std::chrono::milliseconds` for the type of the argument instead of `int64_t`:\r\n\r\n```cpp\r\n    HTTPRPCTimer(NodeContext* context, std::function<void()>& func, std::chrono::milliseconds after)\r\n    {\r\n        context->scheduler->scheduleFromNow(func, after);\r\n```\r\n(in commit 2950597694 `use CScheduler for HTTPRPCTimer`)",
      "created_at": "2025-06-06T04:31:49Z",
      "updated_at": "2025-06-06T07:17:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2131476990",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131476990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": 45,
      "original_start_line": 45,
      "start_side": "RIGHT",
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131479604",
      "pull_request_review_id": 2903739719,
      "id": 2131479604,
      "node_id": "PRRC_kwDOABII585_C8w0",
      "diff_hunk": "@@ -62,10 +60,10 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n     }\n     RPCTimerBase* NewTimer(std::function<void()>& func, int64_t millis) override\n     {\n-        return new HTTPRPCTimer(base, func, millis);\n+        return new HTTPRPCTimer(m_context, func, millis);\n     }\n private:\n-    struct event_base* base;\n+    NodeContext* m_context;",
      "path": "src/httprpc.cpp",
      "position": 55,
      "original_position": 55,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Because the context will always be set, ie will never be `nullptr`, then it is better to use a reference here instead of a pointer: `NodeContext& m_context;`\r\n\r\n",
      "created_at": "2025-06-06T04:35:54Z",
      "updated_at": "2025-06-06T07:17:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2131479604",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131479604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": 68,
      "original_start_line": 68,
      "start_side": "LEFT",
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131490238",
      "pull_request_review_id": 2903739719,
      "id": 2131490238,
      "node_id": "PRRC_kwDOABII585_C_W-",
      "diff_hunk": "@@ -132,7 +130,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n     return false;\n }\n \n-static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUsernameOut)\n+static bool RPCAuthorized(const std::string_view& strAuth, std::string& strAuthUsernameOut)",
      "path": "src/httprpc.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can simplify the code a few lines below:\r\n\r\n```diff\r\n- std::string_view strUserPass64 = TrimStringView(std::string_view{strAuth}.substr(6));\r\n+ std::string_view strUserPass64 = TrimStringView(strAuth.substr(6));\r\n```\r\n(in commit 54a36093f7 `http: using string_view to avoid unnecessary copy in Headers`)",
      "created_at": "2025-06-06T04:48:55Z",
      "updated_at": "2025-06-06T07:17:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2131490238",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131490238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 133,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131632124",
      "pull_request_review_id": 2903739719,
      "id": 2131632124,
      "node_id": "PRRC_kwDOABII585_Dh_8",
      "diff_hunk": "@@ -27,168 +34,309 @@ static const int DEFAULT_HTTP_WORKQUEUE=64;\n \n static const int DEFAULT_HTTP_SERVER_TIMEOUT=30;\n \n-struct evhttp_request;\n-struct event_base;\n-class CService;\n-class HTTPRequest;\n+enum HTTPRequestMethod {\n+    UNKNOWN,\n+    GET,\n+    POST,\n+    HEAD,\n+    PUT\n+};\n \n-/** Initialize HTTP server.\n- * Call this before RegisterHTTPHandler or EventBase().\n- */\n-bool InitHTTPServer(const util::SignalInterrupt& interrupt);\n-/** Start HTTP server.\n- * This is separate from InitHTTPServer to give users race-condition-free time\n- * to register their handlers between InitHTTPServer and StartHTTPServer.\n+/** Event handler closure.\n  */\n-void StartHTTPServer();\n-/** Interrupt HTTP server threads */\n-void InterruptHTTPServer();\n-/** Stop HTTP server */\n-void StopHTTPServer();\n+class HTTPClosure\n+{\n+public:\n+    virtual void operator()() = 0;\n+    virtual ~HTTPClosure() = default;\n+};\n \n-/** Change logging level for libevent. */\n-void UpdateHTTPServerLogging(bool enable);\n+namespace http_bitcoin {\n+using util::LineReader;\n+using NodeId = SockMan::Id;\n \n-/** Handler for requests to a certain HTTP path */\n-typedef std::function<bool(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n-/** Register handler for prefix.\n- * If multiple handlers match a prefix, the first-registered one will\n- * be invoked.\n- */\n-void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler);\n-/** Unregister handler for prefix */\n-void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch);\n+// shortest valid request line, used by libevent in evhttp_parse_request_line()\n+static const size_t MIN_REQUEST_LINE_LENGTH{strlen(\"GET / HTTP/1.0\")};\n+// maximum size of http request (request line + headers)\n+// see https://github.com/bitcoin/bitcoin/issues/6425\n+static const size_t MAX_HEADERS_SIZE{8192};\n \n-/** Return evhttp event base. This can be used by submodules to\n- * queue timers or custom events.\n- */\n-struct event_base* EventBase();\n+class HTTPHeaders\n+{\n+public:\n+    std::optional<std::string_view> Find(const std::string key) const;\n+    void Write(const std::string key, const std::string value);\n+    void Remove(const std::string key);\n+    bool Read(util::LineReader& reader);\n+    std::string Stringify() const;\n+\n+private:\n+    std::map<std::string, std::string, util::CaseInsensitiveComparator> m_map;",
      "path": "src/httpserver.h",
      "position": null,
      "original_position": 90,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`std::map` would keep the entries sorted by the key in alphabetical order and lookup time is `O(log(number of elements in the map))` whereas `std::unordered_map` does not maintain an order and has a lookup time of `O(1)`. We do not need any order here, right? This probably is irrelevant since we are only going to put a bunch of entries in this map, but anyway, if there is no reason to use `std::map` I guess we should default to `std::unordered_map`.\r\n\r\n(from commit e95c6f5b65 `http: Implement HTTPHeaders class`)",
      "created_at": "2025-06-06T07:02:12Z",
      "updated_at": "2025-06-06T07:17:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2131632124",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131632124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131642866",
      "pull_request_review_id": 2903739719,
      "id": 2131642866,
      "node_id": "PRRC_kwDOABII585_Dkny",
      "diff_hunk": "@@ -417,361 +286,708 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue, int worker_num)\n     queue->Run();\n }\n \n-/** libevent event log callback */\n-static void libevent_log_cb(int severity, const char *msg)\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n {\n-    BCLog::Level level;\n-    switch (severity) {\n-    case EVENT_LOG_DEBUG:\n-        level = BCLog::Level::Debug;\n-        break;\n-    case EVENT_LOG_MSG:\n-        level = BCLog::Level::Info;\n-        break;\n-    case EVENT_LOG_WARN:\n-        level = BCLog::Level::Warning;\n-        break;\n-    default: // EVENT_LOG_ERR and others are mapped to error\n-        level = BCLog::Level::Error;\n-        break;\n+    LogDebug(BCLog::HTTP, \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+    LOCK(g_httppathhandlers_mutex);\n+    pathHandlers.emplace_back(prefix, exactMatch, handler);\n+}\n+\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+{\n+    LOCK(g_httppathhandlers_mutex);\n+    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i)\n+        if (i->prefix == prefix && i->exactMatch == exactMatch)\n+            break;\n+    if (i != iend)\n+    {\n+        LogDebug(BCLog::HTTP, \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n+        pathHandlers.erase(i);\n     }\n-    LogPrintLevel(BCLog::LIBEVENT, level, \"%s\\n\", msg);\n }\n \n-bool InitHTTPServer(const util::SignalInterrupt& interrupt)\n+namespace http_bitcoin {\n+using util::Split;\n+\n+std::optional<std::string_view> HTTPHeaders::Find(const std::string key) const\n {\n-    if (!InitHTTPAllowList())\n-        return false;\n+    const auto it = m_map.find(key);\n+    if (it == m_map.end()) return std::nullopt;\n+    return std::string_view(it->second);",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 313,
      "commit_id": "e66712d4d3eb95cfd3beefc92c7888de9b65da38",
      "original_commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This returns a reference (or a \"pointer\") to the outside world (from the point of view of the `HTTPHeaders` class) of an element from the private `m_map` member. That map is not immutable. What happens if the strings it contains get moved around if the map is internally resized when adding new entries? Also there is the `HTTPHeaders::Remove()` method which deletes entries from the map, rendering any returned pointers by `Find()` as dangling.\r\n\r\n54a36093f7 `http: using string_view to avoid unnecessary copy in Headers` -- if there is no any measurable performance gain from this commit then it would be safer to drop it. If there is a measurable performance gain then hmm...",
      "created_at": "2025-06-06T07:10:37Z",
      "updated_at": "2025-06-06T07:18:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2131642866",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131642866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": 314,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    }
  ]
}