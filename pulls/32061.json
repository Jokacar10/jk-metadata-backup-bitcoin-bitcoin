{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061",
    "id": 2391882324,
    "node_id": "PR_kwDOABII586OkTpU",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32061",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32061.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32061.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/7d301184016a3f59c2e363dff631263cdbe21da0",
    "number": 32061,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Replace libevent with our own HTTP and socket-handling implementation",
    "user": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This is a major component of [removing libevent as a dependency of the project](https://github.com/bitcoin/bitcoin/issues/31194)\r\n\r\nIt is based on #30988  but only in the sense that it copies the `Sockman` class introduced in that PR. The p2p / `Connman` refactor isn't needed for HTTP and therefore this branch can be reviewed and merged independently of the p2p changes.\r\n\r\nCommit strategy:\r\n- Import `sockman.{h,cpp}` from #30988 \r\n- Assert current behavior of HTTP with additional functional tests, including copying from libevent's tests\r\n- Implement a few helper functions for strings, timestamps, etc needed by HTTP protocol\r\n- Isolate the existing libevent-based HTTP server in a namespace `http_libevent`\r\n- Implement HTTP in a new namespace `http_bitcoin` (the namespace manages duplicate `HTTPRequest` definitions, etc)\r\n- Switch bitcoind from the libevent server to the new server\r\n- Clean up (delete `http_libevent`)\r\n\r\nI am currently seeing about a 10% speed up in the functional tests on my own arm/macos machine.\r\n\r\n## Integration testing:\r\n\r\nI am testing the new HTTP server by forking projects that integrate with bitcoin via HTTP and running their integration tests with bitcoind built from this branch (on Github actions). I will continue adding integrations over time, and re-running these CI tests as this branch gets rebased:\r\n\r\n- [NodeJS `rpc-bitcoin`](https://github.com/pinheadmz/rpc-bitcoin/pull/1)\r\n- [electrs](https://github.com/pinheadmz/electrs/pull/1)\r\n- [lnd](https://github.com/pinheadmz/lnd/pull/1)\r\n- [eclair](https://github.com/pinheadmz/eclair/pull/1)\r\n- [corepc](https://github.com/pinheadmz/corepc/pull/1)\r\n- [bitcoinjs-lib](https://github.com/pinheadmz/bitcoinjs-lib/pull/1)",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "created_at": "2025-03-13T19:32:14Z",
    "updated_at": "2025-04-30T15:21:44Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "80e9a9aafe0875af7462de62136a02959e28f165",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "pinheadmz:http-rewrite-13march2025",
      "ref": "http-rewrite-13march2025",
      "sha": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 61248407,
        "node_id": "MDEwOlJlcG9zaXRvcnk2MTI0ODQwNw==",
        "name": "bitcoin",
        "full_name": "pinheadmz/bitcoin",
        "owner": {
          "login": "pinheadmz",
          "id": 2084648,
          "node_id": "MDQ6VXNlcjIwODQ2NDg=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pinheadmz",
          "html_url": "https://github.com/pinheadmz",
          "followers_url": "https://api.github.com/users/pinheadmz/followers",
          "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
          "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
          "repos_url": "https://api.github.com/users/pinheadmz/repos",
          "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/pinheadmz/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/pinheadmz/bitcoin",
        "archive_url": "https://api.github.com/repos/pinheadmz/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/pinheadmz/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/pinheadmz/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/pinheadmz/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/pinheadmz/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/pinheadmz/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/pinheadmz/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/pinheadmz/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/pinheadmz/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/pinheadmz/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/pinheadmz/bitcoin/events",
        "forks_url": "https://api.github.com/repos/pinheadmz/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/pinheadmz/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/pinheadmz/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/pinheadmz/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/pinheadmz/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/pinheadmz/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/pinheadmz/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/pinheadmz/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/pinheadmz/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/pinheadmz/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/pinheadmz/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/pinheadmz/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/pinheadmz/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:pinheadmz/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/pinheadmz/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/pinheadmz/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/pinheadmz/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/pinheadmz/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/pinheadmz/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/pinheadmz/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/pinheadmz/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/pinheadmz/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/pinheadmz/bitcoin/hooks",
        "svn_url": "https://github.com/pinheadmz/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 270741,
        "default_branch": "master2",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-04-29T11:04:31Z",
        "created_at": "2016-06-15T23:48:20Z",
        "updated_at": "2025-03-15T13:15:10Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "c5e44a043563dbe5439d1cd8e623467936db1187",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37136,
        "stargazers_count": 83157,
        "watchers_count": 83157,
        "size": 280698,
        "default_branch": "master",
        "open_issues_count": 714,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-04-29T23:32:19Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-04-30T15:56:02Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 2710,
    "deletions": 606,
    "changed_files": 24,
    "commits": 30,
    "review_comments": 35,
    "comments": 10
  },
  "events": [
    {
      "event": "commented",
      "id": 2722486916,
      "node_id": "IC_kwDOABII586iRdqE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2722486916",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-13T19:32:18Z",
      "updated_at": "2025-04-30T15:21:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32061.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [laanwj](https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2724599518), [vasild](https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2724787234), [fjahr](https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2725685034), [w0xlt](https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2813801840) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#32297](https://github.com/bitcoin/bitcoin/pull/32297) (bitcoin-cli: Add -ipcconnect option by ryanofsky)\n* [#31929](https://github.com/bitcoin/bitcoin/pull/31929) (http: Make server shutdown more robust by hodlinator)\n* [#31672](https://github.com/bitcoin/bitcoin/pull/31672) (rpc: add cpu_load to getpeerinfo by vasild)\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo over LogPrintf [WIP, NOMERGE, DRAFT] by maflcko)\n* [#27731](https://github.com/bitcoin/bitcoin/pull/27731) (Prevent file descriptor exhaustion from too many RPC calls by fjahr)\n* [#26022](https://github.com/bitcoin/bitcoin/pull/26022) (Add util::ResultPtr class by ryanofsky)\n* [#25665](https://github.com/bitcoin/bitcoin/pull/25665) (refactor: Add util::Result failure values, multiple error and warning messages by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->\n### LLM Linter (✨ experimental)\n\nPossible typos and grammar issues:\n\n1. In httpserver.h comment: “Each connection is assigned an unique id of this type.” → “Each connection is assigned a unique id of this type.”  \n2. In SockMan::ConnectAndMakeId documentation: “…if the later is used…” → “…if the latter is used…”  \nNo other typographic or grammatical errors were found.\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2722486916",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "convert_to_draft",
      "id": 16748542816,
      "node_id": "CTDE_lADOABII586t8FMgzwAAAAPmSntg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16748542816",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-13T19:37:02Z"
    },
    {
      "event": "labeled",
      "id": 16749188787,
      "node_id": "LE_lADOABII586t8FMgzwAAAAPmVFaz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16749188787",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-13T20:29:33Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2722620721,
      "node_id": "IC_kwDOABII586iR-Ux",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2722620721",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-13T20:29:34Z",
      "updated_at": "2025-03-13T20:29:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/38735177073</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2722620721",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "labeled",
      "id": 16768803020,
      "node_id": "LE_lADOABII586t8FMgzwAAAAPnf6DM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16768803020",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-14T09:17:51Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "commented",
      "id": 2724599518,
      "node_id": "IC_kwDOABII586iZhbe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2724599518",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-14T12:52:30Z",
      "updated_at": "2025-03-14T12:52:30Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, nice work",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2724599518",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "commented",
      "id": 2724787234,
      "node_id": "IC_kwDOABII586iaPQi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2724787234",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-14T13:57:43Z",
      "updated_at": "2025-03-14T13:57:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2724787234",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "commented",
      "id": 2725685034,
      "node_id": "IC_kwDOABII586idqcq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2725685034",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-14T20:29:05Z",
      "updated_at": "2025-03-14T20:29:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nMy understanding from the low-level networking discussion at CoreDev was that this wouldn't build on top of sockman. I guess the devil is in the details but can you address that in what sense the current approach follows what was discussed there? Thanks!",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2725685034",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "commented",
      "id": 2726033041,
      "node_id": "IC_kwDOABII586ie_aR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2726033041",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T00:03:45Z",
      "updated_at": "2025-03-15T00:03:45Z",
      "author_association": "MEMBER",
      "body": "> My understanding from the low-level networking discussion at CoreDev was that this wouldn't build on top of sockman. I guess the devil is in the details but can you address that in what sense the current approach follows what was discussed there? Thanks!\r\n\r\nSure, by coredev I had already written most of this implementation (based on sockman) but the performance was bad, and that was part of the motivation behind the deep-dive talk. However, by the end of the week I had reviewed that code in person with smart attendees and not only improved the performance of my code but started to improve performance vs master branch as well! Those updates came in the days just after the deep-dive discussion.\r\n\r\nSOME kind of sockman is needed to replace libevent. The one @vasild  wrote does actually seem to work well for this purpose as well as for p2p, and it would be \"nice\" to only have to maintain one I/O loop structure in bitcoind. @theuni is investigating how a sockman for http could be optimized if it had no other purpose, and I think that is the kind of feedback that will help us decide which path to take.\r\n\r\n",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2726033041",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "mentioned",
      "id": 16782346824,
      "node_id": "MEE_lADOABII586t8FMgzwAAAAPoTkpI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16782346824",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T00:03:46Z"
    },
    {
      "event": "subscribed",
      "id": 16782346826,
      "node_id": "SE_lADOABII586t8FMgzwAAAAPoTkpK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16782346826",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T00:03:46Z"
    },
    {
      "event": "mentioned",
      "id": 16782346830,
      "node_id": "MEE_lADOABII586t8FMgzwAAAAPoTkpO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16782346830",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T00:03:46Z"
    },
    {
      "event": "subscribed",
      "id": 16782346835,
      "node_id": "SE_lADOABII586t8FMgzwAAAAPoTkpT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16782346835",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-15T00:03:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16844975202,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAPsCexi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16844975202",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "640f38f6e44bdead2d47efa4471a34b5013c173c",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/640f38f6e44bdead2d47efa4471a34b5013c173c",
      "created_at": "2025-03-18T19:27:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16845246523,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAPsDhA7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16845246523",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "49784b396938c0ca582c1cbf21227fde2dad0e92",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/49784b396938c0ca582c1cbf21227fde2dad0e92",
      "created_at": "2025-03-18T19:44:41Z"
    },
    {
      "event": "commented",
      "id": 2736442775,
      "node_id": "IC_kwDOABII586jGs2X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2736442775",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T12:22:15Z",
      "updated_at": "2025-03-19T12:22:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "> SOME kind of sockman is needed to replace libevent ... it would be \"nice\" to only have to maintain one I/O loop structure in bitcoind.\r\n\r\n:100: ",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2736442775",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16878383639,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAPuB7IX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16878383639",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8de6cf02039783f84876869f7c442cb036b60022",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/8de6cf02039783f84876869f7c442cb036b60022",
      "created_at": "2025-03-19T20:13:51Z"
    },
    {
      "event": "labeled",
      "id": 16899582189,
      "node_id": "LE_lADOABII586t8FMgzwAAAAPvSyjt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16899582189",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T10:09:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16914708514,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAPwMfgi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16914708514",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "44a2317892518a52d7af93220a182e73c8d6e294",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/44a2317892518a52d7af93220a182e73c8d6e294",
      "created_at": "2025-03-20T16:56:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16914860259,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAPwNEjj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16914860259",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0c7d573dd8f9b91106da2306d257928ed4809315",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/0c7d573dd8f9b91106da2306d257928ed4809315",
      "created_at": "2025-03-20T17:06:40Z"
    },
    {
      "event": "unlabeled",
      "id": 16916392545,
      "node_id": "UNLE_lADOABII586t8FMgzwAAAAPwS6ph",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16916392545",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T18:54:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16919849846,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAPwgGt2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16919849846",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "04fe4baf5ed76dd31b70fbeeebd0609c7abde024",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/04fe4baf5ed76dd31b70fbeeebd0609c7abde024",
      "created_at": "2025-03-21T00:34:22Z"
    },
    {
      "event": "labeled",
      "id": 16964052665,
      "node_id": "LE_lADOABII586t8FMgzwAAAAPzIua5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16964052665",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-24T22:30:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17043070627,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAP32J6j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17043070627",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bfcd833820e0f5baa432be4a292f2f2a7bcc4c1e",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/bfcd833820e0f5baa432be4a292f2f2a7bcc4c1e",
      "created_at": "2025-03-29T12:48:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17046430018,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAP4C-FC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17046430018",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8ae826be90985d76dc702d09fb36a78c0bd8dd89",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/8ae826be90985d76dc702d09fb36a78c0bd8dd89",
      "created_at": "2025-03-29T23:24:50Z"
    },
    {
      "event": "unlabeled",
      "id": 17046573809,
      "node_id": "UNLE_lADOABII586t8FMgzwAAAAP4DhLx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17046573809",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-30T00:41:07Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 17046644650,
      "node_id": "UNLE_lADOABII586t8FMgzwAAAAP4Dyeq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17046644650",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-30T01:21:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17049750477,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAP4PovN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17049750477",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "11d80d4187afaa101de989330fa1982cd019cfa8",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/11d80d4187afaa101de989330fa1982cd019cfa8",
      "created_at": "2025-03-31T01:04:54Z"
    },
    {
      "event": "commented",
      "id": 2765788869,
      "node_id": "IC_kwDOABII586k2pbF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2765788869",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T10:18:26Z",
      "updated_at": "2025-03-31T10:18:26Z",
      "author_association": "MEMBER",
      "body": "I rebased this branch on a single squashed commit from #30988 essentially just cherry-picking `sockman.{h,cpp}` by @vasild and leaving out the p2p refactor. This will make rebase maintenance on master a lot easier by reducing conflicting scope, and hopefully also makes review easier. It also means to some extent this PR can be merged independently of #30988,  and also gives @theuni some room to rewrite a specific HTTP sockman if a more efficient purpose-focused module can be written. (Will update PR description in a moment)\r\n\r\nI've finally gotten all CI to pass so I'm going to mark this PR as ready for review as I move on to integration testing with all the bitcoin client libraries I can find!",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2765788869",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "mentioned",
      "id": 17054719727,
      "node_id": "MEE_lADOABII586t8FMgzwAAAAP4il7v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17054719727",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T10:18:27Z"
    },
    {
      "event": "subscribed",
      "id": 17054719744,
      "node_id": "SE_lADOABII586t8FMgzwAAAAP4il8A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17054719744",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T10:18:27Z"
    },
    {
      "event": "mentioned",
      "id": 17054719763,
      "node_id": "MEE_lADOABII586t8FMgzwAAAAP4il8T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17054719763",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T10:18:27Z"
    },
    {
      "event": "subscribed",
      "id": 17054719773,
      "node_id": "SE_lADOABII586t8FMgzwAAAAP4il8d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17054719773",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T10:18:27Z"
    },
    {
      "event": "ready_for_review",
      "id": 17054752759,
      "node_id": "RFRE_lADOABII586t8FMgzwAAAAP4it_3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17054752759",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T10:21:06Z"
    },
    {
      "event": "renamed",
      "id": 17054756647,
      "node_id": "RTE_lADOABII586t8FMgzwAAAAP4iu8n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17054756647",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-31T10:21:21Z",
      "rename": {
        "from": "[draft] Replace libevent with our own HTTP and socket-handling implementation",
        "to": "Replace libevent with our own HTTP and socket-handling implementation"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17119289148,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAP8Y588",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17119289148",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a225633e34f6ad1207d9bc60a2c1f3f0c74edb40",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/a225633e34f6ad1207d9bc60a2c1f3f0c74edb40",
      "created_at": "2025-04-03T19:13:20Z"
    },
    {
      "event": "commented",
      "id": 2776706841,
      "node_id": "IC_kwDOABII586lgS8Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2776706841",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-03T19:14:55Z",
      "updated_at": "2025-04-03T19:14:55Z",
      "author_association": "MEMBER",
      "body": "rebase to a225633e34 includes a new test for \"pipelining\" HTTP requests (thanks @theuni for pointing out this oversight) and also adds a queue of requests to each HTTPClient to ensure requests are processed in series, in the order they were received.",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2776706841",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "mentioned",
      "id": 17119311189,
      "node_id": "MEE_lADOABII586t8FMgzwAAAAP8Y_VV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17119311189",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-03T19:14:56Z"
    },
    {
      "event": "subscribed",
      "id": 17119311210,
      "node_id": "SE_lADOABII586t8FMgzwAAAAP8Y_Vq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17119311210",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-03T19:14:56Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNmZTVlYmE0NDYzZmYyODliNDZiYTBiM2Y0NzA4ZjdjZDNmMWU5ZmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfe5eba4463ff289b46ba0b3f4708f7cd3f1e9fe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cfe5eba4463ff289b46ba0b3f4708f7cd3f1e9fe",
      "tree": {
        "sha": "14e9194e83d3c798d6a6574e4451186d7f0084d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14e9194e83d3c798d6a6574e4451186d7f0084d5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 14e9194e83d3c798d6a6574e4451186d7f0084d5\nparent c66f7dab33fb08dc32380c0e743691c1b571c543\nauthor Vasil Dimov <vd@FreeBSD.org> 1743257029 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1743707848 -0400\n\nIntroduce a new low-level socket managing class `SockMan`\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmfu3sgACgkQ5+KYS2KJ\nyTpY5g//d+2hcsF/5F5vVZm2B3u4togJK+OHnTf/1jq02jN+bEMfkb3x8HmC8yaX\nsYInwQ0Eaf74vyii9kRYzcXgp9R3hQ1wmHqmfeWceT4eDcdAUEeVHPD7Bg1Sw05Q\nqd0o5xHu+pvkpUiwiW6ZybfEf+zbphcJkw7dEZY2HK4mbU/SahTUxTCFKUehTikX\niCwAfdveG5B2bFVXRG5a3HnutlhJtYLRTkIcGgB3xNjUXEMDncTCd2UyLARgUgdn\nkB7tqlvEdn8Zb0BRkJ7KvyHSB5E63BVe7Eb8DiuuF41Ih0LKk0keASvxhvfMSXjb\nH7iYR6newK5w2VC6k68wMG/CV/eNWggPgeJki1Hmq36y1iXmmT7sEk2PVXGL5qAc\nV7guW7Pz6cm9+iPjfSsDoiaUn0JnNDVQyeVriJZnqI1mC8YSWMXHC2WAk8P/ZJjD\nOguachH4+Ct24OFuTOlXehCNdBbFgPRNHRK3CfKuqnwH8S9rOJ3IpGq09LDgttp+\nKRtzQNqVOfBn3Qkk7/NwQkckvfviuDwbMo17fRXUEdpFpkeMtlYc4furIGhYOGyX\nlgKBXM1MoAijeTMWVi8Z8BhwWAJk5odQnT2oId0Flcv+WxLC3WxhWYPpU5dQUeYS\nMYJhWQe8uU3EIE9c9t97d/VXs4K6dP/oxgSwdZr1Wn7l8/NfC8w=\n=mJTi\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c66f7dab33fb08dc32380c0e743691c1b571c543",
          "sha": "c66f7dab33fb08dc32380c0e743691c1b571c543",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c66f7dab33fb08dc32380c0e743691c1b571c543"
        }
      ],
      "message": "Introduce a new low-level socket managing class `SockMan`",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-03T19:17:28Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2025-03-29T14:03:49Z"
      },
      "sha": "cfe5eba4463ff289b46ba0b3f4708f7cd3f1e9fe"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDAwZDE4YmJlMDlmZjFhYzVhOTRjY2IwNzY5MjIxYmQ2YzM0ZDY1Mzc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00d18bbe09ff1ac5a94ccb0769221bd6c34d6537",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/00d18bbe09ff1ac5a94ccb0769221bd6c34d6537",
      "tree": {
        "sha": "49cdf304c554e6a621573780876f62959537c461",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49cdf304c554e6a621573780876f62959537c461"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 49cdf304c554e6a621573780876f62959537c461\nparent cfe5eba4463ff289b46ba0b3f4708f7cd3f1e9fe\nauthor Matthew Zipkin <pinheadmz@pm.me> 1743623206 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1743707852 -0400\n\ntest: cover http pipelining\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmfu3swACgkQ5+KYS2KJ\nyToNjw/+PzMCdboB6sevWNB44LXU++4OPRuPaAk/0VpySZk9tv6yDvDTx20dcQ6y\nnrpD8lSYlaayeA3ioPWA84Bee+LKWtpmueLJj/bUVwgCkEnnxU+19N/u0ZUNl+Om\nEe1FBPtqqHb8f+bf8nCZBoG+t037RW3HJVouMz+3YYYKhXc5aaYYSSSS3DPCjRMp\najDNhzgUuq2QUIWqXTjTN5IJtHFZsDVpXYbsKGnK2gp6pUGx9iyKHCodomLyS1jy\n0W3NmfXzucVZefMiR0NHU7Xf6u9ASqO3Ms+Ep0g20o6eI4zrDepHOK+8CDrpYjg3\n2/IeUIrsIBNO4Plk6Xn1yfo9NjwjHplRMqvoeS7EqpHfpUYzSYgjEEvjDWABkWa8\nHaUdFIbbHin4x2DrR6Y8c4Sb4Csx3pQRWJTWLnpIilQpSmGPfCzzlQhI4RWrxiq2\nR92gerPf1lVDJrvbaQumrwOzEqTwgIH9ItKzn0cZHzxrDeIOQzwUePu2WD9Dpffo\nFIwF55jq9ODYr5N2FBc2tLrJ3ZGefOTDzrYQG4386sdQyjcfsAv4awOrMXQ9H0cu\n40/FQaSzqVZ2n+kKU7PSGR+FhEI4LUWI3G6T/hzcymIWmmpRD4L0U/GPh4+2G7qW\npgglgQ6XCVr9MCru/44DJWSL9erbq0keA3A4wQ+f1m47QtQs0ZU=\n=pjj1\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfe5eba4463ff289b46ba0b3f4708f7cd3f1e9fe",
          "sha": "cfe5eba4463ff289b46ba0b3f4708f7cd3f1e9fe",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cfe5eba4463ff289b46ba0b3f4708f7cd3f1e9fe"
        }
      ],
      "message": "test: cover http pipelining",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-03T19:17:32Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-02T19:46:46Z"
      },
      "sha": "00d18bbe09ff1ac5a94ccb0769221bd6c34d6537"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVlYzA2NTI5YmI4OGUwN2QwOTU1YjFlZjI3NzE2OWI1MjE4MjFkOWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ec06529bb88e07d0955b1ef277169b521821d9b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5ec06529bb88e07d0955b1ef277169b521821d9b",
      "tree": {
        "sha": "b707d312927d43df0aba738a4570a2b32eb53e3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b707d312927d43df0aba738a4570a2b32eb53e3c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b707d312927d43df0aba738a4570a2b32eb53e3c\nparent 00d18bbe09ff1ac5a94ccb0769221bd6c34d6537\nauthor Matthew Zipkin <pinheadmz@pm.me> 1741619873 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1743707853 -0400\n\ntest: cover -rpcservertimeout\n\nTesting this requires adding an option to TestNode to force\nthe test framework to establish a new HTTP connection for\nevery RPC. Otherwise, attempting to reuse a persistent connection\nwould cause framework RPCs during startup and shutdown to fail.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmfu3s0ACgkQ5+KYS2KJ\nyTqIXxAA3WDwPJCYwKikiX+frHppSCP6Wf8STX8sADPiyhlMgC8BWFlNCeqFi1Jp\n408cxQoULN9ICS3Lts1MdojzGWLCMZDtvcTT0n+/CRmBg7fT7CFxmEV6axWFJRN/\nSoU6m5JS+zJ67IJwitBhYhR2nFVYrHWjlCulMVTnxstTAQqUYZ4KYp3JfCqFXA1u\nc0/aVLK61CoHk2u9MV3TwhhjztLqkj+RF3QDr4vUkYVFUQe/3Bnh0gZaiUth0yTr\niSwAb6UZxzx9yf/qKRYszvvbPuLFvGVUiNyZ1Xc/ZrVtKsghfgs5X8CpYmFvU7+s\nmFck7YpZ2ihDALZrynxl2EH9IHTwxKTuzWW8XDKkIZcUxk1Dlo+Ae/0qu/nsnfSa\nr9MC5SCQSjAg+2b0zMlFIjg5GhCS3PSUAKCG1xlLk9xa8k2kB7aegmOtZ7Q0BdBI\nDV9WlOUXbFrwPInYbDGYVAlYcJSmG1UAo2vyx/RszhdyYQHnOXAY4TkNx+3HAArY\nuVyNWX0u7cjaO7q+hCpai+LRAmdpezxNaDc1me8qGjZ4rfCnpfeKZ+yhqOfBkGBX\nPF9DgKZskA1xHvwYXbIaRMhWPcr7PxKQ1gxES7/CfjWjIuUm6T4skt4qry6WibuF\n4b8lX0zGQmoJGRBoH45+BboiFOlFhio/HN2KA4BlmK/a+vgjBWs=\n=E3zc\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00d18bbe09ff1ac5a94ccb0769221bd6c34d6537",
          "sha": "00d18bbe09ff1ac5a94ccb0769221bd6c34d6537",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/00d18bbe09ff1ac5a94ccb0769221bd6c34d6537"
        }
      ],
      "message": "test: cover -rpcservertimeout\n\nTesting this requires adding an option to TestNode to force\nthe test framework to establish a new HTTP connection for\nevery RPC. Otherwise, attempting to reuse a persistent connection\nwould cause framework RPCs during startup and shutdown to fail.",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-03T19:17:33Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-10T15:17:53Z"
      },
      "sha": "5ec06529bb88e07d0955b1ef277169b521821d9b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYyNTkxMjFmMzAxNjg4MmYyOWZhYmVkOTFkOTVmNWU0NmI3YTRlZWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f259121f3016882f29fabed91d95f5e46b7a4eee",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f259121f3016882f29fabed91d95f5e46b7a4eee",
      "tree": {
        "sha": "50a21c705fd477102167f8155a4338306f62e899",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50a21c705fd477102167f8155a4338306f62e899"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 50a21c705fd477102167f8155a4338306f62e899\nparent 5ec06529bb88e07d0955b1ef277169b521821d9b\nauthor Matthew Zipkin <pinheadmz@pm.me> 1741800928 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1743707853 -0400\n\ntest: cover \"chunked\" Transfer-Encoding\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmfu3s0ACgkQ5+KYS2KJ\nyTpg4w//YJG1Yyn/WzHNCfYJ+kABfuF2p7V12/NZxr5dN5J+igjqkfUIo2UIZ0E0\nWH+TTOWfxotuEttNOkzjJKVkLGwsiHOjaiH0Kq7R1YUbNMz/nnHzRHD6K16cqd+D\n8fctv2Qbf37ryp037Lw3Lh8tT/UtfDbuZh621GJy53WBTPcriCjWw+NAUJWkP/bL\nPkcAo7dNYbJVcq7SaTib/cXrEn7fG+1zokkQXDjZzCm+Mzzpw8F577WypuxEE/pv\nsJe6pSbsPCyW0VEj+uCKfoecPpBX3B75WW5hOLRmDDy5NWVzWNjqBA2X21f6j9Lm\nC5ZGG/iV638UZNzASmvt5C9nLkdWiEUftF8n9ChOnZlWKox2CRSOn8rpgnxor0Wj\nhBaydGMQSeIX3Lh8WjfGjGSWMI7GE6Wftt3ZeRcF6ONU8nsTq8gvVU2kaOOinHr7\nbcL2puUJ8dSyL5hCAnW31oWz1XQNZOyPURJ2th5SVPBRgHrTHRloILeoUhV5blnY\ng2bPE8Nq8XwR1p2sgiSqZqp/Jgn535D4L25Q3YmXzZeVcgdUIOVwGXGNBFIHysqq\n8cqkWX9ggeX1+dopQUMlaYgI1jaSch4IwNQikBUbfLaaVL9rN/Fn0t3ED9pr14EO\nsOhwRUW8oC4Ix+7kWKwuNOiBmQFEElr4ksT8cXlcCd02P/foL2A=\n=4T42\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ec06529bb88e07d0955b1ef277169b521821d9b",
          "sha": "5ec06529bb88e07d0955b1ef277169b521821d9b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5ec06529bb88e07d0955b1ef277169b521821d9b"
        }
      ],
      "message": "test: cover \"chunked\" Transfer-Encoding",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-03T19:17:33Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-12T17:35:28Z"
      },
      "sha": "f259121f3016882f29fabed91d95f5e46b7a4eee"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRjODM3ODVkMWQ1YWJiNjAxZDc1YzBkOTA5MGIyZmJmMjg1ZTk0ODE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c83785d1d5abb601d75c0d9090b2fbf285e9481",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4c83785d1d5abb601d75c0d9090b2fbf285e9481",
      "tree": {
        "sha": "3597f5d457734759ddc1fec17e6d6066dfdd52af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3597f5d457734759ddc1fec17e6d6066dfdd52af"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3597f5d457734759ddc1fec17e6d6066dfdd52af\nparent f259121f3016882f29fabed91d95f5e46b7a4eee\nauthor Matthew Zipkin <pinheadmz@pm.me> 1741800707 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1743707853 -0400\n\nstring: implement ParseUInt64Hex\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmfu3s0ACgkQ5+KYS2KJ\nyTordQ/7BvaJdgFPie6kmmPSBd2FQOYcaIoB6/EbdrNVeMtg0LHdddTaiqZzoZ7M\nK7MiexLwnlgxEVl6s9OG9uL8jsFmr7mFhEUZHPfJ9Y5di08ZVPmXUC91Yj0i3F0w\n2+FeEXBa3eBqk+67r39016Pu43fYyg7G9FYrKog1hEiyIn2ge460fDsfmg6KT881\ndKMHgo5g4ytIiPXb9F9piXNl0OIRskbPf6bLG8TidjBxyDzg+2Z5OF4RKLxUxBzu\noD/X94fRiJJJ9SphzbAJNUMyoW2lcX40X/FF+VKbMsDsFlYjsCt1YMq7CHgTXnRG\nA5BD7goys3faKkQ7JQk5hVsAIVzKfW8wifWZgdgajie3Aa0Q5qAA5cBT5mnvfOhf\numFOCpdRKqbDE2r+05yh8rt6ipOwl3t5Jf7tOGD0tsCrvFVRJZs0dLB2GGGMx0nL\nfPixBVRlkWsfi1+rdLs0gF+mNnNZjlxm9+gXMZTbeDJB93VZJ0Qz9R7bYw8lgi5q\nayIcQyH/UWfO7pBBhfIQvjafsXS9UpxflA00fszzWmCTts7iKtCVAmQDuCgLfiJZ\nc3MMn6hqAJfUFdpDp+J4fur7jB7lUPS/B4kDfLQuZVzm9NbMNiJRWc88Y73mh44h\nGJzbjKUGZ5jnw08faDz0dBcobIBhfpSjKN7ugfWN3LJE9ifrq5M=\n=wuou\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f259121f3016882f29fabed91d95f5e46b7a4eee",
          "sha": "f259121f3016882f29fabed91d95f5e46b7a4eee",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f259121f3016882f29fabed91d95f5e46b7a4eee"
        }
      ],
      "message": "string: implement ParseUInt64Hex",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-03T19:17:33Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-12T17:31:47Z"
      },
      "sha": "4c83785d1d5abb601d75c0d9090b2fbf285e9481"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE0NGE3NzdmODYwMTlmNjA4YTcyYTZmNzFlMDBhNGQ3MDc2MmQyMDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/144a777f86019f608a72a6f71e00a4d70762d202",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/144a777f86019f608a72a6f71e00a4d70762d202",
      "tree": {
        "sha": "f2144975a4cf80bfcfc8c93410d5583bc4fd768e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2144975a4cf80bfcfc8c93410d5583bc4fd768e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f2144975a4cf80bfcfc8c93410d5583bc4fd768e\nparent 4c83785d1d5abb601d75c0d9090b2fbf285e9481\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1717097698 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1743707853 -0400\n\nstring: add CaseInsensitiveComparator\n\nhttps://httpwg.org/specs/rfc9110.html#rfc.section.5.1\nField names in HTTP headers are case-insensitive. This\ncomparator will be used in the headers map to search by key.\nIn libevent these are compared in lowercase:\n  evhttp_find_header()\n  evutil_ascii_strcasecmp()\n  EVUTIL_TOLOWER_()\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmfu3s0ACgkQ5+KYS2KJ\nyTpivRAAq+o6+wDQEM/1y81uxASXFxBOP/nHaYDsGTd1RTGkKhwRqUs7P9GJXkhU\na+tZwYL9EwkPuDz8DOoPm8LSwMsA11KOxeJwRMmRKcd1VP/Hvy0idXrmCr8ZsEC3\niIrSZC54bUkYUKA+24gzgerlj58q9VMe8lQRlSy65I0xo0ltXorWoF2ijvo+QkDS\nBku4whSuMnVAahXaOos8Y8ruiaJgCg1Gpq+AN3pCQi2+D7zPsQDA2KBoHKdf9hQU\nzaT3wLP60wde5rJY1Y/fj7GiPD2ImEchiv6Q6lbeK83S76qKd9OaE84M9B1zw6rE\n+H72tkvUTiPT8YBc67rBCgsZu3iJgTjvAyNr3xWvmki2t7Brwg4ZT6y9dRZvLpZt\n7WJy0YcKvkZ3DETPh0x+/461igev5BsdnO0zSYoCY2SVlWVKDG6xQeNDnh1Da24P\n1hSxWV+jOJwZdX/uYRnqhIfk5ejU7Jbe/qUBWLiyneCHYVt63HumSRzlqjmkndA7\nP6CdIY3b4TfwOzUoqOP0MQi1lhI1GdxNY56alxBQ2TFWjw2bE2zSKVaIQv0S1eh0\npiS3Kihtm/O7RcCF9hCXoqM3TmthqwcaJjjcjP6gyRv8gKu3NqsRm+nI6dIaHSOd\nc3Gu1HfYmbed39kcbP69Qdb3uOPxSi/88qbwkGf2HktT9uEiJN0=\n=983u\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c83785d1d5abb601d75c0d9090b2fbf285e9481",
          "sha": "4c83785d1d5abb601d75c0d9090b2fbf285e9481",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4c83785d1d5abb601d75c0d9090b2fbf285e9481"
        }
      ],
      "message": "string: add CaseInsensitiveComparator\n\nhttps://httpwg.org/specs/rfc9110.html#rfc.section.5.1\nField names in HTTP headers are case-insensitive. This\ncomparator will be used in the headers map to search by key.\nIn libevent these are compared in lowercase:\n  evhttp_find_header()\n  evutil_ascii_strcasecmp()\n  EVUTIL_TOLOWER_()",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-03T19:17:33Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-05-30T19:34:58Z"
      },
      "sha": "144a777f86019f608a72a6f71e00a4d70762d202"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17119346499,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAP8ZH9D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17119346499",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "created_at": "2025-04-03T19:17:47Z"
    },
    {
      "event": "labeled",
      "id": 17121496965,
      "node_id": "LE_lADOABII586t8FMgzwAAAAP8hU-F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17121496965",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-03T22:42:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 17124454598,
      "node_id": "UNLE_lADOABII586t8FMgzwAAAAP8snDG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17124454598",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-04T06:04:32Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2813801840,
      "node_id": "IC_kwDOABII586ntzVw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2813801840",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-17T19:06:30Z",
      "updated_at": "2025-04-17T19:06:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK. ",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#issuecomment-2813801840",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32061"
    },
    {
      "event": "reviewed",
      "id": 2780581749,
      "node_id": "PRR_kwDOABII586lvE91",
      "url": null,
      "actor": null,
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2780581749",
      "submitted_at": "2025-04-21T05:52:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "reviewed",
      "id": 2780602792,
      "node_id": "PRR_kwDOABII586lvKGo",
      "url": null,
      "actor": null,
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2780602792",
      "submitted_at": "2025-04-21T06:46:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "reviewed",
      "id": 2780672873,
      "node_id": "PRR_kwDOABII586lvbNp",
      "url": null,
      "actor": null,
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2780672873",
      "submitted_at": "2025-04-21T16:06:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "reviewed",
      "id": 2781691846,
      "node_id": "PRR_kwDOABII586lzT_G",
      "url": null,
      "actor": null,
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2781691846",
      "submitted_at": "2025-04-21T16:14:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "reviewed",
      "id": 2797567891,
      "node_id": "PRR_kwDOABII586mv3-T",
      "url": null,
      "actor": null,
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2797567891",
      "submitted_at": "2025-04-27T09:36:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "reviewed",
      "id": 2797582544,
      "node_id": "PRR_kwDOABII586mv7jQ",
      "url": null,
      "actor": null,
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2797582544",
      "submitted_at": "2025-04-27T11:04:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "reviewed",
      "id": 2797634240,
      "node_id": "PRR_kwDOABII586mwILA",
      "url": null,
      "actor": null,
      "commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "LGTM, many thanks!\r\nAdded some comments/suggestions above :)",
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2797634240",
      "submitted_at": "2025-04-27T13:00:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVjNWRlOTgwYjEwODQwMmFiOWYzNThkMDNiM2E5OTc2YzJiMGViNDM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c5de980b108402ab9f358d03b3a9976c2b0eb43",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5c5de980b108402ab9f358d03b3a9976c2b0eb43",
      "tree": {
        "sha": "d2d996609126be0890729df51d8d56b80fe542b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2d996609126be0890729df51d8d56b80fe542b4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d2d996609126be0890729df51d8d56b80fe542b4\nparent 144a777f86019f608a72a6f71e00a4d70762d202\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1717436232 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745889989 -0400\n\ntime: implement and test RFC7231 timestamp string\n\nHTTP 1.1 responses require a timestamp header with a\nspecific format, specified in:\nhttps://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQKsUACgkQ5+KYS2KJ\nyTrkBQ//UpKHJNW7W3M6fpQy+qs5JPErR3DoyM8VkksXmZi2Wv9ovJt4DknleUm6\nv4BBj8vjGpr1fg2g2wh88rAe6Mf3jNGqdmQ+F2AVmfjSw6mu0xB6Ej3EGxakyf64\n3ARCXucqGjpBPmk+8Vx/hWhb+ll7uLOMFXi/a3p0NE4wGwqgNsTQvHHUeZRKZFm9\n1yq4ZQdoTfHyCqs71rwy/1Xdf8Xr6aKLiraDtTfO0Ow6ldUe/kEVV0tKLYcG3vDm\nrBrtbtaM3nmE7s119CM7Sq37X/c8Z792pfB7UisSH3x8wn7Rj1yH1b6UUKwEcndV\nFp29zwZxwREd+A+nt/k07BpJe6Klhy/ZGrUbl4RS+19+n/DfMqKLZ2lTNfeVv79U\nAddsJMi53qRn2FmDWGcoABP2Y//qlk5OgmVPjeEtQn3CerKRykESqwwraqOkRFu7\ny0QYYy5Y9aQXbRL0gXkVP3c6kcv8GV0dALOYxVoXMoffqeioFWERgrc6wx47eVwk\nw0RLskotUpmRRQFIfUYUyeqeU295k+D6Qvb8I75mRsqts52tZIr5zebOWmaYz6TO\n6MWLUa/txKSFLlDcBOHQ3DgiKZ1Y3/4KN0+jZTPZzPst4SIN74SAEsUIXz/uo+GW\n54Y3HotdPYGOhbaDN8tUmmEfxsdS97Tp4V5EzkSjTQVulUqKFig=\n=T7Kk\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/144a777f86019f608a72a6f71e00a4d70762d202",
          "sha": "144a777f86019f608a72a6f71e00a4d70762d202",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/144a777f86019f608a72a6f71e00a4d70762d202"
        }
      ],
      "message": "time: implement and test RFC7231 timestamp string\n\nHTTP 1.1 responses require a timestamp header with a\nspecific format, specified in:\nhttps://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:26:29Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-06-03T17:37:12Z"
      },
      "sha": "5c5de980b108402ab9f358d03b3a9976c2b0eb43"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQzYjRkMGQyZjMxNjBiMjNjNmQ1NmRjZTBlNTY3NGZlNjM3NTE4Y2E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43b4d0d2f3160b23c6d56dce0e5674fe637518ca",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/43b4d0d2f3160b23c6d56dce0e5674fe637518ca",
      "tree": {
        "sha": "981454046edfa57197ee0767b4a87880f8792405",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/981454046edfa57197ee0767b4a87880f8792405"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 981454046edfa57197ee0767b4a87880f8792405\nparent 5c5de980b108402ab9f358d03b3a9976c2b0eb43\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1727464937 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745889995 -0400\n\nstring: add LineReader\n\nThis is a helper struct to parse HTTP messages from data in buffers\nfrom sockets. HTTP messages begin with headers which are\nCRLF-terminated lines (\\n or \\r\\n) followed by an arbitrary amount of\nbody data. Whitespace is trimmed from the field lines but not the body.\n\nhttps://httpwg.org/specs/rfc9110.html#rfc.section.5\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQKssACgkQ5+KYS2KJ\nyTpWuhAA2c5umL5M2Rb0eTq74B/A95ZAW6Ixxd5T0/b+oOP8Wl3atbNUzlnk6Uwh\n3Ps5LYYEulaNedPpwr+Jy9TrFBq+XAT4WnyFMLwZBBo+0Pi/UEJfCKxBwpYP1AkN\ny8ZBhsdWBvtbT1Ck+evE4rcBs6Gvg3/9BLGPVrm3Kkh6Javf4eDum/WgdrfOwqyr\nEMJZdFAUm2DiVDd2FMp89KOBGCThNWlBFobXFE38VJqC41a86TS3I2blNZ090Ef9\npsq4yl2euqgvs4UXc+P6i7arzNvrGYhOBQCzIkoixtrKHsFo1d63jdODnz5Hd93A\nukera1tvJR1OF+V/lI+SLjQ1tLN28CDMWTJqKYZW78/y8M6AGt2872rQ8he8Qn/G\n8/Xd8O/Bet/jscB37q8KPiGQZYX5lWXTzbY1wyWqYuOelBPnhYqswa63MjD8A3m7\nYNQdWxwRop982b3+fiKVPRdp+AknGwddZba6kezzUQ4slTpEOLroASPVgY4ZnVJa\nYxuc00RTbBiLQ6nsDXrKRX0nU5KtVLdUIq5ssAWXbiYp5rOa8L857pJfahD1W5oF\n0JIf1t5UzL7ugzbylXgFVt5uVOqfgOLarxHTFeSXNqTiuUjUaItE8nu8tM1+nNH/\nGYA7vLITLAvdNM4lcCWWCV6E0dAuhP7Npn2wbiXOORXhlatKMpg=\n=1Sgy\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c5de980b108402ab9f358d03b3a9976c2b0eb43",
          "sha": "5c5de980b108402ab9f358d03b3a9976c2b0eb43",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5c5de980b108402ab9f358d03b3a9976c2b0eb43"
        }
      ],
      "message": "string: add LineReader\n\nThis is a helper struct to parse HTTP messages from data in buffers\nfrom sockets. HTTP messages begin with headers which are\nCRLF-terminated lines (\\n or \\r\\n) followed by an arbitrary amount of\nbody data. Whitespace is trimmed from the field lines but not the body.\n\nhttps://httpwg.org/specs/rfc9110.html#rfc.section.5",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:26:35Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-09-27T19:22:17Z"
      },
      "sha": "43b4d0d2f3160b23c6d56dce0e5674fe637518ca"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZkZDU3MjMxNzhkNWY2MmQ4MGI2YTVhMzNiMWQ3YTE4MzIwZTZkZTM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6dd5723178d5f62d80b6a5a33b1d7a18320e6de3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6dd5723178d5f62d80b6a5a33b1d7a18320e6de3",
      "tree": {
        "sha": "5f9be0ec411763c770035716293dc7256ffcee45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f9be0ec411763c770035716293dc7256ffcee45"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5f9be0ec411763c770035716293dc7256ffcee45\nparent 43b4d0d2f3160b23c6d56dce0e5674fe637518ca\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1727713734 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745889995 -0400\n\nhttp: enclose libevent-dependent code in a namespace\n\nThis commit is a no-op to isolate HTTP methods and objects that\ndepend on libevent. Following commits will add replacement objects\nand methods in a new namespace for testing and review before\nswitching over the server.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQKssACgkQ5+KYS2KJ\nyToWMBAApRS/DVBDVHqtOt08ooAQ8imUCkVb+8a64L4rlOjotBu5To54I01pbuGU\nN1FLyx3l+jGdWQxjXWB/dKqU93cJMkm0X8l6ejaaKXgK/zWg7+p8wseKX0YVDd+W\nYbES/IhWUkV1Jri4klFRIPCnbmdR/6aYGdnbQ1H2K7M9Lt51JNOXTNBOL/fnKyPC\n2BA4SO5doVhX/TLkX27p6Y+volr6wJmaNl8A/BXFKgWh2AwKo88nyje1NL8T85Bi\nPx/HbGe8Ti3R68iR7SnEaNjwkXUPrR+MdGDTAX4vvJ0HmUes70FWhoZEZOIaVTE1\nlF7ZkIYJ3Lm4xBDhz72agD230GkarS46+Z8PqC2QkwNK3pfJUB3Lg5S+IjyPdA/Q\nWF8U/8wX94CmmOl00zdQgVo+wbKJeeuVgWcei60aEI1HBHktR98ktR1CvdJG9Ibf\nJMa8AP/JNWMd11RShmANL9UM/BWQgiSk6xsgcniNoJtxTqyLUAuSoSK8ugRUFReV\nEJQMv9jF9alcFc3EtF5MTzI6kjzvAYF/XCMfdPB7MUgaUbydpUzWDbo9FY0SODvt\nswgrA34zyhfgz0PMp4XANIIN05/q+bRXV6yz++G6wKWL2OfXkvAdEdFFAcWGu+k6\nnW6DkQgZJbyGPj6opmJtBmKZ3m9Q8rMkEiIJrELT7xi8LFjjhV0=\n=SJUy\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43b4d0d2f3160b23c6d56dce0e5674fe637518ca",
          "sha": "43b4d0d2f3160b23c6d56dce0e5674fe637518ca",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/43b4d0d2f3160b23c6d56dce0e5674fe637518ca"
        }
      ],
      "message": "http: enclose libevent-dependent code in a namespace\n\nThis commit is a no-op to isolate HTTP methods and objects that\ndepend on libevent. Following commits will add replacement objects\nand methods in a new namespace for testing and review before\nswitching over the server.",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:26:35Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-09-30T16:28:54Z"
      },
      "sha": "6dd5723178d5f62d80b6a5a33b1d7a18320e6de3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU5NWM2ZjViNjUxMWFlMzUxNDFiMWU0NDBlMWYyMmUxMDA0ZDNkZTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e95c6f5b6511ae35141b1e440e1f22e1004d3de6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e95c6f5b6511ae35141b1e440e1f22e1004d3de6",
      "tree": {
        "sha": "d5229f4fe64bc607379b06ad81a8f94a241498fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5229f4fe64bc607379b06ad81a8f94a241498fe"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d5229f4fe64bc607379b06ad81a8f94a241498fe\nparent 6dd5723178d5f62d80b6a5a33b1d7a18320e6de3\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1727716949 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745889995 -0400\n\nhttp: Implement HTTPHeaders class\n\nsee:\nhttps://www.rfc-editor.org/rfc/rfc2616#section-4.2\nhttps://www.rfc-editor.org/rfc/rfc7231#section-5\nhttps://www.rfc-editor.org/rfc/rfc7231#section-7\nhttps://httpwg.org/specs/rfc9111.html#header.field.definitions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQKssACgkQ5+KYS2KJ\nyTprxQ//QGJX5HyPOIUUquz2+DSioMs2YxHmH+7iWLaQ9HcBMNijXd2/LfsQnHx4\nFLU9aXIcKzH0uiLGBa7bvCPOpq4rURQN59eb1sE31/DLuol9ZuUJW461GYPu+lle\ncBiZBM2OpJ6Q5bCgBEhNA7CdnMAyNnDYv3tWpyGkYbpPwlEhmK2SdtIYX3TUJORy\n1+uJvHHsqzBs3UXGWIYdM9F2qhbjhpArM+MW6GQqPXHFE3gfEMGjSlV0A2k4Fwc7\nhF3GctQu7OMZQtFFbMPD9+l08Z/lofkMaAufcqMmCFj/x08ASgTiyMd9Mx3ideUu\ntLNy8XIuXdh8NoP7fSr/d3RvHQ+U9qdk0mkkBtdaRzcOWwEYnM3yuozT+gdNbW1W\nzhsWflm6/L20mpzV1FgJHU3VqxWb3KmYABGCI8LzwCzXkyQzSEvrpRNTaGwLAHx3\nwAfPiSk2+9izh5DDpOBzVOwNO11zbdv8kTE7LdmuYGKdjmjFz5SLNuQOeceKVAuA\nmUA6g6DytQ2waH2dRzaMesEjXfKCy/pVXZOfFgbx64qArxa15URouyK7dmkAWOZp\nmuMSCrmJVbAs8EqvRgAWhcNF/qPeuWKnudqN5I+QPZlChY8IdTG+08EMBRK3qfhu\nICPe4hNOTBbSu3cfWLebsKbwVulI6f/DhUXxoQhWlRgSR8oRLRM=\n=y2Sd\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6dd5723178d5f62d80b6a5a33b1d7a18320e6de3",
          "sha": "6dd5723178d5f62d80b6a5a33b1d7a18320e6de3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6dd5723178d5f62d80b6a5a33b1d7a18320e6de3"
        }
      ],
      "message": "http: Implement HTTPHeaders class\n\nsee:\nhttps://www.rfc-editor.org/rfc/rfc2616#section-4.2\nhttps://www.rfc-editor.org/rfc/rfc7231#section-5\nhttps://www.rfc-editor.org/rfc/rfc7231#section-7\nhttps://httpwg.org/specs/rfc9111.html#header.field.definitions",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:26:35Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-09-30T17:22:29Z"
      },
      "sha": "e95c6f5b6511ae35141b1e440e1f22e1004d3de6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDAzN2E2MjY0OTk3ZjRhODQxMjM0NTM0YTMxYTI2MmRkYWY1NTk5ODM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/037a6264997f4a841234534a31a262ddaf559983",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/037a6264997f4a841234534a31a262ddaf559983",
      "tree": {
        "sha": "1045915e888bc06a5de2fc3def63412908293bf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1045915e888bc06a5de2fc3def63412908293bf6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1045915e888bc06a5de2fc3def63412908293bf6\nparent e95c6f5b6511ae35141b1e440e1f22e1004d3de6\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1729090626 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745889995 -0400\n\nhttp: Implement HTTPResponse class\n\nHTTP Response message:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-6\n\nStatus line (first line of response):\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-6.1\n\nStatus code definitions:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-9\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQKssACgkQ5+KYS2KJ\nyTpoGxAAol8LBrF0f2oqqhO7dv/0UsIpuwInPB/UmYVGVmHBaKMnagTZKyzCSH3c\nGDBHBwMvBfpTSd7VJFxVoRtM2/IXfYW/zzJFzq3SspyNz+1+OzHPgToO23maWjVm\nGxls9vLzUgKkTfSTFNM2lYEQyqaQzrEUA2upaM1gvULPrBwUI9zgxx9b+kWgT0+2\nGdHhbG/X2ton6/hqEAVoKE/aJ7D3++0vmIcIa/B2m6u24gjikGoU3w/aIeUh4J4Z\nl2l9m7KdNiLsY9FnU6qCcxZJ9BcvAuLncpvbFPhAKe8S08J1nNAL7pG75dJeF2VE\n4rUpcMcdO96R+8NP2EyW4VxWMAeKLgsXlF9kH0xhZE2ez5ZalC4wHZyixoWKCZ9u\nwzsDKi1JBAPvLPWoGG/Gz4AMIo99ULDkh/BcNYp5Wg7JovlOvrHqNVF/5bw6f65D\nVLyHzPff8Wc7/bZhjd5qzG7VG1LRbIKOspyWmUhSHJWk/0yiAUG7hJdIOEMaKw3a\nclm6GlpJjh60r0FQEzC+W/JDkjQcJaRey0H51GzC5OxbaEpJUxhn1S48gxTQwwFd\nFZUGa55R3UmqyFAXAaMknn6t6Q4wnFMWZmqyPHXu7N4XIpzlcmBp+UM9R7DBZx+X\nA/u9pYPu27wQ1TOJ+vyM87cEa/xlM1KptTax46pRZkbUPRLp2BU=\n=ATHD\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e95c6f5b6511ae35141b1e440e1f22e1004d3de6",
          "sha": "e95c6f5b6511ae35141b1e440e1f22e1004d3de6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e95c6f5b6511ae35141b1e440e1f22e1004d3de6"
        }
      ],
      "message": "http: Implement HTTPResponse class\n\nHTTP Response message:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-6\n\nStatus line (first line of response):\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-6.1\n\nStatus code definitions:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-9",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:26:35Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-10-16T14:57:06Z"
      },
      "sha": "037a6264997f4a841234534a31a262ddaf559983"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY3YWE2NjBjNzcxOGI4OGQwZmIzNmQwNTI4ZmE4M2U2MzNiODAxYTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67aa660c7718b88d0fb36d0528fa83e633b801a7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/67aa660c7718b88d0fb36d0528fa83e633b801a7",
      "tree": {
        "sha": "3159276e7428a9ed7402ddc43eda818d49cb2309",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3159276e7428a9ed7402ddc43eda818d49cb2309"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3159276e7428a9ed7402ddc43eda818d49cb2309\nparent 037a6264997f4a841234534a31a262ddaf559983\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1729102725 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745889995 -0400\n\nhttp: Implement HTTPRequest class\n\nHTTP Request message:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-5\n\nRequest Line aka Control Line aka first line:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-5.1\n\nSee message_read_status() in libevent http.c for how\n`MORE_DATA_EXPECTED` is handled there\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQKssACgkQ5+KYS2KJ\nyTpF7xAAzKR1X1Y48szcLKoOQLGI43c5P7xk8zyEM71EVd9Ca0nV4j/F4rqYJgKb\nyZmEeeATIJHKuebaEqPw7T1IWZ6oEskIjGm2BtCejehTBPgbV0a6jLIfpq95zsCr\nyw/SO81jAr0+mBQaOGH+b8H3rK3f0J7oAoUGinRalNMMShWTWi5yJvVP+N8Q7/SP\n80BQSxQYycs3moS03h0Gm+4GzihiGl9VPNzwPuBHVwsgptybIDdivrnT2u5/URMq\njl83RWbCY6Si03JW9e8D+lJTD6lqji0fRHGAhcADbBrx5Ri52zITsJEwJZACOtCH\nHEJLfDw6i1EiH4KcXKi4iqdeMblQGjt/o4V7OCrKX45Gk06zGxA97h17Cmo/W6Ib\neejY+MGay5zLlAg+3NnQLHQgfm+yIU70uq3fqTRmHzMV5JyIdNU8BV0PognEIpbC\ndX5zTy50UHIoCaH/8RFx3LT913N8qggYIfmICvZqslT1608VshVtX9uW8sNRqFp0\nPhWF4DCgVwyGFFNhghwtz7HpR76YIsWc64mIOkUd79reBgbttIOPMbstRqOgGSVL\nISClnRFz4D7isrMjWWPscGJ/zKl6wF0Y+gxvDL/pMY9dc5ysvljUObHmd3R9jTWx\niv1tca3LcNrOXowQ5yFotmdVzEmpk3FS2y87Hn0Jq8o55/XCmRg=\n=UEV0\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/037a6264997f4a841234534a31a262ddaf559983",
          "sha": "037a6264997f4a841234534a31a262ddaf559983",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/037a6264997f4a841234534a31a262ddaf559983"
        }
      ],
      "message": "http: Implement HTTPRequest class\n\nHTTP Request message:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-5\n\nRequest Line aka Control Line aka first line:\nhttps://datatracker.ietf.org/doc/html/rfc1945#section-5.1\n\nSee message_read_status() in libevent http.c for how\n`MORE_DATA_EXPECTED` is handled there",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:26:35Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-10-16T18:18:45Z"
      },
      "sha": "67aa660c7718b88d0fb36d0528fa83e633b801a7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRmMTFmYzExNzNiZTE1NTIyYzQ3OGY1ZWNkMzkwYzM0ZWM5MmI2ZTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df11fc1173be15522c478f5ecd390c34ec92b6e0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/df11fc1173be15522c478f5ecd390c34ec92b6e0",
      "tree": {
        "sha": "0882baec6297603642c9d73562315645b1f88fa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0882baec6297603642c9d73562315645b1f88fa6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0882baec6297603642c9d73562315645b1f88fa6\nparent 67aa660c7718b88d0fb36d0528fa83e633b801a7\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1730319080 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745889995 -0400\n\nhttp: Begin implementation of HTTPClient and HTTPServer\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQKssACgkQ5+KYS2KJ\nyTqhbxAAtAub0D+qMRMzgu0QksgG4dvCAMh3cQaXPwFHLvhdAkyiDl8nvaM/i2UD\nkmHh3jG6IIW6jKYwi2sn9pnddx3l1NapHZyi/cMauXyzsEmaoZIBrjV0NA19BMF4\nzG4Hhu7hIvuyXLotil0uYIK7TIgDHraDt+3olOo+sfB1dZW+hThfntweoi2Hxcmx\nwuc2bvtWl1FteYx2bByveruRk8vAqPbkCcSldy6I9HuHuRxmgZeV2pSlQe+V2/wD\npAjZ3d0vsPrXSOwAU5erNx8IuMqxDtaEGzQPalsjsq4rNCyGmhddTHHbhXDTmE1R\n/3BbQdWyWHzdNZWeTIft+T/c6dUeu+wB50kVqKKFcfIDiSPz5+duQos0QIwCVNxD\nPagZLOxUoLJ3dCotgJgfi1L4SnYhquc1R5UGLSc4JRkCnwIZiKgWsRorCa0TnYYB\nep9kraKOe1MTTTzUzYaTsFOiLnGx9IMGYnol0PJL5N5qKhVxXYuJnpUbH/KL97TJ\npBJJgyo9D+XN2JNDnk6AASa8wHSPzHy3Kzvc7pBSX/ZMPj4jzMKd99WUgs3M+OWr\n3I11K1xkwGZZ4caaOzkl7haNRmIN/X/cr+ZlrxCdtVkDkwsGlwRfS09KvkXETjk5\nnQg48pcXUzf2xrolIqQsccwYBPfnJtC82rW4qKaE1K6ndCWB8Jo=\n=pFVs\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67aa660c7718b88d0fb36d0528fa83e633b801a7",
          "sha": "67aa660c7718b88d0fb36d0528fa83e633b801a7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/67aa660c7718b88d0fb36d0528fa83e633b801a7"
        }
      ],
      "message": "http: Begin implementation of HTTPClient and HTTPServer",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:26:35Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-10-30T20:11:20Z"
      },
      "sha": "df11fc1173be15522c478f5ecd390c34ec92b6e0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk4MGE5Y2QzZDM4YWJkMGUwZGE4NTM2MzA1NmEyYmU2MDk4ZDM5MTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/980a9cd3d38abd0e0da85363056a2be6098d3919",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/980a9cd3d38abd0e0da85363056a2be6098d3919",
      "tree": {
        "sha": "a31b435c545336ba1e7cad442ce436bb05a48b3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a31b435c545336ba1e7cad442ce436bb05a48b3f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a31b435c545336ba1e7cad442ce436bb05a48b3f\nparent df11fc1173be15522c478f5ecd390c34ec92b6e0\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1730396059 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745889995 -0400\n\nhttp: read requests from connected clients\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQKssACgkQ5+KYS2KJ\nyTrEaw//c2vPYVN10PAvMC8xoLJzAQDFxM0UEq4GNhv4X01d6HjtG7Gfjky4236G\nW9IC+V8BFri2kJw9YaIUFt4oVTyLt7ulREdlkbBftuoIVYs2Q/28soyS14MwzITC\nU1/T37Y/es4TQ9eMYqybC7NbHtgtwyyPF/gW1hGfkK6ns+NFVGjIkyXKO1+qUOdU\nDrLSqytB+WMMpPH+dKgE+0w9gVrWqpe2W4jp3S7EZqYpPRIzzLvfvJqf+qVeCaaM\nPAGB9xfor7NAhm8svkZ186uFM2gDuEGXKAF8lu0sUkoUHKARLH7K4rRyVtsMGCW9\nNSs4rYsZQOv0mQICqyNhHkR4J6IiZALiirQIUbTKoF7LfyCy2oovixk5mDS87vZz\nmpoDvqo9K7FQlmYIFCZOa0lVAS/mhW+fZuISUDcF1B2MCL/4Q4vgAeKwI2fSCsrl\nvR3JvkIaKPElceuRksFN8bEWvotsv4Ype+OOrB3ZHX75B5uaiYxgK/MVjkSCL3hB\np7S9iqaYf7Q+SRbR7O723+jAtkuTmCXgyl0fi8SA5obl/4rkAevpMBexA2x79e2z\nWjqWHLGbV0fc72phW7PiBTxIIe2IdxDonw82VXGI5DmCYVB0+sCzoOCJeeYTtZa5\nt3wkWRvzUEZlZm7nf5EHWETsNVanfmwxzvJB5wFKE4iIyRwp5fs=\n=S/NB\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df11fc1173be15522c478f5ecd390c34ec92b6e0",
          "sha": "df11fc1173be15522c478f5ecd390c34ec92b6e0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/df11fc1173be15522c478f5ecd390c34ec92b6e0"
        }
      ],
      "message": "http: read requests from connected clients",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:26:35Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-10-31T17:34:19Z"
      },
      "sha": "980a9cd3d38abd0e0da85363056a2be6098d3919"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ3Nzc4ZjQyNmM2ZGJhZmI0ZjBjN2UzOWJjYWI3MGM3NmNjYzYzYzQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7778f426c6dbafb4f0c7e39bcab70c76ccc63c4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d7778f426c6dbafb4f0c7e39bcab70c76ccc63c4",
      "tree": {
        "sha": "e1b85459b4b0af7d749c45e873f45e6a411ab816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1b85459b4b0af7d749c45e873f45e6a411ab816"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e1b85459b4b0af7d749c45e873f45e6a411ab816\nparent 980a9cd3d38abd0e0da85363056a2be6098d3919\nauthor Matthew Zipkin <pinheadmz@pm.me> 1741805491 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745889995 -0400\n\nhttp: support \"chunked\" Transfer-Encoding\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQKssACgkQ5+KYS2KJ\nyTpZKQ/+LFIB8Bx6k0dTuQheYOHXW2rwQbLMNAaYGfN84I3siY0YQLKb1UBaiKzr\n8rkBLgqCqkfUVnMWFJ789705Ae39oTNkbRakeucXHT9/EAq57/PyG4plWtLJXn1q\nUPCq1juSUAZ8jI4pHykclDtJYZbTIyGEVWPIUqekoy4ZLhYQISu4sz2gAD9LFV5K\n/HZqGXjJyUOp+rih+aimCWpiz6HvzovkapS26bVYSMuydog1ZmNWbgg0Q6oJllo/\nJvswrfMGpVLxGnO7I3M+H09N2EaNqKCodZP7gd5ye+eRKMhtpI6NH+iaIlj/Iotm\n7oqSdWS/u/jsaaR/x5k7yRecmF2lmENB0g0v3OW4IPgNn6yLJq0SN5xBnQVgZgGG\nySHwF/hIFYmbj/hZvjunPpqPosGmpdrgxRp1+ZX1O3ac+tRnNlqDkKrwa6gWsvSV\n46lbNIHrw6IzrEZpK9KrlEr2zSKM06zMtKrLCmBmZmQ/7jCcCIURjMaj3Tc7/N9T\niJ4jz6aMhX5iGXna6Tt/QIY1gxjVegqz1XX66CymHuDGZ8a8uOjde//kD0H3Av6U\no15BVKz/ni8+cbmmNGjj/n8UAE1o0QJYubRHmqQC3i7RIWk7nbD0M+qbNhAQhEK0\nwCR89HRIFDfFlGNJsvdSsWaynk4Jt2PSrNnKBNh9yWHzKhmQ868=\n=9lSD\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/980a9cd3d38abd0e0da85363056a2be6098d3919",
          "sha": "980a9cd3d38abd0e0da85363056a2be6098d3919",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/980a9cd3d38abd0e0da85363056a2be6098d3919"
        }
      ],
      "message": "http: support \"chunked\" Transfer-Encoding",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:26:35Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-12T18:51:31Z"
      },
      "sha": "d7778f426c6dbafb4f0c7e39bcab70c76ccc63c4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI1NTcyNTEzMGFlN2IxYmFiMTBlNWQ5OWJlNDg1ZmIzYzZjMDYzMmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b55725130ae7b1bab10e5d99be485fb3c6c0632d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b55725130ae7b1bab10e5d99be485fb3c6c0632d",
      "tree": {
        "sha": "1f4ab2052a90c4e55999ce0c04704db09fa6c69d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f4ab2052a90c4e55999ce0c04704db09fa6c69d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1f4ab2052a90c4e55999ce0c04704db09fa6c69d\nparent d7778f426c6dbafb4f0c7e39bcab70c76ccc63c4\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1733878975 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745890098 -0400\n\nhttp: compose and send replies to connected clients\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQKzkACgkQ5+KYS2KJ\nyTrqRQ//dPmVceTJb+fdPem6rMK7PblP860zGbMnEsd4ByniWCf9PTkvbo0T1UqX\nDGZr0SzWGUoK1vJsONmLJM33UKTUhoOZRy3i6XiZtfw81ELyVLJ1/JqYrR/+Hqt6\nSudDCiqj0DWF3QIgB0FKaRUAx12owtRLyyuNJ3aBCQTV5cOBhnbf/SlCmv/sa8O4\nU+kh4VhX8/gO+QOgnlRHf03ApLnU/1gPOZaBf9l2zMFI7sROYCHezS2PZQQMyvAB\na/vDfNEtp2XmFvDRUqlHgXN8EivQeURmZKj4KzdujNjEaLTornCyTv87hZLJ7ul9\nrwoGuujKLNnPi2x8S29qeYpQlyR/PXw448yUs0OJ8PcoiCaCnX+UVXKyjfFAf9bF\nXZLxtv56p3aM2l0ftkvBnTkv2P82tHZKoSJcIwHiA9Ub0l25jzVPaenpQQjK7s0K\nN3KR746GX4W2WxDmZk4quKFrMlitxHvggYaxZ5yFItNSOzL6/UuSXDE3YPtP3IGm\neSBXFe6sibVaF6NO37OW5nVTAWCkfCHqQKjgYoFX2qHs1hFn++61fR0Ni5p7MSyn\n9aMYYO/b48PW+EIf2Oi0OD44rx43lYG0P4sq8+0fBM6RxW7vHs/fNc0dM5lhbbAx\nnC1a253yu4H3DdAuMosLNw44FghqFkgh1Xmat3GWuiTZi4pxQAs=\n=wSzd\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7778f426c6dbafb4f0c7e39bcab70c76ccc63c4",
          "sha": "d7778f426c6dbafb4f0c7e39bcab70c76ccc63c4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d7778f426c6dbafb4f0c7e39bcab70c76ccc63c4"
        }
      ],
      "message": "http: compose and send replies to connected clients",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:28:18Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-12-11T01:02:55Z"
      },
      "sha": "b55725130ae7b1bab10e5d99be485fb3c6c0632d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGViZGI2ZDQ0NmU4YWJlMWFkZjc0ZDVkNzhlNmNlYjA2YmJjZmRiYTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebdb6d446e8abe1adf74d5d78e6ceb06bbcfdba4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ebdb6d446e8abe1adf74d5d78e6ceb06bbcfdba4",
      "tree": {
        "sha": "1dfc86d8a172d40119ceae27778557792bb6caa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1dfc86d8a172d40119ceae27778557792bb6caa0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1dfc86d8a172d40119ceae27778557792bb6caa0\nparent b55725130ae7b1bab10e5d99be485fb3c6c0632d\nauthor Matthew Zipkin <pinheadmz@pm.me> 1741033247 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745890110 -0400\n\nhttp: disconnect clients\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQKz4ACgkQ5+KYS2KJ\nyToyxw//a32/AUAW/BSaOyfZQhPZfvMhFF7DEeTThWonDlimE1Ck+OI92E1GGKIR\n5P/s39ZadE1CzscbsVJqGM66FxcYRPa6BlIqtjR7wmhsWnjSX+deQTUWJq0r0dQu\nE7NNPIHh/iA/XwWTwYLMvWcoMM5luxHut6qiQDBYRJ3TmZ8EUTiDdy3+NH1Ww1+r\n8K9ZE52UAS13J5rV4joDTaBh2W5tkuCVvRjlW+N6QjUGEnT0IoaeOXX6cxn7S/SF\nFKM4d1SjmTZ0yqmO2uTevDeLI+mC7rIHhF7Ffc0+cYXBwdLs0WX7SRjilbaWkSWx\nguFZF7tovkWAn+ovCQddLFz8jo3NEKM00rvHedLA0Z+uY6AdbXIt7OtJ6BZDDTV4\n59GX8+W1xjuQqU88dmldM4ZmKQdeFFWB+O/F0IFtZN6xvn1CsWRaZtlCHDAi87PQ\nLrzPkQCbpHEMSo3BFIGCO+QFlPKeeYdot5X4qV/8CR7fcYbHNQsgbQJUGZ+KjHyP\njbBrX3EQYn5ZgXLHQ+ZW1S5qIgCmwI5vjHiLkF37wnCBPEOgQAl7WtzrLeSm27u0\nL6PFb4jvlrD5MTezfV6cDfgmLeBrTqLjFU1RfBIsWi/dUJKjnU40TyUbl2tNCu+/\nWnoHPWUWRfhplGx6E+OtoQvEEeVcMsRGKU9fKp8ZnhF6j3OTxck=\n=Be4X\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b55725130ae7b1bab10e5d99be485fb3c6c0632d",
          "sha": "b55725130ae7b1bab10e5d99be485fb3c6c0632d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b55725130ae7b1bab10e5d99be485fb3c6c0632d"
        }
      ],
      "message": "http: disconnect clients",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:28:30Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-03T20:20:47Z"
      },
      "sha": "ebdb6d446e8abe1adf74d5d78e6ceb06bbcfdba4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU5YjU0ZmVmN2NmNDU2ZDkyZGZjMTBiYWNhZTk2MjU3OGUyMWQ2YjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59b54fef7cf456d92dfc10bacae962578e21d6b1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/59b54fef7cf456d92dfc10bacae962578e21d6b1",
      "tree": {
        "sha": "0994e980c1002a3c5f0ac0ad60c49217d7d187ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0994e980c1002a3c5f0ac0ad60c49217d7d187ee"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0994e980c1002a3c5f0ac0ad60c49217d7d187ee\nparent ebdb6d446e8abe1adf74d5d78e6ceb06bbcfdba4\nauthor Matthew Zipkin <pinheadmz@pm.me> 1740855101 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745890110 -0400\n\nAllow http workers to send data optimistically as an optimization\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQKz4ACgkQ5+KYS2KJ\nyTqCExAAsDqBNiaMqjsw0x7W1u4mxaHK8IKMcCyGDB2ahUvI1kSSCFpa7rIP222o\n35btgryv0SVJNKvY5lFSI4SGuqIFjgV5AZcSyaiwN6xndfVjd2SlDowXLsftNXph\nEkD2RtcJEGvg1y+5Yo48Qh/uWcI1WGUcYlX6F9JzCJ8Y83y9jXZ9FKJiQv6y+lnv\nXzPd0l6lLwQ6xaaF/PanClnwd7iJ2MRh9su5dKTU7nnTCoNY8q3quRs/UcpbgFTF\nEmi+tbIy5Z4mD6knUOXuyG7GnyXO+RV0kIpMLTgnaghSCLUMImPoGFHbna/uv1rT\nElH9IIa5vq6iCd2r/ptd9Gtbh4A0NPwted708RIqFMb3CemSyOnjAT93QSa9BWLy\nxLyylZ+qwUGgPi2A9IRFfQ5A6IfX7hPMWuOZjvUdhBQhzu9XPnRPMcdlVhIGKXae\nAmzUfS3evQgR8kz5tBcVFavUOokzxUVjolqPRKyHcxW8uUKjnOooqCMdg1Awb4Kl\npIyeEgHoPGCIU8cLPZOMPQfaz6uvVfeWE3uuwx5iVsuNuK0VvA/+LbTaLAVHLoEC\nx9KOnLcy8zXEQSFJ3eA/vTpQYH4ya7VXke5USoteh+yQd3B8CidnQiP20IN0m2CZ\nGOowYHok9dda1w51B2X5omlHodQW/gBFqZd3RATB2z4XFE2tUkI=\n=Jw8p\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebdb6d446e8abe1adf74d5d78e6ceb06bbcfdba4",
          "sha": "ebdb6d446e8abe1adf74d5d78e6ceb06bbcfdba4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ebdb6d446e8abe1adf74d5d78e6ceb06bbcfdba4"
        }
      ],
      "message": "Allow http workers to send data optimistically as an optimization",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:28:30Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-01T18:51:41Z"
      },
      "sha": "59b54fef7cf456d92dfc10bacae962578e21d6b1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRjMjgzOTUwNzRhNTUxZTMwOTNjOWE0MjYyYzNjZGNiODk3ZDhjYTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c28395074a551e3093c9a4262c3cdcb897d8ca4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4c28395074a551e3093c9a4262c3cdcb897d8ca4",
      "tree": {
        "sha": "10d769d8661f6cadebdef93328ddaa03c9a04ae0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10d769d8661f6cadebdef93328ddaa03c9a04ae0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 10d769d8661f6cadebdef93328ddaa03c9a04ae0\nparent 59b54fef7cf456d92dfc10bacae962578e21d6b1\nauthor Matthew Zipkin <pinheadmz@pm.me> 1743697722 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745890110 -0400\n\nhttp: use a queue to pipeline requests from each connected client\n\nSee https://www.rfc-editor.org/rfc/rfc7230#section-6.3.2\n\n> A server MAY process a sequence of pipelined requests in\n  parallel if they all have safe methods (Section 4.2.1 of [RFC7231]),\n  but it MUST send the corresponding responses in the same order that\n  the requests were received.\n\nWe choose NOT to process requests in parallel. They are executed in\nthe order recevied as well as responded to in the order received.\nThis prevents race conditions where old state may get sent in response\nto requests that are very quick to process but were requested later on\nin the queue.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQKz4ACgkQ5+KYS2KJ\nyTpI+xAAn+oOWt73EyLDjBHDUKuK759h43V8UCCqOfRIV7GO+o6cxrQ04VNU2TNR\nBtT/XPtelyrpZwMOhMnJEkUQbfzTUcmGh9i7lDZtxD7dGK0AY1bifoI0uI9qMEoy\nllFjImlS9CHMKsyiO/BO/6VjEdR9i7kzhdUZNtRK8TgvvHE55KDpnXtzp25OOAgo\nmS8K7ndqZrn6DRHdU+qyyc1sMkDlwUnAVzXMrxugOcFpUv4vFH1rAUE9YZzYj6lt\nDIPeCUbsnkhm6RAmH6Nwg0gtVMKHJDYkjCvH2pBgnRCHsN8/v1Hs3wyPU8uIK8JR\n7PRZr7v6ucKtQrLlYgnd9I9EhQY/Y+VMmBqOFKQWOhT/pQdGMJeHg/ZWR0ZtZ5Dg\nam6bQdaqNjvcyh89rhN8nA4KcdRlCtSX9KBSmTsRRUqRnGdxwwjncFiOyTPI1w4U\n8DJWGRCb9sP3j9bD1FdBHEzGavr+axeobWFfPNJrM3Mxg2O790sU/ta+f08Oewm6\nLEVnAyc5HnA+T1D+V58MZw7HlhwPL3lHfoVd+xjUSDPUikWXutMa5KX4zaGUMJWi\nCdp5Gad9JWfkEQ0II84INApgzTuiOffC5ll8WSf+4IlQMXUSxejYjfhd7jYBcYrg\neGD2F2Ed/uhYoV9oMGhbnNkhTe+igs6EAn8qJjnC6icwwiHlW3o=\n=yUF4\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59b54fef7cf456d92dfc10bacae962578e21d6b1",
          "sha": "59b54fef7cf456d92dfc10bacae962578e21d6b1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/59b54fef7cf456d92dfc10bacae962578e21d6b1"
        }
      ],
      "message": "http: use a queue to pipeline requests from each connected client\n\nSee https://www.rfc-editor.org/rfc/rfc7230#section-6.3.2\n\n> A server MAY process a sequence of pipelined requests in\n  parallel if they all have safe methods (Section 4.2.1 of [RFC7231]),\n  but it MUST send the corresponding responses in the same order that\n  the requests were received.\n\nWe choose NOT to process requests in parallel. They are executed in\nthe order recevied as well as responded to in the order received.\nThis prevents race conditions where old state may get sent in response\nto requests that are very quick to process but were requested later on\nin the queue.",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:28:30Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-03T16:28:42Z"
      },
      "sha": "4c28395074a551e3093c9a4262c3cdcb897d8ca4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdhMTM1OTA2NGUzMjZmMmIyOGExYzU3YWFhOTRmZGJlMTdmOWRlZTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a1359064e326f2b28a1c57aaa94fdbe17f9dee2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7a1359064e326f2b28a1c57aaa94fdbe17f9dee2",
      "tree": {
        "sha": "533eaf28fb009df477e1e25e7cb2da196f2bed1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/533eaf28fb009df477e1e25e7cb2da196f2bed1d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 533eaf28fb009df477e1e25e7cb2da196f2bed1d\nparent 4c28395074a551e3093c9a4262c3cdcb897d8ca4\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1733941291 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745890189 -0400\n\ndefine HTTP request methods at module level outside of class\n\nThis is a refactor to prepare for matching the API of HTTPRequest\ndefinitions in both namespaces http_bitcoin and http_libevent. In\nparticular, to provide a consistent return type for GetRequestMethod()\nin both classes.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQK5EACgkQ5+KYS2KJ\nyTrYWQ/9Ex9FhLsY/AAbVS4mtal72NJUGaO/Wc2cU0TvtFud60AHcHe/xnoXXpX5\nMZVZxoI+9YQwZjXdxRQe5OMU7aQjJn36KwKXnq0xzCdaaVRozCJP/bR1z1MrK8Kb\nSmjqilFH8au1Yx5kt17c79jNUBCAB76tU6EtlkpMw7ATm6VlNmJ/fm7vywC6SGS5\nnBgEZ9EYa7MUrbdGmGXrj5lsMCReYsDgXOtvZvx6OahvIRMjOso8a0caDJ1ve3lQ\njnWGB5H8wA611jP5f98hsvCXHda3+h3OBR+PtDvjHDOi6AmDXl23tNMNrpF9SK4M\n3qDSvyPy+OnwRpudY5OLrodlwcNXvxCCi/1+T1lmADt/M+O/Bxcps4TgDFNePKhS\nMeThn45Vs/9+rdktnLIP6L9VvE8uZnP6DSUz42ekz9SoZ7cu1EEmhVAj6xFeKr4u\no68cWw+wQFLOXHd/ErDXAweM3dUkxfo1UWDoJoaVYi7q9OVF4jou7l6laPyFdT7j\ng2gxFeQg7OUn2hvPNvtEC2s+mwZ6Jm1FPOTkoH9KqPoBoycnzMLvUvu90fTDUo8Z\nlPq6j8WiAXbXbpDznHWG2+b09T1SQkoYRYZrLhA7pBqRcbPIoUbcocMxsep6pO1/\n6SBix+FupFQJF5WCnG//ep3yWg90qbECZuCDzp3sv0iqOFgzuUE=\n=xSVH\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c28395074a551e3093c9a4262c3cdcb897d8ca4",
          "sha": "4c28395074a551e3093c9a4262c3cdcb897d8ca4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4c28395074a551e3093c9a4262c3cdcb897d8ca4"
        }
      ],
      "message": "define HTTP request methods at module level outside of class\n\nThis is a refactor to prepare for matching the API of HTTPRequest\ndefinitions in both namespaces http_bitcoin and http_libevent. In\nparticular, to provide a consistent return type for GetRequestMethod()\nin both classes.",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:29:49Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-12-11T18:21:31Z"
      },
      "sha": "7a1359064e326f2b28a1c57aaa94fdbe17f9dee2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJiYzljNTU5NzRkMGNkNGQ0OTcxYjQ1MTcwN2FmNGYwYTA1MzMyMDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbc9c55974d0cd4d4971b451707af4f0a0533201",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bbc9c55974d0cd4d4971b451707af4f0a0533201",
      "tree": {
        "sha": "6fc861ae08a0913a3125152360d944aaf15373e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fc861ae08a0913a3125152360d944aaf15373e3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6fc861ae08a0913a3125152360d944aaf15373e3\nparent 7a1359064e326f2b28a1c57aaa94fdbe17f9dee2\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1734021892 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745890200 -0400\n\nAdd helper methods to HTTPRequest to match original API\n\nThese methods are called by http_request_cb() and are present in the\noriginal http_libevent::HTTPRequest.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQK5gACgkQ5+KYS2KJ\nyToTuQ//WAtW7pX5loUlxEjjs1DgvNBjMnDiIKRpnd2n9c65HR0Ynmhvk/gKoLqA\nwG89MvHg+tCBt0xX36GpbKEVeTK/7UHWsAg316/fSP9SWDgeATLhOwgTOe7s1qk6\nHenvJoKViTZ9EL9bdzK8tyN8+0uwjSv8kgp+7QHxXYM7DipcJ5YYoox8UZ7TZJYV\nLratujgtfd2hSpy1igECwecIZqJbovXBozMyvfThNDFT9J8nCUa+7YS6B5LCep6I\nMBUzoVncizxNXX/OrgKjdCcX2xcE93G9iRwLssgWfsqdJDzQuuA2IY53R7OJIw2G\ncTaoSbSFpI5mDN885MqW5v1qKmBPF3k94rScZY+fprDS+t2PcLVx4dX6NVIwINCh\nZ3GHiH0M+dXQePS0AZrtCq30XS20bE+PrldjrmGhMgU0dbOzBJbKR6TNSgIKw20W\njHWpf05i9ejrC4GRgKr2hWVfxUGKESe+gCsmDR8m8AzK6jEFvpz7rbWUuqwzjM/J\nzZkzgB7okDeHnH2uSjKddGd9XwYch+mdT9V7xBxs2WBvFqePH82Efg1Nr6uspC2W\nbT/9Uk0xvWFRETa2C4cMDv4CPiHOvw8EdQTaUni/r3QxZgwaYf84D/D0Pjq/JSmt\nM4X+PnWKjZVRvfNP2F6O8hAnPB6ZKPFvaTOTXsUVWoO7m4m3V8k=\n=8857\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a1359064e326f2b28a1c57aaa94fdbe17f9dee2",
          "sha": "7a1359064e326f2b28a1c57aaa94fdbe17f9dee2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7a1359064e326f2b28a1c57aaa94fdbe17f9dee2"
        }
      ],
      "message": "Add helper methods to HTTPRequest to match original API\n\nThese methods are called by http_request_cb() and are present in the\noriginal http_libevent::HTTPRequest.",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:30:00Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-12-12T16:44:52Z"
      },
      "sha": "bbc9c55974d0cd4d4971b451707af4f0a0533201"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJiZWE2YmM4ODc5NDJjNTM4YTBkYWM0MDg5MDZlYjZkMzAwY2JmMWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bea6bc887942c538a0dac408906eb6d300cbf1d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2bea6bc887942c538a0dac408906eb6d300cbf1d",
      "tree": {
        "sha": "b0aa0b2d23e35490d4797930f8d70ca18a833ce2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0aa0b2d23e35490d4797930f8d70ca18a833ce2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b0aa0b2d23e35490d4797930f8d70ca18a833ce2\nparent bbc9c55974d0cd4d4971b451707af4f0a0533201\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1734036925 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745890200 -0400\n\nrefactor: split http_request_cb into libevent callback and dispatch\n\nThe original function is passed to libevent as a callback when HTTP\nrequests are received and processed. It wrapped the libevent request\nobject in a http_libevent::HTTPRequest and then handed that off to\nbitcoin for basic checks and finally dispatch to worker threads.\n\nIn this commit we split the function after the\nhttp_libevent::HTTPRequest is created, and pass that object to a new\nfunction that maintains the logic of checking and dispatching.\n\nThis will be the merge point for http_libevent and http_bitcoin,\nwhere HTTPRequest objects from either namespace have the same\ndownstream lifecycle.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQK5gACgkQ5+KYS2KJ\nyTp9YBAAnCjJTNarwhR27y/Ubdn9qUWV2cR0CP9M/2/gCv1p4u/yzZPsxoeWnGHv\nXZiZ2CNKqAwE0SR+bsHjWVb+a+jHHsFFkb4QvFO+25jpOzrWiqwzQPv4aBlmy9Jk\nuIOFyj5oH5FhggaHduEXgk4vvQAqMtqF8sSewsOOWrSaoOJ+3zdI4F5iescTXeHL\nBl3bYT24aZgeXGAy/V7QtXqT0220p5jYRATEpeLqw18PHfsW/7yVgcQNMHeU+4G3\n1oIuUqA01EGSjpXWzFjdcQ1rNTbyiAgzD+0o13ZzbakEy402kaeHXDc+c0VW89tS\nyT0DmeuMTkDbIvEhFFd/SZ9Xt4vm076EbTeXLkducsYRRLgugwRtmlnfxxfw/b/k\n2wDBy7FRnrvpVvzOnexnMrWIZTljYj3wbrc4VvzbDRGzlX+1/eRJzzl+6J8LXn84\nM6glNcmD2+frg1KDMfV1+fyIHpVjlKELJ//n7d/bIU6PaDsSX8KnOvmi4XGVmzOP\nDGNQn1SzDG24VSfG/AgaMDkTICEZ3QLkD3ACBHUnySTOOvx5oEhK2/LMk83wOobm\nvD2YILuNJmAxmEsSN2kLK1NYTp1Yt8vN99gGMX3sDjcSgduqsx7BHdj321ySp17N\nDWNRLu6puVvTzCAp8naHCf+b4mH1zuFnnzcAUoxP4yNctkCHqqA=\n=TEIO\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbc9c55974d0cd4d4971b451707af4f0a0533201",
          "sha": "bbc9c55974d0cd4d4971b451707af4f0a0533201",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bbc9c55974d0cd4d4971b451707af4f0a0533201"
        }
      ],
      "message": "refactor: split http_request_cb into libevent callback and dispatch\n\nThe original function is passed to libevent as a callback when HTTP\nrequests are received and processed. It wrapped the libevent request\nobject in a http_libevent::HTTPRequest and then handed that off to\nbitcoin for basic checks and finally dispatch to worker threads.\n\nIn this commit we split the function after the\nhttp_libevent::HTTPRequest is created, and pass that object to a new\nfunction that maintains the logic of checking and dispatching.\n\nThis will be the merge point for http_libevent and http_bitcoin,\nwhere HTTPRequest objects from either namespace have the same\ndownstream lifecycle.",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:30:00Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2024-12-12T20:55:25Z"
      },
      "sha": "2bea6bc887942c538a0dac408906eb6d300cbf1d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFhYjRhYWMzNTllZDcyYTFmMzBjMDQwODViZTc0MmI5ZTU3ZDMwZGY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ab4aac359ed72a1f30c04085be742b9e57d30df",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1ab4aac359ed72a1f30c04085be742b9e57d30df",
      "tree": {
        "sha": "6ef0ab4727f7101d99c3e367e0fde479ace93a3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ef0ab4727f7101d99c3e367e0fde479ace93a3e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6ef0ab4727f7101d99c3e367e0fde479ace93a3e\nparent 2bea6bc887942c538a0dac408906eb6d300cbf1d\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1736969196 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745890200 -0400\n\nrefactor: split HTTPBindAddresses into config parse and libevent setup\n\nThe original function was already naturally split into two chunks:\nFirst, we parse and validate the users' RPC configuration for IPs and\nports. Next we bind libevent's http server to the appropriate\nendpoints.\n\nThis commit splits these chunks into two separate functions, leaving\nthe argument parsing in the common space of the module and moving the\nlibevent-specific binding into the http_libevent namespace.\n\nA future commit will implement http_bitcoin::HTTPBindAddresses to\nbind the validate list of endpoints by the new HTTP server.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQK5gACgkQ5+KYS2KJ\nyTottRAA0FeMaZwzSXG9+DDSG7Wa52/gFYyoXxu5Lq1vBABbHiMP5hQCyHAJGnVw\nXclFurrkrHDiRmx0OtgDV24vWt89L3uo3UwPHMXHgV5kMX34I5CW+l1qFcTU1MK6\nPLT0ahQDAB+5YiUzS/sn/mzF0cMUWP2p8oAQLPWapUqYZ3Y4JkAu8J3Zqm8Ko7VX\n97vzF7dspEOMJTkHIY0mUalHyKj3SvVFCg5yc07HAoVRql5o/fn2cYJFWcl/dMt8\nBPFUaG3YAx26f4fZ4ynLcANmh4GpwuZicgBwnMRF+e0AwG7YugBuEc1CmChq2ZPy\nCR/HFnGTMxbutUhV1Yiu3jx3iaqVkBf9HZpLvvKdmrjk69mRqL9meVCMpJ+8MnXD\nVU3lX1PeVdMt3HTBxHhkDaFY1zr6MCdXRr7RDEFh8D4cOoBZLWo9Gidp/aUjCz8h\noYvf/rUQD93EpTX1lgV9CgnMhPfLZ4XUk0rnw82+HaIVJKYKnzkJoChKRwj/CzkG\nSQtj8TFbTdFPT61Bd8rBj4AuETBkvraVWWYXVsoD83UQnulX47fTpC62P3x58tLl\nWptHypiAHQl8bfGcVryD9Rlkse81Cs0V89aia3ZPomTNPZuHNoTXQ2VJaOQM8qlM\nzjwlf0aam4c3brP0vqS/UwmXio5mnz/GSIbn2CAyiryjqAGezkE=\n=iVF0\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bea6bc887942c538a0dac408906eb6d300cbf1d",
          "sha": "2bea6bc887942c538a0dac408906eb6d300cbf1d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2bea6bc887942c538a0dac408906eb6d300cbf1d"
        }
      ],
      "message": "refactor: split HTTPBindAddresses into config parse and libevent setup\n\nThe original function was already naturally split into two chunks:\nFirst, we parse and validate the users' RPC configuration for IPs and\nports. Next we bind libevent's http server to the appropriate\nendpoints.\n\nThis commit splits these chunks into two separate functions, leaving\nthe argument parsing in the common space of the module and moving the\nlibevent-specific binding into the http_libevent namespace.\n\nA future commit will implement http_bitcoin::HTTPBindAddresses to\nbind the validate list of endpoints by the new HTTP server.",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:30:00Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2025-01-15T19:26:36Z"
      },
      "sha": "1ab4aac359ed72a1f30c04085be742b9e57d30df"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg0ZTE4MTg1NjM1YWNlODZkMWJiZThhYTcxMWZiNGYzZTliZWMyNGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84e18185635ace86d1bbe8aa711fb4f3e9bec24d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/84e18185635ace86d1bbe8aa711fb4f3e9bec24d",
      "tree": {
        "sha": "96d30e7634da3a2b94addf252699b4ac799b4d28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96d30e7634da3a2b94addf252699b4ac799b4d28"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 96d30e7634da3a2b94addf252699b4ac799b4d28\nparent 1ab4aac359ed72a1f30c04085be742b9e57d30df\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1736972256 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745890200 -0400\n\nhttp: implement new server control methods to match legacy API\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQK5gACgkQ5+KYS2KJ\nyTqSgRAAj6UmsZYB/YRK/aNr9Qd58JqBshZ6XZovPmjS9zsZssMtR2UigcNq2JEZ\nId0joo+VEfqXk3JSumU74yxOjXc42l9jcDisWLAH+O09BLRg2+RuxCKXyzhrljJD\nUQSYBziMJHnUEjEzOKlH9+sjIUsb2R4pJUjQnpw3wuymUzQ4X8ca0jeJdLz4P4gK\nw30bgr2HywFml+cr5xlyA8tTLJn0iIjqkSXgewAMDFRfaPpe4kblELr1DtCOWGpn\nf1pbn29d5J9VontWOydpOwf6KnyZ936PBDT4btncBt000GJXzMe8QJT/yi/ZsvdM\n1BK4yZswBkjIaHIx+pjQxK4vW+Dwq7EWEFeM1MVC/tx9z7TjCyRNXCWhZQjWZ1Vt\nPViUfA7pwKwxoCMhl3T48+Bjxjqo791aEFKtr7ldU0F8eursCRGnfcpKQ+FGM+oC\nz1upP8gO5OtnMKSIS463E7u45GKcodwEXUF9akHE9dNa+ioXyyclR/sHIhfoDHDj\npQ7s1XCSVPPpvE3ckfxBxm8Ju/iRwqoskq2sv+omx5Sr8+hkir7hLE6BPvyG1dff\ngJqv3XXJEA/YtDlXshAQI+ZJcDFsjf6J3X/VXt1DdGM6c0/3Y3QbHqN9MpoZ9dPK\nNC4NW5vLS0PcR7cyPfsTOLHv1kImxUp/shpek5qNwLRbxjVY7J0=\n=waKJ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ab4aac359ed72a1f30c04085be742b9e57d30df",
          "sha": "1ab4aac359ed72a1f30c04085be742b9e57d30df",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1ab4aac359ed72a1f30c04085be742b9e57d30df"
        }
      ],
      "message": "http: implement new server control methods to match legacy API",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:30:00Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2025-01-15T20:17:36Z"
      },
      "sha": "84e18185635ace86d1bbe8aa711fb4f3e9bec24d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI5MGY4MDhlMzA5YTZhNWQ4NDg1YTkwY2EyYjEwOWEyY2YzOTk3MWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b90f808e309a6a5d8485a90ca2b109a2cf39971a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b90f808e309a6a5d8485a90ca2b109a2cf39971a",
      "tree": {
        "sha": "a3ec797e609ea6bb4a0d8a7aed10e34cb643a7ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3ec797e609ea6bb4a0d8a7aed10e34cb643a7ac"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a3ec797e609ea6bb4a0d8a7aed10e34cb643a7ac\nparent 84e18185635ace86d1bbe8aa711fb4f3e9bec24d\nauthor Matthew Zipkin <pinheadmz@pm.me> 1741627852 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745890200 -0400\n\nhttp: disconnect after idle timeout (-rpcservertimeout)\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQK5gACgkQ5+KYS2KJ\nyTpm5A//a8OAYaB08aSOzXcOZdlbu/KxH8/dwIIk2inHOPZE5QbeyJ1+7Ep7GntD\nfmrJucnfLPEbRYCmHIUwWuKKCN2ymARq3futYEJoPAlWWy4Vmgyk59bnEF/ARSf6\nrx7+3O+DxwqUbT3qXxQKsiP4P44kV3R7pmcI3f8xmFeMMkzQa6OHMh7gYAbBxzr6\nailj5JHYJVUjomq6o/3JjEUTyRvOmKBPwNRjT5CAN4uA++aBWkJVGDgwQVtRGqHd\nYuYfceRxfoDueG144UQUsDvcDYhbYEuX0QnLLvUBbLZ8YBeuNKE4Rb/gnMOgrCas\nfbBnrsIbd1Pi7qwj0Q4pG14qXbuj8G+fNKRKOo9u79SgSltqOic3yUmU6WWQxCQY\n2xfN5wFCCrpEstW5VKCnrwybztkMAUfVGMgM5HO9T/yRuv9i6KnsrPYYR8ZpJSLQ\nbq8QvBlM7i/Hhztxm3VWdGfI4fG0HIrWa/HCp+gIiHOBLWLVsx0x+DGOwwPtlrEG\nDP1xZq0yPSJ5MCXBA9+dswXvjiFcm4feFeDvkyE4hX7qjWxfT3O3FpOqdm9R4k2M\n/hoEaGpPwP3n0W9nDwiaiQoFhQUCX3LvOFFa+72eNHDq++zLcC2mFxaKOLOix7uJ\nY8WYxEKl5pNrHKDoj+VSpxj2fxsgSN6w+7tV0aZOYJLYHwYNu3o=\n=qfpC\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84e18185635ace86d1bbe8aa711fb4f3e9bec24d",
          "sha": "84e18185635ace86d1bbe8aa711fb4f3e9bec24d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/84e18185635ace86d1bbe8aa711fb4f3e9bec24d"
        }
      ],
      "message": "http: disconnect after idle timeout (-rpcservertimeout)",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:30:00Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-10T17:30:52Z"
      },
      "sha": "b90f808e309a6a5d8485a90ca2b109a2cf39971a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI5NTA1OTc2OTQ2MjZhZDhhN2I5YWFjYmMwMWFlY2FjYTAxMGQ0NjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2950597694626ad8a7b9aacbc01aecaca010d465",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2950597694626ad8a7b9aacbc01aecaca010d465",
      "tree": {
        "sha": "fb3d929d4dbca29194220e0df9aef4c987c2440d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb3d929d4dbca29194220e0df9aef4c987c2440d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fb3d929d4dbca29194220e0df9aef4c987c2440d\nparent b90f808e309a6a5d8485a90ca2b109a2cf39971a\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1737126299 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745890200 -0400\n\nuse CScheduler for HTTPRPCTimer\n\nThis removes the dependency on libevent for scheduled events,\nlike re-locking a wallet some time after decryption.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQK5gACgkQ5+KYS2KJ\nyTrADhAA4KBGPcrKVPEcZWdWJxjJcFIsGvouhc7MWonUH24nD4+/RtV4W59ID6VH\nIRtssz12LEVjMnZonrptzCba3YAicOxxWR55NpPXecK7/zmQjxp5jEXWGL4Cq09m\n17QgpQtjUbcFnRF6pDeGyol2/7qksUji03IsNXAxJLLoravdv+tNkLRPoU5EnF1o\nHYBe+i8+H9e+ZPWIPETbfQbvXPMxKpWD4srzZMzLmGjVjrN+7Wa27jOzPmOD4Fvf\nL8elEFycM3G2mkQytGQMMwiZYls9f7EhmMdsqTpM1PGaCD87U9Z1ueGoq/BFyzqB\nt8rbobg/21OCnvPPF0kcRSGqQUmJLRYAjAnPQxn9JFDpnCMWppx4YXoLuaniy/Dy\nEppjx0Ogpd7DQlBH5JcLwSp9cN98MY3/a4vyNRrSGTlQAk/Dr1JCY1oE4Q23fIZS\n8iUYVOMt2NkJvsWDU0MoYSTGDMcONP++9iemPJq3ad8dEuhU70WDJaHoGTJ1D/De\nSbDE5MyHDj7UbKs6CqztbH/EHc8hMpa+GN6a5SX/P1UvN+f1j6R6UcUAjfh2FgGK\nksk6wz3aBMMJOsUNgTHdVXNRw7A9NoswTIUstYCHxzQuQGM9sVL7kK+tZnVvKbPH\n8+s8IU0Znbp+/NGq9pbOM0O+FaPQ/VO6L5ALJibs9ItDkmiQuuw=\n=HRiy\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b90f808e309a6a5d8485a90ca2b109a2cf39971a",
          "sha": "b90f808e309a6a5d8485a90ca2b109a2cf39971a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b90f808e309a6a5d8485a90ca2b109a2cf39971a"
        }
      ],
      "message": "use CScheduler for HTTPRPCTimer\n\nThis removes the dependency on libevent for scheduled events,\nlike re-locking a wallet some time after decryption.",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:30:00Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2025-01-17T15:04:59Z"
      },
      "sha": "2950597694626ad8a7b9aacbc01aecaca010d465"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJlOTc4NTdkMTRlOGYwMGE3YTFjODg1M2JkOTU3YTgwYWZlNjljMWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be97857d14e8f00a7a1c8853bd957a80afe69c1d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/be97857d14e8f00a7a1c8853bd957a80afe69c1d",
      "tree": {
        "sha": "0317cbd3dace24746755879d949cd977fa7d6c50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0317cbd3dace24746755879d949cd977fa7d6c50"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0317cbd3dace24746755879d949cd977fa7d6c50\nparent 2950597694626ad8a7b9aacbc01aecaca010d465\nauthor Matthew Zipkin <pinheadmz@gmail.com> 1736973856 -0500\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745890348 -0400\n\nhttp: switch servers from libevent to bitcoin\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQLC8ACgkQ5+KYS2KJ\nyTrEmw//fT5fRfmXE3XxaPMW5epWSzBCx7kyyvaeD/xSiPifzldZTJziMXt4+2Le\n2qxGT8FaL64SZwZTytBveCSktTJK1/vMPncxn3o0EoYTfZBsqWdcynmgZ6m0QC7J\nK2E9q3jf6Po33NYnlkBY6eDAJ9mDWM0qCqghe+y3mu245VPkp/eN4wEf3yvoXgru\nqZSOeiLDciiehJkzzeVeEUFJ2WXVDlzxgN5GO//yq3lVxwKI/60qafr6SQf2CrA8\nL94AZz+0DokC3wUobMWaNiT44C+jYACxBIpx77x16hUUzBWHeqG6wWoK5EsXrvho\nNAEPYoWsCbCllTNBZ3FCOgeF1nhM3kmoE+Q8umhhXlBAu6kEariECtgzlOemAcAq\nim5Hva4dmvlsATY1CZU1a97n1V4ZiSzPEko5UCtJ9fEMl+djL968V2p+war+nCl7\n4xe8ICFruUoIsOIkF8pAmOJcxQbm/agtm7ljn1aVJhseNGyB0sRzCf2rdAsdleHY\nqzC3ydkMQgyz8D9HcxOkF9N9mOdbUUSFVfy/GErylAelToObdlM5mz56c4toE3t0\nL7h2DSwhXMakhsziBadtxzOGOHcGa4feCYqrJ0eWBOcph9/LfojoNmPiK7NOYaxM\nvTj/ewR6OTV1Dm/z9ftScI1hS/9ZvpOdMFpjreDQq5fu1103024=\n=6Vvi\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2950597694626ad8a7b9aacbc01aecaca010d465",
          "sha": "2950597694626ad8a7b9aacbc01aecaca010d465",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2950597694626ad8a7b9aacbc01aecaca010d465"
        }
      ],
      "message": "http: switch servers from libevent to bitcoin",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:32:28Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@gmail.com",
        "date": "2025-01-15T20:44:16Z"
      },
      "sha": "be97857d14e8f00a7a1c8853bd957a80afe69c1d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc4NTZmMjBmZWM2MGZiZTM0Y2RiYzU5N2RhZjYzMTlmMjVmMjQwZTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7856f20fec60fbe34cdbc597daf6319f25f240e8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7856f20fec60fbe34cdbc597daf6319f25f240e8",
      "tree": {
        "sha": "2567754f2612a00766098b1f98fe6f1a6a8e09ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2567754f2612a00766098b1f98fe6f1a6a8e09ce"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2567754f2612a00766098b1f98fe6f1a6a8e09ce\nparent be97857d14e8f00a7a1c8853bd957a80afe69c1d\nauthor Matthew Zipkin <pinheadmz@pm.me> 1742317853 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745890407 -0400\n\nfuzz: switch http_libevent::HTTPRequest to http_bitcoin::HTTPRequest\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQLGgACgkQ5+KYS2KJ\nyTqh+w/8CfVJpk4N2uhPp0ZZI/DLMRoy5vroyEHUUHJjBhPFFC0+SU/U0JHna48P\n/GSdRZwM1hVKuScEyVLzfnqgb2Jp6fcT/c5IEqA706Dlh7v+HgYyuJdRScy+thdP\nXpAXGxPzJ2l63JgZtal1Of/eCatzyRAR1Ozr1IhRoy1KI6FSlmj2lOdpcmXB8+0m\neMI9+WTqAq7HM4YEpXl/rP1l87C55Iimjh+9cqAsXrEX85ubgVwdedz3WzaRR9Vk\nBF7dsSOH2oJED9/QNN7E0bXEbtN5d+AvZ+zw5AgEpXemj3XVFB1s9TFKtCgucZVC\nJWJ1CyGIychUTeDWzT5doADb74Izs+htNGbEqN0IFM3nG4zDGL9NRz+jQyDcM6I3\ntC1qjxEx0L7ByyYuytCW2xlCqqhy9Xti31+N9QdAwxhWnRgaoVXXFPGst/YDAMSZ\nUvwVhUmOjehvteV++7aHb5REQXuLbBEAmj5khCS3idzD/Wa+sBl8saD72LoPkKUC\netwEy4N3uHAHM0CG2K6Nu85EsoBUikdHIeSUdDCKdosbBt+tqnnMQU0UISbvQ/nM\ncWn0dST3yLeZNlSlXeO8QmtP7LXBb5Pjqqf8WtbPy3ibP4qzerhuS4dP5+wbGwTT\ntgd7hTEqSo7faycR6Rbkz1tzz144mu1q/9jOUlw5mAsSUbeT5BM=\n=Gce2\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be97857d14e8f00a7a1c8853bd957a80afe69c1d",
          "sha": "be97857d14e8f00a7a1c8853bd957a80afe69c1d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/be97857d14e8f00a7a1c8853bd957a80afe69c1d"
        }
      ],
      "message": "fuzz: switch http_libevent::HTTPRequest to http_bitcoin::HTTPRequest",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:33:27Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-18T17:10:53Z"
      },
      "sha": "7856f20fec60fbe34cdbc597daf6319f25f240e8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU0YTM2MDkzZjc2ZjlhMjA1MDQ0NDcwNzFkZjQ2MjBhMzgwNjZjODk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54a36093f76f9a20504447071df4620a38066c89",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/54a36093f76f9a20504447071df4620a38066c89",
      "tree": {
        "sha": "613ab94da17b200acdedbd4aff87b31bbe87e9a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/613ab94da17b200acdedbd4aff87b31bbe87e9a9"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 613ab94da17b200acdedbd4aff87b31bbe87e9a9\nparent 7856f20fec60fbe34cdbc597daf6319f25f240e8\nauthor Matthew Zipkin <pinheadmz@pm.me> 1745850446 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745890416 -0400\n\nhttp: using string_view to avoid unnecessary copy in Headers\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQLHAACgkQ5+KYS2KJ\nyTr9HQ//RRV47dzVNW8A+brUP/hcs/8IX8KiugeL53wWgqgaNhOtL3kCkR9XYICl\n6Qxrg5IfE+QR7vHb48SrW7JJG/Cd+jrwysN7s7b9CpH9+UuSxHw6Tw01anU3VqJP\nT3o54JZRYrepJw2TupzTrs+0M9YR/+yHx4T+L/3HtJTEf3P0tcPaL5Rfb5vihSe0\nhoWB4rFf4C2u2Px+7TXvT4jCiUTaw5eyyY/os/KGgCQoXzKgUIryAlREo3Tg8hzf\nlHB5d6w9iHzsHFnJum47fq7oapM6vcmJxnBPm0q2QvwQKvUbYU4FETziv2maivke\nBapBvtmzmOlQ4sYXhNjZjd0e++UKWBoeAUF2THanUqqnWP+6PQlbi4qvQVOJNKhS\nCkR554Yp2kJJzBLcRBwMDsQANXip0EFMwi0wsW18Yr4ETrQNxq//uf5UP0NAZQ+c\nvQ0OiDc82KuR/Y2ukQgBdepOTlIpbAAG9xumdGzzu9BTiViba0w0KBuW6ffqP/OC\nd9OMVkQIaR3PVQDHFWnKG4MgLtObldfh7b+GVsAKSIEb+cxF2k9I+YHId8HYdoIO\n6jo3Cpp+kSRUa6/IiTa9tLKqgaKXS+FsVSqmWdA1wH/nLO03lXFN30SpKW0at3Od\naWpJ3Y6Rs3emRbA9KnNxWkPyTx2arKgUNw0lvviwmkJDHj6kEiI=\n=AbUP\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7856f20fec60fbe34cdbc597daf6319f25f240e8",
          "sha": "7856f20fec60fbe34cdbc597daf6319f25f240e8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7856f20fec60fbe34cdbc597daf6319f25f240e8"
        }
      ],
      "message": "http: using string_view to avoid unnecessary copy in Headers",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:33:36Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-28T14:27:26Z"
      },
      "sha": "54a36093f76f9a20504447071df4620a38066c89"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdkMzAxMTg0MDE2YTNmNTljMmUzNjNkZmY2MzEyNjNjZGJlMjFkYTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d301184016a3f59c2e363dff631263cdbe21da0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7d301184016a3f59c2e363dff631263cdbe21da0",
      "tree": {
        "sha": "c3aea094f57a00099674755f628bd143efb0a043",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3aea094f57a00099674755f628bd143efb0a043"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c3aea094f57a00099674755f628bd143efb0a043\nparent 54a36093f76f9a20504447071df4620a38066c89\nauthor Matthew Zipkin <pinheadmz@pm.me> 1741888678 -0400\ncommitter Matthew Zipkin <pinheadmz@pm.me> 1745890416 -0400\n\nhttpserver: delete libevent!\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAmgQLHAACgkQ5+KYS2KJ\nyTrGYhAAp0VHgn9tpG09QR56vv+sAvTv3I3+nYIpkKSSWycMcuBvoE/izZZarrj7\nfuKnqZKmfB29zY7hVQbKKwdCO6hDkhkRlTxWV/qJ2W6mmHM2OSJctXmdD/fwCz/9\nFRUTz39VVbKP/hy+4JIY/LWKwsdRnSU/qjF0PG2fJ0tlDMukLd1Zk0dbyI4+LZxK\n4M9UUFU/Cc9GZfWnPBbStJv28nxevBv6S1JmdcrDqAPrnQTOS3ZuO6Y+542Hts0y\nzdlGzBLKvEX/7l5QDSgpFmll9AKHK5bCABoFvizWha7r7BzpL/C9Po1PEqAOl4AG\nGRFxXZ7umCmJikHNtX/EqZBFQ3B8T1WWyNGLbCoqYz2C25XmMslwpKXzu3G1zMfX\nROgA6m5vrvAwF0CMIGin8yqyJUiXSKqiv+eGBS0KqWtKm7pBxmfGBrtMGHW7Qt5i\n+Xqm9hLAx2ySwYbyDiARK/T+C8QwuoMg+J5s+2qnUx2rlwGv+3eFOo4Eb+8sWVXG\njjfY1jcfrC4XtUAzDDDMur8ZQu8Z/fcKl969d4ca3gCJDRpgXCV5Brg2PS1acPZc\nsU4NR8aCrcnrAbIdO+knfVKZkg7casu48LzzIHycQR79ZuNDVNBvAub8D/0BaZea\n5u51Mj4TfgmYJC7G0+aaNmLgdC8fo0pgkF/r6M5jkc3lmeyFEAM=\n=DM2n\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54a36093f76f9a20504447071df4620a38066c89",
          "sha": "54a36093f76f9a20504447071df4620a38066c89",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/54a36093f76f9a20504447071df4620a38066c89"
        }
      ],
      "message": "httpserver: delete libevent!",
      "committer": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-04-29T01:33:36Z"
      },
      "author": {
        "name": "Matthew Zipkin",
        "email": "pinheadmz@pm.me",
        "date": "2025-03-13T17:57:58Z"
      },
      "sha": "7d301184016a3f59c2e363dff631263cdbe21da0"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17452828383,
      "node_id": "HRFPE_lADOABII586t8FMgzwAAAAQQRQbf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17452828383",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "commit_url": "https://api.github.com/repos/pinheadmz/bitcoin/commits/7d301184016a3f59c2e363dff631263cdbe21da0",
      "created_at": "2025-04-29T11:04:32Z"
    },
    {
      "event": "reviewed",
      "id": 2799390114,
      "node_id": "PRR_kwDOABII586m202i",
      "url": null,
      "actor": null,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks so much for the great review @romanz I took most of your suggestions, there's still an open question about `m_recv_buffer` but I really appreciate all your attention to string copying!",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#pullrequestreview-2799390114",
      "submitted_at": "2025-04-29T13:23:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051985554",
      "pull_request_review_id": 2780581749,
      "id": 2051985554,
      "node_id": "PRRC_kwDOABII5856TtCS",
      "diff_hunk": "@@ -0,0 +1,535 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://opensource.org/license/mit/.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <common/sockman.h>\n+#include <logging.h>\n+#include <netbase.h>\n+#include <util/sock.h>\n+#include <util/thread.h>\n+\n+#include <cassert>\n+\n+// The set of sockets cannot be modified while waiting\n+// The sleep time needs to be small to avoid new sockets stalling\n+static constexpr auto SELECT_TIMEOUT{50ms};\n+\n+/** Get the bind address for a socket as CService. */\n+static CService GetBindAddress(const Sock& sock)\n+{\n+    CService addr_bind;\n+    struct sockaddr_storage sockaddr_bind;\n+    socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n+    if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+        addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind, sockaddr_bind_len);\n+    } else {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"getsockname failed\\n\");\n+    }\n+    return addr_bind;\n+}\n+\n+bool SockMan::BindAndStartListening(const CService& to, bilingual_str& err_msg)\n+{\n+    // Create socket for listening for incoming connections\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+    if (!to.GetSockAddr(reinterpret_cast<sockaddr*>(&storage), &len)) {\n+        err_msg = Untranslated(strprintf(\"Bind address family for %s not supported\", to.ToStringAddrPort()));\n+        return false;\n+    }\n+\n+    std::unique_ptr<Sock> sock{CreateSock(to.GetSAFamily(), SOCK_STREAM, IPPROTO_TCP)};\n+    if (!sock) {\n+        err_msg = Untranslated(strprintf(\"Cannot create %s listen socket: %s\",\n+                                         to.ToStringAddrPort(),\n+                                         NetworkErrorString(WSAGetLastError())));\n+        return false;\n+    }\n+\n+    int one{1};\n+\n+    // Allow binding if the port is still in TIME_WAIT state after\n+    // the program was closed and restarted.\n+    if (sock->SetSockOpt(SOL_SOCKET, SO_REUSEADDR, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+        LogPrintLevel(BCLog::NET,\n+                      BCLog::Level::Info,\n+                      \"Cannot set SO_REUSEADDR on %s listen socket: %s, continuing anyway\\n\",\n+                      to.ToStringAddrPort(),\n+                      NetworkErrorString(WSAGetLastError()));\n+    }\n+\n+    // some systems don't have IPV6_V6ONLY but are always v6only; others do have the option\n+    // and enable it by default or not. Try to enable it, if possible.\n+    if (to.IsIPv6()) {\n+#ifdef IPV6_V6ONLY\n+        if (sock->SetSockOpt(IPPROTO_IPV6, IPV6_V6ONLY, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_V6ONLY on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+#ifdef WIN32\n+        int prot_level{PROTECTION_LEVEL_UNRESTRICTED};\n+        if (sock->SetSockOpt(IPPROTO_IPV6,\n+                             IPV6_PROTECTION_LEVEL,\n+                             reinterpret_cast<const char*>(&prot_level),\n+                             sizeof(prot_level)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_PROTECTION_LEVEL on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+    }\n+\n+    if (sock->Bind(reinterpret_cast<sockaddr*>(&storage), len) == SOCKET_ERROR) {\n+        const int err{WSAGetLastError()};\n+        if (err == WSAEADDRINUSE) {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\"),\n+                                to.ToStringAddrPort(),\n+                                CLIENT_NAME);\n+        } else {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\"),\n+                                to.ToStringAddrPort(),\n+                                NetworkErrorString(err));\n+        }\n+        return false;\n+    }\n+\n+    // Listen for incoming connections\n+    if (sock->Listen(SOMAXCONN) == SOCKET_ERROR) {\n+        err_msg = strprintf(_(\"Cannot listen on %s: %s\"), to.ToStringAddrPort(), NetworkErrorString(WSAGetLastError()));\n+        return false;\n+    }\n+\n+    m_listen.emplace_back(std::move(sock));\n+\n+    return true;\n+}\n+\n+void SockMan::StartSocketsThreads(const Options& options)\n+{\n+    m_thread_socket_handler = std::thread(\n+        &util::TraceThread, options.socket_handler_thread_name, [this] { ThreadSocketHandler(); });\n+\n+    if (options.i2p.has_value()) {\n+        m_i2p_sam_session = std::make_unique<i2p::sam::Session>(\n+            options.i2p->private_key_file, options.i2p->sam_proxy, &interruptNet);\n+\n+        m_thread_i2p_accept =\n+            std::thread(&util::TraceThread, options.i2p->accept_thread_name, [this] { ThreadI2PAccept(); });\n+    }\n+}\n+\n+void SockMan::JoinSocketsThreads()\n+{\n+    if (m_thread_i2p_accept.joinable()) {\n+        m_thread_i2p_accept.join();\n+    }\n+\n+    if (m_thread_socket_handler.joinable()) {\n+        m_thread_socket_handler.join();\n+    }\n+}\n+\n+std::optional<SockMan::Id>\n+SockMan::ConnectAndMakeId(const std::variant<CService, StringHostIntPort>& to,\n+                          bool is_important,\n+                          std::optional<Proxy> proxy,\n+                          bool& proxy_failed,\n+                          CService& me)\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+    AssertLockNotHeld(m_unused_i2p_sessions_mutex);\n+\n+    std::unique_ptr<Sock> sock;\n+    std::unique_ptr<i2p::sam::Session> i2p_transient_session;\n+\n+    Assume(!me.IsValid());\n+\n+    if (std::holds_alternative<CService>(to)) {\n+        const CService& addr_to{std::get<CService>(to)};\n+        if (addr_to.IsI2P()) {\n+            if (!Assume(proxy.has_value())) {\n+                return std::nullopt;\n+            }\n+\n+            i2p::Connection conn;\n+            bool connected{false};\n+\n+            if (m_i2p_sam_session) {\n+                connected = m_i2p_sam_session->Connect(addr_to, conn, proxy_failed);\n+            } else {\n+                {\n+                    LOCK(m_unused_i2p_sessions_mutex);\n+                    if (m_unused_i2p_sessions.empty()) {\n+                        i2p_transient_session = std::make_unique<i2p::sam::Session>(proxy.value(), &interruptNet);\n+                    } else {\n+                        i2p_transient_session.swap(m_unused_i2p_sessions.front());\n+                        m_unused_i2p_sessions.pop();\n+                    }\n+                }\n+                connected = i2p_transient_session->Connect(addr_to, conn, proxy_failed);\n+                if (!connected) {\n+                    LOCK(m_unused_i2p_sessions_mutex);\n+                    if (m_unused_i2p_sessions.size() < MAX_UNUSED_I2P_SESSIONS_SIZE) {\n+                        m_unused_i2p_sessions.emplace(i2p_transient_session.release());\n+                    }\n+                }\n+            }\n+\n+            if (connected) {\n+                sock = std::move(conn.sock);\n+                me = conn.me;\n+            }\n+        } else if (proxy.has_value()) {\n+            sock = ConnectThroughProxy(proxy.value(), addr_to.ToStringAddr(), addr_to.GetPort(), proxy_failed);\n+        } else {\n+            sock = ConnectDirectly(addr_to, is_important);\n+        }\n+    } else {\n+        if (!Assume(proxy.has_value())) {\n+            return std::nullopt;\n+        }\n+\n+        const auto& hostport{std::get<StringHostIntPort>(to)};\n+\n+        bool dummy_proxy_failed;\n+        sock = ConnectThroughProxy(proxy.value(), hostport.host, hostport.port, dummy_proxy_failed);\n+    }\n+\n+    if (!sock) {\n+        return std::nullopt;\n+    }\n+\n+    if (!me.IsValid()) {\n+        me = GetBindAddress(*sock);\n+    }\n+\n+    const Id id{GetNewId()};\n+\n+    {\n+        LOCK(m_connected_mutex);\n+        m_connected.emplace(id, std::make_shared<ConnectionSockets>(std::move(sock),\n+                                                                    std::move(i2p_transient_session)));\n+    }\n+\n+    return id;\n+}\n+\n+bool SockMan::CloseConnection(Id id)\n+{\n+    LOCK(m_connected_mutex);\n+    return m_connected.erase(id) > 0;\n+}\n+\n+ssize_t SockMan::SendBytes(Id id,\n+                           std::span<const unsigned char> data,\n+                           bool will_send_more,\n+                           std::string& errmsg) const\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    if (data.empty()) {\n+        return 0;\n+    }\n+\n+    auto sockets{GetConnectionSockets(id)};\n+    if (!sockets) {\n+        // Bail out immediately and just leave things in the caller's send queue.\n+        return 0;\n+    }\n+\n+    int flags{MSG_NOSIGNAL | MSG_DONTWAIT};\n+#ifdef MSG_MORE\n+    if (will_send_more) {\n+        flags |= MSG_MORE;\n+    }\n+#endif\n+\n+    const ssize_t sent{WITH_LOCK(\n+        sockets->mutex,\n+        return sockets->sock->Send(reinterpret_cast<const char*>(data.data()), data.size(), flags);)};\n+\n+    if (sent >= 0) {\n+        return sent;\n+    }\n+\n+    const int err{WSAGetLastError()};\n+    if (err == WSAEWOULDBLOCK || err == WSAEMSGSIZE || err == WSAEINTR || err == WSAEINPROGRESS) {\n+        return 0;\n+    }\n+    errmsg = NetworkErrorString(err);\n+    return -1;\n+}\n+\n+void SockMan::StopListening()\n+{\n+    m_listen.clear();\n+}\n+\n+bool SockMan::ShouldTryToSend(Id id) const { return true; }\n+\n+bool SockMan::ShouldTryToRecv(Id id) const { return true; }\n+\n+void SockMan::EventIOLoopCompletedForOne(Id id) {}\n+\n+void SockMan::EventIOLoopCompletedForAll() {}\n+\n+void SockMan::EventI2PStatus(const CService&, I2PStatus) {}\n+\n+void SockMan::TestOnlyAddExistentConnection(Id id, std::unique_ptr<Sock>&& sock)\n+{\n+    LOCK(m_connected_mutex);\n+    const auto result{m_connected.emplace(id, std::make_shared<ConnectionSockets>(std::move(sock)))};\n+    assert(result.second);\n+}\n+\n+void SockMan::ThreadI2PAccept()\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    static constexpr auto err_wait_begin = 1s;\n+    static constexpr auto err_wait_cap = 5min;\n+    auto err_wait = err_wait_begin;\n+\n+    i2p::Connection conn;\n+\n+    auto SleepOnFailure = [&]() {\n+        interruptNet.sleep_for(err_wait);\n+        if (err_wait < err_wait_cap) {\n+            err_wait += 1s;\n+        }\n+    };\n+\n+    while (!interruptNet) {\n+\n+        if (!m_i2p_sam_session->Listen(conn)) {\n+            EventI2PStatus(conn.me, SockMan::I2PStatus::STOP_LISTENING);\n+            SleepOnFailure();\n+            continue;\n+        }\n+\n+        EventI2PStatus(conn.me, SockMan::I2PStatus::START_LISTENING);\n+\n+        if (!m_i2p_sam_session->Accept(conn)) {\n+            SleepOnFailure();\n+            continue;\n+        }\n+\n+        Assume(conn.me.IsI2P());\n+        Assume(conn.peer.IsI2P());\n+\n+        NewSockAccepted(std::move(conn.sock), conn.me, conn.peer);\n+\n+        err_wait = err_wait_begin;\n+    }\n+}\n+\n+void SockMan::ThreadSocketHandler()\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    while (!interruptNet) {\n+        EventIOLoopCompletedForAll();\n+\n+        // Check for the readiness of the already connected sockets and the\n+        // listening sockets in one call (\"readiness\" as in poll(2) or\n+        // select(2)). If none are ready, wait for a short while and return\n+        // empty sets.\n+        auto io_readiness{GenerateWaitSockets()};\n+        if (io_readiness.events_per_sock.empty() ||\n+            // WaitMany() may as well be a static method, the context of the first Sock in the vector is not relevant.\n+            !io_readiness.events_per_sock.begin()->first->WaitMany(SELECT_TIMEOUT,\n+                                                                   io_readiness.events_per_sock)) {\n+            interruptNet.sleep_for(SELECT_TIMEOUT);\n+        }\n+\n+        // Service (send/receive) each of the already connected sockets.\n+        SocketHandlerConnected(io_readiness);\n+\n+        // Accept new connections from listening sockets.\n+        SocketHandlerListening(io_readiness.events_per_sock);\n+    }\n+}\n+\n+std::unique_ptr<Sock> SockMan::AcceptConnection(const Sock& listen_sock, CService& addr)\n+{\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+\n+    auto sock{listen_sock.Accept(reinterpret_cast<sockaddr*>(&storage), &len)};\n+\n+    if (!sock) {\n+        const int err{WSAGetLastError()};\n+        if (err != WSAEWOULDBLOCK) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Error,\n+                          \"Cannot accept new connection: %s\\n\",\n+                          NetworkErrorString(err));\n+        }\n+        return {};\n+    }\n+\n+    if (!addr.SetSockAddr(reinterpret_cast<sockaddr*>(&storage), len)) {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Unknown socket family\\n\");\n+    }\n+\n+    return sock;\n+}\n+\n+void SockMan::NewSockAccepted(std::unique_ptr<Sock>&& sock, const CService& me, const CService& them)\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    if (!sock->IsSelectable()) {\n+        LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", them.ToStringAddrPort());\n+        return;\n+    }\n+\n+    // According to the internet TCP_NODELAY is not carried into accepted sockets\n+    // on all platforms.  Set it again here just to be sure.",
      "path": "src/common/sockman.cpp",
      "position": 396,
      "original_position": 396,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "cfe5eba4463ff289b46ba0b3f4708f7cd3f1e9fe",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: this comment seems to be incorrect, since `TCP_NODELAY` is only set once by `SockMan`.",
      "created_at": "2025-04-21T05:44:31Z",
      "updated_at": "2025-04-21T05:52:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2051985554",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051985554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 396,
      "original_line": 396,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051989121",
      "pull_request_review_id": 2780581749,
      "id": 2051989121,
      "node_id": "PRRC_kwDOABII5856Tt6B",
      "diff_hunk": "@@ -116,6 +119,20 @@ std::optional<int64_t> ParseISO8601DateTime(std::string_view str)\n     return int64_t{TicksSinceEpoch<std::chrono::seconds>(tp)};\n }\n \n+std::string FormatRFC7231DateTime(int64_t nTime)\n+{\n+    const std::chrono::sys_seconds secs{std::chrono::seconds{nTime}};\n+    const auto days{std::chrono::floor<std::chrono::days>(secs)};\n+    // 1970-01-01 was a Thursday\n+    std::string weekday{weekdays[(days.time_since_epoch().count() + 4) % 7]};",
      "path": "src/util/time.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "aeb8352a9de844073c10656e53e3d90b573b9eda",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `weekday` and `month` can be a `string_view`.",
      "created_at": "2025-04-21T05:49:31Z",
      "updated_at": "2025-04-21T05:52:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2051989121",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051989121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051998964",
      "pull_request_review_id": 2780602792,
      "id": 2051998964,
      "node_id": "PRRC_kwDOABII5856TwT0",
      "diff_hunk": "@@ -497,3 +497,10 @@ std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_mu\n     }\n     return *parsed_num * unit_amount;\n }\n+\n+std::vector<std::byte> StringToBuffer(const std::string& str)\n+{\n+    return std::vector<std::byte>(",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: maybe using `std::span` will be simpler? \r\nFor example:\r\n```c++\r\n    auto span = std::as_bytes(std::span(str));\r\n    return {span.begin(), span.end()};\r\n```",
      "created_at": "2025-04-21T06:03:20Z",
      "updated_at": "2025-04-21T06:46:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2051998964",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051998964"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052024440",
      "pull_request_review_id": 2780602792,
      "id": 2052024440,
      "node_id": "PRRC_kwDOABII5856T2h4",
      "diff_hunk": "@@ -13,4 +13,42 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n     if (search.empty()) return;\n     in_out = std::regex_replace(in_out, std::regex(search), substitute);\n }\n+\n+LineReader::LineReader(std::span<const std::byte> buffer, size_t max_read)\n+    : start(buffer.begin()), end(buffer.end()), max_read(max_read), it(buffer.begin()) {}\n+\n+std::optional<std::string> LineReader::ReadLine()\n+{\n+    if (it == end) {\n+        return std::nullopt;\n+    }\n+\n+    auto line_start = it;\n+    std::string line{};\n+    while (it != end) {\n+        char c = static_cast<char>(*it);\n+        line += c;",
      "path": "src/util/string.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe it would be better (performance-wise) to create the string after the loop is over?\r\n```c++\r\nstd::optional<std::string> LineReader::ReadLine()\r\n{\r\n    if (it == end) {\r\n        return std::nullopt;\r\n    }\r\n\r\n    auto line_start = it;\r\n    size_t count = 0;\r\n    while (it != end) {\r\n        char c = static_cast<char>(*it);\r\n        ++it;\r\n        ++count;\r\n        if (c == '\\n') break;\r\n        if (count >= max_read) throw std::runtime_error(\"max_read exceeded by LineReader\");\r\n    }\r\n    const std::byte *data = &*line_start;\r\n    std::string line{reinterpret_cast<const char *>(data), count};\r\n    line = TrimString(line); // delete trailing \\r and/or \\n\r\n    return line;\r\n}\r\n```",
      "created_at": "2025-04-21T06:33:50Z",
      "updated_at": "2025-04-21T06:46:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2052024440",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052024440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052025637",
      "pull_request_review_id": 2780602792,
      "id": 2052025637,
      "node_id": "PRRC_kwDOABII5856T20l",
      "diff_hunk": "@@ -13,4 +13,42 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n     if (search.empty()) return;\n     in_out = std::regex_replace(in_out, std::regex(search), substitute);\n }\n+\n+LineReader::LineReader(std::span<const std::byte> buffer, size_t max_read)\n+    : start(buffer.begin()), end(buffer.end()), max_read(max_read), it(buffer.begin()) {}\n+\n+std::optional<std::string> LineReader::ReadLine()\n+{\n+    if (it == end) {\n+        return std::nullopt;\n+    }\n+\n+    auto line_start = it;\n+    std::string line{};\n+    while (it != end) {\n+        char c = static_cast<char>(*it);\n+        line += c;\n+        ++it;\n+        if (c == '\\n') break;\n+        if ((size_t)std::distance(line_start, it) >= max_read) throw std::runtime_error(\"max_read exceeded by LineReader\");\n+    }\n+\n+    line = TrimString(line); // delete trailing \\r and/or \\n",
      "path": "src/util/string.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can we return a `string_view` to the internal buffer?\r\n(preventing allocation & copy)",
      "created_at": "2025-04-21T06:35:11Z",
      "updated_at": "2025-04-21T06:46:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2052025637",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052025637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052027205",
      "pull_request_review_id": 2780602792,
      "id": 2052027205,
      "node_id": "PRRC_kwDOABII5856T3NF",
      "diff_hunk": "@@ -13,4 +13,42 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n     if (search.empty()) return;\n     in_out = std::regex_replace(in_out, std::regex(search), substitute);\n }\n+\n+LineReader::LineReader(std::span<const std::byte> buffer, size_t max_read)\n+    : start(buffer.begin()), end(buffer.end()), max_read(max_read), it(buffer.begin()) {}\n+\n+std::optional<std::string> LineReader::ReadLine()\n+{\n+    if (it == end) {\n+        return std::nullopt;\n+    }\n+\n+    auto line_start = it;\n+    std::string line{};\n+    while (it != end) {\n+        char c = static_cast<char>(*it);\n+        line += c;\n+        ++it;\n+        if (c == '\\n') break;\n+        if ((size_t)std::distance(line_start, it) >= max_read) throw std::runtime_error(\"max_read exceeded by LineReader\");\n+    }\n+\n+    line = TrimString(line); // delete trailing \\r and/or \\n\n+    return line;\n+}\n+\n+// Ignores max_read but won't overflow\n+std::string LineReader::ReadLength(size_t len)\n+{\n+    if (len == 0) return \"\";\n+    if (Left() < len) throw std::runtime_error(\"Not enough data in buffer\");\n+    std::string out(reinterpret_cast<const char*>(&(*it)), len);",
      "path": "src/util/string.cpp",
      "position": 33,
      "original_position": 33,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can we return a `string_view` to the internal buffer?\r\n(preventing allocation & copy)",
      "created_at": "2025-04-21T06:37:06Z",
      "updated_at": "2025-04-21T06:46:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2052027205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052027205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052036849",
      "pull_request_review_id": 2780672873,
      "id": 2052036849,
      "node_id": "PRRC_kwDOABII5856T5jx",
      "diff_hunk": "@@ -781,3 +781,69 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n         pathHandlers.erase(i);\n     }\n }\n+\n+\n+namespace http_bitcoin {\n+std::optional<std::string> HTTPHeaders::Find(const std::string key) const",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "70d003ca1028458bd6573bcd067e234e009f66c9",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: consider using `string_view` instead of `string` here and below.",
      "created_at": "2025-04-21T06:48:12Z",
      "updated_at": "2025-04-21T16:06:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2052036849",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052036849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052664896",
      "pull_request_review_id": 2781691846,
      "id": 2052664896,
      "node_id": "PRRC_kwDOABII5856WS5A",
      "diff_hunk": "@@ -781,3 +781,69 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n         pathHandlers.erase(i);\n     }\n }\n+\n+\n+namespace http_bitcoin {\n+std::optional<std::string> HTTPHeaders::Find(const std::string key) const\n+{\n+    const auto it = m_map.find(key);\n+    if (it == m_map.end()) return std::nullopt;\n+    return it->second;\n+}\n+\n+void HTTPHeaders::Write(const std::string key, const std::string value)\n+{\n+    // If present, append value to list\n+    const auto existing_value = Find(key);\n+    if (existing_value) {\n+        m_map[key] = existing_value.value() + \", \" + value;\n+    } else {\n+        m_map[key] = value;\n+    }\n+}\n+\n+void HTTPHeaders::Remove(const std::string key)\n+{\n+    m_map.erase(key);\n+}\n+\n+bool HTTPHeaders::Read(util::LineReader& reader)\n+{\n+    // Headers https://httpwg.org/specs/rfc9110.html#rfc.section.6.3\n+    // A sequence of Field Lines https://httpwg.org/specs/rfc9110.html#rfc.section.5.2\n+    do {\n+        auto maybe_line = reader.ReadLine();\n+        if (!maybe_line) return false;\n+        const std::string& line = *maybe_line;\n+\n+        // An empty line indicates end of the headers section https://www.rfc-editor.org/rfc/rfc2616#section-4\n+        if (line.length() == 0) break;\n+\n+        // Header line must have at least one \":\"\n+        // keys are not allowed to have delimiters like \":\" but values are\n+        // https://httpwg.org/specs/rfc9110.html#rfc.section.5.6.2\n+        const size_t pos{line.find(':')};\n+        if (pos == std::string::npos) throw std::runtime_error(\"HTTP header missing colon (:)\");\n+\n+        // Whitespace is optional\n+        std::string key = util::TrimString(line.substr(0, pos));\n+        std::string value = util::TrimString(line.substr(pos + 1));\n+        Write(key, value);\n+    } while (true);\n+\n+    return true;\n+}\n+\n+std::string HTTPHeaders::Stringify() const\n+{\n+    std::string out;\n+    for (auto it = m_map.begin(); it != m_map.end(); ++it) {",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "70d003ca1028458bd6573bcd067e234e009f66c9",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: maybe the following would be simpler?\r\n```c++\r\n    for (const auto& [k, v] : m_map) {\r\n        out += k + \": \" + v + \"\\r\\n\";\r\n    }\r\n```",
      "created_at": "2025-04-21T16:11:56Z",
      "updated_at": "2025-04-21T16:14:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2052664896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052664896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 840,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062566402",
      "pull_request_review_id": 2797567891,
      "id": 2062566402,
      "node_id": "PRRC_kwDOABII58568EQC",
      "diff_hunk": "@@ -906,6 +906,24 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     return true;\n }\n \n+bool HTTPClient::ReadRequest(std::unique_ptr<HTTPRequest>& req)\n+{\n+    LineReader reader(m_recv_buffer, MAX_HEADERS_SIZE);\n+\n+    if (!req->LoadControlData(reader)) return false;\n+    if (!req->LoadHeaders(reader)) return false;\n+    if (!req->LoadBody(reader)) return false;\n+\n+    // Remove the bytes read out of the buffer.\n+    // If one of the above calls throws an error, the caller must\n+    // catch it and disconnect the client.\n+    m_recv_buffer.erase(",
      "path": "src/httpserver.cpp",
      "position": 734,
      "original_position": 15,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "482382bd1490fa3e0bdf0e82497a583dafd80a45",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: maybe it's better to return a `std::span` from `m_recv_buffer` to avoid a copy here.",
      "created_at": "2025-04-27T08:49:01Z",
      "updated_at": "2025-04-27T09:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062566402",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062566402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 643,
      "original_line": 643,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062569706",
      "pull_request_review_id": 2797567891,
      "id": 2062569706,
      "node_id": "PRRC_kwDOABII58568FDq",
      "diff_hunk": "@@ -940,6 +941,92 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)",
      "path": "src/httpserver.cpp",
      "position": 584,
      "original_position": 12,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would it be possible to allow writing a reply composed of several `span<byte>`?\r\nIt should allow sending while serializing a response object.",
      "created_at": "2025-04-27T09:02:51Z",
      "updated_at": "2025-04-27T09:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062569706",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062569706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 531,
      "original_line": 531,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062570060",
      "pull_request_review_id": 2797567891,
      "id": 2062570060,
      "node_id": "PRRC_kwDOABII58568FJM",
      "diff_hunk": "@@ -940,6 +941,92 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)\n+{\n+    HTTPResponse res;\n+\n+    // Some response headers are determined in advance and stored in the request\n+    res.m_headers = std::move(m_response_headers);\n+\n+    // Response version matches request version\n+    res.m_version_major = m_version_major;\n+    res.m_version_minor = m_version_minor;\n+\n+    // Add response code and look up reason string\n+    res.m_status = status;\n+    res.m_reason = HTTPReason.find(status)->second;\n+\n+    // See libevent evhttp_response_needs_body()\n+    // Response headers are different if no body is needed\n+    bool needs_body{status != HTTP_NO_CONTENT && (status < 100 || status >= 200)};\n+\n+    // See libevent evhttp_make_header_response()\n+    // Expected response headers depend on protocol version\n+    if (m_version_major == 1) {\n+        // HTTP/1.0\n+        if (m_version_minor == 0) {\n+            auto connection_header{m_headers.Find(\"Connection\")};\n+            if (connection_header && ToLower(connection_header.value()) == \"keep-alive\") {\n+                res.m_headers.Write(\"Connection\", \"keep-alive\");\n+                res.m_keep_alive = true;\n+            }\n+        }\n+\n+        // HTTP/1.1\n+        if (m_version_minor >= 1) {\n+            const int64_t now_seconds{TicksSinceEpoch<std::chrono::seconds>(NodeClock::now())};\n+            res.m_headers.Write(\"Date\", FormatRFC7231DateTime(now_seconds));\n+\n+            if (needs_body) {\n+                res.m_headers.Write(\"Content-Length\", strprintf(\"%d\", reply_body.size()));\n+            }\n+\n+            // Default for HTTP/1.1\n+            res.m_keep_alive = true;\n+        }\n+    }\n+\n+    if (needs_body && !res.m_headers.Find(\"Content-Type\")) {\n+        // Default type from libevent evhttp_new_object()\n+        res.m_headers.Write(\"Content-Type\", \"text/html; charset=ISO-8859-1\");\n+    }\n+\n+    auto connection_header{m_headers.Find(\"Connection\")};\n+    if (connection_header && ToLower(connection_header.value()) == \"close\") {\n+        // Might not exist already but we need to replace it, not append to it\n+        res.m_headers.Remove(\"Connection\");\n+        res.m_headers.Write(\"Connection\", \"close\");\n+        res.m_keep_alive = false;\n+    }\n+\n+    // Serialize the response headers\n+    const std::string headers{res.StringifyHeaders()};\n+    const auto headers_bytes{std::as_bytes(std::span(headers.begin(), headers.end()))};\n+\n+    // Fill the send buffer with the complete serialized response headers + body\n+    {\n+        LOCK(m_client->m_send_mutex);\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), headers_bytes.begin(), headers_bytes.end());\n+\n+        // We've been using std::span up until now but it is finally time to copy\n+        // data. The original data will go out of scope when WriteReply() returns.\n+        // This is analogous to the memcpy() in libevent's evbuffer_add()\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), reply_body.begin(), reply_body.end());",
      "path": "src/httpserver.cpp",
      "position": 687,
      "original_position": 82,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe use a list of buffers (instead a single FIFO buffer)?",
      "created_at": "2025-04-27T09:04:42Z",
      "updated_at": "2025-04-27T09:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062570060",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062570060"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 605,
      "original_line": 605,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062572600",
      "pull_request_review_id": 2797567891,
      "id": 2062572600,
      "node_id": "PRRC_kwDOABII58568Fw4",
      "diff_hunk": "@@ -266,6 +266,15 @@ class HTTPRequest\n     bool LoadControlData(LineReader& reader);\n     bool LoadHeaders(LineReader& reader);\n     bool LoadBody(LineReader& reader);\n+\n+    // Response headers may be set in advance before response body is known\n+    HTTPHeaders m_response_headers;\n+    void WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body = {});\n+    void WriteReply(HTTPStatusCode status, const char* reply_body) {\n+        auto reply_body_view = std::string_view(reply_body);\n+        std::span<const std::byte> byte_span(reinterpret_cast<const std::byte*>(reply_body_view.data()), reply_body_view.size());",
      "path": "src/httpserver.h",
      "position": null,
      "original_position": 10,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: can be simplified using\r\n```c++\r\n    void WriteReply(HTTPStatusCode status, std::string_view reply_body_view)\r\n    {\r\n        WriteReply(status, std::as_bytes(std::span{reply_body_view}));\r\n    }\r\n```",
      "created_at": "2025-04-27T09:16:19Z",
      "updated_at": "2025-04-27T09:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062572600",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062572600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062573530",
      "pull_request_review_id": 2797567891,
      "id": 2062573530,
      "node_id": "PRRC_kwDOABII58568F_a",
      "diff_hunk": "@@ -27,168 +34,316 @@ static const int DEFAULT_HTTP_WORKQUEUE=64;\n \n static const int DEFAULT_HTTP_SERVER_TIMEOUT=30;\n \n-struct evhttp_request;\n-struct event_base;\n-class CService;\n-class HTTPRequest;\n+enum HTTPRequestMethod {\n+    UNKNOWN,\n+    GET,\n+    POST,\n+    HEAD,\n+    PUT\n+};\n \n-/** Initialize HTTP server.\n- * Call this before RegisterHTTPHandler or EventBase().\n- */\n-bool InitHTTPServer(const util::SignalInterrupt& interrupt);\n-/** Start HTTP server.\n- * This is separate from InitHTTPServer to give users race-condition-free time\n- * to register their handlers between InitHTTPServer and StartHTTPServer.\n+/** Event handler closure.\n  */\n-void StartHTTPServer();\n-/** Interrupt HTTP server threads */\n-void InterruptHTTPServer();\n-/** Stop HTTP server */\n-void StopHTTPServer();\n+class HTTPClosure\n+{\n+public:\n+    virtual void operator()() = 0;\n+    virtual ~HTTPClosure() = default;\n+};\n \n-/** Change logging level for libevent. */\n-void UpdateHTTPServerLogging(bool enable);\n+namespace http_bitcoin {\n+using util::LineReader;\n+using NodeId = SockMan::Id;\n \n-/** Handler for requests to a certain HTTP path */\n-typedef std::function<bool(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n-/** Register handler for prefix.\n- * If multiple handlers match a prefix, the first-registered one will\n- * be invoked.\n- */\n-void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler);\n-/** Unregister handler for prefix */\n-void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch);\n+// shortest valid request line, used by libevent in evhttp_parse_request_line()\n+static const size_t MIN_REQUEST_LINE_LENGTH{strlen(\"GET / HTTP/1.0\")};\n+// maximum size of http request (request line + headers)\n+// see https://github.com/bitcoin/bitcoin/issues/6425\n+static const size_t MAX_HEADERS_SIZE{8192};\n \n-/** Return evhttp event base. This can be used by submodules to\n- * queue timers or custom events.\n- */\n-struct event_base* EventBase();\n+class HTTPHeaders\n+{\n+public:\n+    std::optional<std::string> Find(const std::string key) const;\n+    void Write(const std::string key, const std::string value);\n+    void Remove(const std::string key);\n+    bool Read(util::LineReader& reader);\n+    std::string Stringify() const;\n+\n+private:\n+    std::map<std::string, std::string, util::CaseInsensitiveComparator> m_map;\n+};\n+\n+class HTTPResponse\n+{\n+public:\n+    int m_version_major;\n+    int m_version_minor;\n+    HTTPStatusCode m_status;\n+    std::string m_reason;\n+    HTTPHeaders m_headers;\n+    std::vector<std::byte> m_body;\n+    bool m_keep_alive{false};\n+\n+    std::string StringifyHeaders() const;\n+};\n+\n+class HTTPClient;\n \n-/** In-flight HTTP request.\n- * Thin C++ wrapper around evhttp_request.\n- */\n class HTTPRequest\n {\n-private:\n-    struct evhttp_request* req;\n-    const util::SignalInterrupt& m_interrupt;\n-    bool replySent;\n+public:\n+    std::string m_method;\n+    std::string m_target;\n+    // Default protocol version is used by error responses to unreadable requests\n+    int m_version_major{1};\n+    int m_version_minor{1};\n+    HTTPHeaders m_headers;\n+    std::string m_body;\n+\n+    // Keep a pointer to the client that made the request so\n+    // we know who to respond to.\n+    std::shared_ptr<HTTPClient> m_client;\n+    explicit HTTPRequest(std::shared_ptr<HTTPClient> client) : m_client(client) {};\n+    // Null client for unit tests\n+    explicit HTTPRequest() : m_client(nullptr) {};\n+\n+    // Readers return false if they need more data from the\n+    // socket to parse properly. They throw errors if\n+    // the data is invalid.\n+    bool LoadControlData(LineReader& reader);\n+    bool LoadHeaders(LineReader& reader);\n+    bool LoadBody(LineReader& reader);\n \n+    // These methods reimplement the API from http_libevent::HTTPRequest\n+    // for downstream JSONRPC and REST modules.\n+    std::string GetURI() const {return m_target;};\n+    CService GetPeer() const;\n+    HTTPRequestMethod GetRequestMethod() const;\n+    std::optional<std::string> GetQueryParameter(const std::string& key) const;\n+    std::pair<bool, std::string> GetHeader(const std::string& hdr) const;\n+    std::string ReadBody() const {return m_body;};\n+    void WriteHeader(const std::string& hdr, const std::string& value);\n+\n+    // Response headers may be set in advance before response body is known\n+    HTTPHeaders m_response_headers;\n+    void WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body = {});\n+    void WriteReply(HTTPStatusCode status, const char* reply_body)\n+    {\n+        auto reply_body_view = std::string_view(reply_body);\n+        std::span<const std::byte> byte_span(reinterpret_cast<const std::byte*>(reply_body_view.data()), reply_body_view.size());\n+        WriteReply(status, byte_span);\n+    }\n+    void WriteReply(HTTPStatusCode status, const std::string& reply_body)",
      "path": "src/httpserver.h",
      "position": null,
      "original_position": 160,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can be removed if we'll add `WriteReply(HTTPStatusCode status, std::string_view reply_body_view)` (see above).\r\n",
      "created_at": "2025-04-27T09:20:30Z",
      "updated_at": "2025-04-27T09:36:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062573530",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062573530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062578451",
      "pull_request_review_id": 2797582544,
      "id": 2062578451,
      "node_id": "PRRC_kwDOABII58568HMT",
      "diff_hunk": "@@ -243,18 +243,18 @@ static bool InitHTTPAllowList()\n }\n \n /** HTTP request method as string - use for logging only */\n-std::string RequestMethodString(HTTPRequest::RequestMethod m)\n+std::string RequestMethodString(HTTPRequestMethod m)",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "90761d5026285d10ab89494fc44f3225e778d5a8",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```c++\r\nstd::string_view RequestMethodString(HTTPRequestMethod m)\r\n```",
      "created_at": "2025-04-27T09:43:28Z",
      "updated_at": "2025-04-27T11:04:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062578451",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062578451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062578725",
      "pull_request_review_id": 2797582544,
      "id": 2062578725,
      "node_id": "PRRC_kwDOABII58568HQl",
      "diff_hunk": "@@ -941,6 +942,69 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+CService HTTPRequest::GetPeer() const\n+{\n+    return m_client->m_addr;\n+}\n+\n+HTTPRequestMethod HTTPRequest::GetRequestMethod() const\n+{\n+    if (m_method == \"GET\") return HTTPRequestMethod::GET;\n+    if (m_method == \"POST\") return HTTPRequestMethod::POST;\n+    if (m_method == \"HEAD\") return HTTPRequestMethod::HEAD;\n+    if (m_method == \"PUT\") return HTTPRequestMethod::PUT;\n+    return HTTPRequestMethod::UNKNOWN;\n+}\n+\n+std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+{\n+    return GetQueryParameterFromUri(GetURI(), key);\n+}\n+\n+// See libevent http.c evhttp_parse_query_impl()\n+// and https://www.rfc-editor.org/rfc/rfc3986#section-3.4\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key)\n+{\n+    // Handle %XX encoding\n+    std::string decoded_uri{UrlDecode(uri)};\n+\n+    // find query in URI\n+    size_t start = decoded_uri.find('?');\n+    if (start == std::string::npos) return std::nullopt;\n+    size_t end = decoded_uri.find('#', start);\n+    if (end == std::string::npos) {\n+        end = decoded_uri.length();\n+    }\n+    const std::string query{decoded_uri.substr(start + 1, end - start - 1)};\n+    // find requested parameter in query\n+    const std::vector<std::string> params{SplitString(query, \"&\")};",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "b828fa1e29f0baf5c08517512509a0138338bd50",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: wouldn't it copy the substrings?",
      "created_at": "2025-04-27T09:44:58Z",
      "updated_at": "2025-04-27T11:04:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062578725",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062578725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 980,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062578806",
      "pull_request_review_id": 2797582544,
      "id": 2062578806,
      "node_id": "PRRC_kwDOABII58568HR2",
      "diff_hunk": "@@ -941,6 +942,69 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+CService HTTPRequest::GetPeer() const\n+{\n+    return m_client->m_addr;\n+}\n+\n+HTTPRequestMethod HTTPRequest::GetRequestMethod() const\n+{\n+    if (m_method == \"GET\") return HTTPRequestMethod::GET;\n+    if (m_method == \"POST\") return HTTPRequestMethod::POST;\n+    if (m_method == \"HEAD\") return HTTPRequestMethod::HEAD;\n+    if (m_method == \"PUT\") return HTTPRequestMethod::PUT;\n+    return HTTPRequestMethod::UNKNOWN;\n+}\n+\n+std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+{\n+    return GetQueryParameterFromUri(GetURI(), key);\n+}\n+\n+// See libevent http.c evhttp_parse_query_impl()\n+// and https://www.rfc-editor.org/rfc/rfc3986#section-3.4\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key)\n+{\n+    // Handle %XX encoding\n+    std::string decoded_uri{UrlDecode(uri)};\n+\n+    // find query in URI\n+    size_t start = decoded_uri.find('?');\n+    if (start == std::string::npos) return std::nullopt;\n+    size_t end = decoded_uri.find('#', start);\n+    if (end == std::string::npos) {\n+        end = decoded_uri.length();\n+    }\n+    const std::string query{decoded_uri.substr(start + 1, end - start - 1)};\n+    // find requested parameter in query\n+    const std::vector<std::string> params{SplitString(query, \"&\")};\n+    for (const std::string& param : params) {\n+        size_t delim = param.find('=');\n+        if (key == param.substr(0, delim)) {\n+            if (delim == std::string::npos) {\n+                return \"\";\n+            } else {\n+                return param.substr(delim + 1);\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr) const",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "b828fa1e29f0baf5c08517512509a0138338bd50",
      "in_reply_to_id": null,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```\r\nstd::pair<bool, std::string_view> HTTPRequest::GetHeader(const std::string& hdr) const\r\n```\r\n",
      "created_at": "2025-04-27T09:45:32Z",
      "updated_at": "2025-04-27T11:04:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2062578806",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2062578806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 994,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063711938",
      "pull_request_review_id": 2799390114,
      "id": 2063711938,
      "node_id": "PRRC_kwDOABII5857Ab7C",
      "diff_hunk": "@@ -0,0 +1,535 @@\n+// Copyright (c) 2024-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://opensource.org/license/mit/.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <common/sockman.h>\n+#include <logging.h>\n+#include <netbase.h>\n+#include <util/sock.h>\n+#include <util/thread.h>\n+\n+#include <cassert>\n+\n+// The set of sockets cannot be modified while waiting\n+// The sleep time needs to be small to avoid new sockets stalling\n+static constexpr auto SELECT_TIMEOUT{50ms};\n+\n+/** Get the bind address for a socket as CService. */\n+static CService GetBindAddress(const Sock& sock)\n+{\n+    CService addr_bind;\n+    struct sockaddr_storage sockaddr_bind;\n+    socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n+    if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+        addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind, sockaddr_bind_len);\n+    } else {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"getsockname failed\\n\");\n+    }\n+    return addr_bind;\n+}\n+\n+bool SockMan::BindAndStartListening(const CService& to, bilingual_str& err_msg)\n+{\n+    // Create socket for listening for incoming connections\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+    if (!to.GetSockAddr(reinterpret_cast<sockaddr*>(&storage), &len)) {\n+        err_msg = Untranslated(strprintf(\"Bind address family for %s not supported\", to.ToStringAddrPort()));\n+        return false;\n+    }\n+\n+    std::unique_ptr<Sock> sock{CreateSock(to.GetSAFamily(), SOCK_STREAM, IPPROTO_TCP)};\n+    if (!sock) {\n+        err_msg = Untranslated(strprintf(\"Cannot create %s listen socket: %s\",\n+                                         to.ToStringAddrPort(),\n+                                         NetworkErrorString(WSAGetLastError())));\n+        return false;\n+    }\n+\n+    int one{1};\n+\n+    // Allow binding if the port is still in TIME_WAIT state after\n+    // the program was closed and restarted.\n+    if (sock->SetSockOpt(SOL_SOCKET, SO_REUSEADDR, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+        LogPrintLevel(BCLog::NET,\n+                      BCLog::Level::Info,\n+                      \"Cannot set SO_REUSEADDR on %s listen socket: %s, continuing anyway\\n\",\n+                      to.ToStringAddrPort(),\n+                      NetworkErrorString(WSAGetLastError()));\n+    }\n+\n+    // some systems don't have IPV6_V6ONLY but are always v6only; others do have the option\n+    // and enable it by default or not. Try to enable it, if possible.\n+    if (to.IsIPv6()) {\n+#ifdef IPV6_V6ONLY\n+        if (sock->SetSockOpt(IPPROTO_IPV6, IPV6_V6ONLY, reinterpret_cast<sockopt_arg_type>(&one), sizeof(one)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_V6ONLY on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+#ifdef WIN32\n+        int prot_level{PROTECTION_LEVEL_UNRESTRICTED};\n+        if (sock->SetSockOpt(IPPROTO_IPV6,\n+                             IPV6_PROTECTION_LEVEL,\n+                             reinterpret_cast<const char*>(&prot_level),\n+                             sizeof(prot_level)) == SOCKET_ERROR) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Info,\n+                          \"Cannot set IPV6_PROTECTION_LEVEL on %s listen socket: %s, continuing anyway\\n\",\n+                          to.ToStringAddrPort(),\n+                          NetworkErrorString(WSAGetLastError()));\n+        }\n+#endif\n+    }\n+\n+    if (sock->Bind(reinterpret_cast<sockaddr*>(&storage), len) == SOCKET_ERROR) {\n+        const int err{WSAGetLastError()};\n+        if (err == WSAEADDRINUSE) {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\"),\n+                                to.ToStringAddrPort(),\n+                                CLIENT_NAME);\n+        } else {\n+            err_msg = strprintf(_(\"Unable to bind to %s on this computer (bind returned error %s)\"),\n+                                to.ToStringAddrPort(),\n+                                NetworkErrorString(err));\n+        }\n+        return false;\n+    }\n+\n+    // Listen for incoming connections\n+    if (sock->Listen(SOMAXCONN) == SOCKET_ERROR) {\n+        err_msg = strprintf(_(\"Cannot listen on %s: %s\"), to.ToStringAddrPort(), NetworkErrorString(WSAGetLastError()));\n+        return false;\n+    }\n+\n+    m_listen.emplace_back(std::move(sock));\n+\n+    return true;\n+}\n+\n+void SockMan::StartSocketsThreads(const Options& options)\n+{\n+    m_thread_socket_handler = std::thread(\n+        &util::TraceThread, options.socket_handler_thread_name, [this] { ThreadSocketHandler(); });\n+\n+    if (options.i2p.has_value()) {\n+        m_i2p_sam_session = std::make_unique<i2p::sam::Session>(\n+            options.i2p->private_key_file, options.i2p->sam_proxy, &interruptNet);\n+\n+        m_thread_i2p_accept =\n+            std::thread(&util::TraceThread, options.i2p->accept_thread_name, [this] { ThreadI2PAccept(); });\n+    }\n+}\n+\n+void SockMan::JoinSocketsThreads()\n+{\n+    if (m_thread_i2p_accept.joinable()) {\n+        m_thread_i2p_accept.join();\n+    }\n+\n+    if (m_thread_socket_handler.joinable()) {\n+        m_thread_socket_handler.join();\n+    }\n+}\n+\n+std::optional<SockMan::Id>\n+SockMan::ConnectAndMakeId(const std::variant<CService, StringHostIntPort>& to,\n+                          bool is_important,\n+                          std::optional<Proxy> proxy,\n+                          bool& proxy_failed,\n+                          CService& me)\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+    AssertLockNotHeld(m_unused_i2p_sessions_mutex);\n+\n+    std::unique_ptr<Sock> sock;\n+    std::unique_ptr<i2p::sam::Session> i2p_transient_session;\n+\n+    Assume(!me.IsValid());\n+\n+    if (std::holds_alternative<CService>(to)) {\n+        const CService& addr_to{std::get<CService>(to)};\n+        if (addr_to.IsI2P()) {\n+            if (!Assume(proxy.has_value())) {\n+                return std::nullopt;\n+            }\n+\n+            i2p::Connection conn;\n+            bool connected{false};\n+\n+            if (m_i2p_sam_session) {\n+                connected = m_i2p_sam_session->Connect(addr_to, conn, proxy_failed);\n+            } else {\n+                {\n+                    LOCK(m_unused_i2p_sessions_mutex);\n+                    if (m_unused_i2p_sessions.empty()) {\n+                        i2p_transient_session = std::make_unique<i2p::sam::Session>(proxy.value(), &interruptNet);\n+                    } else {\n+                        i2p_transient_session.swap(m_unused_i2p_sessions.front());\n+                        m_unused_i2p_sessions.pop();\n+                    }\n+                }\n+                connected = i2p_transient_session->Connect(addr_to, conn, proxy_failed);\n+                if (!connected) {\n+                    LOCK(m_unused_i2p_sessions_mutex);\n+                    if (m_unused_i2p_sessions.size() < MAX_UNUSED_I2P_SESSIONS_SIZE) {\n+                        m_unused_i2p_sessions.emplace(i2p_transient_session.release());\n+                    }\n+                }\n+            }\n+\n+            if (connected) {\n+                sock = std::move(conn.sock);\n+                me = conn.me;\n+            }\n+        } else if (proxy.has_value()) {\n+            sock = ConnectThroughProxy(proxy.value(), addr_to.ToStringAddr(), addr_to.GetPort(), proxy_failed);\n+        } else {\n+            sock = ConnectDirectly(addr_to, is_important);\n+        }\n+    } else {\n+        if (!Assume(proxy.has_value())) {\n+            return std::nullopt;\n+        }\n+\n+        const auto& hostport{std::get<StringHostIntPort>(to)};\n+\n+        bool dummy_proxy_failed;\n+        sock = ConnectThroughProxy(proxy.value(), hostport.host, hostport.port, dummy_proxy_failed);\n+    }\n+\n+    if (!sock) {\n+        return std::nullopt;\n+    }\n+\n+    if (!me.IsValid()) {\n+        me = GetBindAddress(*sock);\n+    }\n+\n+    const Id id{GetNewId()};\n+\n+    {\n+        LOCK(m_connected_mutex);\n+        m_connected.emplace(id, std::make_shared<ConnectionSockets>(std::move(sock),\n+                                                                    std::move(i2p_transient_session)));\n+    }\n+\n+    return id;\n+}\n+\n+bool SockMan::CloseConnection(Id id)\n+{\n+    LOCK(m_connected_mutex);\n+    return m_connected.erase(id) > 0;\n+}\n+\n+ssize_t SockMan::SendBytes(Id id,\n+                           std::span<const unsigned char> data,\n+                           bool will_send_more,\n+                           std::string& errmsg) const\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    if (data.empty()) {\n+        return 0;\n+    }\n+\n+    auto sockets{GetConnectionSockets(id)};\n+    if (!sockets) {\n+        // Bail out immediately and just leave things in the caller's send queue.\n+        return 0;\n+    }\n+\n+    int flags{MSG_NOSIGNAL | MSG_DONTWAIT};\n+#ifdef MSG_MORE\n+    if (will_send_more) {\n+        flags |= MSG_MORE;\n+    }\n+#endif\n+\n+    const ssize_t sent{WITH_LOCK(\n+        sockets->mutex,\n+        return sockets->sock->Send(reinterpret_cast<const char*>(data.data()), data.size(), flags);)};\n+\n+    if (sent >= 0) {\n+        return sent;\n+    }\n+\n+    const int err{WSAGetLastError()};\n+    if (err == WSAEWOULDBLOCK || err == WSAEMSGSIZE || err == WSAEINTR || err == WSAEINPROGRESS) {\n+        return 0;\n+    }\n+    errmsg = NetworkErrorString(err);\n+    return -1;\n+}\n+\n+void SockMan::StopListening()\n+{\n+    m_listen.clear();\n+}\n+\n+bool SockMan::ShouldTryToSend(Id id) const { return true; }\n+\n+bool SockMan::ShouldTryToRecv(Id id) const { return true; }\n+\n+void SockMan::EventIOLoopCompletedForOne(Id id) {}\n+\n+void SockMan::EventIOLoopCompletedForAll() {}\n+\n+void SockMan::EventI2PStatus(const CService&, I2PStatus) {}\n+\n+void SockMan::TestOnlyAddExistentConnection(Id id, std::unique_ptr<Sock>&& sock)\n+{\n+    LOCK(m_connected_mutex);\n+    const auto result{m_connected.emplace(id, std::make_shared<ConnectionSockets>(std::move(sock)))};\n+    assert(result.second);\n+}\n+\n+void SockMan::ThreadI2PAccept()\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    static constexpr auto err_wait_begin = 1s;\n+    static constexpr auto err_wait_cap = 5min;\n+    auto err_wait = err_wait_begin;\n+\n+    i2p::Connection conn;\n+\n+    auto SleepOnFailure = [&]() {\n+        interruptNet.sleep_for(err_wait);\n+        if (err_wait < err_wait_cap) {\n+            err_wait += 1s;\n+        }\n+    };\n+\n+    while (!interruptNet) {\n+\n+        if (!m_i2p_sam_session->Listen(conn)) {\n+            EventI2PStatus(conn.me, SockMan::I2PStatus::STOP_LISTENING);\n+            SleepOnFailure();\n+            continue;\n+        }\n+\n+        EventI2PStatus(conn.me, SockMan::I2PStatus::START_LISTENING);\n+\n+        if (!m_i2p_sam_session->Accept(conn)) {\n+            SleepOnFailure();\n+            continue;\n+        }\n+\n+        Assume(conn.me.IsI2P());\n+        Assume(conn.peer.IsI2P());\n+\n+        NewSockAccepted(std::move(conn.sock), conn.me, conn.peer);\n+\n+        err_wait = err_wait_begin;\n+    }\n+}\n+\n+void SockMan::ThreadSocketHandler()\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    while (!interruptNet) {\n+        EventIOLoopCompletedForAll();\n+\n+        // Check for the readiness of the already connected sockets and the\n+        // listening sockets in one call (\"readiness\" as in poll(2) or\n+        // select(2)). If none are ready, wait for a short while and return\n+        // empty sets.\n+        auto io_readiness{GenerateWaitSockets()};\n+        if (io_readiness.events_per_sock.empty() ||\n+            // WaitMany() may as well be a static method, the context of the first Sock in the vector is not relevant.\n+            !io_readiness.events_per_sock.begin()->first->WaitMany(SELECT_TIMEOUT,\n+                                                                   io_readiness.events_per_sock)) {\n+            interruptNet.sleep_for(SELECT_TIMEOUT);\n+        }\n+\n+        // Service (send/receive) each of the already connected sockets.\n+        SocketHandlerConnected(io_readiness);\n+\n+        // Accept new connections from listening sockets.\n+        SocketHandlerListening(io_readiness.events_per_sock);\n+    }\n+}\n+\n+std::unique_ptr<Sock> SockMan::AcceptConnection(const Sock& listen_sock, CService& addr)\n+{\n+    sockaddr_storage storage;\n+    socklen_t len{sizeof(storage)};\n+\n+    auto sock{listen_sock.Accept(reinterpret_cast<sockaddr*>(&storage), &len)};\n+\n+    if (!sock) {\n+        const int err{WSAGetLastError()};\n+        if (err != WSAEWOULDBLOCK) {\n+            LogPrintLevel(BCLog::NET,\n+                          BCLog::Level::Error,\n+                          \"Cannot accept new connection: %s\\n\",\n+                          NetworkErrorString(err));\n+        }\n+        return {};\n+    }\n+\n+    if (!addr.SetSockAddr(reinterpret_cast<sockaddr*>(&storage), len)) {\n+        LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Unknown socket family\\n\");\n+    }\n+\n+    return sock;\n+}\n+\n+void SockMan::NewSockAccepted(std::unique_ptr<Sock>&& sock, const CService& me, const CService& them)\n+{\n+    AssertLockNotHeld(m_connected_mutex);\n+\n+    if (!sock->IsSelectable()) {\n+        LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", them.ToStringAddrPort());\n+        return;\n+    }\n+\n+    // According to the internet TCP_NODELAY is not carried into accepted sockets\n+    // on all platforms.  Set it again here just to be sure.",
      "path": "src/common/sockman.cpp",
      "position": 396,
      "original_position": 396,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "cfe5eba4463ff289b46ba0b3f4708f7cd3f1e9fe",
      "in_reply_to_id": 2051985554,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This comment may need to be applied upstream in https://github.com/bitcoin/bitcoin/pull/30988\r\n\r\nFWIW, the `Sockman` backend might not be what we end up going with, as @theuni and I are considering an alternative.",
      "created_at": "2025-04-28T13:53:26Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063711938",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063711938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 396,
      "original_line": 396,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063725962",
      "pull_request_review_id": 2799390114,
      "id": 2063725962,
      "node_id": "PRRC_kwDOABII5857AfWK",
      "diff_hunk": "@@ -243,18 +243,18 @@ static bool InitHTTPAllowList()\n }\n \n /** HTTP request method as string - use for logging only */\n-std::string RequestMethodString(HTTPRequest::RequestMethod m)\n+std::string RequestMethodString(HTTPRequestMethod m)",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "90761d5026285d10ab89494fc44f3225e778d5a8",
      "in_reply_to_id": 2062578451,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2025-04-28T13:59:39Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063725962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063725962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063753329",
      "pull_request_review_id": 2799390114,
      "id": 2063753329,
      "node_id": "PRRC_kwDOABII5857AmBx",
      "diff_hunk": "@@ -941,6 +942,69 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+CService HTTPRequest::GetPeer() const\n+{\n+    return m_client->m_addr;\n+}\n+\n+HTTPRequestMethod HTTPRequest::GetRequestMethod() const\n+{\n+    if (m_method == \"GET\") return HTTPRequestMethod::GET;\n+    if (m_method == \"POST\") return HTTPRequestMethod::POST;\n+    if (m_method == \"HEAD\") return HTTPRequestMethod::HEAD;\n+    if (m_method == \"PUT\") return HTTPRequestMethod::PUT;\n+    return HTTPRequestMethod::UNKNOWN;\n+}\n+\n+std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+{\n+    return GetQueryParameterFromUri(GetURI(), key);\n+}\n+\n+// See libevent http.c evhttp_parse_query_impl()\n+// and https://www.rfc-editor.org/rfc/rfc3986#section-3.4\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key)\n+{\n+    // Handle %XX encoding\n+    std::string decoded_uri{UrlDecode(uri)};\n+\n+    // find query in URI\n+    size_t start = decoded_uri.find('?');\n+    if (start == std::string::npos) return std::nullopt;\n+    size_t end = decoded_uri.find('#', start);\n+    if (end == std::string::npos) {\n+        end = decoded_uri.length();\n+    }\n+    const std::string query{decoded_uri.substr(start + 1, end - start - 1)};\n+    // find requested parameter in query\n+    const std::vector<std::string> params{SplitString(query, \"&\")};",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "b828fa1e29f0baf5c08517512509a0138338bd50",
      "in_reply_to_id": 2062578725,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You're right thanks, I haven't been dilligent about using string_view when copying isn't needed. Fixed that here and also in `HTTPRequest::LoadControlData()`",
      "created_at": "2025-04-28T14:12:41Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063753329",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063753329"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 980,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063786403",
      "pull_request_review_id": 2799390114,
      "id": 2063786403,
      "node_id": "PRRC_kwDOABII5857AuGj",
      "diff_hunk": "@@ -941,6 +942,69 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+CService HTTPRequest::GetPeer() const\n+{\n+    return m_client->m_addr;\n+}\n+\n+HTTPRequestMethod HTTPRequest::GetRequestMethod() const\n+{\n+    if (m_method == \"GET\") return HTTPRequestMethod::GET;\n+    if (m_method == \"POST\") return HTTPRequestMethod::POST;\n+    if (m_method == \"HEAD\") return HTTPRequestMethod::HEAD;\n+    if (m_method == \"PUT\") return HTTPRequestMethod::PUT;\n+    return HTTPRequestMethod::UNKNOWN;\n+}\n+\n+std::optional<std::string> HTTPRequest::GetQueryParameter(const std::string& key) const\n+{\n+    return GetQueryParameterFromUri(GetURI(), key);\n+}\n+\n+// See libevent http.c evhttp_parse_query_impl()\n+// and https://www.rfc-editor.org/rfc/rfc3986#section-3.4\n+std::optional<std::string> GetQueryParameterFromUri(const std::string& uri, const std::string& key)\n+{\n+    // Handle %XX encoding\n+    std::string decoded_uri{UrlDecode(uri)};\n+\n+    // find query in URI\n+    size_t start = decoded_uri.find('?');\n+    if (start == std::string::npos) return std::nullopt;\n+    size_t end = decoded_uri.find('#', start);\n+    if (end == std::string::npos) {\n+        end = decoded_uri.length();\n+    }\n+    const std::string query{decoded_uri.substr(start + 1, end - start - 1)};\n+    // find requested parameter in query\n+    const std::vector<std::string> params{SplitString(query, \"&\")};\n+    for (const std::string& param : params) {\n+        size_t delim = param.find('=');\n+        if (key == param.substr(0, delim)) {\n+            if (delim == std::string::npos) {\n+                return \"\";\n+            } else {\n+                return param.substr(delim + 1);\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr) const",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "b828fa1e29f0baf5c08517512509a0138338bd50",
      "in_reply_to_id": 2062578806,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "thanks, for this fix I added a new commit instead of a fixup. The reason is because in the \"story\" of the commits, `GetHeader()` is already defined and used by the legacy HTTP server returning a string, and the goal at this point is to match the exiting API. But we can optimize it after the big \"switch HTTP servers\" commit.",
      "created_at": "2025-04-28T14:28:45Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063786403",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063786403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 994,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063795724",
      "pull_request_review_id": 2799390114,
      "id": 2063795724,
      "node_id": "PRRC_kwDOABII5857AwYM",
      "diff_hunk": "@@ -940,6 +941,92 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)",
      "path": "src/httpserver.cpp",
      "position": 584,
      "original_position": 12,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": 2062569706,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could this be done in a followup? I actually just checked https://github.com/bitcoin/bitcoin/pull/30321 to see why we didn't do this back then -- I remember when that was authored and merged but I didn't realize you were the author!",
      "created_at": "2025-04-28T14:33:38Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063795724",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063795724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 531,
      "original_line": 531,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063873609",
      "pull_request_review_id": 2799390114,
      "id": 2063873609,
      "node_id": "PRRC_kwDOABII5857BDZJ",
      "diff_hunk": "@@ -940,6 +941,92 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)\n+{\n+    HTTPResponse res;\n+\n+    // Some response headers are determined in advance and stored in the request\n+    res.m_headers = std::move(m_response_headers);\n+\n+    // Response version matches request version\n+    res.m_version_major = m_version_major;\n+    res.m_version_minor = m_version_minor;\n+\n+    // Add response code and look up reason string\n+    res.m_status = status;\n+    res.m_reason = HTTPReason.find(status)->second;\n+\n+    // See libevent evhttp_response_needs_body()\n+    // Response headers are different if no body is needed\n+    bool needs_body{status != HTTP_NO_CONTENT && (status < 100 || status >= 200)};\n+\n+    // See libevent evhttp_make_header_response()\n+    // Expected response headers depend on protocol version\n+    if (m_version_major == 1) {\n+        // HTTP/1.0\n+        if (m_version_minor == 0) {\n+            auto connection_header{m_headers.Find(\"Connection\")};\n+            if (connection_header && ToLower(connection_header.value()) == \"keep-alive\") {\n+                res.m_headers.Write(\"Connection\", \"keep-alive\");\n+                res.m_keep_alive = true;\n+            }\n+        }\n+\n+        // HTTP/1.1\n+        if (m_version_minor >= 1) {\n+            const int64_t now_seconds{TicksSinceEpoch<std::chrono::seconds>(NodeClock::now())};\n+            res.m_headers.Write(\"Date\", FormatRFC7231DateTime(now_seconds));\n+\n+            if (needs_body) {\n+                res.m_headers.Write(\"Content-Length\", strprintf(\"%d\", reply_body.size()));\n+            }\n+\n+            // Default for HTTP/1.1\n+            res.m_keep_alive = true;\n+        }\n+    }\n+\n+    if (needs_body && !res.m_headers.Find(\"Content-Type\")) {\n+        // Default type from libevent evhttp_new_object()\n+        res.m_headers.Write(\"Content-Type\", \"text/html; charset=ISO-8859-1\");\n+    }\n+\n+    auto connection_header{m_headers.Find(\"Connection\")};\n+    if (connection_header && ToLower(connection_header.value()) == \"close\") {\n+        // Might not exist already but we need to replace it, not append to it\n+        res.m_headers.Remove(\"Connection\");\n+        res.m_headers.Write(\"Connection\", \"close\");\n+        res.m_keep_alive = false;\n+    }\n+\n+    // Serialize the response headers\n+    const std::string headers{res.StringifyHeaders()};\n+    const auto headers_bytes{std::as_bytes(std::span(headers.begin(), headers.end()))};\n+\n+    // Fill the send buffer with the complete serialized response headers + body\n+    {\n+        LOCK(m_client->m_send_mutex);\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), headers_bytes.begin(), headers_bytes.end());\n+\n+        // We've been using std::span up until now but it is finally time to copy\n+        // data. The original data will go out of scope when WriteReply() returns.\n+        // This is analogous to the memcpy() in libevent's evbuffer_add()\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), reply_body.begin(), reply_body.end());",
      "path": "src/httpserver.cpp",
      "position": 687,
      "original_position": 82,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": 2062570060,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't understand -- would that be an optimization? It's not really a FIFO, since we insert at the end of the buffer here but send data from the `begin()` of the buffer in `SendBytesFromBuffer()`",
      "created_at": "2025-04-28T15:06:58Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063873609",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063873609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 605,
      "original_line": 605,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063909861",
      "pull_request_review_id": 2799390114,
      "id": 2063909861,
      "node_id": "PRRC_kwDOABII5857BMPl",
      "diff_hunk": "@@ -906,6 +906,24 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     return true;\n }\n \n+bool HTTPClient::ReadRequest(std::unique_ptr<HTTPRequest>& req)\n+{\n+    LineReader reader(m_recv_buffer, MAX_HEADERS_SIZE);\n+\n+    if (!req->LoadControlData(reader)) return false;\n+    if (!req->LoadHeaders(reader)) return false;\n+    if (!req->LoadBody(reader)) return false;\n+\n+    // Remove the bytes read out of the buffer.\n+    // If one of the above calls throws an error, the caller must\n+    // catch it and disconnect the client.\n+    m_recv_buffer.erase(",
      "path": "src/httpserver.cpp",
      "position": 734,
      "original_position": 15,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "482382bd1490fa3e0bdf0e82497a583dafd80a45",
      "in_reply_to_id": 2062566402,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we'd still want to erase the data after fulfilling the request though (if I'm understanding your comment correctly). Would it make more sense if `m_recv_buffer` was a `std::deque` or something where we can truncate the structure without copying/moving/shifting left?",
      "created_at": "2025-04-28T15:21:22Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063909861",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063909861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 643,
      "original_line": 643,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063946994",
      "pull_request_review_id": 2799390114,
      "id": 2063946994,
      "node_id": "PRRC_kwDOABII5857BVTy",
      "diff_hunk": "@@ -266,6 +266,15 @@ class HTTPRequest\n     bool LoadControlData(LineReader& reader);\n     bool LoadHeaders(LineReader& reader);\n     bool LoadBody(LineReader& reader);\n+\n+    // Response headers may be set in advance before response body is known\n+    HTTPHeaders m_response_headers;\n+    void WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body = {});\n+    void WriteReply(HTTPStatusCode status, const char* reply_body) {\n+        auto reply_body_view = std::string_view(reply_body);\n+        std::span<const std::byte> byte_span(reinterpret_cast<const std::byte*>(reply_body_view.data()), reply_body_view.size());",
      "path": "src/httpserver.h",
      "position": null,
      "original_position": 10,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": 2062572600,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "awesome thanks",
      "created_at": "2025-04-28T15:36:34Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063946994",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063946994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063947203",
      "pull_request_review_id": 2799390114,
      "id": 2063947203,
      "node_id": "PRRC_kwDOABII5857BVXD",
      "diff_hunk": "@@ -27,168 +34,316 @@ static const int DEFAULT_HTTP_WORKQUEUE=64;\n \n static const int DEFAULT_HTTP_SERVER_TIMEOUT=30;\n \n-struct evhttp_request;\n-struct event_base;\n-class CService;\n-class HTTPRequest;\n+enum HTTPRequestMethod {\n+    UNKNOWN,\n+    GET,\n+    POST,\n+    HEAD,\n+    PUT\n+};\n \n-/** Initialize HTTP server.\n- * Call this before RegisterHTTPHandler or EventBase().\n- */\n-bool InitHTTPServer(const util::SignalInterrupt& interrupt);\n-/** Start HTTP server.\n- * This is separate from InitHTTPServer to give users race-condition-free time\n- * to register their handlers between InitHTTPServer and StartHTTPServer.\n+/** Event handler closure.\n  */\n-void StartHTTPServer();\n-/** Interrupt HTTP server threads */\n-void InterruptHTTPServer();\n-/** Stop HTTP server */\n-void StopHTTPServer();\n+class HTTPClosure\n+{\n+public:\n+    virtual void operator()() = 0;\n+    virtual ~HTTPClosure() = default;\n+};\n \n-/** Change logging level for libevent. */\n-void UpdateHTTPServerLogging(bool enable);\n+namespace http_bitcoin {\n+using util::LineReader;\n+using NodeId = SockMan::Id;\n \n-/** Handler for requests to a certain HTTP path */\n-typedef std::function<bool(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n-/** Register handler for prefix.\n- * If multiple handlers match a prefix, the first-registered one will\n- * be invoked.\n- */\n-void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler);\n-/** Unregister handler for prefix */\n-void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch);\n+// shortest valid request line, used by libevent in evhttp_parse_request_line()\n+static const size_t MIN_REQUEST_LINE_LENGTH{strlen(\"GET / HTTP/1.0\")};\n+// maximum size of http request (request line + headers)\n+// see https://github.com/bitcoin/bitcoin/issues/6425\n+static const size_t MAX_HEADERS_SIZE{8192};\n \n-/** Return evhttp event base. This can be used by submodules to\n- * queue timers or custom events.\n- */\n-struct event_base* EventBase();\n+class HTTPHeaders\n+{\n+public:\n+    std::optional<std::string> Find(const std::string key) const;\n+    void Write(const std::string key, const std::string value);\n+    void Remove(const std::string key);\n+    bool Read(util::LineReader& reader);\n+    std::string Stringify() const;\n+\n+private:\n+    std::map<std::string, std::string, util::CaseInsensitiveComparator> m_map;\n+};\n+\n+class HTTPResponse\n+{\n+public:\n+    int m_version_major;\n+    int m_version_minor;\n+    HTTPStatusCode m_status;\n+    std::string m_reason;\n+    HTTPHeaders m_headers;\n+    std::vector<std::byte> m_body;\n+    bool m_keep_alive{false};\n+\n+    std::string StringifyHeaders() const;\n+};\n+\n+class HTTPClient;\n \n-/** In-flight HTTP request.\n- * Thin C++ wrapper around evhttp_request.\n- */\n class HTTPRequest\n {\n-private:\n-    struct evhttp_request* req;\n-    const util::SignalInterrupt& m_interrupt;\n-    bool replySent;\n+public:\n+    std::string m_method;\n+    std::string m_target;\n+    // Default protocol version is used by error responses to unreadable requests\n+    int m_version_major{1};\n+    int m_version_minor{1};\n+    HTTPHeaders m_headers;\n+    std::string m_body;\n+\n+    // Keep a pointer to the client that made the request so\n+    // we know who to respond to.\n+    std::shared_ptr<HTTPClient> m_client;\n+    explicit HTTPRequest(std::shared_ptr<HTTPClient> client) : m_client(client) {};\n+    // Null client for unit tests\n+    explicit HTTPRequest() : m_client(nullptr) {};\n+\n+    // Readers return false if they need more data from the\n+    // socket to parse properly. They throw errors if\n+    // the data is invalid.\n+    bool LoadControlData(LineReader& reader);\n+    bool LoadHeaders(LineReader& reader);\n+    bool LoadBody(LineReader& reader);\n \n+    // These methods reimplement the API from http_libevent::HTTPRequest\n+    // for downstream JSONRPC and REST modules.\n+    std::string GetURI() const {return m_target;};\n+    CService GetPeer() const;\n+    HTTPRequestMethod GetRequestMethod() const;\n+    std::optional<std::string> GetQueryParameter(const std::string& key) const;\n+    std::pair<bool, std::string> GetHeader(const std::string& hdr) const;\n+    std::string ReadBody() const {return m_body;};\n+    void WriteHeader(const std::string& hdr, const std::string& value);\n+\n+    // Response headers may be set in advance before response body is known\n+    HTTPHeaders m_response_headers;\n+    void WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body = {});\n+    void WriteReply(HTTPStatusCode status, const char* reply_body)\n+    {\n+        auto reply_body_view = std::string_view(reply_body);\n+        std::span<const std::byte> byte_span(reinterpret_cast<const std::byte*>(reply_body_view.data()), reply_body_view.size());\n+        WriteReply(status, byte_span);\n+    }\n+    void WriteReply(HTTPStatusCode status, const std::string& reply_body)",
      "path": "src/httpserver.h",
      "position": null,
      "original_position": 160,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "6a6285d268fc387db7dcaaeae736ac5ca502392d",
      "in_reply_to_id": 2062573530,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 ",
      "created_at": "2025-04-28T15:36:40Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063947203",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063947203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063952597",
      "pull_request_review_id": 2799390114,
      "id": 2063952597,
      "node_id": "PRRC_kwDOABII5857BWrV",
      "diff_hunk": "@@ -497,3 +497,10 @@ std::optional<uint64_t> ParseByteUnits(std::string_view str, ByteUnit default_mu\n     }\n     return *parsed_num * unit_amount;\n }\n+\n+std::vector<std::byte> StringToBuffer(const std::string& str)\n+{\n+    return std::vector<std::byte>(",
      "path": "src/util/strencodings.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": 2051998964,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Great thanks, done.",
      "created_at": "2025-04-28T15:38:54Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063952597",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063952597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063962062",
      "pull_request_review_id": 2799390114,
      "id": 2063962062,
      "node_id": "PRRC_kwDOABII5857BY_O",
      "diff_hunk": "@@ -13,4 +13,42 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n     if (search.empty()) return;\n     in_out = std::regex_replace(in_out, std::regex(search), substitute);\n }\n+\n+LineReader::LineReader(std::span<const std::byte> buffer, size_t max_read)\n+    : start(buffer.begin()), end(buffer.end()), max_read(max_read), it(buffer.begin()) {}\n+\n+std::optional<std::string> LineReader::ReadLine()\n+{\n+    if (it == end) {\n+        return std::nullopt;\n+    }\n+\n+    auto line_start = it;\n+    std::string line{};\n+    while (it != end) {\n+        char c = static_cast<char>(*it);\n+        line += c;",
      "path": "src/util/string.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": 2052024440,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "awesome, done",
      "created_at": "2025-04-28T15:43:02Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2063962062",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2063962062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064155842",
      "pull_request_review_id": 2799390114,
      "id": 2064155842,
      "node_id": "PRRC_kwDOABII5857CITC",
      "diff_hunk": "@@ -13,4 +13,42 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n     if (search.empty()) return;\n     in_out = std::regex_replace(in_out, std::regex(search), substitute);\n }\n+\n+LineReader::LineReader(std::span<const std::byte> buffer, size_t max_read)\n+    : start(buffer.begin()), end(buffer.end()), max_read(max_read), it(buffer.begin()) {}\n+\n+std::optional<std::string> LineReader::ReadLine()\n+{\n+    if (it == end) {\n+        return std::nullopt;\n+    }\n+\n+    auto line_start = it;\n+    std::string line{};\n+    while (it != end) {\n+        char c = static_cast<char>(*it);\n+        line += c;\n+        ++it;\n+        if (c == '\\n') break;\n+        if ((size_t)std::distance(line_start, it) >= max_read) throw std::runtime_error(\"max_read exceeded by LineReader\");\n+    }\n+\n+    line = TrimString(line); // delete trailing \\r and/or \\n",
      "path": "src/util/string.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": 2052025637,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "by internal buffer I assume you mean `m_recv_buffer` which im trying to copy from into the HTTPRequest object, then clear the buffer. I left another response about maybe changing the type of that buffer to reduce unnecessary copies, but am going to leave it alone for this current rebase. What I did here though was swap out `TrimString()` with `TrimStringView()` so at least that's one less.",
      "created_at": "2025-04-28T17:31:28Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2064155842",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064155842"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064165018",
      "pull_request_review_id": 2799390114,
      "id": 2064165018,
      "node_id": "PRRC_kwDOABII5857CKia",
      "diff_hunk": "@@ -13,4 +13,42 @@ void ReplaceAll(std::string& in_out, const std::string& search, const std::strin\n     if (search.empty()) return;\n     in_out = std::regex_replace(in_out, std::regex(search), substitute);\n }\n+\n+LineReader::LineReader(std::span<const std::byte> buffer, size_t max_read)\n+    : start(buffer.begin()), end(buffer.end()), max_read(max_read), it(buffer.begin()) {}\n+\n+std::optional<std::string> LineReader::ReadLine()\n+{\n+    if (it == end) {\n+        return std::nullopt;\n+    }\n+\n+    auto line_start = it;\n+    std::string line{};\n+    while (it != end) {\n+        char c = static_cast<char>(*it);\n+        line += c;\n+        ++it;\n+        if (c == '\\n') break;\n+        if ((size_t)std::distance(line_start, it) >= max_read) throw std::runtime_error(\"max_read exceeded by LineReader\");\n+    }\n+\n+    line = TrimString(line); // delete trailing \\r and/or \\n\n+    return line;\n+}\n+\n+// Ignores max_read but won't overflow\n+std::string LineReader::ReadLength(size_t len)\n+{\n+    if (len == 0) return \"\";\n+    if (Left() < len) throw std::runtime_error(\"Not enough data in buffer\");\n+    std::string out(reinterpret_cast<const char*>(&(*it)), len);",
      "path": "src/util/string.cpp",
      "position": 33,
      "original_position": 33,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "a1e151c77469574ca61817b611d360f50d44da38",
      "in_reply_to_id": 2052027205,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I addressed this already by taking your suggestion here https://github.com/bitcoin/bitcoin/pull/32061/files#r2052024440",
      "created_at": "2025-04-28T17:36:51Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2064165018",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064165018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064167023",
      "pull_request_review_id": 2799390114,
      "id": 2064167023,
      "node_id": "PRRC_kwDOABII5857CLBv",
      "diff_hunk": "@@ -116,6 +119,20 @@ std::optional<int64_t> ParseISO8601DateTime(std::string_view str)\n     return int64_t{TicksSinceEpoch<std::chrono::seconds>(tp)};\n }\n \n+std::string FormatRFC7231DateTime(int64_t nTime)\n+{\n+    const std::chrono::sys_seconds secs{std::chrono::seconds{nTime}};\n+    const auto days{std::chrono::floor<std::chrono::days>(secs)};\n+    // 1970-01-01 was a Thursday\n+    std::string weekday{weekdays[(days.time_since_epoch().count() + 4) % 7]};",
      "path": "src/util/time.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "aeb8352a9de844073c10656e53e3d90b573b9eda",
      "in_reply_to_id": 2051989121,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2025-04-28T17:38:19Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2064167023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064167023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064398722",
      "pull_request_review_id": 2799390114,
      "id": 2064398722,
      "node_id": "PRRC_kwDOABII5857DDmC",
      "diff_hunk": "@@ -781,3 +781,69 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n         pathHandlers.erase(i);\n     }\n }\n+\n+\n+namespace http_bitcoin {\n+std::optional<std::string> HTTPHeaders::Find(const std::string key) const\n+{\n+    const auto it = m_map.find(key);\n+    if (it == m_map.end()) return std::nullopt;\n+    return it->second;\n+}\n+\n+void HTTPHeaders::Write(const std::string key, const std::string value)\n+{\n+    // If present, append value to list\n+    const auto existing_value = Find(key);\n+    if (existing_value) {\n+        m_map[key] = existing_value.value() + \", \" + value;\n+    } else {\n+        m_map[key] = value;\n+    }\n+}\n+\n+void HTTPHeaders::Remove(const std::string key)\n+{\n+    m_map.erase(key);\n+}\n+\n+bool HTTPHeaders::Read(util::LineReader& reader)\n+{\n+    // Headers https://httpwg.org/specs/rfc9110.html#rfc.section.6.3\n+    // A sequence of Field Lines https://httpwg.org/specs/rfc9110.html#rfc.section.5.2\n+    do {\n+        auto maybe_line = reader.ReadLine();\n+        if (!maybe_line) return false;\n+        const std::string& line = *maybe_line;\n+\n+        // An empty line indicates end of the headers section https://www.rfc-editor.org/rfc/rfc2616#section-4\n+        if (line.length() == 0) break;\n+\n+        // Header line must have at least one \":\"\n+        // keys are not allowed to have delimiters like \":\" but values are\n+        // https://httpwg.org/specs/rfc9110.html#rfc.section.5.6.2\n+        const size_t pos{line.find(':')};\n+        if (pos == std::string::npos) throw std::runtime_error(\"HTTP header missing colon (:)\");\n+\n+        // Whitespace is optional\n+        std::string key = util::TrimString(line.substr(0, pos));\n+        std::string value = util::TrimString(line.substr(pos + 1));\n+        Write(key, value);\n+    } while (true);\n+\n+    return true;\n+}\n+\n+std::string HTTPHeaders::Stringify() const\n+{\n+    std::string out;\n+    for (auto it = m_map.begin(); it != m_map.end(); ++it) {",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "70d003ca1028458bd6573bcd067e234e009f66c9",
      "in_reply_to_id": 2052664896,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "thanks I'll take it!",
      "created_at": "2025-04-28T19:41:16Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2064398722",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064398722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 840,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064400862",
      "pull_request_review_id": 2799390114,
      "id": 2064400862,
      "node_id": "PRRC_kwDOABII5857DEHe",
      "diff_hunk": "@@ -781,3 +781,69 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n         pathHandlers.erase(i);\n     }\n }\n+\n+\n+namespace http_bitcoin {\n+std::optional<std::string> HTTPHeaders::Find(const std::string key) const",
      "path": "src/httpserver.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "70d003ca1028458bd6573bcd067e234e009f66c9",
      "in_reply_to_id": 2052036849,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done.",
      "created_at": "2025-04-28T19:42:06Z",
      "updated_at": "2025-04-29T13:23:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2064400862",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2064400862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 787,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2067899705",
      "pull_request_review_id": 2805824400,
      "id": 2067899705,
      "node_id": "PRRC_kwDOABII5857QaU5",
      "diff_hunk": "@@ -906,6 +906,24 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     return true;\n }\n \n+bool HTTPClient::ReadRequest(std::unique_ptr<HTTPRequest>& req)\n+{\n+    LineReader reader(m_recv_buffer, MAX_HEADERS_SIZE);\n+\n+    if (!req->LoadControlData(reader)) return false;\n+    if (!req->LoadHeaders(reader)) return false;\n+    if (!req->LoadBody(reader)) return false;\n+\n+    // Remove the bytes read out of the buffer.\n+    // If one of the above calls throws an error, the caller must\n+    // catch it and disconnect the client.\n+    m_recv_buffer.erase(",
      "path": "src/httpserver.cpp",
      "position": 734,
      "original_position": 15,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "482382bd1490fa3e0bdf0e82497a583dafd80a45",
      "in_reply_to_id": 2062566402,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Would it make more sense if m_recv_buffer was a std::deque or something where we can truncate the structure without copying/moving/shifting left?\r\n\r\nSounds good :)",
      "created_at": "2025-04-30T05:53:58Z",
      "updated_at": "2025-04-30T05:53:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2067899705",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2067899705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 643,
      "original_line": 643,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2067900213",
      "pull_request_review_id": 2805825671,
      "id": 2067900213,
      "node_id": "PRRC_kwDOABII5857Qac1",
      "diff_hunk": "@@ -940,6 +941,92 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)",
      "path": "src/httpserver.cpp",
      "position": 584,
      "original_position": 12,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": 2062569706,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, thanks :)",
      "created_at": "2025-04-30T05:54:29Z",
      "updated_at": "2025-04-30T05:54:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2067900213",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2067900213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 531,
      "original_line": 531,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2067902920",
      "pull_request_review_id": 2805829662,
      "id": 2067902920,
      "node_id": "PRRC_kwDOABII5857QbHI",
      "diff_hunk": "@@ -940,6 +941,92 @@ bool HTTPRequest::LoadBody(LineReader& reader)\n     }\n }\n \n+void HTTPRequest::WriteReply(HTTPStatusCode status, std::span<const std::byte> reply_body)\n+{\n+    HTTPResponse res;\n+\n+    // Some response headers are determined in advance and stored in the request\n+    res.m_headers = std::move(m_response_headers);\n+\n+    // Response version matches request version\n+    res.m_version_major = m_version_major;\n+    res.m_version_minor = m_version_minor;\n+\n+    // Add response code and look up reason string\n+    res.m_status = status;\n+    res.m_reason = HTTPReason.find(status)->second;\n+\n+    // See libevent evhttp_response_needs_body()\n+    // Response headers are different if no body is needed\n+    bool needs_body{status != HTTP_NO_CONTENT && (status < 100 || status >= 200)};\n+\n+    // See libevent evhttp_make_header_response()\n+    // Expected response headers depend on protocol version\n+    if (m_version_major == 1) {\n+        // HTTP/1.0\n+        if (m_version_minor == 0) {\n+            auto connection_header{m_headers.Find(\"Connection\")};\n+            if (connection_header && ToLower(connection_header.value()) == \"keep-alive\") {\n+                res.m_headers.Write(\"Connection\", \"keep-alive\");\n+                res.m_keep_alive = true;\n+            }\n+        }\n+\n+        // HTTP/1.1\n+        if (m_version_minor >= 1) {\n+            const int64_t now_seconds{TicksSinceEpoch<std::chrono::seconds>(NodeClock::now())};\n+            res.m_headers.Write(\"Date\", FormatRFC7231DateTime(now_seconds));\n+\n+            if (needs_body) {\n+                res.m_headers.Write(\"Content-Length\", strprintf(\"%d\", reply_body.size()));\n+            }\n+\n+            // Default for HTTP/1.1\n+            res.m_keep_alive = true;\n+        }\n+    }\n+\n+    if (needs_body && !res.m_headers.Find(\"Content-Type\")) {\n+        // Default type from libevent evhttp_new_object()\n+        res.m_headers.Write(\"Content-Type\", \"text/html; charset=ISO-8859-1\");\n+    }\n+\n+    auto connection_header{m_headers.Find(\"Connection\")};\n+    if (connection_header && ToLower(connection_header.value()) == \"close\") {\n+        // Might not exist already but we need to replace it, not append to it\n+        res.m_headers.Remove(\"Connection\");\n+        res.m_headers.Write(\"Connection\", \"close\");\n+        res.m_keep_alive = false;\n+    }\n+\n+    // Serialize the response headers\n+    const std::string headers{res.StringifyHeaders()};\n+    const auto headers_bytes{std::as_bytes(std::span(headers.begin(), headers.end()))};\n+\n+    // Fill the send buffer with the complete serialized response headers + body\n+    {\n+        LOCK(m_client->m_send_mutex);\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), headers_bytes.begin(), headers_bytes.end());\n+\n+        // We've been using std::span up until now but it is finally time to copy\n+        // data. The original data will go out of scope when WriteReply() returns.\n+        // This is analogous to the memcpy() in libevent's evbuffer_add()\n+        m_client->m_send_buffer.insert(m_client->m_send_buffer.end(), reply_body.begin(), reply_body.end());",
      "path": "src/httpserver.cpp",
      "position": 687,
      "original_position": 82,
      "commit_id": "7d301184016a3f59c2e363dff631263cdbe21da0",
      "original_commit_id": "73c3c2e3d3658a2e7d7ba194442a081a5c3e771f",
      "in_reply_to_id": 2062570060,
      "user": {
        "login": "romanz",
        "id": 9900,
        "node_id": "MDQ6VXNlcjk5MDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/romanz",
        "html_url": "https://github.com/romanz",
        "followers_url": "https://api.github.com/users/romanz/followers",
        "following_url": "https://api.github.com/users/romanz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/romanz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/romanz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/romanz/subscriptions",
        "organizations_url": "https://api.github.com/users/romanz/orgs",
        "repos_url": "https://api.github.com/users/romanz/repos",
        "events_url": "https://api.github.com/users/romanz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/romanz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I suggest considering a similar approach to `libevent`'s evbuffers:\r\n\r\n> evbuffers are represented using a linked list of memory chunks, with pointers to the first and last chunk in the chain.\r\n\r\nhttps://libevent.org/doc/buffer_8h.html",
      "created_at": "2025-04-30T05:57:12Z",
      "updated_at": "2025-04-30T05:57:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32061#discussion_r2067902920",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2067902920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32061"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 605,
      "original_line": 605,
      "side": "RIGHT"
    }
  ]
}