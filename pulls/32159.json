{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32159",
    "id": 2425426988,
    "node_id": "PR_kwDOABII586QkRQs",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32159",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32159.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32159.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32159",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32159/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32159/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32159/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/6c694c212f8d898dac9cc1c5637381452c91e79b",
    "number": 32159,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "net, pcp: handle multi-part responses and filter for default route while querying default gateway",
    "user": {
      "login": "willcl-ark",
      "id": 6606587,
      "node_id": "MDQ6VXNlcjY2MDY1ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/willcl-ark",
      "html_url": "https://github.com/willcl-ark",
      "followers_url": "https://api.github.com/users/willcl-ark/followers",
      "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
      "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
      "repos_url": "https://api.github.com/users/willcl-ark/repos",
      "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "...for default route in pcp pinholing.\r\n\r\nCurrently we only make a single recv call, which trucates results from large routing tables, or in the case the kernel may split the message into multiple responses (which may happen with `NLM_F_DUMP`).\r\n\r\nWe also do not filter on the default route. For IPv6, this led to selecting the first route with an `RTA_GATEWAY` attribute, often a non-default route instead of the actual default. This caused PCP port mapping failures because the wrong gateway was used.\r\n\r\nFix both issues by adding multi-part handling of responses and filter for the default route.\r\n\r\nLimit responses to ~ 1MB to prevent any router-based DoS.",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 8285236537,
        "node_id": "LA_kwDOABII588AAAAB7datOQ",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20backport%20(29.x)",
        "name": "Needs backport (29.x)",
        "description": "",
        "color": "dd7200",
        "default": false
      }
    ],
    "created_at": "2025-03-28T14:11:46Z",
    "updated_at": "2025-04-01T04:56:55Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "00c6c5321dfdefdfa26b5e3ceff43cf72b0abde9",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "willcl-ark:pcp-default-multipart",
      "ref": "pcp-default-multipart",
      "sha": "6c694c212f8d898dac9cc1c5637381452c91e79b",
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 164122552,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjQxMjI1NTI=",
        "name": "bitcoin",
        "full_name": "willcl-ark/bitcoin",
        "owner": {
          "login": "willcl-ark",
          "id": 6606587,
          "node_id": "MDQ6VXNlcjY2MDY1ODc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/willcl-ark",
          "html_url": "https://github.com/willcl-ark",
          "followers_url": "https://api.github.com/users/willcl-ark/followers",
          "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
          "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
          "repos_url": "https://api.github.com/users/willcl-ark/repos",
          "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/willcl-ark/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/willcl-ark/bitcoin",
        "archive_url": "https://api.github.com/repos/willcl-ark/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/willcl-ark/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/willcl-ark/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/willcl-ark/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/willcl-ark/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/willcl-ark/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/willcl-ark/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/willcl-ark/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/willcl-ark/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/willcl-ark/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/willcl-ark/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/willcl-ark/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/willcl-ark/bitcoin/events",
        "forks_url": "https://api.github.com/repos/willcl-ark/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/willcl-ark/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/willcl-ark/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/willcl-ark/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/willcl-ark/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/willcl-ark/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/willcl-ark/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/willcl-ark/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/willcl-ark/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/willcl-ark/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/willcl-ark/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/willcl-ark/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/willcl-ark/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/willcl-ark/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/willcl-ark/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/willcl-ark/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:willcl-ark/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/willcl-ark/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/willcl-ark/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/willcl-ark/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/willcl-ark/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/willcl-ark/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/willcl-ark/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/willcl-ark/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/willcl-ark/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/willcl-ark/bitcoin/hooks",
        "svn_url": "https://github.com/willcl-ark/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 276034,
        "default_branch": "master",
        "open_issues_count": 9,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-31T08:04:48Z",
        "created_at": "2019-01-04T15:17:29Z",
        "updated_at": "2025-03-27T14:17:54Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "4c1906a500cacab385b09e780b54271b0addaf4b",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36992,
        "stargazers_count": 82715,
        "watchers_count": 82715,
        "size": 279007,
        "default_branch": "master",
        "open_issues_count": 692,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-31T20:08:21Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-04-01T03:56:25Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32159"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 80,
    "deletions": 33,
    "changed_files": 1,
    "commits": 1,
    "review_comments": 9,
    "comments": 3
  },
  "events": [
    {
      "event": "commented",
      "id": 2761485159,
      "node_id": "IC_kwDOABII586kmOtn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2761485159",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T14:11:49Z",
      "updated_at": "2025-03-28T14:55:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32159.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [laanwj](https://github.com/bitcoin/bitcoin/pull/32159#issuecomment-2761607177) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32159#issuecomment-2761485159",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32159"
    },
    {
      "event": "commented",
      "id": 2761490048,
      "node_id": "IC_kwDOABII586kmP6A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2761490048",
      "actor": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T14:13:47Z",
      "updated_at": "2025-03-28T14:13:47Z",
      "author_association": "MEMBER",
      "body": "cc @laanwj\r\n\r\nThis patch maintains the FreeBSD-style querying/filtering we have currently, but but increases the size of the response processed to a maximum of 1MB.",
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32159#issuecomment-2761490048",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32159"
    },
    {
      "event": "mentioned",
      "id": 17033361094,
      "node_id": "MEE_lADOABII586wNXaAzwAAAAP3RHbG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17033361094",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T14:13:48Z"
    },
    {
      "event": "subscribed",
      "id": 17033361115,
      "node_id": "SE_lADOABII586wNXaAzwAAAAP3RHbb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17033361115",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T14:13:48Z"
    },
    {
      "event": "labeled",
      "id": 17033990107,
      "node_id": "LE_lADOABII586wNXaAzwAAAAP3Tg_b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17033990107",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T14:53:26Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "renamed",
      "id": 17034021122,
      "node_id": "RTE_lADOABII586wNXaAzwAAAAP3TokC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17034021122",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T14:55:34Z",
      "rename": {
        "from": "net, pcp: handle multi-part responses and filter...",
        "to": "net, pcp: handle multi-part responses and filter for default route while querying default gateway"
      }
    },
    {
      "event": "commented",
      "id": 2761607177,
      "node_id": "IC_kwDOABII586kmsgJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2761607177",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T14:55:46Z",
      "updated_at": "2025-03-28T15:07:50Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nAdding 29.0 milestone, doesn't need to block the release but it would be nice to backport it.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32159#issuecomment-2761607177",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32159"
    },
    {
      "event": "milestoned",
      "id": 17034195989,
      "node_id": "MIE_lADOABII586wNXaAzwAAAAP3UTQV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17034195989",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T15:07:01Z",
      "milestone": {
        "title": "29.0"
      }
    },
    {
      "event": "review_requested",
      "id": 17034254171,
      "node_id": "RRE_lADOABII586wNXaAzwAAAAP3Uhdb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17034254171",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T15:10:50Z",
      "requested_reviewer": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 17034264888,
      "node_id": "RRE_lADOABII586wNXaAzwAAAAP3UkE4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17034264888",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T15:11:35Z",
      "requested_reviewer": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2725911811,
      "node_id": "PRR_kwDOABII586ieh0D",
      "url": null,
      "actor": null,
      "commit_id": "c5211f3423477b5799fe6c717d533c232ce1f7e6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32159#pullrequestreview-2725911811",
      "submitted_at": "2025-03-28T15:23:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32159"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZjNjk0YzIxMmY4ZDg5OGRhYzljYzFjNTYzNzM4MTQ1MmM5MWU3OWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c694c212f8d898dac9cc1c5637381452c91e79b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6c694c212f8d898dac9cc1c5637381452c91e79b",
      "tree": {
        "sha": "56e8c000150152cd80d0a4f1ee60a59d63cd8872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56e8c000150152cd80d0a4f1ee60a59d63cd8872"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 56e8c000150152cd80d0a4f1ee60a59d63cd8872\nparent a54baa869814cf14cbeb2cb12dfce683a47f6e73\nauthor willcl-ark <will@256k1.dev> 1743155906 +0000\ncommitter willcl-ark <will@256k1.dev> 1743408079 +0100\n\nnet: handle multi-part responses and filter...\n\n...for default route.\n\nCurrently we only make a single recv call, which trucates results from\nlarge routing tables, or in the case the kernel may split the message\ninto multiple responses (which may happen with NLM_F_DUMP).\n\nWe also do not filter on the default route. For IPv6, this led to\nselecting the first route with an RTA_GATEWAY attribute, often a\nnon-default route instead of the actual default. This caused PCP port\nmapping failures because the wrong gateway was used.\n\nFix these issues and improve code robustness by:\n\n- adding multi-part handling of responses\n- filtering for the default route.\n- limiting responses to 1MB to prevent any router-based DoS.\n- setting the socket to non-blocking mode (for the case no netlink\n  message is recieved).\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEoAg2YPI1onAAzTyBzm7EmUXBfqYFAmfqTIIACgkQzm7EmUXB\nfqaR6BAAuG1LEoq0uFK93fU3rreZeDAvfKm8oR9P/Ci59hpg3+YVNKoT2gDP0V6Y\n26Lv2MJM31AirKVkxWvZF0TucI8ngsBipRINvab0X3mlhdecKADAiaiSdzTCCu7+\ntDY27wYbi/lPPukBe3kiNdGtl0U2eIHSKVQOCwMQo1gucH2DWc/JsxLnqUOs77tT\nGP7O5wkovzzLKYhSk/BIOnf1kKAeBbXTmH8q/ZoCGLbc3iQOqw+5G2+emIUTyI2N\n0LgF2SMZYEIf9WZ4rjkGl9cHkPAmMAR8Uq1VY+SQIPebZ9qA1Spf0jX9/XQend8i\nwuiN371vWniN183LD5g4YlAkH9AHie4x5bGnML7x7Lk8KDdooUJYKF2kB5yWfe+f\nt2rKIrbJcR+oOXK6d9r6uRB8CwgaV7sUN1hQo4u+Ey6bTn2/ymNNblZxX9xTq5Lf\n2Q9EkDP7gmUu4vEL1jdxUU+2VTEo0d4658wRlWIc7ClDUYCbZ3JYDogedTpuQGrd\n9YzUu+x8YsoWrmt9BP04WjJziQkJJ25EtRN/vC0rO/Mri7tvV+xKefIkh9HzM8It\nNtQvbbvcNCODZjusrVk2B15Ogmc9m1Phci8qBrtUJ0NgCsuM6keq8exwUtDY2NGl\n4xBTPzCW31qBsBgFI+ztrG5t7VkM1ad7uU4v+bNZYnMOMSac9DA=\n=L73Z\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a54baa869814cf14cbeb2cb12dfce683a47f6e73",
          "sha": "a54baa869814cf14cbeb2cb12dfce683a47f6e73",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a54baa869814cf14cbeb2cb12dfce683a47f6e73"
        }
      ],
      "message": "net: handle multi-part responses and filter...\n\n...for default route.\n\nCurrently we only make a single recv call, which trucates results from\nlarge routing tables, or in the case the kernel may split the message\ninto multiple responses (which may happen with NLM_F_DUMP).\n\nWe also do not filter on the default route. For IPv6, this led to\nselecting the first route with an RTA_GATEWAY attribute, often a\nnon-default route instead of the actual default. This caused PCP port\nmapping failures because the wrong gateway was used.\n\nFix these issues and improve code robustness by:\n\n- adding multi-part handling of responses\n- filtering for the default route.\n- limiting responses to 1MB to prevent any router-based DoS.\n- setting the socket to non-blocking mode (for the case no netlink\n  message is recieved).",
      "committer": {
        "name": "willcl-ark",
        "email": "will@256k1.dev",
        "date": "2025-03-31T08:01:19Z"
      },
      "author": {
        "name": "willcl-ark",
        "email": "will@256k1.dev",
        "date": "2025-03-28T09:58:26Z"
      },
      "sha": "6c694c212f8d898dac9cc1c5637381452c91e79b"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17052773549,
      "node_id": "HRFPE_lADOABII586wNXaAzwAAAAP4bKyt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17052773549",
      "actor": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6c694c212f8d898dac9cc1c5637381452c91e79b",
      "commit_url": "https://api.github.com/repos/willcl-ark/bitcoin/commits/6c694c212f8d898dac9cc1c5637381452c91e79b",
      "created_at": "2025-03-31T08:04:49Z"
    },
    {
      "event": "reviewed",
      "id": 2729086589,
      "node_id": "PRR_kwDOABII586iqo59",
      "url": null,
      "actor": null,
      "commit_id": "6c694c212f8d898dac9cc1c5637381452c91e79b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Although the code this PR touches isn't compiled on macOS, I did briefly check that things still work there. I also briefly tested on Ubuntu 24.10.\r\n\r\nLeft some inline question to wrap my head around the changes and refresh my memory of the original...",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32159#pullrequestreview-2729086589",
      "submitted_at": "2025-03-31T12:38:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32159"
    },
    {
      "event": "labeled",
      "id": 17067846491,
      "node_id": "LE_lADOABII586wNXaAzwAAAAP5Uqtb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17067846491",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-01T04:56:50Z",
      "label": {
        "name": "Needs backport (29.x)",
        "color": "dd7200"
      }
    },
    {
      "event": "demilestoned",
      "id": 17067847118,
      "node_id": "DEME_lADOABII586wNXaAzwAAAAP5Uq3O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17067847118",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-01T04:56:55Z",
      "milestone": {
        "title": "29.0"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2018881733",
      "pull_request_review_id": 2725911811,
      "id": 2018881733,
      "node_id": "PRRC_kwDOABII5854VbDF",
      "diff_hunk": "@@ -82,42 +86,64 @@ std::optional<CNetAddr> QueryDefaultGatewayImpl(sa_family_t family)\n         return std::nullopt;\n     }\n \n-    // Receive response.\n+    // Receive response(s)\n     char response[4096];\n-    int64_t recv_result;\n-    do {\n-        recv_result = sock->Recv(response, sizeof(response), 0);\n-    } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n-    if (recv_result < 0) {\n-        LogPrintLevel(BCLog::NET, BCLog::Level::Error, \"recv() from netlink socket: %s\\n\", NetworkErrorString(errno));\n-        return std::nullopt;\n-    }\n+    size_t total_bytes_read = 0;\n+    bool done = false;\n+    while (!done) {\n+        int64_t recv_result;\n+        do {\n+            recv_result = sock->Recv(response, sizeof(response), 0);\n+        } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n+        if (recv_result < 0) {\n+            return std::nullopt;\n+        }\n \n-    for (nlmsghdr* hdr = (nlmsghdr*)response; NLMSG_OK(hdr, recv_result); hdr = NLMSG_NEXT(hdr, recv_result)) {\n-        rtmsg* r = (rtmsg*)NLMSG_DATA(hdr);\n-        int remaining_len = RTM_PAYLOAD(hdr);\n-\n-        // Iterate over the attributes.\n-        rtattr *rta_gateway = nullptr;\n-        int scope_id = 0;\n-        for (rtattr* attr = RTM_RTA(r); RTA_OK(attr, remaining_len); attr = RTA_NEXT(attr, remaining_len)) {\n-            if (attr->rta_type == RTA_GATEWAY) {\n-                rta_gateway = attr;\n-            } else if (attr->rta_type == RTA_OIF && sizeof(int) == RTA_PAYLOAD(attr)) {\n-                std::memcpy(&scope_id, RTA_DATA(attr), sizeof(scope_id));\n-            }\n+        total_bytes_read += static_cast<size_t>(recv_result);\n+        if (total_bytes_read > MAX_NETLINK_RESPONSE_SIZE) {\n+            LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Netlink response exceeded size limit (%zu bytes, family=%d)\\n\", MAX_NETLINK_RESPONSE_SIZE, family);\n+            return std::nullopt;\n         }\n \n-        // Found gateway?\n-        if (rta_gateway != nullptr) {\n-            if (family == AF_INET && sizeof(in_addr) == RTA_PAYLOAD(rta_gateway)) {\n-                in_addr gw;\n-                std::memcpy(&gw, RTA_DATA(rta_gateway), sizeof(gw));\n-                return CNetAddr(gw);\n-            } else if (family == AF_INET6 && sizeof(in6_addr) == RTA_PAYLOAD(rta_gateway)) {\n-                in6_addr gw;\n-                std::memcpy(&gw, RTA_DATA(rta_gateway), sizeof(gw));\n-                return CNetAddr(gw, scope_id);\n+        for (nlmsghdr* hdr = (nlmsghdr*)response; NLMSG_OK(hdr, recv_result); hdr = NLMSG_NEXT(hdr, recv_result)) {\n+            if (hdr->nlmsg_type == NLMSG_DONE) {",
      "path": "src/common/netif.cpp",
      "position": 103,
      "original_position": 67,
      "commit_id": "6c694c212f8d898dac9cc1c5637381452c91e79b",
      "original_commit_id": "c5211f3423477b5799fe6c717d533c232ce1f7e6",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is it guaranteed that the reponse to `NLM_F_DUMP` is always multipart? Or do we need to check `nlmsg_flags` for `NLM_F_MULTI`, and if not, break after the first packet?\r\n\r\nThis is not clear to me from the documentation:\r\n- https://man7.org/linux/man-pages/man7/netlink.7.html\r\n- https://man7.org/linux/man-pages/man7/rtnetlink.7.html\r\n\r\n",
      "created_at": "2025-03-28T15:23:30Z",
      "updated_at": "2025-03-28T15:23:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32159#discussion_r2018881733",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2018881733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32159"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2019761455",
      "pull_request_review_id": 2727326176,
      "id": 2019761455,
      "node_id": "PRRC_kwDOABII5854Yx0v",
      "diff_hunk": "@@ -82,42 +86,64 @@ std::optional<CNetAddr> QueryDefaultGatewayImpl(sa_family_t family)\n         return std::nullopt;\n     }\n \n-    // Receive response.\n+    // Receive response(s)\n     char response[4096];\n-    int64_t recv_result;\n-    do {\n-        recv_result = sock->Recv(response, sizeof(response), 0);\n-    } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n-    if (recv_result < 0) {\n-        LogPrintLevel(BCLog::NET, BCLog::Level::Error, \"recv() from netlink socket: %s\\n\", NetworkErrorString(errno));\n-        return std::nullopt;\n-    }\n+    size_t total_bytes_read = 0;\n+    bool done = false;\n+    while (!done) {\n+        int64_t recv_result;\n+        do {\n+            recv_result = sock->Recv(response, sizeof(response), 0);\n+        } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n+        if (recv_result < 0) {\n+            return std::nullopt;\n+        }\n \n-    for (nlmsghdr* hdr = (nlmsghdr*)response; NLMSG_OK(hdr, recv_result); hdr = NLMSG_NEXT(hdr, recv_result)) {\n-        rtmsg* r = (rtmsg*)NLMSG_DATA(hdr);\n-        int remaining_len = RTM_PAYLOAD(hdr);\n-\n-        // Iterate over the attributes.\n-        rtattr *rta_gateway = nullptr;\n-        int scope_id = 0;\n-        for (rtattr* attr = RTM_RTA(r); RTA_OK(attr, remaining_len); attr = RTA_NEXT(attr, remaining_len)) {\n-            if (attr->rta_type == RTA_GATEWAY) {\n-                rta_gateway = attr;\n-            } else if (attr->rta_type == RTA_OIF && sizeof(int) == RTA_PAYLOAD(attr)) {\n-                std::memcpy(&scope_id, RTA_DATA(attr), sizeof(scope_id));\n-            }\n+        total_bytes_read += static_cast<size_t>(recv_result);\n+        if (total_bytes_read > MAX_NETLINK_RESPONSE_SIZE) {\n+            LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Netlink response exceeded size limit (%zu bytes, family=%d)\\n\", MAX_NETLINK_RESPONSE_SIZE, family);\n+            return std::nullopt;\n         }\n \n-        // Found gateway?\n-        if (rta_gateway != nullptr) {\n-            if (family == AF_INET && sizeof(in_addr) == RTA_PAYLOAD(rta_gateway)) {\n-                in_addr gw;\n-                std::memcpy(&gw, RTA_DATA(rta_gateway), sizeof(gw));\n-                return CNetAddr(gw);\n-            } else if (family == AF_INET6 && sizeof(in6_addr) == RTA_PAYLOAD(rta_gateway)) {\n-                in6_addr gw;\n-                std::memcpy(&gw, RTA_DATA(rta_gateway), sizeof(gw));\n-                return CNetAddr(gw, scope_id);\n+        for (nlmsghdr* hdr = (nlmsghdr*)response; NLMSG_OK(hdr, recv_result); hdr = NLMSG_NEXT(hdr, recv_result)) {\n+            if (hdr->nlmsg_type == NLMSG_DONE) {",
      "path": "src/common/netif.cpp",
      "position": 103,
      "original_position": 67,
      "commit_id": "6c694c212f8d898dac9cc1c5637381452c91e79b",
      "original_commit_id": "c5211f3423477b5799fe6c717d533c232ce1f7e6",
      "in_reply_to_id": 2018881733,
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think it is, but like you am unsure about what the guarantees of the protocol are here.\r\n\r\nI kind of reverse engineered this looking at miniupnpc and netlink sources, along with an `strace` of `ip route show`, which is where the repeated `recv` calls jumped out to me as a difference between our code and other tools.\r\n\r\nThis approach simply relies on receiving an `NLMSG_DONE` to signal the end of the response and break. This should handle both single and multi-part messages. Here's a snipped sample of `strace -e filter=recvmsg ip route show` on my system:\r\n\r\n<details>\r\n<summary>Details</summary>\r\n\r\n```\r\nrecvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=NULL, iov_len=0}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_TRUNC}, MSG_PEEK|MSG_TRUNC) = 2932\r\nrecvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=[[{nlmsg_len=1444, nlmsg_type=RTM_NEWLINK, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1743240135, nlmsg_pid=3248093}, <snip> 0) = 2932\r\nrecvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=NULL, iov_len=0}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_TRUNC}, MSG_PEEK|MSG_TRUNC) = 3384\r\nrecvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=[[{nlmsg_len=1504, nlmsg_type=RTM_NEWLINK, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1743240135, nlmsg_pid=3248093}, <snip> 0) = 3384\r\nrecvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=NULL, iov_len=0}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_TRUNC}, MSG_PEEK|MSG_TRUNC) = 5196\r\nrecvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=[[{nlmsg_len=1488, nlmsg_type=RTM_NEWLINK, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1743240135, nlmsg_pid=3248093}, <snip> 0) = 5196\r\nrecvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=NULL, iov_len=0}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_TRUNC}, MSG_PEEK|MSG_TRUNC) = 20\r\nrecvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=[{nlmsg_len=20, nlmsg_type=NLMSG_DONE, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1743240135, nlmsg_pid=3248093}, 0], iov_len=32768}], msg_iovlen=1, msg_controllen=0, msg_flags=0}, 0) = 20\r\nrecvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=NULL, iov_len=0}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_TRUNC}, MSG_PEEK|MSG_TRUNC) = 424\r\nrecvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=[[{nlmsg_len=76, nlmsg_type=RTM_NEWADDR, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1743240136, nlmsg_pid=3248093}, <snip> 0) = 424\r\nrecvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=NULL, iov_len=0}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_TRUNC}, MSG_PEEK|MSG_TRUNC) = 600\r\nrecvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=[[{nlmsg_len=72, nlmsg_type=RTM_NEWADDR, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1743240136, nlmsg_pid=3248093}, <snip> 0) = 600\r\nrecvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=NULL, iov_len=0}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_TRUNC}, MSG_PEEK|MSG_TRUNC) = 20\r\nrecvmsg(3, {msg_name={sa_family=AF_NETLINK, nl_pid=0, nl_groups=00000000}, msg_namelen=12, msg_iov=[{iov_base=[{nlmsg_len=20, nlmsg_type=NLMSG_DONE, nlmsg_flags=NLM_F_MULTI, nlmsg_seq=1743240136, nlmsg_pid=3248093}, 0], iov_len=32768}], msg_iovlen=1, msg_controllen=0, msg_flags=0}, 0) = 20\r\n```\r\n\r\n</details>\r\n\r\n`NLM_F_MULTI` is indeed set, even in the `NLMSG_DONE` packet.\r\n\r\nOne other thing I did read about, but not implement, is checking of the sequence number on each message to ensure it was meant for our request. But as we only make a single request i thought this should be OK to omit.",
      "created_at": "2025-03-29T09:31:25Z",
      "updated_at": "2025-03-29T09:31:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32159#discussion_r2019761455",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2019761455"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32159"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2019820641",
      "pull_request_review_id": 2727393206,
      "id": 2019820641,
      "node_id": "PRRC_kwDOABII5854ZARh",
      "diff_hunk": "@@ -82,42 +86,64 @@ std::optional<CNetAddr> QueryDefaultGatewayImpl(sa_family_t family)\n         return std::nullopt;\n     }\n \n-    // Receive response.\n+    // Receive response(s)\n     char response[4096];\n-    int64_t recv_result;\n-    do {\n-        recv_result = sock->Recv(response, sizeof(response), 0);\n-    } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n-    if (recv_result < 0) {\n-        LogPrintLevel(BCLog::NET, BCLog::Level::Error, \"recv() from netlink socket: %s\\n\", NetworkErrorString(errno));\n-        return std::nullopt;\n-    }\n+    size_t total_bytes_read = 0;\n+    bool done = false;\n+    while (!done) {\n+        int64_t recv_result;\n+        do {\n+            recv_result = sock->Recv(response, sizeof(response), 0);\n+        } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n+        if (recv_result < 0) {\n+            return std::nullopt;\n+        }\n \n-    for (nlmsghdr* hdr = (nlmsghdr*)response; NLMSG_OK(hdr, recv_result); hdr = NLMSG_NEXT(hdr, recv_result)) {\n-        rtmsg* r = (rtmsg*)NLMSG_DATA(hdr);\n-        int remaining_len = RTM_PAYLOAD(hdr);\n-\n-        // Iterate over the attributes.\n-        rtattr *rta_gateway = nullptr;\n-        int scope_id = 0;\n-        for (rtattr* attr = RTM_RTA(r); RTA_OK(attr, remaining_len); attr = RTA_NEXT(attr, remaining_len)) {\n-            if (attr->rta_type == RTA_GATEWAY) {\n-                rta_gateway = attr;\n-            } else if (attr->rta_type == RTA_OIF && sizeof(int) == RTA_PAYLOAD(attr)) {\n-                std::memcpy(&scope_id, RTA_DATA(attr), sizeof(scope_id));\n-            }\n+        total_bytes_read += static_cast<size_t>(recv_result);\n+        if (total_bytes_read > MAX_NETLINK_RESPONSE_SIZE) {\n+            LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Netlink response exceeded size limit (%zu bytes, family=%d)\\n\", MAX_NETLINK_RESPONSE_SIZE, family);\n+            return std::nullopt;\n         }\n \n-        // Found gateway?\n-        if (rta_gateway != nullptr) {\n-            if (family == AF_INET && sizeof(in_addr) == RTA_PAYLOAD(rta_gateway)) {\n-                in_addr gw;\n-                std::memcpy(&gw, RTA_DATA(rta_gateway), sizeof(gw));\n-                return CNetAddr(gw);\n-            } else if (family == AF_INET6 && sizeof(in6_addr) == RTA_PAYLOAD(rta_gateway)) {\n-                in6_addr gw;\n-                std::memcpy(&gw, RTA_DATA(rta_gateway), sizeof(gw));\n-                return CNetAddr(gw, scope_id);\n+        for (nlmsghdr* hdr = (nlmsghdr*)response; NLMSG_OK(hdr, recv_result); hdr = NLMSG_NEXT(hdr, recv_result)) {\n+            if (hdr->nlmsg_type == NLMSG_DONE) {",
      "path": "src/common/netif.cpp",
      "position": 103,
      "original_position": 67,
      "commit_id": "6c694c212f8d898dac9cc1c5637381452c91e79b",
      "original_commit_id": "c5211f3423477b5799fe6c717d533c232ce1f7e6",
      "in_reply_to_id": 2018881733,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks!\r\n\r\nThe receive flow [here](https://www.infradead.org/~tgr/libnl/doc/core.html#core_recv) seems to indicate:\r\n- Receive packet\r\n- Process packet\r\n- If `NLM_F_MULTI` is set and the packet is not `NLMSG_DONE`, repeat\r\n\r\nWhat i'm mostly worried about is that the current code will hang if `NLMSG_DONE` never comes, which seems to be the case for non-multi responses, which have one data packet.\r\n\r\nBut it may be that the `NETLINK_ROUTE` response to `RTM_GETROUTE`/`NLM_F_DUMP` is always multi-packet. That empirically seems to be the case even for tiny routing tables.\r\n\r\nLooking at the `ip` source is a good idea. Also we need to verify this with FreeBSD.\r\n\r\n>  But as we only make a single request i thought this should be OK to omit.\r\n\r\nAgree, going that far in checking seems unnecessary. i don't think we need super defensive coding as netlink is a local protocol with the kernel.",
      "created_at": "2025-03-29T14:46:07Z",
      "updated_at": "2025-03-29T14:56:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32159#discussion_r2019820641",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2019820641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32159"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2020591415",
      "pull_request_review_id": 2728531754,
      "id": 2020591415,
      "node_id": "PRRC_kwDOABII5854b8c3",
      "diff_hunk": "@@ -82,42 +86,64 @@ std::optional<CNetAddr> QueryDefaultGatewayImpl(sa_family_t family)\n         return std::nullopt;\n     }\n \n-    // Receive response.\n+    // Receive response(s)\n     char response[4096];\n-    int64_t recv_result;\n-    do {\n-        recv_result = sock->Recv(response, sizeof(response), 0);\n-    } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n-    if (recv_result < 0) {\n-        LogPrintLevel(BCLog::NET, BCLog::Level::Error, \"recv() from netlink socket: %s\\n\", NetworkErrorString(errno));\n-        return std::nullopt;\n-    }\n+    size_t total_bytes_read = 0;\n+    bool done = false;\n+    while (!done) {\n+        int64_t recv_result;\n+        do {\n+            recv_result = sock->Recv(response, sizeof(response), 0);\n+        } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n+        if (recv_result < 0) {\n+            return std::nullopt;\n+        }\n \n-    for (nlmsghdr* hdr = (nlmsghdr*)response; NLMSG_OK(hdr, recv_result); hdr = NLMSG_NEXT(hdr, recv_result)) {\n-        rtmsg* r = (rtmsg*)NLMSG_DATA(hdr);\n-        int remaining_len = RTM_PAYLOAD(hdr);\n-\n-        // Iterate over the attributes.\n-        rtattr *rta_gateway = nullptr;\n-        int scope_id = 0;\n-        for (rtattr* attr = RTM_RTA(r); RTA_OK(attr, remaining_len); attr = RTA_NEXT(attr, remaining_len)) {\n-            if (attr->rta_type == RTA_GATEWAY) {\n-                rta_gateway = attr;\n-            } else if (attr->rta_type == RTA_OIF && sizeof(int) == RTA_PAYLOAD(attr)) {\n-                std::memcpy(&scope_id, RTA_DATA(attr), sizeof(scope_id));\n-            }\n+        total_bytes_read += static_cast<size_t>(recv_result);\n+        if (total_bytes_read > MAX_NETLINK_RESPONSE_SIZE) {\n+            LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Netlink response exceeded size limit (%zu bytes, family=%d)\\n\", MAX_NETLINK_RESPONSE_SIZE, family);\n+            return std::nullopt;\n         }\n \n-        // Found gateway?\n-        if (rta_gateway != nullptr) {\n-            if (family == AF_INET && sizeof(in_addr) == RTA_PAYLOAD(rta_gateway)) {\n-                in_addr gw;\n-                std::memcpy(&gw, RTA_DATA(rta_gateway), sizeof(gw));\n-                return CNetAddr(gw);\n-            } else if (family == AF_INET6 && sizeof(in6_addr) == RTA_PAYLOAD(rta_gateway)) {\n-                in6_addr gw;\n-                std::memcpy(&gw, RTA_DATA(rta_gateway), sizeof(gw));\n-                return CNetAddr(gw, scope_id);\n+        for (nlmsghdr* hdr = (nlmsghdr*)response; NLMSG_OK(hdr, recv_result); hdr = NLMSG_NEXT(hdr, recv_result)) {\n+            if (hdr->nlmsg_type == NLMSG_DONE) {",
      "path": "src/common/netif.cpp",
      "position": 103,
      "original_position": 67,
      "commit_id": "6c694c212f8d898dac9cc1c5637381452c91e79b",
      "original_commit_id": "c5211f3423477b5799fe6c717d533c232ce1f7e6",
      "in_reply_to_id": 2018881733,
      "user": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, that infradead page is very handy!\r\n\r\nI made a few changes in 6c694c212f8d898dac9cc1c5637381452c91e79b based on your thoughts (and the protocol page):\r\n\r\n- set socket to non-blocking mode to avoid hanging if the kernel doesn't send a response\r\n- use a vector to collect all data from multi-part responses\r\n- exit when `recv()` returns 0 (this should handle single-part messages, AFAICT)\r\n\r\nI think relying on receiving no more data from `recv()` to break the receive loop should be as (or perhaps more) robust than checking for the `NLM_F_MULTI` flag and exiting after first receive if it's _not_ set, but curious what you think here?\r\n\r\nIf it would help, I'd be happy to break this into a few smaller commits, as I'm kinda feeling this change contains a few different changes in one in some ways now...",
      "created_at": "2025-03-31T08:18:54Z",
      "updated_at": "2025-03-31T08:18:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32159#discussion_r2020591415",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2020591415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32159"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2020671105",
      "pull_request_review_id": 2728657986,
      "id": 2020671105,
      "node_id": "PRRC_kwDOABII5854cP6B",
      "diff_hunk": "@@ -82,42 +86,64 @@ std::optional<CNetAddr> QueryDefaultGatewayImpl(sa_family_t family)\n         return std::nullopt;\n     }\n \n-    // Receive response.\n+    // Receive response(s)\n     char response[4096];\n-    int64_t recv_result;\n-    do {\n-        recv_result = sock->Recv(response, sizeof(response), 0);\n-    } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n-    if (recv_result < 0) {\n-        LogPrintLevel(BCLog::NET, BCLog::Level::Error, \"recv() from netlink socket: %s\\n\", NetworkErrorString(errno));\n-        return std::nullopt;\n-    }\n+    size_t total_bytes_read = 0;\n+    bool done = false;\n+    while (!done) {\n+        int64_t recv_result;\n+        do {\n+            recv_result = sock->Recv(response, sizeof(response), 0);\n+        } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n+        if (recv_result < 0) {\n+            return std::nullopt;\n+        }\n \n-    for (nlmsghdr* hdr = (nlmsghdr*)response; NLMSG_OK(hdr, recv_result); hdr = NLMSG_NEXT(hdr, recv_result)) {\n-        rtmsg* r = (rtmsg*)NLMSG_DATA(hdr);\n-        int remaining_len = RTM_PAYLOAD(hdr);\n-\n-        // Iterate over the attributes.\n-        rtattr *rta_gateway = nullptr;\n-        int scope_id = 0;\n-        for (rtattr* attr = RTM_RTA(r); RTA_OK(attr, remaining_len); attr = RTA_NEXT(attr, remaining_len)) {\n-            if (attr->rta_type == RTA_GATEWAY) {\n-                rta_gateway = attr;\n-            } else if (attr->rta_type == RTA_OIF && sizeof(int) == RTA_PAYLOAD(attr)) {\n-                std::memcpy(&scope_id, RTA_DATA(attr), sizeof(scope_id));\n-            }\n+        total_bytes_read += static_cast<size_t>(recv_result);\n+        if (total_bytes_read > MAX_NETLINK_RESPONSE_SIZE) {\n+            LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Netlink response exceeded size limit (%zu bytes, family=%d)\\n\", MAX_NETLINK_RESPONSE_SIZE, family);\n+            return std::nullopt;\n         }\n \n-        // Found gateway?\n-        if (rta_gateway != nullptr) {\n-            if (family == AF_INET && sizeof(in_addr) == RTA_PAYLOAD(rta_gateway)) {\n-                in_addr gw;\n-                std::memcpy(&gw, RTA_DATA(rta_gateway), sizeof(gw));\n-                return CNetAddr(gw);\n-            } else if (family == AF_INET6 && sizeof(in6_addr) == RTA_PAYLOAD(rta_gateway)) {\n-                in6_addr gw;\n-                std::memcpy(&gw, RTA_DATA(rta_gateway), sizeof(gw));\n-                return CNetAddr(gw, scope_id);\n+        for (nlmsghdr* hdr = (nlmsghdr*)response; NLMSG_OK(hdr, recv_result); hdr = NLMSG_NEXT(hdr, recv_result)) {\n+            if (hdr->nlmsg_type == NLMSG_DONE) {",
      "path": "src/common/netif.cpp",
      "position": 103,
      "original_position": 67,
      "commit_id": "6c694c212f8d898dac9cc1c5637381452c91e79b",
      "original_commit_id": "c5211f3423477b5799fe6c717d533c232ce1f7e6",
      "in_reply_to_id": 2018881733,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think relying on receiving no more data from recv() to break the receive loop should be as (or perhaps more) robust than checking for the NLM_F_MULTI flag and exiting after first receive if it's not set, but curious what you think here?\r\n\r\nMaybe-is it safe to assume that netlink will never block?\r\n\r\nWe don't want to end up in the same situation as before where we miss data. But due to say, a threading race condition.\r\n\r\ni think the safest thing here is to mimic as closely as possible `ip`'s behavior, as it is the only tool these kind of interfaces tend to be written towards.",
      "created_at": "2025-03-31T09:13:50Z",
      "updated_at": "2025-03-31T09:13:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32159#discussion_r2020671105",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2020671105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32159"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2020674715",
      "pull_request_review_id": 2728664013,
      "id": 2020674715,
      "node_id": "PRRC_kwDOABII5854cQyb",
      "diff_hunk": "@@ -82,42 +86,64 @@ std::optional<CNetAddr> QueryDefaultGatewayImpl(sa_family_t family)\n         return std::nullopt;\n     }\n \n-    // Receive response.\n+    // Receive response(s)\n     char response[4096];\n-    int64_t recv_result;\n-    do {\n-        recv_result = sock->Recv(response, sizeof(response), 0);\n-    } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n-    if (recv_result < 0) {\n-        LogPrintLevel(BCLog::NET, BCLog::Level::Error, \"recv() from netlink socket: %s\\n\", NetworkErrorString(errno));\n-        return std::nullopt;\n-    }\n+    size_t total_bytes_read = 0;\n+    bool done = false;\n+    while (!done) {\n+        int64_t recv_result;\n+        do {\n+            recv_result = sock->Recv(response, sizeof(response), 0);\n+        } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n+        if (recv_result < 0) {\n+            return std::nullopt;\n+        }\n \n-    for (nlmsghdr* hdr = (nlmsghdr*)response; NLMSG_OK(hdr, recv_result); hdr = NLMSG_NEXT(hdr, recv_result)) {\n-        rtmsg* r = (rtmsg*)NLMSG_DATA(hdr);\n-        int remaining_len = RTM_PAYLOAD(hdr);\n-\n-        // Iterate over the attributes.\n-        rtattr *rta_gateway = nullptr;\n-        int scope_id = 0;\n-        for (rtattr* attr = RTM_RTA(r); RTA_OK(attr, remaining_len); attr = RTA_NEXT(attr, remaining_len)) {\n-            if (attr->rta_type == RTA_GATEWAY) {\n-                rta_gateway = attr;\n-            } else if (attr->rta_type == RTA_OIF && sizeof(int) == RTA_PAYLOAD(attr)) {\n-                std::memcpy(&scope_id, RTA_DATA(attr), sizeof(scope_id));\n-            }\n+        total_bytes_read += static_cast<size_t>(recv_result);\n+        if (total_bytes_read > MAX_NETLINK_RESPONSE_SIZE) {\n+            LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Netlink response exceeded size limit (%zu bytes, family=%d)\\n\", MAX_NETLINK_RESPONSE_SIZE, family);\n+            return std::nullopt;\n         }\n \n-        // Found gateway?\n-        if (rta_gateway != nullptr) {\n-            if (family == AF_INET && sizeof(in_addr) == RTA_PAYLOAD(rta_gateway)) {\n-                in_addr gw;\n-                std::memcpy(&gw, RTA_DATA(rta_gateway), sizeof(gw));\n-                return CNetAddr(gw);\n-            } else if (family == AF_INET6 && sizeof(in6_addr) == RTA_PAYLOAD(rta_gateway)) {\n-                in6_addr gw;\n-                std::memcpy(&gw, RTA_DATA(rta_gateway), sizeof(gw));\n-                return CNetAddr(gw, scope_id);\n+        for (nlmsghdr* hdr = (nlmsghdr*)response; NLMSG_OK(hdr, recv_result); hdr = NLMSG_NEXT(hdr, recv_result)) {\n+            if (hdr->nlmsg_type == NLMSG_DONE) {",
      "path": "src/common/netif.cpp",
      "position": 103,
      "original_position": 67,
      "commit_id": "6c694c212f8d898dac9cc1c5637381452c91e79b",
      "original_commit_id": "c5211f3423477b5799fe6c717d533c232ce1f7e6",
      "in_reply_to_id": 2018881733,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> use a vector to collect all data from multi-part responses\r\n\r\ni'm not sure i see the motivation here. Parsing the packets as seperate units is just as valid (\"Multipart messages unlike fragmented ip packets must not be reassmbled\"), avoids dynamic allocation, and is simpler.",
      "created_at": "2025-03-31T09:16:13Z",
      "updated_at": "2025-03-31T09:18:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32159#discussion_r2020674715",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2020674715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32159"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2020926628",
      "pull_request_review_id": 2729086589,
      "id": 2020926628,
      "node_id": "PRRC_kwDOABII5854dOSk",
      "diff_hunk": "@@ -82,42 +94,77 @@ std::optional<CNetAddr> QueryDefaultGatewayImpl(sa_family_t family)\n         return std::nullopt;\n     }\n \n-    // Receive response.\n-    char response[4096];\n-    int64_t recv_result;\n-    do {\n-        recv_result = sock->Recv(response, sizeof(response), 0);\n-    } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n-    if (recv_result < 0) {\n-        LogPrintLevel(BCLog::NET, BCLog::Level::Error, \"recv() from netlink socket: %s\\n\", NetworkErrorString(errno));\n-        return std::nullopt;\n-    }\n+    // Receive response(s)\n+    std::vector<char> buffer;\n+    buffer.reserve(4096); // Usually large-enough for a single-part message\n+    size_t total_bytes_read = 0;\n+    bool done = false;\n+\n+    while (!done) {\n+        char temp[4096];\n+        int64_t recv_result;\n+        do {\n+            recv_result = sock->Recv(temp, sizeof(temp), 0);\n+        } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));",
      "path": "src/common/netif.cpp",
      "position": 58,
      "original_position": 58,
      "commit_id": "6c694c212f8d898dac9cc1c5637381452c91e79b",
      "original_commit_id": "6c694c212f8d898dac9cc1c5637381452c91e79b",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since you're touching this line... According to the internet, we should also check `EWOULDBLOCK` even though it's usually the same as `EAGAIN`, and it's likely not relevant for any system we support.\r\nhttps://stackoverflow.com/a/49421517",
      "created_at": "2025-03-31T12:14:35Z",
      "updated_at": "2025-03-31T12:38:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32159#discussion_r2020926628",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2020926628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32159"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 108,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2020940099",
      "pull_request_review_id": 2729086589,
      "id": 2020940099,
      "node_id": "PRRC_kwDOABII5854dRlD",
      "diff_hunk": "@@ -82,42 +94,77 @@ std::optional<CNetAddr> QueryDefaultGatewayImpl(sa_family_t family)\n         return std::nullopt;\n     }\n \n-    // Receive response.\n-    char response[4096];\n-    int64_t recv_result;\n-    do {\n-        recv_result = sock->Recv(response, sizeof(response), 0);\n-    } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n-    if (recv_result < 0) {\n-        LogPrintLevel(BCLog::NET, BCLog::Level::Error, \"recv() from netlink socket: %s\\n\", NetworkErrorString(errno));\n-        return std::nullopt;\n-    }\n+    // Receive response(s)\n+    std::vector<char> buffer;\n+    buffer.reserve(4096); // Usually large-enough for a single-part message\n+    size_t total_bytes_read = 0;\n+    bool done = false;\n+\n+    while (!done) {\n+        char temp[4096];\n+        int64_t recv_result;\n+        do {\n+            recv_result = sock->Recv(temp, sizeof(temp), 0);",
      "path": "src/common/netif.cpp",
      "position": 57,
      "original_position": 57,
      "commit_id": "6c694c212f8d898dac9cc1c5637381452c91e79b",
      "original_commit_id": "6c694c212f8d898dac9cc1c5637381452c91e79b",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I know this is existing code, but I don't recall why there's no timeout here. And also, should there be a quick wait between `Recv` calls? ",
      "created_at": "2025-03-31T12:25:16Z",
      "updated_at": "2025-03-31T12:38:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32159#discussion_r2020940099",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2020940099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32159"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 107,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2020953743",
      "pull_request_review_id": 2729086589,
      "id": 2020953743,
      "node_id": "PRRC_kwDOABII5854dU6P",
      "diff_hunk": "@@ -82,42 +86,64 @@ std::optional<CNetAddr> QueryDefaultGatewayImpl(sa_family_t family)\n         return std::nullopt;\n     }\n \n-    // Receive response.\n+    // Receive response(s)\n     char response[4096];\n-    int64_t recv_result;\n-    do {\n-        recv_result = sock->Recv(response, sizeof(response), 0);\n-    } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n-    if (recv_result < 0) {\n-        LogPrintLevel(BCLog::NET, BCLog::Level::Error, \"recv() from netlink socket: %s\\n\", NetworkErrorString(errno));\n-        return std::nullopt;\n-    }\n+    size_t total_bytes_read = 0;\n+    bool done = false;\n+    while (!done) {\n+        int64_t recv_result;\n+        do {\n+            recv_result = sock->Recv(response, sizeof(response), 0);\n+        } while (recv_result < 0 && (errno == EINTR || errno == EAGAIN));\n+        if (recv_result < 0) {\n+            return std::nullopt;\n+        }\n \n-    for (nlmsghdr* hdr = (nlmsghdr*)response; NLMSG_OK(hdr, recv_result); hdr = NLMSG_NEXT(hdr, recv_result)) {\n-        rtmsg* r = (rtmsg*)NLMSG_DATA(hdr);\n-        int remaining_len = RTM_PAYLOAD(hdr);\n-\n-        // Iterate over the attributes.\n-        rtattr *rta_gateway = nullptr;\n-        int scope_id = 0;\n-        for (rtattr* attr = RTM_RTA(r); RTA_OK(attr, remaining_len); attr = RTA_NEXT(attr, remaining_len)) {\n-            if (attr->rta_type == RTA_GATEWAY) {\n-                rta_gateway = attr;\n-            } else if (attr->rta_type == RTA_OIF && sizeof(int) == RTA_PAYLOAD(attr)) {\n-                std::memcpy(&scope_id, RTA_DATA(attr), sizeof(scope_id));\n-            }\n+        total_bytes_read += static_cast<size_t>(recv_result);\n+        if (total_bytes_read > MAX_NETLINK_RESPONSE_SIZE) {\n+            LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Netlink response exceeded size limit (%zu bytes, family=%d)\\n\", MAX_NETLINK_RESPONSE_SIZE, family);\n+            return std::nullopt;\n         }\n \n-        // Found gateway?\n-        if (rta_gateway != nullptr) {\n-            if (family == AF_INET && sizeof(in_addr) == RTA_PAYLOAD(rta_gateway)) {\n-                in_addr gw;\n-                std::memcpy(&gw, RTA_DATA(rta_gateway), sizeof(gw));\n-                return CNetAddr(gw);\n-            } else if (family == AF_INET6 && sizeof(in6_addr) == RTA_PAYLOAD(rta_gateway)) {\n-                in6_addr gw;\n-                std::memcpy(&gw, RTA_DATA(rta_gateway), sizeof(gw));\n-                return CNetAddr(gw, scope_id);\n+        for (nlmsghdr* hdr = (nlmsghdr*)response; NLMSG_OK(hdr, recv_result); hdr = NLMSG_NEXT(hdr, recv_result)) {\n+            if (hdr->nlmsg_type == NLMSG_DONE) {",
      "path": "src/common/netif.cpp",
      "position": 103,
      "original_position": 67,
      "commit_id": "6c694c212f8d898dac9cc1c5637381452c91e79b",
      "original_commit_id": "c5211f3423477b5799fe6c717d533c232ce1f7e6",
      "in_reply_to_id": 2018881733,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> checking of the sequence number on each message to ensure it was meant for our request\r\n\r\nThis seems like a good idea to at least do in debug builds.\r\n\r\nIt seems like a good precaution to check for the presence of `NLM_F_MULTI` and don't wait for `NLMSG_DONE` if it isn't. At least from my naive reading of https://man7.org/linux/man-pages/man7/netlink.7.html it seems `NLMSG_DONE` is only used for multipart messages.\r\n\r\nSplitting into multiple commits would be useful, e.g. one commit that switches to non-blocking mode.",
      "created_at": "2025-03-31T12:34:27Z",
      "updated_at": "2025-03-31T12:38:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32159#discussion_r2020953743",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2020953743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32159"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    }
  ]
}